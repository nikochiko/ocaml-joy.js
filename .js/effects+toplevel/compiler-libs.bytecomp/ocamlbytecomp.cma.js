// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Instruct
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   runtime.jsoo_create_file
    ("/static/cmis/instruct.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x19\xbf\0\0\x04\xfc\0\0\x13\x15\0\0\x12\x84\xa0(Instruct\xa0\xc1\xa0/compilation_env\x01\x03N\b\0\0;\0@@\xa0\xa0\xe0\xa0(ce_stack\x01\x01\x81@\xc0\xb3\xa1\x90\x92%Ident#tbl\xa0\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\0\xba@\x90@\x02\x05\xf5\xe1\0@\0\xbb\xb0\xc05bytecomp/instruct.mliW\x01\x04\xc4\x01\x04\xc8\xc0\x04\x02W\x01\x04\xc4\x01\x04\xe0@@\xa1\x04\x1fD\xa0\xe0\xa0'ce_heap\x01\x01\x82@\xc0\xb3\xa1\x90\x04\x18#tbl\xa0\xc0\xb3\x90\x04\x16@\x90@\x02\x05\xf5\xe1\0@\0\xb8@\x90@\x02\x05\xf5\xe1\0@\0\xb9\xb0\xc0\x04\x14X\x01\x05\x0b\x01\x05\x0f\xc0\x04\x15X\x01\x05\x0b\x01\x05&@@\xa1\x042E\xa0\xe0\xa0&ce_rec\x01\x01\x83@\xc0\xb3\xa1\x90\x04+#tbl\xa0\xc0\xb3\x90\x04)@\x90@\x02\x05\xf5\xe1\0@\0\xb6@\x90@\x02\x05\xf5\xe1\0@\0\xb7\xb0\xc0\x04'Y\x01\x05R\x01\x05V\xc0\x04(Y\x01\x05R\x01\x05k@@\xa1\x04EF@@A@@@@@\xb0\xc0\x04+V\x01\x04\xad\x01\x04\xad\xc0\x04,Y\x01\x05R\x01\x05m@@@@\xa1\x04ICA@\xa0\xc1\xa0+debug_event\x01\x03O\b\0\0;\0@@\xa0\xa0\xe0\xa0&ev_pos\x01\x01\x88A\xc0\xb3\x90\x04@@\x90@\x02\x05\xf5\xe1\0@\0\xc6\xb0\xc0\x04=j\x01\bS\x01\bW\xc0\x04>j\x01\bS\x01\bk@@\xa1\x04[K\xa0\xe0\xa0)ev_module\x01\x01\x89@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xb0\xc0\x04Kk\x01\b\x96\x01\b\x9a\xc0\x04Lk\x01\b\x96\x01\b\xac@@\xa1\x04iL\xa0\xe0\xa0&ev_loc\x01\x01\xc9@\xc0\xb3\xa1\x90\x92(Location!t@\x90@\x02\x05\xf5\xe1\0@\0\xc4\xb0\xc0\x04[l\x01\b\xdc\x01\b\xe0\xc0\x04\\l\x01\b\xdc\x01\b\xf3@@\xa1\x04yM\xa0\xe0\xa0'ev_kind\x01\x01\xca@\xc0\xb3\x90\xa00debug_event_kind\x01\x03P@\x90@\x02\x05\xf5\xe1\0@\0\xc3\xb0\xc0\x04im\x01\t\"\x01\t&\xc0\x04jm\x01\t\"\x01\t@@@\xa1\x04\x87N\xa0\xe0\xa0*ev_defname\x01\x01\xcb@\xc0\xb3\x90\x04,@\x90@\x02\x05\xf5\xe1\0@\0\xc2\xb0\xc0\x04un\x01\tc\x01\tg\xc0\x04vn\x01\tc\x01\tz@@\xa1\x04\x93O\xa0\xe0\xa0'ev_info\x01\x01\xcc@\xc0\xb3\x90\xa00debug_event_info\x01\x03Q@\x90@\x02\x05\xf5\xe1\0@\0\xc1\xb0\xc0\x04\x83o\x01\t\xa6\x01\t\xaa\xc0\x04\x84o\x01\t\xa6\x01\t\xc4@@\xa1\x04\xa1P\xa0\xe0\xa0)ev_typenv\x01\x02o@\xc0\xb3\xa1\x90\x92#Env'summary@\x90@\x02\x05\xf5\xe1\0@\0\xc0\xb0\xc0\x04\x93p\x01\t\xe6\x01\t\xea\xc0\x04\x94p\x01\t\xe6\x01\n\x01@@\xa1\x04\xb1Q\xa0\xe0\xa0+ev_typsubst\x01\x02\x8f@\xc0\xb3\xa1\x90\x92%Subst!t@\x90@\x02\x05\xf5\xe1\0@\0\xbf\xb0\xc0\x04\xa3q\x01\n'\x01\n+\xc0\x04\xa4q\x01\n'\x01\n@@@\xa1\x04\xc1R\xa0\xe0\xa0*ev_compenv\x01\x02\x90@\xc0\xb3\x90\x04\xc5@\x90@\x02\x05\xf5\xe1\0@\0\xbe\xb0\xc0\x04\xafr\x01\nm\x01\nq\xc0\x04\xb0r\x01\nm\x01\n\x8d@@\xa1\x04\xcdS\xa0\xe0\xa0,ev_stacksize\x01\x02\x91@\xc0\xb3\x90\x04\xbe@\x90@\x02\x05\xf5\xe1\0@\0\xbd\xb0\xc0\x04\xbbs\x01\n\xb3\x01\n\xb7\xc0\x04\xbcs\x01\n\xb3\x01\n\xc9@@\xa1\x04\xd9T\xa0\xe0\xa0'ev_repr\x01\x02\x92@\xc0\xb3\x90\xa00debug_event_repr\x01\x03R@\x90@\x02\x05\xf5\xe1\0@\0\xbc\xb0\xc0\x04\xc9t\x01\n\xf5\x01\n\xf9\xc0\x04\xcat\x01\n\xf5\x01\x0b\x12@@\xa1\x04\xe7U@@A@@@@@\xb0\xc0\x04\xcdi\x01\b@\x01\b@\xc0\x04\xcet\x01\n\xf5\x01\x0b\x14@@@@\xa1\x04\xebGA@\xa0\xc1\x04m\b\0\0;\0@@\xa1\xa0\xe0\xa0,Event_before\x01\x02\x93\x90@@\xb0\xc0\x04\xdaw\x01\x0bZ\x01\x0b^\xc0\x04\xdbw\x01\x0bZ\x01\x0bj@@\xa1\x04\xf8V\xa0\xe0\xa0+Event_after\x01\x02\x94\x90\xa0\xc0\xb3\xa1\x90\x92%Types)type_expr@\x90@\x02\x05\xf5\xe1\0@\0\xc7@@\xb0\xc0\x04\xecx\x01\x0bk\x01\x0bm\xc0\x04\xedx\x01\x0bk\x01\x0b\x8d@@\xa1\x05\x01\nX\xa0\xe0\xa0,Event_pseudo\x01\x02\xff\x90@@\xb0\xc0\x04\xf5y\x01\x0b\x8e\x01\x0b\x90\xc0\x04\xf6y\x01\x0b\x8e\x01\x0b\x9e@@\xa1\x05\x01\x13Y@@A@@@@@\xb0\xc0\x04\xf9v\x01\x0bC\x01\x0bC\x04\x04@@@@\xa1\x05\x01\x16HB@\xa0\xc1\x04~\b\0\0;\0@@\xa1\xa0\xe0\xa0.Event_function\x01\x03\0\x90@@\xb0\xc0\x05\x01\x05|\x01\x0b\xb7\x01\x0b\xbb\xc0\x05\x01\x06|\x01\x0b\xb7\x01\x0b\xc9@@\xa1\x05\x01#Z\xa0\xe0\xa0,Event_return\x01\x03\x01\x90\xa0\xc0\xb3\x90\x05\x01\x16@\x90@\x02\x05\xf5\xe1\0@\0\xc8@@\xb0\xc0\x05\x01\x13}\x01\x0b\xca\x01\x0b\xcc\xc0\x05\x01\x14}\x01\x0b\xca\x01\x0b\xe1@@\xa1\x05\x011[\xa0\xe0\xa0+Event_other\x01\x03\x02\x90@@\xb0\xc0\x05\x01\x1c~\x01\x0b\xe2\x01\x0b\xe4\xc0\x05\x01\x1d~\x01\x0b\xe2\x01\x0b\xf1@@\xa1\x05\x01:\\@@A@@@@@\xb0\xc0\x05\x01 {\x01\x0b\xa0\x01\x0b\xa0\x04\x04@@@@\xa1\x05\x01=IB@\xa0\xc1\x04_\b\0\0;\0@@\xa1\xa0\xe0\xa0*Event_none\x01\x03\x03\x90@@\xb0\xc0\x05\x01,\0A\x01\f\n\x01\f\x0e\xc0\x05\x01-\0A\x01\f\n\x01\f\x18@@\xa1\x05\x01J]\xa0\xe0\xa0,Event_parent\x01\x03\x04\x90\xa0\xc0\xb3\xa1\x90\x92&Stdlib#ref\xa0\xc0\xb3\x90\x05\x01E@\x90@\x02\x05\xf5\xe1\0@\0\xcb@\x90@\x02\x05\xf5\xe1\0@\0\xcc@@\xb0\xc0\x05\x01C\0B\x01\f\x19\x01\f\x1b\xc0\x05\x01D\0B\x01\f\x19\x01\f4@@\xa1\x05\x01a^\xa0\xe0\xa0+Event_child\x01\x03\x05\x90\xa0\xc0\xb3\xa1\x04\x17#ref\xa0\xc0\xb3\x90\x05\x01Y@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x90@\x02\x05\xf5\xe1\0@\0\xca@@\xb0\xc0\x05\x01W\0C\x01\f5\x01\f7\xc0\x05\x01X\0C\x01\f5\x01\fO@@\xa1\x05\x01u_@@A@@@@@\xb0\xc0\x05\x01[\0@\x01\x0b\xf3\x01\x0b\xf3\x04\x04@@@@\xa1\x05\x01xJB@\xa0\xc1\xa0%label\x01\x03S\b\0\0;\0@@@A\x90\xc0\xb3\x90\x05\x01k@\x90@\x02\x05\xf5\xe1\0@\0\xcd@@@@\xb0\xc0\x05\x01h\0G\x01\fv\x01\fv\xc0\x05\x01i\0G\x01\fv\x01\f\x86@@A@\xa1\x05\x01\x86`A@\xa0\xc1\xa0+instruction\x01\x03T\b\0\0;\0@@\xa1\xa0\xe0\xa0&Klabel\x01\x03\b\x90\xa0\xc0\xb3\x90\x04\x1b@\x90@\x02\x05\xf5\xe1\0@\0\xfc@@\xb0\xc0\x05\x01|\0J\x01\f\xcd\x01\f\xd1\xc0\x05\x01}\0J\x01\f\xcd\x01\f\xe0@@\xa1\x05\x01\x9ab\xa0\xe0\xa0$Kacc\x01\x03\t\x90\xa0\xc0\xb3\x90\x05\x01\x8d@\x90@\x02\x05\xf5\xe1\0@\0\xfb@@\xb0\xc0\x05\x01\x8a\0K\x01\f\xe1\x01\f\xe3\xc0\x05\x01\x8b\0K\x01\f\xe1\x01\f\xf0@@\xa1\x05\x01\xa8c\xa0\xe0\xa0'Kenvacc\x01\x03\n\x90\xa0\xc0\xb3\x90\x05\x01\x9b@\x90@\x02\x05\xf5\xe1\0@\0\xfa@@\xb0\xc0\x05\x01\x98\0L\x01\f\xf1\x01\f\xf3\xc0\x05\x01\x99\0L\x01\f\xf1\x01\r\x03@@\xa1\x05\x01\xb6d\xa0\xe0\xa0%Kpush\x01\x03\x0b\x90@@\xb0\xc0\x05\x01\xa1\0M\x01\r\x04\x01\r\x06\xc0\x05\x01\xa2\0M\x01\r\x04\x01\r\r@@\xa1\x05\x01\xbfe\xa0\xe0\xa0$Kpop\x01\x03\f\x90\xa0\xc0\xb3\x90\x05\x01\xb2@\x90@\x02\x05\xf5\xe1\0@\0\xf9@@\xb0\xc0\x05\x01\xaf\0N\x01\r\x0e\x01\r\x10\xc0\x05\x01\xb0\0N\x01\r\x0e\x01\r\x1d@@\xa1\x05\x01\xcdf\xa0\xe0\xa0'Kassign\x01\x03\r\x90\xa0\xc0\xb3\x90\x05\x01\xc0@\x90@\x02\x05\xf5\xe1\0@\0\xf8@@\xb0\xc0\x05\x01\xbd\0O\x01\r\x1e\x01\r \xc0\x05\x01\xbe\0O\x01\r\x1e\x01\r0@@\xa1\x05\x01\xdbg\xa0\xe0\xa0-Kpush_retaddr\x01\x03\x0e\x90\xa0\xc0\xb3\x04O@\x90@\x02\x05\xf5\xe1\0@\0\xf7@@\xb0\xc0\x05\x01\xca\0P\x01\r1\x01\r3\xc0\x05\x01\xcb\0P\x01\r1\x01\rK@@\xa1\x05\x01\xe8h\xa0\xe0\xa0&Kapply\x01\x03\x0f\x90\xa0\xc0\xb3\x90\x05\x01\xdb@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@\xb0\xc0\x05\x01\xd8\0Q\x01\rL\x01\rN\xc0\x05\x01\xd9\0Q\x01\rL\x01\r]@@\xa1\x05\x01\xf6i\xa0\xe0\xa0(Kappterm\x01\x03\x10\x90\xa0\xc0\xb3\x90\x05\x01\xe9@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xa0\xc0\xb3\x90\x05\x01\xee@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x05\x01\xeb\0R\x01\r\x8e\x01\r\x90\xc0\x05\x01\xec\0R\x01\r\x8e\x01\r\xa7@@\xa1\x05\x02\tj\xa0\xe0\xa0'Kreturn\x01\x03\x11\x90\xa0\xc0\xb3\x90\x05\x01\xfc@\x90@\x02\x05\xf5\xe1\0@\0\xf3@@\xb0\xc0\x05\x01\xf9\0S\x01\r\xdb\x01\r\xdd\xc0\x05\x01\xfa\0S\x01\r\xdb\x01\r\xed@@\xa1\x05\x02\x17k\xa0\xe0\xa0(Krestart\x01\x03\x12\x90@@\xb0\xc0\x05\x02\x02\0T\x01\x0e\x13\x01\x0e\x15\xc0\x05\x02\x03\0T\x01\x0e\x13\x01\x0e\x1f@@\xa1\x05\x02 l\xa0\xe0\xa0%Kgrab\x01\x03\x13\x90\xa0\xc0\xb3\x90\x05\x02\x13@\x90@\x02\x05\xf5\xe1\0@\0\xf2@@\xb0\xc0\x05\x02\x10\0U\x01\x0e \x01\x0e\"\xc0\x05\x02\x11\0U\x01\x0e \x01\x0e0@@\xa1\x05\x02.m\xa0\xe0\xa0(Kclosure\x01\x03\x14\x90\xa0\xc0\xb3\x04\xa2@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xa0\xc0\xb3\x90\x05\x02%@\x90@\x02\x05\xf5\xe1\0@\0\xf0@@\xb0\xc0\x05\x02\"\0V\x01\x0eb\x01\x0ed\xc0\x05\x02#\0V\x01\x0eb\x01\x0e}@@\xa1\x05\x02@n\xa0\xe0\xa0+Kclosurerec\x01\x03\x15\x90\xa0\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x04\xba@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x90@\x02\x05\xf5\xe1\0@\0\xef\xa0\xc0\xb3\x90\x05\x02>@\x90@\x02\x05\xf5\xe1\0@\0\xed@@\xb0\xc0\x05\x02;\0W\x01\x0e~\x01\x0e\x80\xc0\x05\x02<\0W\x01\x0e~\x01\x0e\xa1@@\xa1\x05\x02Yo\xa0\xe0\xa0.Koffsetclosure\x01\x03\x16\x90\xa0\xc0\xb3\x90\x05\x02L@\x90@\x02\x05\xf5\xe1\0@\0\xec@@\xb0\xc0\x05\x02I\0X\x01\x0e\xa2\x01\x0e\xa4\xc0\x05\x02J\0X\x01\x0e\xa2\x01\x0e\xbb@@\xa1\x05\x02gp\xa0\xe0\xa0*Kgetglobal\x01\x03\x17\x90\xa0\xc0\xb3\xa1\x90\x05\x02b!t@\x90@\x02\x05\xf5\xe1\0@\0\xeb@@\xb0\xc0\x05\x02Y\0Y\x01\x0e\xbc\x01\x0e\xbe\xc0\x05\x02Z\0Y\x01\x0e\xbc\x01\x0e\xd5@@\xa1\x05\x02wq\xa0\xe0\xa0*Ksetglobal\x01\x03\x18\x90\xa0\xc0\xb3\xa1\x90\x05\x02r!t@\x90@\x02\x05\xf5\xe1\0@\0\xea@@\xb0\xc0\x05\x02i\0Z\x01\x0e\xd6\x01\x0e\xd8\xc0\x05\x02j\0Z\x01\x0e\xd6\x01\x0e\xef@@\xa1\x05\x02\x87r\xa0\xe0\xa0&Kconst\x01\x03\x19\x90\xa0\xc0\xb3\xa1\x90\x92&Lambda3structured_constant@\x90@\x02\x05\xf5\xe1\0@\0\xe9@@\xb0\xc0\x05\x02{\0[\x01\x0e\xf0\x01\x0e\xf2\xc0\x05\x02|\0[\x01\x0e\xf0\x01\x0f\x11@@\xa1\x05\x02\x99s\xa0\xe0\xa0*Kmakeblock\x01\x03\x1a\x90\xa0\xc0\xb3\x90\x05\x02\x8c@\x90@\x02\x05\xf5\xe1\0@\0\xe8\xa0\xc0\xb3\x90\x05\x02\x91@\x90@\x02\x05\xf5\xe1\0@\0\xe7@@\xb0\xc0\x05\x02\x8e\0\\\x01\x0f\x12\x01\x0f\x14\xc0\x05\x02\x8f\0\\\x01\x0f\x12\x01\x0f-@@\xa1\x05\x02\xact\xa0\xe0\xa0/Kmakefloatblock\x01\x03\x1b\x90\xa0\xc0\xb3\x90\x05\x02\x9f@\x90@\x02\x05\xf5\xe1\0@\0\xe6@@\xb0\xc0\x05\x02\x9c\0]\x01\x0fJ\x01\x0fL\xc0\x05\x02\x9d\0]\x01\x0fJ\x01\x0fd@@\xa1\x05\x02\xbau\xa0\xe0\xa0)Kgetfield\x01\x03\x1c\x90\xa0\xc0\xb3\x90\x05\x02\xad@\x90@\x02\x05\xf5\xe1\0@\0\xe5@@\xb0\xc0\x05\x02\xaa\0^\x01\x0fe\x01\x0fg\xc0\x05\x02\xab\0^\x01\x0fe\x01\x0fy@@\xa1\x05\x02\xc8v\xa0\xe0\xa0)Ksetfield\x01\x03\x1d\x90\xa0\xc0\xb3\x90\x05\x02\xbb@\x90@\x02\x05\xf5\xe1\0@\0\xe4@@\xb0\xc0\x05\x02\xb8\0_\x01\x0fz\x01\x0f|\xc0\x05\x02\xb9\0_\x01\x0fz\x01\x0f\x8e@@\xa1\x05\x02\xd6w\xa0\xe0\xa0.Kgetfloatfield\x01\x03\x1e\x90\xa0\xc0\xb3\x90\x05\x02\xc9@\x90@\x02\x05\xf5\xe1\0@\0\xe3@@\xb0\xc0\x05\x02\xc6\0`\x01\x0f\x8f\x01\x0f\x91\xc0\x05\x02\xc7\0`\x01\x0f\x8f\x01\x0f\xa8@@\xa1\x05\x02\xe4x\xa0\xe0\xa0.Ksetfloatfield\x01\x03\x1f\x90\xa0\xc0\xb3\x90\x05\x02\xd7@\x90@\x02\x05\xf5\xe1\0@\0\xe2@@\xb0\xc0\x05\x02\xd4\0a\x01\x0f\xa9\x01\x0f\xab\xc0\x05\x02\xd5\0a\x01\x0f\xa9\x01\x0f\xc2@@\xa1\x05\x02\xf2y\xa0\xe0\xa0+Kvectlength\x01\x03 \x90@@\xb0\xc0\x05\x02\xdd\0b\x01\x0f\xc3\x01\x0f\xc5\xc0\x05\x02\xde\0b\x01\x0f\xc3\x01\x0f\xd2@@\xa1\x05\x02\xfbz\xa0\xe0\xa0,Kgetvectitem\x01\x03!\x90@@\xb0\xc0\x05\x02\xe6\0c\x01\x0f\xd3\x01\x0f\xd5\xc0\x05\x02\xe7\0c\x01\x0f\xd3\x01\x0f\xe3@@\xa1\x05\x03\x04{\xa0\xe0\xa0,Ksetvectitem\x01\x03\"\x90@@\xb0\xc0\x05\x02\xef\0d\x01\x0f\xe4\x01\x0f\xe6\xc0\x05\x02\xf0\0d\x01\x0f\xe4\x01\x0f\xf4@@\xa1\x05\x03\r|\xa0\xe0\xa0.Kgetstringchar\x01\x03#\x90@@\xb0\xc0\x05\x02\xf8\0e\x01\x0f\xf5\x01\x0f\xf7\xc0\x05\x02\xf9\0e\x01\x0f\xf5\x01\x10\x07@@\xa1\x05\x03\x16}\xa0\xe0\xa0-Kgetbyteschar\x01\x03$\x90@@\xb0\xc0\x05\x03\x01\0f\x01\x10\b\x01\x10\n\xc0\x05\x03\x02\0f\x01\x10\b\x01\x10\x19@@\xa1\x05\x03\x1f~\xa0\xe0\xa0-Ksetbyteschar\x01\x03%\x90@@\xb0\xc0\x05\x03\n\0g\x01\x10\x1a\x01\x10\x1c\xc0\x05\x03\x0b\0g\x01\x10\x1a\x01\x10+@@\xa1\x05\x03(\x7f\xa0\xe0\xa0'Kbranch\x01\x03&\x90\xa0\xc0\xb3\x05\x01\x9c@\x90@\x02\x05\xf5\xe1\0@\0\xe1@@\xb0\xc0\x05\x03\x17\0h\x01\x10,\x01\x10.\xc0\x05\x03\x18\0h\x01\x10,\x01\x10@@@\xa1\x05\x035\0@\xa0\xe0\xa0)Kbranchif\x01\x03'\x90\xa0\xc0\xb3\x05\x01\xa9@\x90@\x02\x05\xf5\xe1\0@\0\xe0@@\xb0\xc0\x05\x03$\0i\x01\x10A\x01\x10C\xc0\x05\x03%\0i\x01\x10A\x01\x10W@@\xa1\x05\x03B\0A\xa0\xe0\xa0,Kbranchifnot\x01\x03(\x90\xa0\xc0\xb3\x05\x01\xb6@\x90@\x02\x05\xf5\xe1\0@\0\xdf@@\xb0\xc0\x05\x031\0j\x01\x10X\x01\x10Z\xc0\x05\x032\0j\x01\x10X\x01\x10q@@\xa1\x05\x03O\0B\xa0\xe0\xa0/Kstrictbranchif\x01\x03)\x90\xa0\xc0\xb3\x05\x01\xc3@\x90@\x02\x05\xf5\xe1\0@\0\xde@@\xb0\xc0\x05\x03>\0k\x01\x10r\x01\x10t\xc0\x05\x03?\0k\x01\x10r\x01\x10\x8e@@\xa1\x05\x03\\\0C\xa0\xe0\xa02Kstrictbranchifnot\x01\x03*\x90\xa0\xc0\xb3\x05\x01\xd0@\x90@\x02\x05\xf5\xe1\0@\0\xdd@@\xb0\xc0\x05\x03K\0l\x01\x10\x8f\x01\x10\x91\xc0\x05\x03L\0l\x01\x10\x8f\x01\x10\xae@@\xa1\x05\x03i\0D\xa0\xe0\xa0'Kswitch\x01\x03+\x90\xa0\xc0\xb3\x90\xa3%arrayH\xa0\xc0\xb3\x05\x01\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xdb@\x90@\x02\x05\xf5\xe1\0@\0\xdc\xa0\xc0\xb3\x90\x04\x0b\xa0\xc0\xb3\x05\x01\xec@\x90@\x02\x05\xf5\xe1\0@\0\xd9@\x90@\x02\x05\xf5\xe1\0@\0\xda@@\xb0\xc0\x05\x03h\0m\x01\x10\xaf\x01\x10\xb1\xc0\x05\x03i\0m\x01\x10\xaf\x01\x10\xd7@@\xa1\x05\x03\x86\0E\xa0\xe0\xa0(Kboolnot\x01\x03,\x90@@\xb0\xc0\x05\x03q\0n\x01\x10\xd8\x01\x10\xda\xc0\x05\x03r\0n\x01\x10\xd8\x01\x10\xe4@@\xa1\x05\x03\x8f\0F\xa0\xe0\xa0)Kpushtrap\x01\x03-\x90\xa0\xc0\xb3\x05\x02\x03@\x90@\x02\x05\xf5\xe1\0@\0\xd8@@\xb0\xc0\x05\x03~\0o\x01\x10\xe5\x01\x10\xe7\xc0\x05\x03\x7f\0o\x01\x10\xe5\x01\x10\xfb@@\xa1\x05\x03\x9c\0G\xa0\xe0\xa0(Kpoptrap\x01\x03.\x90@@\xb0\xc0\x05\x03\x87\0p\x01\x10\xfc\x01\x10\xfe\xc0\x05\x03\x88\0p\x01\x10\xfc\x01\x11\b@@\xa1\x05\x03\xa5\0H\xa0\xe0\xa0&Kraise\x01\x03/\x90\xa0\xc0\xb3\xa1\x05\x01\x1e*raise_kind@\x90@\x02\x05\xf5\xe1\0@\0\xd7@@\xb0\xc0\x05\x03\x96\0q\x01\x11\t\x01\x11\x0b\xc0\x05\x03\x97\0q\x01\x11\t\x01\x11!@@\xa1\x05\x03\xb4\0I\xa0\xe0\xa0.Kcheck_signals\x01\x030\x90@@\xb0\xc0\x05\x03\x9f\0r\x01\x11\"\x01\x11$\xc0\x05\x03\xa0\0r\x01\x11\"\x01\x114@@\xa1\x05\x03\xbd\0J\xa0\xe0\xa0&Kccall\x01\x031\x90\xa0\xc0\xb3\x90\x05\x03d@\x90@\x02\x05\xf5\xe1\0@\0\xd6\xa0\xc0\xb3\x90\x05\x03\xb5@\x90@\x02\x05\xf5\xe1\0@\0\xd5@@\xb0\xc0\x05\x03\xb2\0s\x01\x115\x01\x117\xc0\x05\x03\xb3\0s\x01\x115\x01\x11O@@\xa1\x05\x03\xd0\0K\xa0\xe0\xa0'Knegint\x01\x032\x90@@\xb0\xc0\x05\x03\xbb\0t\x01\x11P\x01\x11R\xc0\x05\x03\xbc\0t\x01\x11P\x01\x11[@@\xa1\x05\x03\xd9\0L\xa0\xe0\xa0'Kaddint\x01\x033\x90@@\xb0\xc0\x05\x03\xc4\0t\x01\x11P\x01\x11\\\xc0\x05\x03\xc5\0t\x01\x11P\x01\x11e@@\xa1\x05\x03\xe2\0M\xa0\xe0\xa0'Ksubint\x01\x034\x90@@\xb0\xc0\x05\x03\xcd\0t\x01\x11P\x01\x11f\xc0\x05\x03\xce\0t\x01\x11P\x01\x11o@@\xa1\x05\x03\xeb\0N\xa0\xe0\xa0'Kmulint\x01\x035\x90@@\xb0\xc0\x05\x03\xd6\0t\x01\x11P\x01\x11p\xc0\x05\x03\xd7\0t\x01\x11P\x01\x11y@@\xa1\x05\x03\xf4\0O\xa0\xe0\xa0'Kdivint\x01\x036\x90@@\xb0\xc0\x05\x03\xdf\0t\x01\x11P\x01\x11z\xc0\x05\x03\xe0\0t\x01\x11P\x01\x11\x83@@\xa1\x05\x03\xfd\0P\xa0\xe0\xa0'Kmodint\x01\x037\x90@@\xb0\xc0\x05\x03\xe8\0t\x01\x11P\x01\x11\x84\xc0\x05\x03\xe9\0t\x01\x11P\x01\x11\x8d@@\xa1\x05\x04\x06\0Q\xa0\xe0\xa0'Kandint\x01\x038\x90@@\xb0\xc0\x05\x03\xf1\0u\x01\x11\x8e\x01\x11\x90\xc0\x05\x03\xf2\0u\x01\x11\x8e\x01\x11\x99@@\xa1\x05\x04\x0f\0R\xa0\xe0\xa0&Korint\x01\x039\x90@@\xb0\xc0\x05\x03\xfa\0u\x01\x11\x8e\x01\x11\x9a\xc0\x05\x03\xfb\0u\x01\x11\x8e\x01\x11\xa2@@\xa1\x05\x04\x18\0S\xa0\xe0\xa0'Kxorint\x01\x03:\x90@@\xb0\xc0\x05\x04\x03\0u\x01\x11\x8e\x01\x11\xa3\xc0\x05\x04\x04\0u\x01\x11\x8e\x01\x11\xac@@\xa1\x05\x04!\0T\xa0\xe0\xa0'Klslint\x01\x03;\x90@@\xb0\xc0\x05\x04\f\0u\x01\x11\x8e\x01\x11\xad\xc0\x05\x04\r\0u\x01\x11\x8e\x01\x11\xb6@@\xa1\x05\x04*\0U\xa0\xe0\xa0'Klsrint\x01\x03<\x90@@\xb0\xc0\x05\x04\x15\0u\x01\x11\x8e\x01\x11\xb7\xc0\x05\x04\x16\0u\x01\x11\x8e\x01\x11\xc0@@\xa1\x05\x043\0V\xa0\xe0\xa0'Kasrint\x01\x03=\x90@@\xb0\xc0\x05\x04\x1e\0u\x01\x11\x8e\x01\x11\xc1\xc0\x05\x04\x1f\0u\x01\x11\x8e\x01\x11\xca@@\xa1\x05\x04<\0W\xa0\xe0\xa0(Kintcomp\x01\x03>\x90\xa0\xc0\xb3\xa1\x05\x01\xb52integer_comparison@\x90@\x02\x05\xf5\xe1\0@\0\xd4@@\xb0\xc0\x05\x04-\0v\x01\x11\xcb\x01\x11\xcd\xc0\x05\x04.\0v\x01\x11\xcb\x01\x11\xed@@\xa1\x05\x04K\0X\xa0\xe0\xa0*Koffsetint\x01\x03?\x90\xa0\xc0\xb3\x90\x05\x04>@\x90@\x02\x05\xf5\xe1\0@\0\xd3@@\xb0\xc0\x05\x04;\0w\x01\x11\xee\x01\x11\xf0\xc0\x05\x04<\0w\x01\x11\xee\x01\x12\x03@@\xa1\x05\x04Y\0Y\xa0\xe0\xa0*Koffsetref\x01\x03@\x90\xa0\xc0\xb3\x90\x05\x04L@\x90@\x02\x05\xf5\xe1\0@\0\xd2@@\xb0\xc0\x05\x04I\0x\x01\x12\x04\x01\x12\x06\xc0\x05\x04J\0x\x01\x12\x04\x01\x12\x19@@\xa1\x05\x04g\0Z\xa0\xe0\xa0&Kisint\x01\x03A\x90@@\xb0\xc0\x05\x04R\0y\x01\x12\x1a\x01\x12\x1c\xc0\x05\x04S\0y\x01\x12\x1a\x01\x12$@@\xa1\x05\x04p\0[\xa0\xe0\xa0&Kisout\x01\x03B\x90@@\xb0\xc0\x05\x04[\0z\x01\x12%\x01\x12'\xc0\x05\x04\\\0z\x01\x12%\x01\x12/@@\xa1\x05\x04y\0\\\xa0\xe0\xa0*Kgetmethod\x01\x03C\x90@@\xb0\xc0\x05\x04d\0{\x01\x120\x01\x122\xc0\x05\x04e\0{\x01\x120\x01\x12>@@\xa1\x05\x04\x82\0]\xa0\xe0\xa0*Kgetpubmet\x01\x03D\x90\xa0\xc0\xb3\x90\x05\x04u@\x90@\x02\x05\xf5\xe1\0@\0\xd1@@\xb0\xc0\x05\x04r\0|\x01\x12?\x01\x12A\xc0\x05\x04s\0|\x01\x12?\x01\x12T@@\xa1\x05\x04\x90\0^\xa0\xe0\xa0*Kgetdynmet\x01\x03E\x90@@\xb0\xc0\x05\x04{\0}\x01\x12U\x01\x12W\xc0\x05\x04|\0}\x01\x12U\x01\x12c@@\xa1\x05\x04\x99\0_\xa0\xe0\xa0&Kevent\x01\x03F\x90\xa0\xc0\xb3\x90\x05\x04W@\x90@\x02\x05\xf5\xe1\0@\0\xd0@@\xb0\xc0\x05\x04\x89\0~\x01\x12d\x01\x12f\xc0\x05\x04\x8a\0~\x01\x12d\x01\x12}@@\xa1\x05\x04\xa7\0`\xa0\xe0\xa0(Kperform\x01\x03G\x90@@\xb0\xc0\x05\x04\x92\0\x7f\x01\x12~\x01\x12\x80\xc0\x05\x04\x93\0\x7f\x01\x12~\x01\x12\x8a@@\xa1\x05\x04\xb0\0a\xa0\xe0\xa0'Kresume\x01\x03H\x90@@\xb0\xc0\x05\x04\x9b\x01\0\x80\x01\x12\x8b\x01\x12\x8d\xc0\x05\x04\x9c\x01\0\x80\x01\x12\x8b\x01\x12\x96@@\xa1\x05\x04\xb9\0b\xa0\xe0\xa0+Kresumeterm\x01\x03I\x90\xa0\xc0\xb3\x90\x05\x04\xac@\x90@\x02\x05\xf5\xe1\0@\0\xcf@@\xb0\xc0\x05\x04\xa9\x01\0\x81\x01\x12\x97\x01\x12\x99\xc0\x05\x04\xaa\x01\0\x81\x01\x12\x97\x01\x12\xad@@\xa1\x05\x04\xc7\0c\xa0\xe0\xa0.Kreperformterm\x01\x03J\x90\xa0\xc0\xb3\x90\x05\x04\xba@\x90@\x02\x05\xf5\xe1\0@\0\xce@@\xb0\xc0\x05\x04\xb7\x01\0\x82\x01\x12\xae\x01\x12\xb0\xc0\x05\x04\xb8\x01\0\x82\x01\x12\xae\x01\x12\xc7@@\xa1\x05\x04\xd5\0d\xa0\xe0\xa0%Kstop\x01\x03K\x90@@\xb0\xc0\x05\x04\xc0\x01\0\x83\x01\x12\xc8\x01\x12\xca\xc0\x05\x04\xc1\x01\0\x83\x01\x12\xc8\x01\x12\xd1@@\xa1\x05\x04\xde\0e@@A@@@@@\xb0\xc0\x05\x04\xc4\0I\x01\f\xba\x01\f\xba\x04\x04@@@@\xa1\x05\x04\xe1aA@\xa0\xb0\xa0)immed_min\x01\x03U\xd0\xc0\xb3\x90\x05\x04\xd3@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\xb0\xc0\x05\x04\xd0\x01\0\x85\x01\x12\xd3\x01\x12\xd3\xc0\x05\x04\xd1\x01\0\x85\x01\x12\xd3\x01\x12\xe5@@\xa1\x05\x04\xee\0f@\xa0\xb0\xa0)immed_max\x01\x03V\xd0\xc0\xb3\x90\x05\x04\xe0@\x90@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x04\xdd\x01\0\x86\x01\x12\xe6\x01\x12\xe6\xc0\x05\x04\xde\x01\0\x86\x01\x12\xe6\x01\x12\xf8@@\xa1\x05\x04\xfb\0g@@\x84\x95\xa6\xbe\0\0\x04\xce\0\0\0\xc3\0\0\x02\xc9\0\0\x02D\xa0\xa0(Instruct\x900d\xcb\x7f\xe8\xf2\xe6\x0fx\x1e\x1a\tpX\x13\xabf\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var Instruct = [0, -1073741824, 1073741823];
   runtime.caml_register_global(0, Instruct, "Instruct");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytegen
//# unitInfo: Requires: Assert_failure, Clflags, Config, Debuginfo, Env, Ident, Instruct, Lambda, Matching, Misc, Primitive, Stdlib, Stdlib__Array, Stdlib__Int, Stdlib__List, Stdlib__Printf, Stdlib__Stack, Subst, Switch
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_bytecomp_bytegen_ml = "bytecomp/bytegen.ml",
    cst_caml_ge_float = "caml_ge_float",
    cst_caml_gt_float = "caml_gt_float",
    cst_caml_le_float = "caml_le_float",
    cst_caml_lt_float = "caml_lt_float",
    cst_caml_obj_dup$0 = "caml_obj_dup",
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap;
   function caml_cps_exact_call0(f){
    return runtime.caml_stack_check_depth()
            ? f()
            : runtime.caml_trampoline_return(f, []);
   }
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/bytegen.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x02\x98\0\0\0\x89\0\0\x01\xfa\0\0\x01\xe1\xa0'Bytegen\xa0\xb0\xa06compile_implementation\x01\x01g\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xea\xc0\xc1@\xc0\xb3\xa1\x90\x92&Lambda&lambda@\x90@\x02\x05\xf5\xe1\0@\0\xeb\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\xa1\x90\x92(Instruct+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xec@\x90@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\xb0\xc04bytecomp/bytegen.mliU\x01\x04\x82\x01\x04\x82\xc0\x04\x02U\x01\x04\x82\x01\x04\xc2@@\xa1\x04,C@\xa0\xb0\xa0.compile_phrase\x01\x01h\xd0\xc0\xc1@\xc0\xb3\xa1\x04#&lambda@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\x92\xa0\xc0\xb3\x90\x04#\xa0\xc0\xb3\xa1\x04!+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xf3@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xa0\xc0\xb3\x90\x04.\xa0\xc0\xb3\xa1\x04,+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xf1@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf5@\x02\x05\xf5\xe1\0@\0\xf6@\xb0\xc0\x04)V\x01\x04\xc3\x01\x04\xc3\xc0\x04*V\x01\x04\xc3\x01\x05\x04@@\xa1\x04TD@\xa0\xb0\xa0%reset\x01\x01i\xd0\xc0\xc1@\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xb3\x90\x04\x06@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\xb0\xc0\x04>W\x01\x05\x05\x01\x05\x05\xc0\x04?W\x01\x05\x05\x01\x05\x1c@@\xa1\x04iE@\xa0\xb0\xa0,merge_events\x01\x01j\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x04R+debug_event@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\xa1\x90\x04Z+debug_event@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\xa1\x90\x04`+debug_event@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04]Y\x01\x05\x1e\x01\x05\x1e\xc0\x04^Z\x01\x050\x01\x05v@@\xa1\x04\x88F@@\x84\x95\xa6\xbe\0\0\x04\xea\0\0\0\xc8\0\0\x02\xda\0\0\x02R\xa0\xa0'Bytegen\x900\x87\xd1e\xacc\xc4\xe5GV\x10\x82\xa1\xe8\x8b\xca\x82\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0(Instruct\x900d\xcb\x7f\xe8\xf2\xe6\x0fx\x1e\x1a\tpX\x13\xabf\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "??",
    cst$1 = cst$2,
    cst = cst$2,
    Lambda = global_data.Lambda,
    Ident = global_data.Ident,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Subst = global_data.Subst,
    Env = global_data.Env,
    Debuginfo = global_data.Debuginfo,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Misc = global_data.Misc,
    Primitive = global_data.Primitive,
    Matching = global_data.Matching,
    Config = global_data.Config,
    Instruct = global_data.Instruct,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Clflags = global_data.Clflags,
    Switch = global_data.Switch,
    label_counter = [0, 0];
   function new_label(param){label_counter[1]++; return label_counter[1];}
   var
    empty_env = [0, Ident[27], Ident[27], Ident[27]],
    _a_ = [0, cst_bytecomp_bytegen_ml, 186, 28],
    _b_ = [0, cst_bytecomp_bytegen_ml, 222, 6],
    cst_Bytegen_merge_infos = "Bytegen.merge_infos",
    cst_Bytegen_merge_repr = "Bytegen.merge_repr";
   function add_var(id, pos, env, cont){
    var _eO_ = env[3], _eP_ = env[2];
    return caml_cps_call4
            (Ident[28],
             id,
             pos,
             env[1],
             function(_eQ_){return cont([0, _eQ_, _eP_, _eO_]);});
   }
   function add_vars(idlist, pos, env, cont){
    function _eN_(env, pos, idlist){
     if(! idlist) return cont(env);
     var idlist$0 = idlist[2], id = idlist[1];
     return caml_cps_exact_call4
             (add_var,
              id,
              pos,
              env,
              function(env){
               var pos$0 = pos + 1 | 0;
               return caml_cps_exact_call3(_eN_, env, pos$0, idlist$0);
              });
    }
    return _eN_(env, pos, idlist);
   }
   function label_code(cont){
    if(cont){
     var match = cont[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 0:
         var lbl$0 = match[1]; return [0, lbl$0, cont];
        case 22:
         var lbl$1 = match[1]; return [0, lbl$1, cont];
      }
    }
    var lbl = new_label(undef);
    return [0, lbl, [0, [0, lbl], cont]];
   }
   function make_branch_2(lbl, n, cont, param){
    var n$0 = n, param$0 = param;
    for(;;){
     if(param$0){
      var match = param$0[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 0:
          var c = param$0[2], param$0 = c; continue;
         case 3:
          var
           c$0 = param$0[2],
           m = match[1],
           n$1 = n$0 + m | 0,
           n$0 = n$1,
           param$0 = c$0;
          continue;
         case 8:
          var m$0 = match[1]; return [0, [8, n$0 + m$0 | 0], cont];
       }
     }
     if(lbl){var lbl$0 = lbl[1]; return [0, [22, lbl$0], cont];}
     var lbl$1 = new_label(undef);
     return [0, [22, lbl$1], [0, [0, lbl$1], cont]];
    }
   }
   function make_branch(cont){
    if(cont){
     var branch = cont[1];
     if(typeof branch !== "number")
      switch(branch[0]){
        case 0:
         var lbl = branch[1]; return make_branch_2([0, lbl], 0, cont, cont);
        case 8:
         return [0, branch, cont];
        case 22:
         return [0, branch, cont];
        case 29:
         var k = branch[1]; return [0, [29, k], cont];
      }
    }
    return make_branch_2(0, 0, cont, cont);
   }
   function discard_dead_code(cont){
    var cont$0 = cont;
    for(;;){
     if(! cont$0) return 0;
     var _eM_ = cont$0[1];
     a:
     {
      if(typeof _eM_ === "number"){if(1 !== _eM_) break a;}
      else
       switch(_eM_[0]){case 0:case 14: break;default: break a;}
      return cont$0;
     }
     var cont$1 = cont$0[2], cont$0 = cont$1;
    }
   }
   function is_tailcall(param){
    var param$0 = param;
    for(;;){
     if(param$0){
      var _eL_ = param$0[1];
      if(typeof _eL_ !== "number")
       switch(_eL_[0]){
         case 0:
          var c = param$0[2], param$0 = c; continue;
         case 3:
          var c$0 = param$0[2], param$0 = c$0; continue;
         case 8:
          return 1;
       }
     }
     return 0;
    }
   }
   function add_pop(n, cont){
    var n$0 = n, cont$0 = cont;
    for(;;){
     if(0 === n$0) return cont$0;
     if(cont$0){
      var match = cont$0[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 3:
          var
           cont$1 = cont$0[2],
           m = match[1],
           n$1 = n$0 + m | 0,
           n$0 = n$1,
           cont$0 = cont$1;
          continue;
         case 8:
          var cont$2 = cont$0[2], m$0 = match[1];
          return [0, [8, n$0 + m$0 | 0], cont$2];
         case 29:
          return cont$0;
       }
     }
     return [0, [3, n$0], cont$0];
    }
   }
   function add_const_unit(cont){
    if(cont){
     var _eK_ = cont[1];
     if(typeof _eK_ !== "number")
      switch(_eK_[0]){case 1:case 5:case 13:case 15: return cont;}
    }
    return [0, [15, Lambda[8]], cont];
   }
   function push_dummies(n, k){
    if(0 === n) return k;
    var _eJ_ = [0, 0, push_dummies(n - 1 | 0, k)];
    return [0, [15, Lambda[8]], _eJ_];
   }
   function check_recordwith_updates(id, e){
    var e$0 = e;
    for(;;){
     switch(e$0[0]){
       case 0:
        var id2 = e$0[1]; return caml_equal(id2, id);
       case 15:
        var _eD_ = e$0[1];
        if(8 === _eD_[0]){
         var _eE_ = _eD_[1];
         if(typeof _eE_ !== "number")
          switch(_eE_[0]){
            case 4:
            case 7:
             var _eF_ = _eD_[2];
             if(_eF_){
              var _eG_ = _eF_[1];
              if(0 === _eG_[0]){
               var _eH_ = _eF_[2];
               if(_eH_ && ! _eH_[2]){
                var
                 cont = e$0[2],
                 id2$0 = _eG_[1],
                 _eI_ = caml_equal(id2$0, id);
                if(! _eI_) return _eI_;
                var e$0 = cont;
                continue;
               }
              }
             }
             break;
          }
        }
        break;
     }
     return 0;
    }
   }
   function size_of_lambda(env, funct, cont){
    function _ek_(funct, env){
     switch(funct[0]){
       case 0:
        var id = funct[1];
        caml_push_trap
         (function(_eC_){
           if(_eC_ === Stdlib[8]) return cont(0);
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_eC_, 0));
          });
        return caml_cps_call3
                (Ident[29],
                 id,
                 env,
                 function(_eB_){caml_pop_trap(); return cont(_eB_);});
       case 4:
        var params = funct[1][2];
        return caml_cps_call2
                (Stdlib_List[1],
                 params,
                 function(_ey_){
                  return caml_cps_call2
                          (Lambda[17],
                           funct,
                           function(_ez_){
                            return caml_cps_call2
                                    (Ident[6][21],
                                     _ez_,
                                     function(_eA_){return cont([3, 2 + _eA_ | 0, _ey_]);});
                           });
                 });
       case 5:
        if(! funct[1]){
         var _el_ = funct[4];
         if(8 === _el_[0]){
          var match = _el_[1];
          if(typeof match !== "number" && 8 === match[0]){
           var
            body = funct[5],
            size = match[2],
            kind = match[1],
            id$1 = funct[3];
           if(check_recordwith_updates(id$1, body)){
            if(typeof kind === "number"){
             if(1 === kind) return cont([2, size]);
            }
            else
             switch(kind[0]){
               case 0:
                var raise$0 = caml_pop_trap();
                return raise$0
                        (caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1));
               case 2:
                return cont([0, size + 1 | 0]);
             }
            return cont([0, size]);
           }
          }
         }
        }
        var funct$0 = funct[5], arg = funct[4], id$0 = funct[3];
        return caml_cps_exact_call3
                (size_of_lambda,
                 env,
                 arg,
                 function(_ex_){
                  return caml_cps_call4
                          (Ident[28],
                           id$0,
                           _ex_,
                           env,
                           function(env){
                            return caml_cps_exact_call2(_ek_, funct$0, env);
                           });
                 });
       case 7:
        var bindings = funct[1], funct$1 = funct[2];
        return caml_cps_call3
                (Stdlib_List[32],
                 function(param, cont){
                  return 4 === param[2][0] ? cont(1) : cont(0);
                 },
                 bindings,
                 function(_es_){
                  if(_es_)
                   return caml_cps_call2
                           (Lambda[17],
                            [7, bindings, Lambda[10]],
                            function(_eu_){
                             return caml_cps_call2
                                     (Ident[6][22],
                                      _eu_,
                                      function(fv){
                                       return caml_cps_call2
       (Stdlib_List[1],
        fv,
        function(_ev_){
         return caml_cps_call2
                 (Stdlib_List[1],
                  bindings,
                  function(_ew_){
                   var blocksize = ((_ew_ * 3 | 0) - 1 | 0) + _ev_ | 0;
                   return caml_cps_call3
                           (Stdlib_List[20],
                            function(i, param, cont){
                             var id = param[1];
                             return cont([0, id, i * 3 | 0]);
                            },
                            bindings,
                            function(offsets){
                             return caml_cps_call4
                                     (Stdlib_List[26],
                                      function(param, env, cont){
                                       var offset = param[2], id = param[1];
                                       return caml_cps_call4
       (Ident[28], id, [1, blocksize, offset], env, cont);
                                      },
                                      offsets,
                                      env,
                                      function(env){
                                       return caml_cps_exact_call2(_ek_, funct$1, env);
                                      });
                            });
                  });
        });
                                      });
                            });
                  var funct$0 = funct[2];
                  return caml_cps_call4
                          (Stdlib_List[26],
                           function(param, env, cont){
                            var e = param[2], id = param[1];
                            return caml_cps_exact_call3
                                    (size_of_lambda,
                                     env,
                                     e,
                                     function(_et_){
                                      return caml_cps_call4(Ident[28], id, _et_, env, cont);
                                     });
                           },
                           bindings,
                           env,
                           function(env){
                            return caml_cps_exact_call2(_ek_, funct$0, env);
                           });
                 });
       case 8:
        var _em_ = funct[1];
        if(typeof _em_ !== "number")
         switch(_em_[0]){
           case 2:
            var args = funct[2];
            return caml_cps_call2
                    (Stdlib_List[1],
                     args,
                     function(_er_){return cont([0, _er_]);});
           case 8:
            var _en_ = _em_[1];
            if(typeof _en_ === "number"){
             if(1 === _en_){var size$1 = _em_[2]; return cont([2, size$1]);}
            }
            else
             switch(_en_[0]){
               case 0:
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1));
               case 2:
                var size$2 = _em_[2]; return cont([0, size$2 + 1 | 0]);
             }
            var size$0 = _em_[2];
            return cont([0, size$0]);
           case 18:
            var _eo_ = _em_[1];
            if(! _eo_) return cont(0);
            if(3 <= _eo_){
             var args$0 = funct[2];
             return caml_cps_call2
                     (Stdlib_List[1],
                      args$0,
                      function(_eq_){return cont([2, _eq_]);});
            }
            var args$1 = funct[2];
            return caml_cps_call2
                    (Stdlib_List[1],
                     args$1,
                     function(_ep_){return cont([0, _ep_]);});
         }
        break;
       case 15:
        var funct$2 = funct[2];
        return caml_cps_exact_call2(_ek_, funct$2, env);
       case 20:
        var funct$3 = funct[1];
        return caml_cps_exact_call2(_ek_, funct$3, env);
     }
     return cont(0);
    }
    return _ek_(funct, env);
   }
   function copy_event(ev, kind, info, repr){
    return [0,
            0,
            ev[2],
            ev[3],
            kind,
            ev[5],
            info,
            ev[7],
            ev[8],
            ev[9],
            ev[10],
            repr];
   }
   function merge_events(ev$0, ev, cont){
    var _ee_ = ev$0[4], _ef_ = ev[4];
    if(typeof _ee_ === "number")
     if(_ee_ || ! (typeof _ef_ === "number" && _ef_))
      var min = ev$0, maj = ev;
     else
      var min = ev, maj = ev$0;
    else if(typeof _ef_ === "number" && _ef_)
     var min = ev, maj = ev$0;
    else
     var min = ev, maj = ev$0;
    var x = maj[11], match = min[11];
    function _eg_(_eh_){
     var info = maj[6], match = min[6];
     function _ei_(_ej_){return cont(copy_event(maj, maj[4], _ej_, _eh_));}
     if(typeof info === "number" && info) return _ei_(match);
     if(typeof match === "number" && match) return _ei_(info);
     return caml_cps_call2(Misc[1], cst_Bytegen_merge_infos, _ei_);
    }
    if(typeof x === "number") return _eg_(match);
    if(0 === x[0]){
     var r = x[1];
     if(typeof match === "number") return _eg_(x);
     if(1 === match[0]){
      var r$0 = match[1];
      if(r === r$0 && 1 === r[1]) return _eg_(0);
     }
    }
    else{
     var r$1 = x[1];
     if(typeof match === "number") return _eg_(x);
     if(0 === match[0]){
      var r$2 = match[1];
      if(r$1 === r$2) return _eg_([0, r$1]);
     }
    }
    return caml_cps_call2(Misc[1], cst_Bytegen_merge_repr, _eg_);
   }
   function weaken_event(ev, cont){
    if(typeof ev[4] === "number") return [0, [35, ev], cont];
    if(cont){
     var _eb_ = cont[1];
     if(typeof _eb_ === "number" && ! _eb_){
      var _ec_ = cont[2];
      if(_ec_){
       var _ed_ = _ec_[1];
       if(typeof _ed_ !== "number" && 35 === _ed_[0]){
        var ev$0 = _ed_[1];
        if(typeof ev$0[11] === "number"){
         var c = _ec_[2];
         if(typeof ev[6] === "number") return cont;
         var
          repr = [0, 1],
          ev$1 = copy_event(ev, 1, ev[6], [0, repr]),
          ev$2 = copy_event(ev$0, ev$0[4], ev$0[6], [1, repr]);
         return [0, [35, ev$1], [0, 0, [0, [35, ev$2], c]]];
        }
       }
      }
     }
    }
    return [0, [35, ev], cont];
   }
   function add_event(ev, cont, cont$1){
    if(cont){
     var match = cont[1];
     if(typeof match !== "number" && 35 === match[0]){
      var cont$0 = cont[2], ev$0 = match[1];
      return caml_cps_exact_call3
              (merge_events,
               ev,
               ev$0,
               function(_ea_){return cont$1(weaken_event(_ea_, cont$0));});
     }
    }
    return cont$1(weaken_event(ev, cont));
   }
   function add_pseudo_event(loc, modname, c, cont){
    return Clflags[19][1]
            ? caml_cps_call2
              (Debuginfo[1][10],
               loc,
               function(ev_defname){
                var
                 _d5_ = 0,
                 _d6_ = 0,
                 _d7_ = Subst[1],
                 _d8_ = 0,
                 _d9_ = 1,
                 _d__ = 1;
                return caml_cps_call2
                        (Debuginfo[1][9],
                         loc,
                         function(_d$_){
                          var
                           ev =
                             [0,
                              0,
                              modname,
                              _d$_,
                              _d__,
                              ev_defname,
                              _d9_,
                              _d8_,
                              _d7_,
                              empty_env,
                              _d6_,
                              _d5_];
                          return caml_cps_exact_call3(add_event, ev, c, cont);
                         });
               })
            : cont(c);
   }
   var
    try_blocks = [0, 0],
    sz_static_raises = [0, 0],
    cst_outside_appropriated_catch = ") outside appropriated catch",
    cst_exit = "exit(";
   function push_static_raise(i, lbl_handler, sz){
    sz_static_raises[1] =
     [0, [0, i, [0, lbl_handler, sz, try_blocks[1]]], sz_static_raises[1]];
    return;
   }
   function find_raise_label(i, cont){
    caml_push_trap
     (function(_d1_){
       if(_d1_ === Stdlib[8])
        return caml_cps_call2
                (Stdlib_Int[12],
                 i,
                 function(_d2_){
                  return caml_cps_call3
                          (Stdlib[28],
                           _d2_,
                           cst_outside_appropriated_catch,
                           function(_d3_){
                            return caml_cps_call3
                                    (Stdlib[28],
                                     cst_exit,
                                     _d3_,
                                     function(_d4_){return caml_cps_call2(Misc[1], _d4_, cont);});
                           });
                 });
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_d1_, 0));
      });
    return caml_cps_call3
            (Stdlib_List[46],
             i,
             sz_static_raises[1],
             function(_d0_){caml_pop_trap(); return cont(_d0_);});
   }
   function code_as_jump(l, sz, cont){
    if(11 === l[0] && ! l[2]){
     var i = l[1];
     return caml_cps_exact_call2
             (find_raise_label,
              i,
              function(match){
               var tb = match[3], size = match[2], label = match[1];
               if(sz === size && tb === try_blocks[1])
                return cont([0, label]);
               return cont(0);
              });
    }
    return cont(0);
   }
   var
    functions_to_compile = caml_callback(Stdlib_Stack[2], [0]),
    compunit_name = [0, cst],
    max_stack_used = [0, 0],
    cst_caml_nativeint = "caml_nativeint_",
    cst_caml_int32 = "caml_int32_",
    cst_caml_int64 = "caml_int64_",
    _c_ = [30, "caml_string_of_bytes", 1],
    _d_ = [30, "caml_bytes_of_string", 1],
    cst_Bytegen_comp_primitive = "Bytegen.comp_primitive",
    _e_ = [30, "caml_int_compare", 2],
    _f_ = [30, "caml_float_compare", 2],
    _g_ = [30, "caml_int_of_float", 1],
    _h_ = [30, "caml_float_of_int", 1],
    _i_ = [30, "caml_neg_float", 1],
    _j_ = [30, "caml_abs_float", 1],
    _k_ = [30, "caml_add_float", 2],
    _l_ = [30, "caml_sub_float", 2],
    _m_ = [30, "caml_mul_float", 2],
    _n_ = [30, "caml_div_float", 2],
    _o_ = [30, "caml_ml_string_length", 1],
    _p_ = [30, "caml_string_get", 2],
    _q_ = [30, "caml_ml_bytes_length", 1],
    _r_ = [30, "caml_bytes_get", 2],
    _s_ = [30, "caml_bytes_set", 3],
    _t_ = [30, "caml_bswap16", 1],
    _u_ = [30, "caml_int_as_pointer", 1],
    _v_ = [30, "caml_atomic_exchange", 2],
    _w_ = [30, "caml_atomic_cas", 3],
    _x_ = [30, "caml_atomic_fetch_add", 2],
    _y_ = [30, "caml_domain_dls_get", 1],
    _z_ = [30, cst_caml_obj_dup$0, 1],
    cst_compare = "compare",
    _A_ = [30, "caml_floatarray_unsafe_get", 2],
    _B_ = [30, "caml_array_unsafe_get", 2],
    _C_ = [30, "caml_floatarray_unsafe_set", 3],
    _D_ = [30, "caml_array_unsafe_set", 3],
    _E_ = [30, "caml_floatarray_get", 2],
    _F_ = [30, "caml_array_get_addr", 2],
    _G_ = [30, "caml_array_get", 2],
    _H_ = [30, "caml_floatarray_set", 3],
    _I_ = [30, "caml_array_set_addr", 3],
    _J_ = [30, "caml_array_set", 3],
    cst_of_int = "of_int",
    cst_to_int = "to_int",
    cst_Bytegen_comp_primitive_inv =
      "Bytegen.comp_primitive: invalid Pcvtbint cast",
    _K_ = [30, "caml_nativeint_to_int32", 1],
    _L_ = [30, "caml_int64_of_nativeint", 1],
    _M_ = [30, "caml_nativeint_of_int32", 1],
    _N_ = [30, "caml_int64_of_int32", 1],
    _O_ = [30, "caml_int64_to_nativeint", 1],
    _P_ = [30, "caml_int64_to_int32", 1],
    cst_neg = "neg",
    cst_add = "add",
    cst_sub = "sub",
    cst_mul = "mul",
    cst_div = "div",
    cst_mod = "mod",
    cst_and = "and",
    cst_or = "or",
    cst_xor = "xor",
    cst_shift_left = "shift_left",
    cst_shift_right_unsigned = "shift_right_unsigned",
    cst_shift_right = "shift_right",
    _Q_ = [30, "caml_equal", 2],
    _R_ = [30, "caml_notequal", 2],
    _S_ = [30, "caml_lessthan", 2],
    _T_ = [30, "caml_greaterthan", 2],
    _U_ = [30, "caml_lessequal", 2],
    _V_ = [30, "caml_greaterequal", 2],
    cst_caml_ba_get = "caml_ba_get_",
    cst_caml_ba_set = "caml_ba_set_",
    cst_caml_ba_dim = "caml_ba_dim_",
    _W_ = [30, "caml_string_get16", 2],
    _X_ = [30, "caml_string_get32", 2],
    _Y_ = [30, "caml_string_get64", 2],
    _Z_ = [30, "caml_bytes_get16", 2],
    ___ = [30, "caml_bytes_get32", 2],
    _$_ = [30, "caml_bytes_get64", 2],
    _aa_ = [30, "caml_bytes_set16", 3],
    _ab_ = [30, "caml_bytes_set32", 3],
    _ac_ = [30, "caml_bytes_set64", 3],
    _ad_ = [30, "caml_ba_uint8_get16", 2],
    _ae_ = [30, "caml_ba_uint8_get32", 2],
    _af_ = [30, "caml_ba_uint8_get64", 2],
    _ag_ = [30, "caml_ba_uint8_set16", 3],
    _ah_ = [30, "caml_ba_uint8_set32", 3],
    _ai_ = [30, "caml_ba_uint8_set64", 3],
    cst_big_endian = "big_endian",
    _aj_ = [0, [11, "caml_sys_const_", [2, 0, 0]], "caml_sys_const_%s"],
    cst_word_size = "word_size",
    cst_int_size = "int_size",
    cst_max_wosize = "max_wosize",
    cst_ostype_unix = "ostype_unix",
    cst_ostype_win32 = "ostype_win32",
    cst_ostype_cygwin = "ostype_cygwin",
    cst_backend_type = "backend_type",
    cst_bswap = "bswap",
    _ak_ = [30, "caml_atomic_load", 1];
   function check_stack(sz){
    if(max_stack_used[1] < sz) max_stack_used[1] = sz;
    return;
   }
   function comp_bint_primitive(bi, suff, args, cont){
    switch(bi){
      case 0:
       var pref = cst_caml_nativeint; break;
      case 1:
       var pref = cst_caml_int32; break;
      default: var pref = cst_caml_int64;
    }
    return caml_cps_call2
            (Stdlib_List[1],
             args,
             function(_dY_){
              return caml_cps_call3
                      (Stdlib[28],
                       pref,
                       suff,
                       function(_dZ_){return cont([30, _dZ_, _dY_]);});
             });
   }
   function comp_primitive(p, sz, args, cont){
    check_stack(sz);
    if(typeof p === "number")
     switch(p){
       case 0:
        return cont(_c_);
       case 1:
        return cont(_d_);
       case 3:
        return cont(3);
       case 5:
        check_stack(sz + 4 | 0); return cont(27);
       case 11:
        return cont(11);
       case 12:
        return cont(12);
       case 13:
        return cont(13);
       case 14:
        return cont(14);
       case 15:
        return cont(17);
       case 16:
        return cont(18);
       case 17:
        return cont(19);
       case 18:
        return cont(20);
       case 19:
        return cont(21);
       case 20:
        return cont(22);
       case 21:
        return cont(_e_);
       case 22:
        return cont(_f_);
       case 23:
        return cont(_g_);
       case 24:
        return cont(_h_);
       case 25:
        return cont(_i_);
       case 26:
        return cont(_j_);
       case 27:
        return cont(_k_);
       case 28:
        return cont(_l_);
       case 29:
        return cont(_m_);
       case 30:
        return cont(_n_);
       case 31:
        return cont(_o_);
       case 32:
        return cont(5);
       case 33:
        return cont(_p_);
       case 34:
        return cont(_q_);
       case 35:
        return cont(6);
       case 36:
        return cont(7);
       case 37:
        return cont(_r_);
       case 38:
        return cont(_s_);
       case 39:
        return cont(23);
       case 40:
        return cont(24);
       case 41:
        return cont(_t_);
       case 42:
        return cont(_u_);
       case 43:
        return cont(_v_);
       case 44:
        return cont(_w_);
       case 45:
        return cont(_x_);
       case 47:
        return cont(_y_);
     }
    else
     switch(p[0]){
       case 0:
        var id = p[1]; return cont([13, id]);
       case 1:
        var id$0 = p[1]; return cont([14, id$0]);
       case 3:
        var n = p[1]; return cont([18, n]);
       case 4:
        var n$0 = p[1]; return cont([19, n$0]);
       case 5:
        return cont(4);
       case 7:
        var n$1 = p[1]; return cont([21, n$1]);
       case 8:
        return cont(_z_);
       case 9:
        var p$0 = p[1]; return cont([30, p$0[1], p$0[2]]);
       case 11:
        return cont(15);
       case 12:
        return cont(16);
       case 13:
        var cmp = p[1]; return cont([31, cmp]);
       case 14:
        var bi = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi, cst_compare, args, cont);
       case 15:
        var n$2 = p[1]; return cont([32, n$2]);
       case 16:
        var n$3 = p[1]; return cont([33, n$3]);
       case 20:
        return cont(2);
       case 21:
        var _dJ_ = p[1];
        return _dJ_ ? 3 <= _dJ_ ? cont(_A_) : cont(3) : cont(_B_);
       case 22:
        var _dK_ = p[1];
        return _dK_ ? 3 <= _dK_ ? cont(_C_) : cont(4) : cont(_D_);
       case 23:
        var _dL_ = p[1];
        return _dL_ ? 3 <= _dL_ ? cont(_E_) : cont(_F_) : cont(_G_);
       case 24:
        var _dM_ = p[1];
        return _dM_ ? 3 <= _dM_ ? cont(_H_) : cont(_I_) : cont(_J_);
       case 25:
        var bi$0 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$0, cst_of_int, args, cont);
       case 26:
        var bi$1 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$1, cst_to_int, args, cont);
       case 27:
        var dst = p[2], src = p[1];
        switch(src){
          case 0:
           switch(dst){case 1: return cont(_K_);case 2: return cont(_L_);
           }
           break;
          case 1:
           switch(dst){case 0: return cont(_M_);case 2: return cont(_N_);
           }
           break;
          default:
           switch(dst){case 0: return cont(_O_);case 1: return cont(_P_);}
        }
        return caml_cps_call2(Misc[1], cst_Bytegen_comp_primitive_inv, cont);
       case 28:
        var bi$2 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$2, cst_neg, args, cont);
       case 29:
        var bi$3 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$3, cst_add, args, cont);
       case 30:
        var bi$4 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$4, cst_sub, args, cont);
       case 31:
        var bi$5 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$5, cst_mul, args, cont);
       case 32:
        var bi$6 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$6, cst_div, args, cont);
       case 33:
        var bi$7 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$7, cst_mod, args, cont);
       case 34:
        var bi$8 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$8, cst_and, args, cont);
       case 35:
        var bi$9 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$9, cst_or, args, cont);
       case 36:
        var bi$10 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$10, cst_xor, args, cont);
       case 37:
        var bi$11 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$11, cst_shift_left, args, cont);
       case 38:
        var bi$12 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive,
                 bi$12,
                 cst_shift_right_unsigned,
                 args,
                 cont);
       case 39:
        var bi$13 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$13, cst_shift_right, args, cont);
       case 40:
        switch(p[2]){
          case 0:
           return cont(_Q_);
          case 1:
           return cont(_R_);
          case 2:
           return cont(_S_);
          case 3:
           return cont(_T_);
          case 4:
           return cont(_U_);
          default: return cont(_V_);
        }
       case 41:
        var n$4 = p[2], _dN_ = n$4 + 1 | 0;
        return caml_cps_call2
                (Stdlib_Int[12],
                 n$4,
                 function(_dW_){
                  return caml_cps_call3
                          (Stdlib[28],
                           cst_caml_ba_get,
                           _dW_,
                           function(_dX_){return cont([30, _dX_, _dN_]);});
                 });
       case 42:
        var n$5 = p[2], _dO_ = n$5 + 2 | 0;
        return caml_cps_call2
                (Stdlib_Int[12],
                 n$5,
                 function(_dU_){
                  return caml_cps_call3
                          (Stdlib[28],
                           cst_caml_ba_set,
                           _dU_,
                           function(_dV_){return cont([30, _dV_, _dO_]);});
                 });
       case 43:
        var n$6 = p[1], _dP_ = 1;
        return caml_cps_call2
                (Stdlib_Int[12],
                 n$6,
                 function(_dS_){
                  return caml_cps_call3
                          (Stdlib[28],
                           cst_caml_ba_dim,
                           _dS_,
                           function(_dT_){return cont([30, _dT_, _dP_]);});
                 });
       case 44:
        return cont(_W_);
       case 45:
        return cont(_X_);
       case 46:
        return cont(_Y_);
       case 47:
        return cont(_Z_);
       case 48:
        return cont(___);
       case 49:
        return cont(_$_);
       case 50:
        return cont(_aa_);
       case 51:
        return cont(_ab_);
       case 52:
        return cont(_ac_);
       case 53:
        return cont(_ad_);
       case 54:
        return cont(_ae_);
       case 55:
        return cont(_af_);
       case 56:
        return cont(_ag_);
       case 57:
        return cont(_ah_);
       case 58:
        return cont(_ai_);
       case 59:
        var c = p[1];
        switch(c){
          case 0:
           var const_name = cst_big_endian; break;
          case 1:
           var const_name = cst_word_size; break;
          case 2:
           var const_name = cst_int_size; break;
          case 3:
           var const_name = cst_max_wosize; break;
          case 4:
           var const_name = cst_ostype_unix; break;
          case 5:
           var const_name = cst_ostype_win32; break;
          case 6:
           var const_name = cst_ostype_cygwin; break;
          default: var const_name = cst_backend_type;
        }
        var _dQ_ = 1;
        return caml_cps_call3
                (Stdlib_Printf[4],
                 _aj_,
                 const_name,
                 function(_dR_){return cont([30, _dR_, _dQ_]);});
       case 60:
        var bi$14 = p[1];
        return caml_cps_exact_call4
                (comp_bint_primitive, bi$14, cst_bswap, args, cont);
       case 61:
        return cont(_ak_);
     }
    return caml_cps_call2(Misc[1], cst_Bytegen_comp_primitive, cont);
   }
   function is_immed(n){
    var
     _dH_ = Instruct[1] <= n ? 1 : 0,
     _dI_ = _dH_ ? n <= Instruct[2] ? 1 : 0 : _dH_;
    return _dI_;
   }
   function compare_key(_dG_, _dF_, cont){
    return cont(runtime.caml_compare(_dG_, _dF_));
   }
   var
    make_key = Lambda[7],
    Storer = caml_callback(Switch[2], [[0, compare_key, make_key]]),
    cst_Bytegen_comp_expr_var = "Bytegen.comp_expr: var ",
    _al_ = [0, cst_bytecomp_bytegen_ml, 646, 17],
    _am_ = [15, [0, [0, 0]]],
    _an_ = [30, "caml_alloc_dummy", 1],
    _ao_ = [30, "caml_alloc_dummy_infix", 2],
    _ap_ = [30, "caml_alloc_dummy_float", 1],
    _aq_ = [30, "caml_alloc_dummy_function", 2],
    _ar_ = [30, "caml_update_dummy", 2],
    _as_ = [0, cst_bytecomp_bytegen_ml, 772, 6],
    cst_Reperform_used_in_non_tail = "Reperform used in non-tail position",
    _at_ = [0, cst_bytecomp_bytegen_ml, 782, 6],
    _au_ = [30, "caml_eq_float", 2],
    _av_ = [30, "caml_neq_float", 2],
    _aw_ = [30, cst_caml_lt_float, 2],
    _ax_ = [30, cst_caml_lt_float, 2],
    _ay_ = [30, cst_caml_gt_float, 2],
    _az_ = [30, cst_caml_gt_float, 2],
    _aA_ = [30, cst_caml_le_float, 2],
    _aB_ = [30, cst_caml_le_float, 2],
    _aC_ = [30, cst_caml_ge_float, 2],
    _aD_ = [30, cst_caml_ge_float, 2],
    _aE_ = [16, 0, 0],
    _aF_ = [30, "caml_make_array", 1],
    cst_Bytegen_comp_expr_Pduparra =
      "Bytegen.comp_expr: Pduparray takes exactly one arg",
    cst_caml_obj_dup = cst_caml_obj_dup$0,
    _aG_ = [0, cst_bytecomp_bytegen_ml, 791, 6],
    _aH_ = [0, cst_bytecomp_bytegen_ml, 864, 16],
    _aI_ = [0, cst_bytecomp_bytegen_ml, 846, 56],
    _aJ_ = [31, 1],
    _aK_ = [1, 1],
    _aL_ = [4, 2],
    _aM_ = [1, 1],
    _aN_ = [1, 2],
    cst_Bytegen_comp_expr_assign = "Bytegen.comp_expr: assign",
    _aO_ = [0, cst_bytecomp_bytegen_ml, 592, 6],
    _aP_ = [30, "caml_ensure_stack_capacity", 1],
    _aQ_ = [0, [8, 1], 0];
   function comp_expr(env, exp, sz, cont, cont$0){
    function _a6_(cont, exp){
     check_stack(sz);
     switch(exp[0]){
       case 2:
        var cst = exp[1]; return cont$0([0, [15, cst], cont]);
       case 3:
        var match = exp[1], args = match[2], func = match[1];
        return caml_cps_call2
                (Stdlib_List[1],
                 args,
                 function(nargs){
                  if(is_tailcall(cont))
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            func,
                            sz + nargs | 0,
                            [0, [7, nargs, sz + nargs | 0], discard_dead_code(cont)],
                            function(_dE_){
                             return caml_cps_exact_call5
                                     (comp_args, env, args, sz, [0, 0, _dE_], cont$0);
                            });
                  if(4 > nargs)
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            func,
                            sz + nargs | 0,
                            [0, [6, nargs], cont],
                            function(_dD_){
                             return caml_cps_exact_call5
                                     (comp_args, env, args, sz, [0, 0, _dD_], cont$0);
                            });
                  var
                   match = label_code(cont),
                   cont1 = match[2],
                   lbl = match[1];
                  return caml_cps_exact_call5
                          (comp_expr,
                           env,
                           func,
                           (sz + 3 | 0) + nargs | 0,
                           [0, [6, nargs], cont1],
                           function(_dB_){
                            return caml_cps_exact_call5
                                    (comp_args,
                                     env,
                                     args,
                                     sz + 3 | 0,
                                     [0, 0, _dB_],
                                     function(_dC_){return cont$0([0, [5, lbl], _dC_]);});
                           });
                 });
       case 4:
        var
         match$0 = exp[1],
         loc = match$0[6],
         body = match$0[4],
         params = match$0[2];
        return caml_cps_exact_call4
                (add_pseudo_event,
                 loc,
                 compunit_name[1],
                 cont,
                 function(cont){
                  var lbl = new_label(undef);
                  return caml_cps_call2
                          (Lambda[17],
                           exp,
                           function(_dr_){
                            return caml_cps_call2
                                    (Ident[6][22],
                                     _dr_,
                                     function(fv){
                                      var _ds_ = 0, _dt_ = 0, _du_ = 1;
                                      return caml_cps_call3
      (Stdlib_List[19],
       function(_dA_, cont){return cont(_dA_[1]);},
       params,
       function(_dv_){
        var to_compile = [0, _dv_, body, lbl, fv, _du_, _dt_, _ds_];
        return caml_cps_call3
                (Stdlib_Stack[3],
                 to_compile,
                 functions_to_compile,
                 function(_dw_){
                  return caml_cps_call2
                          (Stdlib_List[1],
                           fv,
                           function(_dx_){
                            var _dy_ = [0, [10, lbl, _dx_], cont];
                            return caml_cps_call3
                                    (Stdlib_List[19],
                                     function(n, cont){return cont([0, n]);},
                                     fv,
                                     function(_dz_){
                                      return caml_cps_exact_call5
      (comp_args, env, _dz_, sz, _dy_, cont$0);
                                     });
                           });
                 });
       });
                                     });
                           });
                 });
       case 5:
        var body$0 = exp[5], arg = exp[4], id$0 = exp[3]; break;
       case 6:
        var body$0 = exp[4], arg = exp[3], id$0 = exp[2]; break;
       case 7:
        var body$1 = exp[2], decl = exp[1];
        return caml_cps_call2
                (Stdlib_List[1],
                 decl,
                 function(ndecl){
                  return caml_cps_call3
                          (Stdlib_List[32],
                           function(param, cont){
                            return 4 === param[2][0] ? cont(1) : cont(0);
                           },
                           decl,
                           function(_cU_){
                            return _cU_
                                    ? caml_cps_call2
                                      (Lambda[17],
                                       [7, decl, Lambda[10]],
                                       function(_cV_){
return caml_cps_call2
        (Ident[6][22],
         _cV_,
         function(fv){
          return caml_cps_call3
                  (Stdlib_List[19],
                   function(param, cont){var id = param[1]; return cont(id);},
                   decl,
                   function(rec_idents){
                    function comp_fun(pos, param, cont){
                     if(! param) return cont(0);
                     var _c3_ = param[1][2];
                     if(4 === _c3_[0]){
                      var
                       rem = param[2],
                       match = _c3_[1],
                       body = match[4],
                       params = match[2],
                       lbl = new_label(undef);
                      return caml_cps_call3
                              (Stdlib_List[19],
                               function(_c7_, cont){return cont(_c7_[1]);},
                               params,
                               function(_c4_){
                                var
                                 to_compile =
                                   [0, _c4_, body, lbl, fv, ndecl, rec_idents, pos];
                                return caml_cps_call3
(Stdlib_Stack[3],
 to_compile,
 functions_to_compile,
 function(_c5_){
  return caml_cps_exact_call3
          (comp_fun,
           pos + 1 | 0,
           rem,
           function(_c6_){return cont([0, lbl, _c6_]);});
 });
                               });
                     }
                     var raise = caml_pop_trap();
                     return raise
                             (caml_maybe_attach_backtrace([0, Assert_failure, _al_], 1));
                    }
                    return caml_cps_exact_call3
                            (comp_fun,
                             0,
                             decl,
                             function(lbls){
                              var _cW_ = add_pop(ndecl, cont), _cX_ = sz + ndecl | 0;
                              return caml_cps_exact_call4
                                      (add_vars,
                                       rec_idents,
                                       sz + 1 | 0,
                                       env,
                                       function(_cY_){
return caml_cps_exact_call5
        (comp_expr,
         _cY_,
         body$1,
         _cX_,
         _cW_,
         function(_cZ_){
          return caml_cps_call2
                  (Stdlib_List[1],
                   fv,
                   function(_c0_){
                    var _c1_ = [0, [11, lbls, _c0_], _cZ_];
                    return caml_cps_call3
                            (Stdlib_List[19],
                             function(n, cont){return cont([0, n]);},
                             fv,
                             function(_c2_){
                              return caml_cps_exact_call5
                                      (comp_args, env, _c2_, sz, _c1_, cont$0);
                             });
                   });
         });
                                       });
                             });
                   });
         });
                                       })
                                    : caml_cps_call3
                                      (Stdlib_List[19],
                                       function(param, cont){
var exp = param[2], id = param[1];
return caml_cps_exact_call3
        (size_of_lambda,
         Ident[27],
         exp,
         function(_dq_){return cont([0, id, exp, _dq_]);});
                                       },
                                       decl,
                                       function(decl_size){
function comp_init(new_env, sz, param, cont){
 if(! param)
  return caml_cps_exact_call5
          (comp_nonrec, new_env, sz, ndecl, decl_size, cont);
 var _da_ = param[1], match = _da_[3], id = _da_[1];
 if(typeof match !== "number")
  switch(match[0]){
    case 0:
     var
      rem$0 = param[2],
      blocksize = match[1],
      _dc_ = sz + 1 | 0;
     return caml_cps_exact_call4
             (add_var,
              id,
              sz + 1 | 0,
              new_env,
              function(_do_){
               return caml_cps_exact_call4
                       (comp_init,
                        _do_,
                        _dc_,
                        rem$0,
                        function(_dp_){
                         return cont
                                 ([0, [15, [0, [0, blocksize]]], [0, _an_, [0, 0, _dp_]]]);
                        });
              });
    case 1:
     var
      rem$1 = param[2],
      offset = match[2],
      blocksize$0 = match[1],
      _dd_ = sz + 1 | 0;
     return caml_cps_exact_call4
             (add_var,
              id,
              sz + 1 | 0,
              new_env,
              function(_dm_){
               return caml_cps_exact_call4
                       (comp_init,
                        _dm_,
                        _dd_,
                        rem$1,
                        function(_dn_){
                         return cont
                                 ([0,
                                   [15, [0, [0, offset]]],
                                   [0,
                                    0,
                                    [0, [15, [0, [0, blocksize$0]]], [0, _ao_, [0, 0, _dn_]]]]]);
                        });
              });
    case 2:
     var
      rem$2 = param[2],
      blocksize$1 = match[1],
      _de_ = sz + 1 | 0;
     return caml_cps_exact_call4
             (add_var,
              id,
              sz + 1 | 0,
              new_env,
              function(_dk_){
               return caml_cps_exact_call4
                       (comp_init,
                        _dk_,
                        _de_,
                        rem$2,
                        function(_dl_){
                         return cont
                                 ([0, [15, [0, [0, blocksize$1]]], [0, _ap_, [0, 0, _dl_]]]);
                        });
              });
    default:
     var
      rem$3 = param[2],
      arity = match[2],
      blocksize$2 = match[1],
      _df_ = sz + 1 | 0;
     return caml_cps_exact_call4
             (add_var,
              id,
              sz + 1 | 0,
              new_env,
              function(_di_){
               return caml_cps_exact_call4
                       (comp_init,
                        _di_,
                        _df_,
                        rem$3,
                        function(_dj_){
                         return cont
                                 ([0,
                                   [15, [0, [0, arity]]],
                                   [0,
                                    0,
                                    [0, [15, [0, [0, blocksize$2]]], [0, _aq_, [0, 0, _dj_]]]]]);
                        });
              });
  }
 var rem = param[2], _db_ = sz + 1 | 0;
 return caml_cps_exact_call4
         (add_var,
          id,
          sz + 1 | 0,
          new_env,
          function(_dg_){
           return caml_cps_exact_call4
                   (comp_init,
                    _dg_,
                    _db_,
                    rem,
                    function(_dh_){return cont([0, _am_, [0, 0, _dh_]]);});
          });
}
function comp_nonrec(new_env, sz, i, param, cont){
 var i$0 = i, param$0 = param;
 for(;;){
  if(! param$0)
   return caml_cps_exact_call5
           (comp_rec, new_env, sz, ndecl, decl_size, cont);
  var _c__ = param$0[1], exp = _c__[2];
  if(typeof _c__[3] === "number"){
   var rem = param$0[2];
   return caml_cps_exact_call5
           (comp_nonrec,
            new_env,
            sz,
            i$0 - 1 | 0,
            rem,
            function(_c$_){
             return caml_cps_exact_call5
                     (comp_expr,
                      new_env,
                      exp,
                      sz,
                      [0, [4, i$0 - 1 | 0], _c$_],
                      cont);
            });
  }
  var
   rem$0 = param$0[2],
   i$1 = i$0 - 1 | 0,
   i$0 = i$1,
   param$0 = rem$0;
 }
}
function comp_rec(new_env, sz, i, param, cont$0){
 var i$0 = i, param$0 = param;
 for(;;){
  if(! param$0)
   return caml_cps_exact_call5
           (comp_expr,
            new_env,
            body$1,
            sz,
            add_pop(ndecl, cont),
            cont$0);
  var _c8_ = param$0[1], exp = _c8_[2];
  if(typeof _c8_[3] !== "number"){
   var rem$0 = param$0[2];
   return caml_cps_exact_call5
           (comp_rec,
            new_env,
            sz,
            i$0 - 1 | 0,
            rem$0,
            function(_c9_){
             return caml_cps_exact_call5
                     (comp_expr,
                      new_env,
                      exp,
                      sz,
                      [0, 0, [0, [1, i$0], [0, _ar_, _c9_]]],
                      cont$0);
            });
  }
  var
   rem = param$0[2],
   i$1 = i$0 - 1 | 0,
   i$0 = i$1,
   param$0 = rem;
 }
}
return caml_cps_exact_call4
        (comp_init, env, sz, decl_size, cont$0);
                                       });
                           });
                 });
       case 8:
        var p = exp[1];
        if(typeof p === "number")
         switch(p){
           case 2:
            var _a9_ = exp[2];
            if(_a9_ && ! _a9_[2]){
             var arg$0 = _a9_[1], cont$1 = add_const_unit(cont);
             return caml_cps_exact_call2(_a6_, cont$1, arg$0);
            }
            break;
           case 7:
            var args$2 = exp[2];
            return caml_cps_call2
                    (Stdlib_List[1],
                     args$2,
                     function(_cJ_){
                      var nargs = _cJ_ - 1 | 0;
                      if(2 === nargs){
                       check_stack(sz + 3 | 0);
                       return is_tailcall(cont)
                               ? caml_cps_exact_call5
                                 (comp_args,
                                  env,
                                  args$2,
                                  sz,
                                  [0, [37, sz + nargs | 0], discard_dead_code(cont)],
                                  cont$0)
                               : caml_cps_call2
                                 (Misc[1], cst_Reperform_used_in_non_tail, cont$0);
                      }
                      var raise = caml_pop_trap();
                      return raise
                              (caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1));
                     });
           case 8:
            var _a__ = exp[2];
            if(_a__){
             var _a$_ = _a__[2];
             if(_a$_ && ! _a$_[2]){
              var exp2 = _a$_[1], exp1 = _a__[1];
              if(cont){
               var match$1 = cont[1];
               if(typeof match$1 !== "number")
                switch(match$1[0]){
                  case 23:
                   var
                    cont1$0 = cont[2],
                    lbl$0 = match$1[1],
                    match$3 = label_code(cont1$0),
                    cont2 = match$3[2],
                    lbl2 = match$3[1];
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            exp2,
                            sz,
                            [0, [23, lbl$0], cont2],
                            function(_cI_){
                             var cont = [0, [24, lbl2], _cI_];
                             return caml_cps_exact_call2(_a6_, cont, exp1);
                            });
                  case 24:
                   var lbl$1 = match$1[1];
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            exp2,
                            sz,
                            cont,
                            function(_cH_){
                             var cont = [0, [24, lbl$1], _cH_];
                             return caml_cps_exact_call2(_a6_, cont, exp1);
                            });
                }
              }
              var
               match$2 = label_code(cont),
               cont1 = match$2[2],
               lbl = match$2[1];
              return caml_cps_exact_call5
                      (comp_expr,
                       env,
                       exp2,
                       sz,
                       cont1,
                       function(_cG_){
                        var cont = [0, [26, lbl], _cG_];
                        return caml_cps_exact_call2(_a6_, cont, exp1);
                       });
             }
            }
            break;
           case 9:
            var _ba_ = exp[2];
            if(_ba_){
             var _bb_ = _ba_[2];
             if(_bb_ && ! _bb_[2]){
              var exp2$0 = _bb_[1], exp1$0 = _ba_[1];
              if(cont){
               var match$4 = cont[1];
               if(typeof match$4 !== "number")
                switch(match$4[0]){
                  case 23:
                   var lbl$3 = match$4[1];
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            exp2$0,
                            sz,
                            cont,
                            function(_cF_){
                             var cont = [0, [23, lbl$3], _cF_];
                             return caml_cps_exact_call2(_a6_, cont, exp1$0);
                            });
                  case 24:
                   var
                    cont1$2 = cont[2],
                    lbl$4 = match$4[1],
                    match$6 = label_code(cont1$2),
                    cont2$0 = match$6[2],
                    lbl2$0 = match$6[1];
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            exp2$0,
                            sz,
                            [0, [24, lbl$4], cont2$0],
                            function(_cE_){
                             var cont = [0, [23, lbl2$0], _cE_];
                             return caml_cps_exact_call2(_a6_, cont, exp1$0);
                            });
                }
              }
              var
               match$5 = label_code(cont),
               cont1$1 = match$5[2],
               lbl$2 = match$5[1];
              return caml_cps_exact_call5
                      (comp_expr,
                       env,
                       exp2$0,
                       sz,
                       cont1$1,
                       function(_cD_){
                        var cont = [0, [25, lbl$2], _cD_];
                        return caml_cps_exact_call2(_a6_, cont, exp1$0);
                       });
             }
            }
            break;
           case 10:
            var _bc_ = exp[2];
            if(_bc_ && ! _bc_[2]){
             var arg$1 = _bc_[1];
             if(cont){
              var match$7 = cont[1];
              if(typeof match$7 !== "number")
               switch(match$7[0]){
                 case 23:
                  var cont1$3 = cont[2], lbl$5 = match$7[1];
                  return caml_cps_exact_call2
                          (_a6_, [0, [24, lbl$5], cont1$3], arg$1);
                 case 24:
                  var cont1$4 = cont[2], lbl$6 = match$7[1];
                  return caml_cps_exact_call2
                          (_a6_, [0, [23, lbl$6], cont1$4], arg$1);
               }
             }
             return caml_cps_exact_call2(_a6_, [0, 8, cont], arg$1);
            }
            break;
           case 12:
            var _bd_ = exp[2];
            if(_bd_){
             var _be_ = _bd_[2];
             if(_be_){
              var _bf_ = _be_[1];
              if(2 === _bf_[0]){
               var _bg_ = _bf_[1];
               if(0 === _bg_[0]){
                var _bh_ = _bg_[1];
                if(0 === _bh_[0] && ! _be_[2]){
                 var n = _bh_[1], arg$2 = _bd_[1];
                 if(is_immed(n)){
                  var cont$2 = [0, [32, n], cont];
                  return caml_cps_exact_call2(_a6_, cont$2, arg$2);
                 }
                }
               }
              }
             }
            }
            break;
           case 13:
            var _bi_ = exp[2];
            if(_bi_){
             var _bj_ = _bi_[2];
             if(_bj_){
              var _bk_ = _bj_[1];
              if(2 === _bk_[0]){
               var _bl_ = _bk_[1];
               if(0 === _bl_[0]){
                var _bm_ = _bl_[1];
                if(0 === _bm_[0] && ! _bj_[2]){
                 var n$0 = _bm_[1], arg$3 = _bi_[1];
                 if(is_immed(- n$0 | 0)){
                  var cont$3 = [0, [32, - n$0 | 0], cont];
                  return caml_cps_exact_call2(_a6_, cont$3, arg$3);
                 }
                }
               }
              }
             }
            }
            break;
           case 46:
            var _bn_ = exp[2];
            if(_bn_ && ! _bn_[2]){
             var arg$4 = _bn_[1];
             return caml_cps_exact_call2(_a6_, cont, arg$4);
            }
            break;
           case 4:
           case 6:
            var args$1 = exp[2];
            return caml_cps_call2
                    (Stdlib_List[1],
                     args$1,
                     function(_cC_){
                      var nargs = _cC_ - 1 | 0;
                      if(2 === nargs){
                       check_stack(sz + 4 | 0);
                       return is_tailcall(cont)
                               ? caml_cps_exact_call5
                                 (comp_args,
                                  env,
                                  args$1,
                                  sz,
                                  [0, [36, sz + nargs | 0], discard_dead_code(cont)],
                                  cont$0)
                               : caml_cps_exact_call5
                                 (comp_args, env, args$1, sz, [0, 28, cont], cont$0);
                      }
                      var raise = caml_pop_trap();
                      return raise
                              (caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1));
                     });
         }
        else
         switch(p[0]){
           case 2:
            var loc$0 = exp[3], args$3 = exp[2], tag = p[1];
            return caml_cps_exact_call4
                    (add_pseudo_event,
                     loc$0,
                     compunit_name[1],
                     cont,
                     function(cont){
                      return caml_cps_call2
                              (Stdlib_List[1],
                               args$3,
                               function(_cT_){
                                return caml_cps_exact_call5
(comp_args,
 env,
 args$3,
 sz,
 [0, [16, _cT_, tag], cont],
 cont$0);
                               });
                     });
           case 6:
            var loc$1 = exp[3], args$4 = exp[2], n$1 = p[1];
            return caml_cps_exact_call4
                    (add_pseudo_event,
                     loc$1,
                     compunit_name[1],
                     cont,
                     function(cont){
                      return caml_cps_exact_call5
                              (comp_args, env, args$4, sz, [0, [20, n$1], cont], cont$0);
                     });
           case 10:
            var _bo_ = exp[2];
            if(_bo_ && ! _bo_[2]){
             var
              arg$5 = _bo_[1],
              k = p[1],
              cont$4 = [0, [29, k], discard_dead_code(cont)];
             return caml_cps_exact_call2(_a6_, cont$4, arg$5);
            }
            break;
           case 13:
            var _bp_ = exp[2];
            if(_bp_){
             var _bq_ = _bp_[2];
             if(_bq_){
              var k$0 = _bq_[1];
              if(2 === k$0[0] && ! _bq_[2]){
               var arg$6 = _bp_[1], c = p[1];
               return caml_cps_call2
                       (Lambda[31],
                        c,
                        function(_cQ_){
                         var p = [13, _cQ_], args = [0, k$0, [0, arg$6, 0]];
                         return caml_cps_call2
                                 (Stdlib_List[1],
                                  args,
                                  function(_cR_){
                                   var nargs = _cR_ - 1 | 0;
                                   return caml_cps_exact_call4
   (comp_primitive,
    p,
    (sz + nargs | 0) - 1 | 0,
    args,
    function(_cS_){
     return caml_cps_exact_call5
             (comp_args, env, args, sz, [0, _cS_, cont], cont$0);
    });
                                  });
                        });
              }
             }
            }
            break;
           case 15:
            var _br_ = exp[2];
            if(_br_ && ! _br_[2]){
             var arg$7 = _br_[1], n$2 = p[1];
             if(! is_immed(n$2)){
              var cont$5 = [0, 0, [0, [15, [0, [0, n$2]]], [0, 12, cont]]];
              return caml_cps_exact_call2(_a6_, cont$5, arg$7);
             }
            }
            break;
           case 17:
            var args$5 = exp[2], cmp = p[1];
            switch(cmp){
              case 0:
               var cont$6 = [0, _au_, cont]; break;
              case 1:
               var cont$6 = [0, _av_, cont]; break;
              case 2:
               var cont$6 = [0, _aw_, cont]; break;
              case 3:
               var cont$6 = [0, _ax_, [0, 8, cont]]; break;
              case 4:
               var cont$6 = [0, _ay_, cont]; break;
              case 5:
               var cont$6 = [0, _az_, [0, 8, cont]]; break;
              case 6:
               var cont$6 = [0, _aA_, cont]; break;
              case 7:
               var cont$6 = [0, _aB_, [0, 8, cont]]; break;
              case 8:
               var cont$6 = [0, _aC_, cont]; break;
              default: var cont$6 = [0, _aD_, [0, 8, cont]];
            }
            return caml_cps_exact_call5
                    (comp_args, env, args$5, sz, cont$6, cont$0);
           case 18:
            var loc$2 = exp[3], args$6 = exp[2], kind = p[1];
            return caml_cps_exact_call4
                    (add_pseudo_event,
                     loc$2,
                     compunit_name[1],
                     cont,
                     function(cont){
                      if(kind){
                       if(3 <= kind)
                        return caml_cps_call2
                                (Stdlib_List[1],
                                 args$6,
                                 function(_cP_){
                                  return caml_cps_exact_call5
  (comp_args, env, args$6, sz, [0, [17, _cP_], cont], cont$0);
                                 });
                       var _cK_ = 0;
                       return caml_cps_call2
                               (Stdlib_List[1],
                                args$6,
                                function(_cO_){
                                 return caml_cps_exact_call5
 (comp_args,
  env,
  args$6,
  sz,
  [0, [16, _cO_, _cK_], cont],
  cont$0);
                                });
                      }
                      if(0 === args$6) return cont$0([0, _aE_, cont]);
                      var _cL_ = [0, _aF_, cont], _cM_ = 0;
                      return caml_cps_call2
                              (Stdlib_List[1],
                               args$6,
                               function(_cN_){
                                return caml_cps_exact_call5
(comp_args,
 env,
 args$6,
 sz,
 [0, [16, _cN_, _cM_], _cL_],
 cont$0);
                               });
                     });
           case 19:
            var kind$0 = p[1], _bs_ = exp[2];
            a:
            if(_bs_){
             var arg$8 = _bs_[1], mutability = p[2];
             if(8 === arg$8[0]){
              var _bt_ = arg$8[1];
              if(typeof _bt_ !== "number" && 18 === _bt_[0]){
               if(_bs_[2]) break a;
               var loc$4 = exp[3], args$7 = arg$8[2], kind$1 = _bt_[1];
               if(kind$0 === kind$1){
                var exp$0 = [8, [18, kind$0, mutability], args$7, loc$4];
                return caml_cps_exact_call2(_a6_, cont, exp$0);
               }
               var raise$0 = caml_pop_trap();
               return raise$0
                       (caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1));
              }
             }
             if(! _bs_[2]){
              var loc$3 = exp[3];
              return caml_cps_call4
                      (Primitive[1],
                       cst_caml_obj_dup,
                       1,
                       1,
                       function(prim_obj_dup){
                        var exp = [8, [9, prim_obj_dup], [0, arg$8, 0], loc$3];
                        return caml_cps_exact_call2(_a6_, cont, exp);
                       });
             }
            }
            return caml_cps_call2
                    (Misc[1], cst_Bytegen_comp_expr_Pduparra, cont$0);
         }
        var args$0 = exp[2];
        return caml_cps_call2
                (Stdlib_List[1],
                 args$0,
                 function(_cA_){
                  var nargs = _cA_ - 1 | 0;
                  return caml_cps_exact_call4
                          (comp_primitive,
                           p,
                           (sz + nargs | 0) - 1 | 0,
                           args$0,
                           function(_cB_){
                            return caml_cps_exact_call5
                                    (comp_args, env, args$0, sz, [0, _cB_, cont], cont$0);
                           });
                 });
       case 9:
        var
         sw = exp[2],
         arg$9 = exp[1],
         match$8 = make_branch(cont),
         cont1$5 = match$8[2],
         branch = match$8[1],
         c$0 = [0, discard_dead_code(cont1$5)];
        return caml_cps_call2
                (Storer[1],
                 0,
                 function(store){
                  var
                   act_consts = caml_make_vect(sw[1], 0),
                   act_blocks = caml_make_vect(sw[3], 0),
                   match = sw[5];
                  function _cg_(_ch_){
                   return caml_cps_call3
                           (Stdlib_List[17],
                            function(param, cont){
                             var act = param[2], n = param[1];
                             return caml_cps_call3
                                     (store[3],
                                      0,
                                      act,
                                      function(_cz_){
                                       caml_check_bound(act_consts, n)[1 + n] = _cz_;
                                       return cont(0);
                                      });
                            },
                            sw[2],
                            function(_ci_){
                             return caml_cps_call3
                                     (Stdlib_List[17],
                                      function(param, cont){
                                       var act = param[2], n = param[1];
                                       return caml_cps_call3
       (store[3],
        0,
        act,
        function(_cy_){
         caml_check_bound(act_blocks, n)[1 + n] = _cy_;
         return cont(0);
        });
                                      },
                                      sw[4],
                                      function(_cj_){
                                       return caml_cps_call2
       (store[1],
        0,
        function(acts){
         var
          lbls = caml_make_vect(acts.length - 1, 0),
          _ck_ = acts.length - 1 - 1 | 0;
         function _cm_(i){
          var _cv_ = [0, branch, c$0[1]];
          return caml_cps_exact_call5
                  (comp_expr,
                   env,
                   caml_check_bound(acts, i)[1 + i],
                   sz,
                   _cv_,
                   function(_cw_){
                    var match = label_code(_cw_), c1 = match[2], lbl = match[1];
                    caml_check_bound(lbls, i)[1 + i] = lbl;
                    c$0[1] = discard_dead_code(c1);
                    var _cx_ = i - 1 | 0;
                    return 0 !== i ? caml_cps_exact_call1(_cm_, _cx_) : _cl_();
                   });
         }
         function _cl_(){
          var
           lbl_blocks = caml_make_vect(sw[3], 0),
           _cn_ = sw[3] - 1 | 0;
          if(_cn_ >= 0){
           var i$0 = _cn_;
           for(;;){
            var
             _cs_ = caml_check_bound(act_blocks, i$0)[1 + i$0],
             _ct_ = caml_check_bound(lbls, _cs_)[1 + _cs_];
            caml_check_bound(lbl_blocks, i$0)[1 + i$0] = _ct_;
            var _cu_ = i$0 - 1 | 0;
            if(0 === i$0) break;
            var i$0 = _cu_;
           }
          }
          var
           lbl_consts = caml_make_vect(sw[1], 0),
           _co_ = sw[1] - 1 | 0;
          if(_co_ >= 0){
           var i = _co_;
           for(;;){
            var
             _cp_ = caml_check_bound(act_consts, i)[1 + i],
             _cq_ = caml_check_bound(lbls, _cp_)[1 + _cp_];
            caml_check_bound(lbl_consts, i)[1 + i] = _cq_;
            var _cr_ = i - 1 | 0;
            if(0 === i) break;
            var i = _cr_;
           }
          }
          var cont = [0, [27, lbl_consts, lbl_blocks], c$0[1]];
          return caml_cps_exact_call2(_a6_, cont, arg$9);
         }
         return _ck_ < 0 ? _cl_() : _cm_(_ck_);
        });
                                      });
                            });
                  }
                  if(! match) return _cg_(0);
                  var fail = match[1];
                  return caml_cps_call3(store[3], 0, fail, _cg_);
                 });
       case 10:
        var loc$5 = exp[4], d = exp[3], sw$0 = exp[2], arg$10 = exp[1];
        return caml_cps_call5
                (Matching[8],
                 loc$5,
                 arg$10,
                 sw$0,
                 d,
                 function(exp){return caml_cps_exact_call2(_a6_, cont, exp);});
       case 11:
        var args$8 = exp[2], i = exp[1], cont$7 = discard_dead_code(cont);
        return caml_cps_exact_call2
                (find_raise_label,
                 i,
                 function(match$0){
                  var tb = match$0[3], size = match$0[2], label = match$0[1];
                  a:
                  {
                   if(cont$7){
                    var match = cont$7[1];
                    if(typeof match !== "number" && 0 === match[0]){
                     var label0 = match[1];
                     if(label === label0){var cont = cont$7; break a;}
                    }
                   }
                   var cont = [0, [22, label], cont$7];
                  }
                  function loop(sz, tbb){
                   if(tb === tbb) return add_pop(sz - size | 0, cont);
                   if(! tbb)
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aH_], 1);
                   var tbb$0 = tbb[2], try_sz = tbb[1];
                   return add_pop
                           ((sz - try_sz | 0) - 4 | 0, [0, 9, loop(try_sz, tbb$0)]);
                  }
                  var cont$1 = loop(sz, try_blocks[1]);
                  if(args$8 && ! args$8[2]){
                   var arg = args$8[1];
                   return caml_cps_exact_call2(_a6_, cont$1, arg);
                  }
                  return caml_cps_call2
                          (Stdlib_List[9],
                           args$8,
                           function(_cf_){
                            return caml_cps_exact_call6
                                    (comp_expr_list_assign, env, _cf_, sz, size, cont$1, cont$0);
                           });
                 });
       case 12:
        var
         handler = exp[3],
         match$9 = exp[2],
         vars = match$9[2],
         i$0 = match$9[1],
         body$2 = exp[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_ce_, cont){return cont(_ce_[1]);},
                 vars,
                 function(vars){
                  return caml_cps_call2
                          (Stdlib_List[1],
                           vars,
                           function(nvars){
                            var
                             match = make_branch(cont),
                             cont1 = match[2],
                             branch1 = match[1];
                            function _b9_(r){
                             return caml_cps_call2
                                     (Stdlib_List[6],
                                      sz_static_raises[1],
                                      function(_cd_){
                                       sz_static_raises[1] = _cd_;
                                       return cont$0(r);
                                      });
                            }
                            if(1 !== nvars){
                             var _b7_ = add_pop(nvars, cont1), _b8_ = sz + nvars | 0;
                             return caml_cps_exact_call4
                                     (add_vars,
                                      vars,
                                      sz + 1 | 0,
                                      env,
                                      function(_ca_){
                                       return caml_cps_exact_call5
       (comp_expr,
        _ca_,
        handler,
        _b8_,
        _b7_,
        function(_cb_){
         var
          match = label_code(_cb_),
          cont2 = match[2],
          lbl_handler = match[1];
         push_static_raise(i$0, lbl_handler, sz + nvars | 0);
         return caml_cps_exact_call5
                 (comp_expr,
                  env,
                  body$2,
                  sz + nvars | 0,
                  add_pop(nvars, [0, branch1, cont2]),
                  function(_cc_){return _b9_(push_dummies(nvars, _cc_));});
        });
                                      });
                            }
                            if(vars && ! vars[2]){
                             var
                              var$0 = vars[1],
                              _b5_ = add_pop(1, cont1),
                              _b6_ = sz + 1 | 0;
                             return caml_cps_exact_call4
                                     (add_var,
                                      var$0,
                                      sz + 1 | 0,
                                      env,
                                      function(_b__){
                                       return caml_cps_exact_call5
       (comp_expr,
        _b__,
        handler,
        _b6_,
        _b5_,
        function(_b$_){
         var
          match = label_code([0, 0, _b$_]),
          cont2 = match[2],
          lbl_handler = match[1];
         push_static_raise(i$0, lbl_handler, sz);
         return caml_cps_exact_call5
                 (comp_expr, env, body$2, sz, [0, branch1, cont2], _b9_);
        });
                                      });
                            }
                            var raise = caml_pop_trap();
                            return raise
                                    (caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1));
                           });
                 });
       case 13:
        var
         handler$0 = exp[3],
         id$1 = exp[2],
         body$3 = exp[1],
         match$10 = make_branch(cont),
         cont1$6 = match$10[2],
         branch1 = match$10[1],
         lbl_handler = new_label(undef),
         _bu_ = add_pop(1, cont1$6),
         _bv_ = sz + 1 | 0;
        return caml_cps_exact_call4
                (add_var,
                 id$1,
                 sz + 1 | 0,
                 env,
                 function(_b2_){
                  return caml_cps_exact_call5
                          (comp_expr,
                           _b2_,
                           handler$0,
                           _bv_,
                           _bu_,
                           function(_b3_){
                            var
                             body_cont =
                               [0, 9, [0, branch1, [0, [0, lbl_handler], [0, 0, _b3_]]]];
                            try_blocks[1] = [0, sz, try_blocks[1]];
                            return caml_cps_exact_call5
                                    (comp_expr,
                                     env,
                                     body$3,
                                     sz + 4 | 0,
                                     body_cont,
                                     function(l){
                                      return caml_cps_call2
      (Stdlib_List[6],
       try_blocks[1],
       function(_b4_){
        try_blocks[1] = _b4_;
        return cont$0([0, [28, lbl_handler], l]);
       });
                                     });
                           });
                 });
       case 14:
        var ifnot = exp[3], ifso = exp[2], cond = exp[1];
        if(! caml_equal(ifnot, [2, Lambda[8]]))
         return caml_cps_exact_call3
                 (code_as_jump,
                  ifso,
                  sz,
                  function(match){
                   if(! match)
                    return caml_cps_exact_call3
                            (code_as_jump,
                             ifnot,
                             sz,
                             function(match){
                              if(match){
                               var label = match[1];
                               return caml_cps_exact_call5
                                       (comp_expr,
env,
ifso,
sz,
cont,
function(cont){
 return caml_cps_exact_call2
         (_a6_, [0, [24, label], cont], cond);
});
                              }
                              var
                               match$0 = make_branch(cont),
                               cont1 = match$0[2],
                               branch_end = match$0[1];
                              return caml_cps_exact_call5
                                      (comp_expr,
                                       env,
                                       ifnot,
                                       sz,
                                       cont1,
                                       function(_b0_){
var
 match = label_code(_b0_),
 cont2 = match[2],
 lbl_not = match[1];
return caml_cps_exact_call5
        (comp_expr,
         env,
         ifso,
         sz,
         [0, branch_end, cont2],
         function(_b1_){
          return caml_cps_exact_call2
                  (_a6_, [0, [24, lbl_not], _b1_], cond);
         });
                                       });
                             });
                   var label = match[1];
                   return caml_cps_exact_call5
                           (comp_expr,
                            env,
                            ifnot,
                            sz,
                            cont,
                            function(cont){
                             return caml_cps_exact_call2
                                     (_a6_, [0, [23, label], cont], cond);
                            });
                  });
        var
         match$12 = label_code(cont),
         cont1$7 = match$12[2],
         lbl_end = match$12[1];
        return caml_cps_exact_call5
                (comp_expr,
                 env,
                 ifso,
                 sz,
                 cont1$7,
                 function(_bZ_){
                  return caml_cps_exact_call2
                          (_a6_, [0, [26, lbl_end], _bZ_], cond);
                 });
       case 15:
        var exp2$1 = exp[2], exp1$1 = exp[1];
        return caml_cps_exact_call5
                (comp_expr,
                 env,
                 exp2$1,
                 sz,
                 cont,
                 function(cont){
                  return caml_cps_exact_call2(_a6_, cont, exp1$1);
                 });
       case 16:
        var
         body$4 = exp[2],
         cond$0 = exp[1],
         lbl_loop = new_label(undef),
         lbl_test = new_label(undef);
        return caml_cps_exact_call5
                (comp_expr,
                 env,
                 cond$0,
                 sz,
                 [0, [23, lbl_loop], add_const_unit(cont)],
                 function(_bX_){
                  return caml_cps_exact_call5
                          (comp_expr,
                           env,
                           body$4,
                           sz,
                           [0, [0, lbl_test], _bX_],
                           function(_bY_){
                            return cont$0
                                    ([0, [22, lbl_test], [0, [0, lbl_loop], [0, 10, _bY_]]]);
                           });
                 });
       case 17:
        var
         body$5 = exp[5],
         dir = exp[4],
         stop = exp[3],
         start = exp[2],
         param = exp[1],
         lbl_loop$0 = new_label(undef),
         lbl_exit = new_label(undef),
         offset = dir ? -1 : 1,
         comp = dir ? 2 : 3,
         _bw_ =
           [0,
            _aM_,
            [0,
             0,
             [0,
              [32, offset],
              [0,
               _aL_,
               [0,
                _aK_,
                [0,
                 _aJ_,
                 [0,
                  [23, lbl_loop$0],
                  [0, [0, lbl_exit], add_const_unit(add_pop(2, cont))]]]]]]]],
         _bx_ = sz + 2 | 0;
        return caml_cps_exact_call4
                (add_var,
                 param,
                 sz + 1 | 0,
                 env,
                 function(_bU_){
                  return caml_cps_exact_call5
                          (comp_expr,
                           _bU_,
                           body$5,
                           _bx_,
                           _bw_,
                           function(_bV_){
                            return caml_cps_exact_call5
                                    (comp_expr,
                                     env,
                                     stop,
                                     sz + 1 | 0,
                                     [0,
                                      0,
                                      [0,
                                       0,
                                       [0,
_aN_,
[0,
 [31, comp],
 [0, [23, lbl_exit], [0, [0, lbl_loop$0], [0, 10, _bV_]]]]]]],
                                     function(_bW_){
                                      var cont = [0, 0, _bW_];
                                      return caml_cps_exact_call2(_a6_, cont, start);
                                     });
                           });
                 });
       case 18:
        var expr = exp[2], id$2 = exp[1];
        caml_push_trap
         (function(_bT_){
           if(_bT_ === Stdlib[8])
            return caml_cps_call2
                    (Misc[1], cst_Bytegen_comp_expr_assign, cont$0);
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_bT_, 0));
          });
        return caml_cps_call3
                (Ident[29],
                 id$2,
                 env[1],
                 function(pos){
                  return caml_cps_exact_call5
                          (comp_expr,
                           env,
                           expr,
                           sz,
                           [0, [4, sz - pos | 0], cont],
                           function(_bS_){caml_pop_trap(); return cont$0(_bS_);});
                 });
       case 19:
        var args$9 = exp[4], obj = exp[3], met = exp[2], kind$2 = exp[1];
        if(2 !== kind$2)
         return caml_cps_call2
                 (Stdlib_List[1],
                  args$9,
                  function(_bP_){
                   var nargs = _bP_ + 1 | 0;
                   a:
                   if(0 === kind$2)
                    var args = [0, met, [0, obj, args$9]], getmethod = 25;
                   else{
                    if(2 === met[0]){
                     var _bQ_ = met[1];
                     if(0 === _bQ_[0]){
                      var match$0 = _bQ_[1];
                      if(0 === match$0[0]){
                       var
                        n = match$0[1],
                        args = [0, obj, args$9],
                        getmethod = [34, n];
                       break a;
                      }
                     }
                    }
                    var
                     args$0 = [0, met, [0, obj, args$9]],
                     args = args$0,
                     getmethod = 26;
                   }
                   if(is_tailcall(cont))
                    return caml_cps_exact_call5
                            (comp_args,
                             env,
                             args,
                             sz,
                             [0,
                              getmethod,
                              [0, [7, nargs, sz + nargs | 0], discard_dead_code(cont)]],
                             cont$0);
                   if(4 > nargs)
                    return caml_cps_exact_call5
                            (comp_args,
                             env,
                             args,
                             sz,
                             [0, getmethod, [0, [6, nargs], cont]],
                             cont$0);
                   var
                    match = label_code(cont),
                    cont1 = match[2],
                    lbl = match[1];
                   return caml_cps_exact_call5
                           (comp_args,
                            env,
                            args,
                            sz + 3 | 0,
                            [0, getmethod, [0, [6, nargs], cont1]],
                            function(_bR_){return cont$0([0, [5, lbl], _bR_]);});
                  });
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1));
       case 20:
        var
         lev = exp[2],
         lam = exp[1],
         match$11 = lev[1],
         _by_ =
           function(ev_defname){
            function event(kind, info, cont){
             var _bK_ = lev[3];
             if(_bK_)
              var
               repr = _bK_[1],
               _bL_ =
                 1 === repr[1]
                  ? 1 === lev[2] ? [1, repr] : [0, repr]
                  : 1 === lev[2] ? [0, repr] : [1, repr];
             else
              var _bL_ = 0;
             var _bM_ = Subst[1];
             return caml_cps_call2
                     (Env[122],
                      lev[4],
                      function(_bN_){
                       return caml_cps_call2
                               (Debuginfo[1][9],
                                lev[1],
                                function(_bO_){
                                 return cont
 ([0,
   0,
   compunit_name[1],
   _bO_,
   kind,
   ev_defname,
   info,
   _bN_,
   _bM_,
   env,
   sz,
   _bL_]);
                                });
                      });
            }
            var match = lev[2];
            if(typeof match === "number")
             switch(match){
               case 0:
                return caml_cps_exact_call5
                        (comp_expr,
                         env,
                         lam,
                         sz,
                         cont,
                         function(c){
                          return caml_cps_exact_call3
                                  (event,
                                   0,
                                   1,
                                   function(ev){
                                    return caml_cps_exact_call3(add_event, ev, c, cont$0);
                                   });
                         });
               case 1:
                return caml_cps_exact_call5
                        (comp_expr,
                         env,
                         lam,
                         sz,
                         cont,
                         function(c){
                          return caml_cps_exact_call3
                                  (event,
                                   1,
                                   0,
                                   function(ev){
                                    return caml_cps_exact_call3(add_event, ev, c, cont$0);
                                   });
                         });
               default:
                return caml_cps_exact_call5
                        (comp_expr,
                         env,
                         lam,
                         sz,
                         cont,
                         function(c){
                          return caml_cps_exact_call3
                                  (event,
                                   1,
                                   1,
                                   function(ev){
                                    return caml_cps_exact_call3(add_event, ev, c, cont$0);
                                   });
                         });
             }
            if(0 !== match[0]) return caml_cps_exact_call2(_a6_, cont, lam);
            var ty = match[1];
            a:
            if(8 === lam[0]){
             var prim = lam[1];
             b:
             if(typeof prim === "number"){
              if(10 <= prim){
               if(46 !== prim) break b;
              }
              else if(4 > prim) break b;
              var preserve_tailcall = 1;
              break a;
             }
             var preserve_tailcall = 0;
            }
            else
             var preserve_tailcall = 1;
            if(preserve_tailcall && is_tailcall(cont))
             return caml_cps_exact_call2(_a6_, cont, lam);
            function _bG_(info){
             return caml_cps_exact_call3
                     (event,
                      [0, ty],
                      info,
                      function(ev){
                       return caml_cps_exact_call3
                               (add_event,
                                ev,
                                cont,
                                function(cont1){
                                 return caml_cps_exact_call2(_a6_, cont1, lam);
                                });
                      });
            }
            switch(lam[0]){
              case 3:
               var args = lam[1][2];
               return caml_cps_call2
                       (Stdlib_List[1],
                        args,
                        function(_bJ_){return _bG_([0, _bJ_]);});
              case 8:
               var args$0 = lam[2];
               return caml_cps_call2
                       (Stdlib_List[1],
                        args$0,
                        function(_bI_){return _bG_([0, _bI_]);});
              case 19:
               var args$1 = lam[4];
               return caml_cps_call2
                       (Stdlib_List[1],
                        args$1,
                        function(_bH_){return _bG_([0, _bH_ + 1 | 0]);});
              default: return _bG_(1);
            }
           };
        if(! match$11) return _by_(cst$0);
        var scopes = match$11[2];
        return caml_cps_call2(Debuginfo[1][1], scopes, _by_);
       case 21:
        var exp$1 = exp[2]; return caml_cps_exact_call2(_a6_, cont, exp$1);
       default:
        var id = exp[1];
        caml_push_trap
         (function(_bB_){
           if(_bB_ === Stdlib[8]){
            caml_push_trap
             (function(_bC_){
               if(_bC_ === Stdlib[8]){
                caml_push_trap
                 (function(_bD_){
                   if(_bD_ === Stdlib[8])
                    return caml_cps_call2
                            (Ident[16],
                             id,
                             function(_bE_){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       cst_Bytegen_comp_expr_var,
                                       _bE_,
                                       function(_bF_){
return caml_cps_call2(Misc[1], _bF_, cont$0);
                                       });
                             });
                   var raise = caml_pop_trap();
                   return raise(caml_maybe_attach_backtrace(_bD_, 0));
                  });
                return caml_cps_call3
                        (Ident[29],
                         id,
                         env[3],
                         function(ofs){
                          caml_pop_trap();
                          return cont$0([0, [12, ofs], cont]);
                         });
               }
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_bC_, 0));
              });
            return caml_cps_call3
                    (Ident[29],
                     id,
                     env[2],
                     function(pos){
                      caml_pop_trap();
                      return cont$0([0, [2, pos], cont]);
                     });
           }
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_bB_, 0));
          });
        return caml_cps_call3
                (Ident[29],
                 id,
                 env[1],
                 function(pos){
                  caml_pop_trap();
                  return cont$0([0, [1, sz - pos | 0], cont]);
                 });
     }
     var _a7_ = add_pop(1, cont), _a8_ = sz + 1 | 0;
     return caml_cps_exact_call4
             (add_var,
              id$0,
              sz + 1 | 0,
              env,
              function(_bz_){
               return caml_cps_exact_call5
                       (comp_expr,
                        _bz_,
                        body$0,
                        _a8_,
                        _a7_,
                        function(_bA_){
                         var cont = [0, 0, _bA_];
                         return caml_cps_exact_call2(_a6_, cont, arg);
                        });
              });
    }
    return _a6_(cont, exp);
   }
   function comp_args(env, argl, sz, cont, cont$0){
    return caml_cps_call2
            (Stdlib_List[9],
             argl,
             function(_a5_){
              return caml_cps_exact_call5
                      (comp_expr_list, env, _a5_, sz, cont, cont$0);
             });
   }
   function comp_expr_list(env, exprl, sz, cont, cont$0){
    if(! exprl) return cont$0(cont);
    var exp = exprl[1];
    if(! exprl[2])
     return caml_cps_exact_call5(comp_expr, env, exp, sz, cont, cont$0);
    var rem = exprl[2];
    return caml_cps_exact_call5
            (comp_expr_list,
             env,
             rem,
             sz + 1 | 0,
             cont,
             function(_a4_){
              return caml_cps_exact_call5
                      (comp_expr, env, exp, sz, [0, 0, _a4_], cont$0);
             });
   }
   function comp_expr_list_assign(env, exprl, sz, pos, cont, cont$0){
    if(! exprl) return cont$0(cont);
    var rem = exprl[2], exp = exprl[1];
    return caml_cps_exact_call6
            (comp_expr_list_assign,
             env,
             rem,
             sz,
             pos - 1 | 0,
             cont,
             function(_a3_){
              return caml_cps_exact_call5
                      (comp_expr,
                       env,
                       exp,
                       sz,
                       [0, [4, sz - pos | 0], _a3_],
                       cont$0);
             });
   }
   function comp_block(env, exp, sz, cont, cont$0){
    max_stack_used[1] = 0;
    return caml_cps_exact_call5
            (comp_expr,
             env,
             exp,
             sz,
             cont,
             function(code){
              var used_safe = max_stack_used[1] + Config[38] | 0;
              return Config[37] < used_safe
                      ? cont$0([0, [15, [0, [0, used_safe]]], [0, _aP_, code]])
                      : cont$0(code);
             });
   }
   function comp_remainder(cont, cont$0){
    var c = [0, cont];
    function _aW_(){
     var cont = c[1];
     return caml_cps_call2
             (Stdlib_Stack[4],
              functions_to_compile,
              function(tc){
               return caml_cps_call2
                       (Stdlib_List[1],
                        tc[1],
                        function(arity){
                         function positions(pos, delta, param, cont){
                          if(! param) return cont(Ident[27]);
                          var rem = param[2], id = param[1];
                          return caml_cps_exact_call4
                                  (positions,
                                   pos + delta | 0,
                                   delta,
                                   rem,
                                   function(_a2_){
                                    return caml_cps_call4(Ident[28], id, pos, _a2_, cont);
                                   });
                         }
                         return caml_cps_exact_call4
                                 (positions,
                                  -3 * tc[7] | 0,
                                  3,
                                  tc[6],
                                  function(_aY_){
                                   return caml_cps_exact_call4
   (positions,
    (3 * (tc[5] - tc[7] | 0) | 0) - 1 | 0,
    1,
    tc[4],
    function(_aZ_){
     return caml_cps_exact_call4
             (positions,
              arity,
              -1,
              tc[1],
              function(_a0_){
               var env = [0, _a0_, _aZ_, _aY_];
               return caml_cps_exact_call5
                       (comp_block,
                        env,
                        tc[2],
                        arity,
                        [0, [8, arity], cont],
                        function(cont){
                         var
                          _a1_ =
                            1 < arity
                             ? [0, 1, [0, [0, tc[3]], [0, [9, arity - 1 | 0], cont]]]
                             : [0, [0, tc[3]], cont];
                         c[1] = _a1_;
                         return caml_cps_exact_call0(_aW_);
                        });
              });
    });
                                  });
                        });
              });
    }
    caml_push_trap
     (function(_aX_){
       if(_aX_ === Stdlib_Stack[1]) return cont$0(c[1]);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_aX_, 0));
      });
    return _aW_();
   }
   function compile_implementation(modulename, expr, cont){
    return caml_cps_call2
            (Stdlib_Stack[8],
             functions_to_compile,
             function(_aT_){
              label_counter[1] = 0;
              sz_static_raises[1] = 0;
              compunit_name[1] = modulename;
              return caml_cps_exact_call5
                      (comp_block,
                       empty_env,
                       expr,
                       0,
                       0,
                       function(init_code){
                        return caml_cps_call2
                                (Stdlib_Stack[11],
                                 functions_to_compile,
                                 function(_aU_){
                                  if(0 >= _aU_) return cont(init_code);
                                  var lbl_init = new_label(undef);
                                  return caml_cps_exact_call2
  (comp_remainder,
   [0, [0, lbl_init], init_code],
   function(_aV_){return cont([0, [22, lbl_init], _aV_]);});
                                 });
                       });
             });
   }
   function compile_phrase(expr, cont){
    return caml_cps_call2
            (Stdlib_Stack[8],
             functions_to_compile,
             function(_aS_){
              label_counter[1] = 0;
              sz_static_raises[1] = 0;
              return caml_cps_exact_call5
                      (comp_block,
                       empty_env,
                       expr,
                       1,
                       _aQ_,
                       function(init_code){
                        return caml_cps_exact_call2
                                (comp_remainder,
                                 0,
                                 function(fun_code){return cont([0, init_code, fun_code]);});
                       });
             });
   }
   function reset(param, cont){
    label_counter[1] = 0;
    sz_static_raises[1] = 0;
    compunit_name[1] = cst$1;
    return caml_cps_call2
            (Stdlib_Stack[8],
             functions_to_compile,
             function(_aR_){max_stack_used[1] = 0; return cont(0);});
   }
   var
    Bytegen = [0, compile_implementation, compile_phrase, reset, merge_events];
   runtime.caml_register_global(159, Bytegen, "Bytegen");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Printinstr
//# unitInfo: Requires: Ident, Lambda, Printlambda, Stdlib__Array, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_addint = "\taddint",
    cst_andint = "\tandint",
    cst_asrint = "\tasrint",
    cst_boolnot = "\tboolnot",
    cst_check_signals = "\tcheck_signals",
    cst_closurerec = "\tclosurerec",
    cst_divint = "\tdivint",
    cst_eqint = "\teqint",
    cst_geint = "\tgeint",
    cst_getbyteschar = "\tgetbyteschar",
    cst_getdynmet = "\tgetdynmet",
    cst_getmethod = "\tgetmethod",
    cst_getstringchar = "\tgetstringchar",
    cst_getvectitem = "\tgetvectitem",
    cst_gtint = "\tgtint",
    cst_isint = "\tisint",
    cst_isout = "\tisout",
    cst_leint = "\tleint",
    cst_lslint = "\tlslint",
    cst_lsrint = "\tlsrint",
    cst_ltint = "\tltint",
    cst_modint = "\tmodint",
    cst_mulint = "\tmulint",
    cst_negint = "\tnegint",
    cst_neqint = "\tneqint",
    cst_orint = "\torint",
    cst_perform = "\tperform",
    cst_poptrap = "\tpoptrap",
    cst_push = "\tpush",
    cst_restart = "\trestart",
    cst_resume = "\tresume",
    cst_setbyteschar = "\tsetbyteschar",
    cst_setvectitem = "\tsetvectitem",
    cst_stop = "\tstop",
    cst_subint = "\tsubint",
    cst_vectlength = "\tvectlength",
    cst_xorint = "\txorint",
    cst$0 = ", ",
    cst_10 = "<10>",
    cst_v_0 = "<v 0>",
    cst = "@ ";
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 7
              ? f(a0, a1, a2, a3, a4, a5, a6)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/printinstr.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x01s\0\0\0K\0\0\x01\x16\0\0\x01\x07\xa0*Printinstr\xa0\xb0\xa0+instruction\x01\x01\xb1\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\xc1@\xc0\xb3\xa1\x90\x92(Instruct+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xf6@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\xb0\xc07bytecomp/printinstr.mliV\x01\x04}\x01\x04}\xc0\x04\x02V\x01\x04}\x01\x04\xae@@\xa1\x04'@@\xa0\xb0\xa0)instrlist\x01\x01\xb2\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x04&\x04#)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\xa1\x04(+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xfa@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\x04&@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04$W\x01\x04\xaf\x01\x04\xaf\xc0\x04%W\x01\x04\xaf\x01\x04\xe3@@\xa1\x04JA@@\x84\x95\xa6\xbe\0\0\x04\xed\0\0\0\xc8\0\0\x02\xdb\0\0\x02S\xa0\xa0*Printinstr\x900\x18\x8b\xd9\x12\xe2\xe2,+\x82\x14\x9c{\xcc\xa4j\xbf\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0(Instruct\x900d\xcb\x7f\xe8\xf2\xe6\x0fx\x1e\x1a\tpX\x13\xabf\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Ident = global_data.Ident,
    Printlambda = global_data.Printlambda,
    Lambda = global_data.Lambda,
    _a_ = [0, [11, cst_push, 0], cst_push],
    _b_ = [0, [11, cst_restart, 0], cst_restart],
    _c_ = [0, [11, cst_vectlength, 0], cst_vectlength],
    _d_ = [0, [11, cst_getvectitem, 0], cst_getvectitem],
    _e_ = [0, [11, cst_setvectitem, 0], cst_setvectitem],
    _f_ = [0, [11, cst_getstringchar, 0], cst_getstringchar],
    _g_ = [0, [11, cst_getbyteschar, 0], cst_getbyteschar],
    _h_ = [0, [11, cst_setbyteschar, 0], cst_setbyteschar],
    _i_ = [0, [11, cst_boolnot, 0], cst_boolnot],
    _j_ = [0, [11, cst_poptrap, 0], cst_poptrap],
    _k_ = [0, [11, cst_check_signals, 0], cst_check_signals],
    _l_ = [0, [11, cst_negint, 0], cst_negint],
    _m_ = [0, [11, cst_addint, 0], cst_addint],
    _n_ = [0, [11, cst_subint, 0], cst_subint],
    _o_ = [0, [11, cst_mulint, 0], cst_mulint],
    _p_ = [0, [11, cst_divint, 0], cst_divint],
    _q_ = [0, [11, cst_modint, 0], cst_modint],
    _r_ = [0, [11, cst_andint, 0], cst_andint],
    _s_ = [0, [11, cst_orint, 0], cst_orint],
    _t_ = [0, [11, cst_xorint, 0], cst_xorint],
    _u_ = [0, [11, cst_lslint, 0], cst_lslint],
    _v_ = [0, [11, cst_lsrint, 0], cst_lsrint],
    _w_ = [0, [11, cst_asrint, 0], cst_asrint],
    _x_ = [0, [11, cst_isint, 0], cst_isint],
    _y_ = [0, [11, cst_isout, 0], cst_isout],
    _z_ = [0, [11, cst_getmethod, 0], cst_getmethod],
    _A_ = [0, [11, cst_getdynmet, 0], cst_getdynmet],
    _B_ = [0, [11, cst_perform, 0], cst_perform],
    _C_ = [0, [11, cst_resume, 0], cst_resume],
    _D_ = [0, [11, cst_stop, 0], cst_stop],
    _E_ = [0, [12, 76, [4, 3, 0, 0, [12, 58, 0]]], "L%i:"],
    _F_ = [0, [11, "\tacc ", [4, 3, 0, 0, 0]], "\tacc %i"],
    _G_ = [0, [11, "\tenvacc ", [4, 3, 0, 0, 0]], "\tenvacc %i"],
    _H_ = [0, [11, "\tpop ", [4, 3, 0, 0, 0]], "\tpop %i"],
    _I_ = [0, [11, "\tassign ", [4, 3, 0, 0, 0]], "\tassign %i"],
    _J_ = [0, [11, "\tpush_retaddr L", [4, 3, 0, 0, 0]], "\tpush_retaddr L%i"],
    _K_ = [0, [11, "\tapply ", [4, 3, 0, 0, 0]], "\tapply %i"],
    _L_ =
      [0,
       [11, "\tappterm ", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tappterm %i, %i"],
    _M_ = [0, [11, "\treturn ", [4, 3, 0, 0, 0]], "\treturn %i"],
    _N_ = [0, [11, "\tgrab ", [4, 3, 0, 0, 0]], "\tgrab %i"],
    _O_ =
      [0,
       [11, "\tclosure L", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tclosure L%i, %i"],
    _P_ = [0, [11, cst_closurerec, 0], cst_closurerec],
    _Q_ = [0, [12, 32, [4, 3, 0, 0, 0]], " %i"],
    _R_ = [0, [11, cst$0, [4, 3, 0, 0, 0]], ", %i"],
    _S_ = [0, [11, "\toffsetclosure ", [4, 3, 0, 0, 0]], "\toffsetclosure %i"],
    _T_ = [0, [11, "\tgetglobal ", [15, 0]], "\tgetglobal %a"],
    _U_ = [0, [11, "\tsetglobal ", [15, 0]], "\tsetglobal %a"],
    _V_ =
      [0,
       [18,
        [1, [0, [11, cst_10, 0], cst_10]],
        [11, "\tconst", [17, [0, cst, 1, 0], [15, [17, 0, 0]]]]],
       "@[<10>\tconst@ %a@]"],
    _W_ =
      [0,
       [11, "\tmakeblock ", [4, 3, 0, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tmakeblock %i, %i"],
    _X_ =
      [0, [11, "\tmakefloatblock ", [4, 3, 0, 0, 0]], "\tmakefloatblock %i"],
    _Y_ = [0, [11, "\tgetfield ", [4, 3, 0, 0, 0]], "\tgetfield %i"],
    _Z_ = [0, [11, "\tsetfield ", [4, 3, 0, 0, 0]], "\tsetfield %i"],
    ___ = [0, [11, "\tgetfloatfield ", [4, 3, 0, 0, 0]], "\tgetfloatfield %i"],
    _$_ = [0, [11, "\tsetfloatfield ", [4, 3, 0, 0, 0]], "\tsetfloatfield %i"],
    _aa_ = [0, [11, "\tbranch L", [4, 3, 0, 0, 0]], "\tbranch L%i"],
    _ab_ = [0, [11, "\tbranchif L", [4, 3, 0, 0, 0]], "\tbranchif L%i"],
    _ac_ = [0, [11, "\tbranchifnot L", [4, 3, 0, 0, 0]], "\tbranchifnot L%i"],
    _ad_ =
      [0, [11, "\tstrictbranchif L", [4, 3, 0, 0, 0]], "\tstrictbranchif L%i"],
    _ae_ =
      [0,
       [11, "\tstrictbranchifnot L", [4, 3, 0, 0, 0]],
       "\tstrictbranchifnot L%i"],
    _af_ = [0, [17, [0, cst, 1, 0], [4, 3, 0, 0, 0]], "@ %i"],
    _ag_ =
      [0,
       [18,
        [1, [0, [11, cst_10, 0], cst_10]],
        [11, "\tswitch", [15, [12, 47, [15, [17, 0, 0]]]]]],
       "@[<10>\tswitch%a/%a@]"],
    _ah_ = [0, [11, "\tpushtrap L", [4, 3, 0, 0, 0]], "\tpushtrap L%i"],
    _ai_ = [0, [12, 9, [2, 0, 0]], "\t%s"],
    _aj_ =
      [0,
       [11, "\tccall ", [2, 0, [11, cst$0, [4, 3, 0, 0, 0]]]],
       "\tccall %s, %i"],
    _ak_ = [0, [11, cst_eqint, 0], cst_eqint],
    _al_ = [0, [11, cst_neqint, 0], cst_neqint],
    _am_ = [0, [11, cst_ltint, 0], cst_ltint],
    _an_ = [0, [11, cst_gtint, 0], cst_gtint],
    _ao_ = [0, [11, cst_leint, 0], cst_leint],
    _ap_ = [0, [11, cst_geint, 0], cst_geint],
    _aq_ = [0, [11, "\toffsetint ", [4, 3, 0, 0, 0]], "\toffsetint %i"],
    _ar_ = [0, [11, "\toffsetref ", [4, 3, 0, 0, 0]], "\toffsetref %i"],
    _as_ = [0, [11, "\tgetpubmet ", [4, 3, 0, 0, 0]], "\tgetpubmet %i"],
    _at_ =
      [0,
       [11,
        '\tevent "',
        [2, 0, [11, '" ', [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]]],
       '\tevent "%s" %i-%i'],
    _au_ = [0, [11, "\tresumeterm ", [4, 3, 0, 0, 0]], "\tresumeterm %i"],
    _av_ =
      [0, [11, "\treperformterm ", [4, 3, 0, 0, 0]], "\treperformterm %i"],
    _aw_ = [0, [15, [17, [0, cst, 1, 0], [15, 0]]], "%a@ %a"],
    _ax_ = [0, [12, 76, [4, 3, 0, 0, [12, 58, [15, 0]]]], "L%i:%a"],
    _ay_ =
      [0,
       [18, [1, [0, [11, cst_v_0, 0], cst_v_0]], [15, [17, 0, 0]]],
       "@[<v 0>%a@]"];
   function instruction(ppf, param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_cps_call3(Stdlib_Format[135], ppf, _a_, cont);
       case 1:
        return caml_cps_call3(Stdlib_Format[135], ppf, _b_, cont);
       case 2:
        return caml_cps_call3(Stdlib_Format[135], ppf, _c_, cont);
       case 3:
        return caml_cps_call3(Stdlib_Format[135], ppf, _d_, cont);
       case 4:
        return caml_cps_call3(Stdlib_Format[135], ppf, _e_, cont);
       case 5:
        return caml_cps_call3(Stdlib_Format[135], ppf, _f_, cont);
       case 6:
        return caml_cps_call3(Stdlib_Format[135], ppf, _g_, cont);
       case 7:
        return caml_cps_call3(Stdlib_Format[135], ppf, _h_, cont);
       case 8:
        return caml_cps_call3(Stdlib_Format[135], ppf, _i_, cont);
       case 9:
        return caml_cps_call3(Stdlib_Format[135], ppf, _j_, cont);
       case 10:
        return caml_cps_call3(Stdlib_Format[135], ppf, _k_, cont);
       case 11:
        return caml_cps_call3(Stdlib_Format[135], ppf, _l_, cont);
       case 12:
        return caml_cps_call3(Stdlib_Format[135], ppf, _m_, cont);
       case 13:
        return caml_cps_call3(Stdlib_Format[135], ppf, _n_, cont);
       case 14:
        return caml_cps_call3(Stdlib_Format[135], ppf, _o_, cont);
       case 15:
        return caml_cps_call3(Stdlib_Format[135], ppf, _p_, cont);
       case 16:
        return caml_cps_call3(Stdlib_Format[135], ppf, _q_, cont);
       case 17:
        return caml_cps_call3(Stdlib_Format[135], ppf, _r_, cont);
       case 18:
        return caml_cps_call3(Stdlib_Format[135], ppf, _s_, cont);
       case 19:
        return caml_cps_call3(Stdlib_Format[135], ppf, _t_, cont);
       case 20:
        return caml_cps_call3(Stdlib_Format[135], ppf, _u_, cont);
       case 21:
        return caml_cps_call3(Stdlib_Format[135], ppf, _v_, cont);
       case 22:
        return caml_cps_call3(Stdlib_Format[135], ppf, _w_, cont);
       case 23:
        return caml_cps_call3(Stdlib_Format[135], ppf, _x_, cont);
       case 24:
        return caml_cps_call3(Stdlib_Format[135], ppf, _y_, cont);
       case 25:
        return caml_cps_call3(Stdlib_Format[135], ppf, _z_, cont);
       case 26:
        return caml_cps_call3(Stdlib_Format[135], ppf, _A_, cont);
       case 27:
        return caml_cps_call3(Stdlib_Format[135], ppf, _B_, cont);
       case 28:
        return caml_cps_call3(Stdlib_Format[135], ppf, _C_, cont);
       default: return caml_cps_call3(Stdlib_Format[135], ppf, _D_, cont);
     }
    switch(param[0]){
      case 0:
       var lbl = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _E_, lbl, cont);
      case 1:
       var n = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _F_, n, cont);
      case 2:
       var n$0 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _G_, n$0, cont);
      case 3:
       var n$1 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _H_, n$1, cont);
      case 4:
       var n$2 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _I_, n$2, cont);
      case 5:
       var lbl$0 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _J_, lbl$0, cont);
      case 6:
       var n$3 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _K_, n$3, cont);
      case 7:
       var m = param[2], n$4 = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _L_, n$4, m, cont);
      case 8:
       var n$5 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _M_, n$5, cont);
      case 9:
       var n$6 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _N_, n$6, cont);
      case 10:
       var n$7 = param[2], lbl$1 = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _O_, lbl$1, n$7, cont);
      case 11:
       var n$8 = param[2], lbls = param[1];
       return caml_cps_call3
               (Stdlib_Format[135],
                ppf,
                _P_,
                function(_aA_){
                 return caml_cps_call3
                         (Stdlib_List[17],
                          function(lbl, cont){
                           return caml_cps_call4
                                   (Stdlib_Format[135], ppf, _Q_, lbl, cont);
                          },
                          lbls,
                          function(_aB_){
                           return caml_cps_call4
                                   (Stdlib_Format[135], ppf, _R_, n$8, cont);
                          });
                });
      case 12:
       var n$9 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _S_, n$9, cont);
      case 13:
       var id = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _T_, Ident[5], id, cont);
      case 14:
       var id$0 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _U_, Ident[5], id$0, cont);
      case 15:
       var cst = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _V_, Printlambda[3], cst, cont);
      case 16:
       var m$0 = param[2], n$10 = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _W_, n$10, m$0, cont);
      case 17:
       var n$11 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _X_, n$11, cont);
      case 18:
       var n$12 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _Y_, n$12, cont);
      case 19:
       var n$13 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _Z_, n$13, cont);
      case 20:
       var n$14 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, ___, n$14, cont);
      case 21:
       var n$15 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _$_, n$15, cont);
      case 22:
       var lbl$2 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _aa_, lbl$2, cont);
      case 23:
       var lbl$3 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ab_, lbl$3, cont);
      case 24:
       var lbl$4 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ac_, lbl$4, cont);
      case 25:
       var lbl$5 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ad_, lbl$5, cont);
      case 26:
       var lbl$6 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ae_, lbl$6, cont);
      case 27:
       var
        blocks = param[2],
        consts = param[1],
        labels =
          function(ppf, labs, cont){
           return caml_cps_call3
                   (Stdlib_Array[11],
                    function(lbl, cont){
                     return caml_cps_call4
                             (Stdlib_Format[135], ppf, _af_, lbl, cont);
                    },
                    labs,
                    cont);
          };
       return caml_cps_call7
               (Stdlib_Format[135],
                ppf,
                _ag_,
                labels,
                consts,
                labels,
                blocks,
                cont);
      case 28:
       var lbl$7 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ah_, lbl$7, cont);
      case 29:
       var k = param[1];
       return caml_cps_call2
               (Lambda[43],
                k,
                function(_az_){
                 return caml_cps_call4
                         (Stdlib_Format[135], ppf, _ai_, _az_, cont);
                });
      case 30:
       var n$16 = param[2], s = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _aj_, s, n$16, cont);
      case 31:
       switch(param[1]){
         case 0:
          return caml_cps_call3(Stdlib_Format[135], ppf, _ak_, cont);
         case 1:
          return caml_cps_call3(Stdlib_Format[135], ppf, _al_, cont);
         case 2:
          return caml_cps_call3(Stdlib_Format[135], ppf, _am_, cont);
         case 3:
          return caml_cps_call3(Stdlib_Format[135], ppf, _an_, cont);
         case 4:
          return caml_cps_call3(Stdlib_Format[135], ppf, _ao_, cont);
         default: return caml_cps_call3(Stdlib_Format[135], ppf, _ap_, cont);
       }
      case 32:
       var n$17 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _aq_, n$17, cont);
      case 33:
       var n$18 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _ar_, n$18, cont);
      case 34:
       var n$19 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _as_, n$19, cont);
      case 35:
       var ev = param[1];
       return caml_cps_call6
               (Stdlib_Format[135],
                ppf,
                _at_,
                ev[3][1][1],
                ev[3][1][4],
                ev[3][2][4],
                cont);
      case 36:
       var n$20 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _au_, n$20, cont);
      default:
       var n$21 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _av_, n$21, cont);
    }
   }
   function instruction_list(ppf, param, cont){
    if(! param) return cont(0);
    var instr = param[1];
    if(typeof instr !== "number" && 0 === instr[0]){
     var il$0 = param[2], lbl = instr[1];
     return caml_cps_call6
             (Stdlib_Format[135],
              ppf,
              _ax_,
              lbl,
              instruction_list,
              il$0,
              cont);
    }
    var il = param[2];
    return caml_cps_call7
            (Stdlib_Format[135],
             ppf,
             _aw_,
             instruction,
             instr,
             instruction_list,
             il,
             cont);
   }
   function instrlist(ppf, il, cont){
    return caml_cps_call5
            (Stdlib_Format[135], ppf, _ay_, instruction_list, il, cont);
   }
   var Printinstr = [0, instruction, instrlist];
   runtime.caml_register_global(85, Printinstr, "Printinstr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Emitcode
//# unitInfo: Requires: Btype, Bytegen, Clflags, Config, Env, Ident, Instruct, Lambda, Location, Misc, Opcodes, Primitive, Stdlib, Stdlib__Array, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Marshal, Stdlib__Sys, Translmod
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/emitcode.cmi",
     'Caml1999I032\x84\x95\xa6\xbe\0\0\x04\xc3\0\0\x01\x05\0\0\x03\xb1\0\0\x03\x8b\xa0(Emitcode\xa0\xb0\xa0\'to_file\x01\x01\xbf\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92&Stdlib+out_channel@\x90@\x02\x05\xf5\xe1\0@\0\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xd1\xc0\xc1@\xc0\xb3\x90\x04\b@\x90@\x02\x05\xf5\xe1\0@\0\xd2\xc0\xc1\x900required_globals\xc0\xb3\xa1\xa1\x90\x92%Ident#Set!t@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\xa1\x90\x92(Instruct+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xd4@\x90@\x02\x05\xf5\xe1\0@\0\xd5\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x02\x05\xf5\xe1\0@\0\xd7@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\x02\x05\xf5\xe1\0@\0\xda@\x02\x05\xf5\xe1\0@\0\xdb@\xb0\xc05bytecomp/emitcode.mliU\x01\x04\x83\x01\x04\x83\xc0\x04\x02V\x01\x04\xb3\x01\x04\xed@@\xa1\x04H@@\xa0\xb0\xa0)to_memory\x01\x01\xc0\xd0\xc0\xc1@\xc0\xb3\x90\x04!\xa0\xc0\xb3\xa1\x04\x1f+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xdc@\x90@\x02\x05\xf5\xe1\0@\0\xdd\xc0\xc1@\xc0\xb3\x90\x04-\xa0\xc0\xb3\xa1\x04++instruction@\x90@\x02\x05\xf5\xe1\0@\0\xde@\x90@\x02\x05\xf5\xe1\0@\0\xdf\xc0\x92\xa0\xc0\xb3\xa1\xa1\x90\x92$Misc*LongString!t@\x90@\x02\x05\xf5\xe1\0@\0\xe6\xa0\xc0\xb3\x90\x04E\xa0\xc0\x92\xa0\xc0\xb3\xa1\x90\x92*Cmo_format*reloc_info@\x90@\x02\x05\xf5\xe1\0@\0\xe3\xa0\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\0\xe2@\x02\x05\xf5\xe1\0@\0\xe4@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xa0\xc0\xb3\x90\x04]\xa0\xc0\xb3\xa1\x04[+debug_event@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x90@\x02\x05\xf5\xe1\0@\0\xe1@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\x02\x05\xf5\xe1\0@\0\xe9@\xb0\xc0\x04R^\x01\x06"\x01\x06"\xc0\x04S`\x01\x06[\x01\x06\x9d@@\xa1\x04\x99A@\xa0\xb0\xa0.to_packed_file\x01\x01\xc1\xd0\xc0\xc1@\xc0\xb3\xa1\x04\x98+out_channel@\x90@\x02\x05\xf5\xe1\0@\0\xea\xc0\xc1@\xc0\xb3\x90\x04y\xa0\xc0\xb3\xa1\x04w+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xeb@\x90@\x02\x05\xf5\xe1\0@\0\xec\xc0\xb3\x90\x04\x83\xa0\xc0\x92\xa0\xc0\xb3\xa1\x04>*reloc_info@\x90@\x02\x05\xf5\xe1\0@\0\xee\xa0\xc0\xb3\x90\x04;@\x90@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xef@\x90@\x02\x05\xf5\xe1\0@\0\xf0@\x02\x05\xf5\xe1\0@\0\xf1@\x02\x05\xf5\xe1\0@\0\xf2@\xb0\xc0\x04\x80h\x01\x07\x85\x01\x07\x85\xc0\x04\x81i\x01\x07\x99\x01\x07\xd5@@\xa1\x04\xc7B@\xa0\xb0\xa0%reset\x01\x01\xc2\xd0\xc0\xc1@\xc0\xb3\x90\x04\x91@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xc0\xb3\x90\x04\x95@\x90@\x02\x05\xf5\xe1\0@\0\xf4@\x02\x05\xf5\xe1\0@\0\xf5@\xb0\xc0\x04\x93p\x01\b\x80\x01\b\x80\xc0\x04\x94p\x01\b\x80\x01\b\x97@@\xa1\x04\xdaC@\xa0\xb0\xa0\t-marshal_to_channel_with_possibly_32bit_compat\x01\x01\xc3\xd0\xc0\xc1\x90(filename\xc0\xb3\x90\x04\xd1@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xc1\x90$kind\xc0\xb3\x90\x04\xd9@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xc1@\xc0\xb3\xa1\x04\xe9+out_channel@\x90@\x02\x05\xf5\xe1\0@\0\xf8\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xf9\xc0\xb3\x90\x04\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04\xbdr\x01\b\x99\x01\b\x99\xc0\x04\xbes\x01\b\xcd\x01\t\n@@\xa1\x05\x01\x04D@@\x84\x95\xa6\xbe\0\0\x05\n\0\0\0\xcd\0\0\x02\xed\0\0\x02b\xa0\xa0(Emitcode\x9002\x9d{\b\xd6 \xdb\xc4#\xca\x87\xc0E\x96c\xa4\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0(Instruct\x900d\xcb\x7f\xe8\xf2\xe6\x0fx\x1e\x1a\tpX\x13\xabf\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0*Cmo_format\x900k\x8em\xa4\xcb\x19\x16\x96\xfc\x8d\x84\xc9\xb7\x16b\x9f\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    global_data = runtime.caml_get_global_data(),
    Opcodes = global_data.Opcodes,
    Lambda = global_data.Lambda,
    Misc = global_data.Misc,
    Stdlib_List = global_data.Stdlib__List,
    Config = global_data.Config,
    Stdlib = global_data.Stdlib,
    Clflags = global_data.Clflags,
    Location = global_data.Location,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Translmod = global_data.Translmod,
    Primitive = global_data.Primitive,
    Ident = global_data.Ident,
    Env = global_data.Env,
    Btype = global_data.Btype,
    Bytegen = global_data.Bytegen,
    Stdlib_Array = global_data.Stdlib__Array,
    Instruct = global_data.Instruct,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Marshal = global_data.Stdlib__Marshal,
    Error = [248, "Emitcode.Error", caml_fresh_oo_id(0)],
    _a_ = [0, 2, 0],
    _b_ =
      [0,
       [11,
        "Generated ",
        [2,
         0,
         [12, 32, [3, 0, [11, " cannot be used on a 32-bit platform", 0]]]]],
       "Generated %s %S cannot be used on a 32-bit platform"];
   function marshal_to_channel_with_possib(filename, kind, outchan, obj, cont){
    caml_push_trap
     (function(_b4_){
       if(_b4_[1] === Stdlib[7]){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace
                  ([0, Error, [0, [0, filename, kind]]], 1));
       }
       var raise$0 = caml_pop_trap();
       return raise$0(caml_maybe_attach_backtrace(_b4_, 0));
      });
    var _b2_ = Clflags[26][1] ? _a_ : 0;
    return caml_cps_call4
            (Stdlib_Marshal[1],
             outchan,
             obj,
             _b2_,
             function(_b3_){caml_pop_trap(); return cont(_b3_);});
   }
   function report_error(ppf, param, cont){
    var kind = param[2], file = param[1];
    return caml_cps_call5(Stdlib_Format[135], ppf, _b_, kind, file, cont);
   }
   caml_callback
    (Location[51],
     [function(param, cont){
       if(param[1] !== Error) return cont(0);
       var info = param[2][1];
       return caml_cps_call3
               (Location[50],
                report_error,
                info,
                function(_b1_){return cont([0, _b1_]);});
      }]);
   var
    out_buffer = [0, caml_callback(Misc[46][1], [1024])],
    out_position = [0, 0];
   function out_word(b1, b2, b3, b4, cont){
    var p = out_position[1];
    return caml_cps_call2
            (Misc[46][2],
             out_buffer[1],
             function(_bU_){
              function _bV_(){
               return caml_cps_call4
                       (Misc[46][4],
                        out_buffer[1],
                        p,
                        b1,
                        function(_bX_){
                         return caml_cps_call4
                                 (Misc[46][4],
                                  out_buffer[1],
                                  p + 1 | 0,
                                  b2,
                                  function(_bY_){
                                   return caml_cps_call4
   (Misc[46][4],
    out_buffer[1],
    p + 2 | 0,
    b3,
    function(_bZ_){
     return caml_cps_call4
             (Misc[46][4],
              out_buffer[1],
              p + 3 | 0,
              b4,
              function(_b0_){out_position[1] = p + 4 | 0; return cont(0);});
    });
                                  });
                        });
              }
              return _bU_ <= p
                      ? caml_cps_call2
                        (Misc[46][2],
                         out_buffer[1],
                         function(len){
                          return caml_cps_call2
                                  (Misc[46][1],
                                   2 * len | 0,
                                   function(new_buffer){
                                    return caml_cps_call6
    (Misc[46][5],
     out_buffer[1],
     0,
     new_buffer,
     0,
     len,
     function(_bW_){out_buffer[1] = new_buffer; return _bV_();});
                                   });
                         })
                      : _bV_();
             });
   }
   function out(opcode, cont){
    return caml_cps_exact_call5(out_word, opcode, 0, 0, 0, cont);
   }
   var
    AsInt = [248, "Emitcode.AsInt", caml_fresh_oo_id(0)],
    cst_Emitcode_const_as_int = "Emitcode.const_as_int";
   function const_as_int(param){
    if(0 === param[0]){
     var match = param[1];
     switch(match[0]){
       case 0:
        var i = match[1]; return i;
       case 1:
        var c = match[1]; return c;
     }
    }
    throw caml_maybe_attach_backtrace(AsInt, 1);
   }
   function is_immed(i){
    var
     _bS_ = Instruct[1] <= i ? 1 : 0,
     _bT_ = _bS_ ? i <= Instruct[2] ? 1 : 0 : _bS_;
    return _bT_;
   }
   function is_immed_const(k){
    try{var _bQ_ = is_immed(const_as_int(k)); return _bQ_;}
    catch(_bR_){
     var _bP_ = caml_wrap_exception(_bR_);
     if(_bP_ === AsInt) return 0;
     throw caml_maybe_attach_backtrace(_bP_, 0);
    }
   }
   function out_int(n, cont){
    return caml_cps_exact_call5(out_word, n, n >> 8, n >> 16, n >> 24, cont);
   }
   function out_const(c, cont){
    caml_push_trap
     (function(_bO_){
       if(_bO_ === AsInt)
        return caml_cps_call2(Misc[1], cst_Emitcode_const_as_int, cont);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_bO_, 0));
      });
    return caml_cps_exact_call2
            (out_int,
             const_as_int(c),
             function(_bN_){caml_pop_trap(); return cont(undef);});
   }
   var label_table = [0, [0]], _c_ = [1, 0];
   function extend_label_table(needed, cont){
    var new_size = [0, label_table[1].length - 1];
    for(;;){
     if(new_size[1] > needed) break;
     new_size[1] = 2 * new_size[1] | 0;
    }
    var new_table = caml_make_vect(new_size[1], _c_);
    return caml_cps_call6
            (Stdlib_Array[8],
             label_table[1],
             0,
             new_table,
             0,
             label_table[1].length - 1,
             function(_bM_){label_table[1] = new_table; return cont(undef);});
   }
   function backpatch(param, cont){
    var
     orig = param[2],
     pos = param[1],
     displ = (out_position[1] - orig | 0) >> 2;
    return caml_cps_call4
            (Misc[46][4],
             out_buffer[1],
             pos,
             displ,
             function(_bJ_){
              return caml_cps_call4
                      (Misc[46][4],
                       out_buffer[1],
                       pos + 1 | 0,
                       displ >> 8,
                       function(_bK_){
                        return caml_cps_call4
                                (Misc[46][4],
                                 out_buffer[1],
                                 pos + 2 | 0,
                                 displ >> 16,
                                 function(_bL_){
                                  return caml_cps_call4
  (Misc[46][4], out_buffer[1], pos + 3 | 0, displ >> 24, cont);
                                 });
                       });
             });
   }
   function out_label_with_orig(orig, lbl, cont){
    function _bG_(_bH_){
     var match = caml_check_bound(label_table[1], lbl)[1 + lbl];
     if(0 === match[0]){
      var def = match[1];
      return caml_cps_exact_call2(out_int, (def - orig | 0) >> 2, cont);
     }
     var
      patchlist = match[1],
      _bI_ = [1, [0, [0, out_position[1], orig], patchlist]];
     caml_check_bound(label_table[1], lbl)[1 + lbl] = _bI_;
     return caml_cps_exact_call2(out_int, 0, cont);
    }
    return label_table[1].length - 1 <= lbl
            ? caml_cps_exact_call2(extend_label_table, lbl, _bG_)
            : _bG_(0);
   }
   function out_label(l, cont){
    return caml_cps_exact_call3(out_label_with_orig, out_position[1], l, cont);
   }
   var reloc_info = [0, 0];
   function enter(info){
    reloc_info[1] = [0, [0, info, out_position[1]], reloc_info[1]];
    return;
   }
   function slot_for_literal(sc, cont){
    enter([0, sc]);
    return caml_cps_exact_call2(out_int, 0, cont);
   }
   function slot_for_getglobal(id, cont){
    enter([1, id]);
    return caml_cps_exact_call2(out_int, 0, cont);
   }
   function slot_for_c_prim(name, cont){
    enter([3, name]);
    return caml_cps_exact_call2(out_int, 0, cont);
   }
   var
    events = [0, 0],
    debug_dirs = [0, Misc[13][4][64][1]],
    cst_Emitcode_define_label = "Emitcode.define_label",
    _d_ = [1, 0],
    cst_bytecode_unit = "bytecode unit";
   function init(param){
    out_position[1] = 0;
    label_table[1] = caml_make_vect(16, _d_);
    reloc_info[1] = 0;
    debug_dirs[1] = Misc[13][4][64][1];
    events[1] = 0;
    return;
   }
   function emit_branch_comp(param, cont){
    switch(param){
      case 0:
       return caml_cps_exact_call2(out, Opcodes[132], cont);
      case 1:
       return caml_cps_exact_call2(out, Opcodes[133], cont);
      case 2:
       return caml_cps_exact_call2(out, Opcodes[134], cont);
      case 3:
       return caml_cps_exact_call2(out, Opcodes[136], cont);
      case 4:
       return caml_cps_exact_call2(out, Opcodes[135], cont);
      default: return caml_cps_exact_call2(out, Opcodes[137], cont);
    }
   }
   function emit_instr(param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return caml_cps_exact_call2(out, Opcodes[10], cont);
       case 1:
        return caml_cps_exact_call2(out, Opcodes[42], cont);
       case 2:
        return caml_cps_exact_call2(out, Opcodes[80], cont);
       case 3:
        return caml_cps_exact_call2(out, Opcodes[81], cont);
       case 4:
        return caml_cps_exact_call2(out, Opcodes[82], cont);
       case 5:
        return caml_cps_exact_call2(out, Opcodes[149], cont);
       case 6:
        return caml_cps_exact_call2(out, Opcodes[83], cont);
       case 7:
        return caml_cps_exact_call2(out, Opcodes[84], cont);
       case 8:
        return caml_cps_exact_call2(out, Opcodes[89], cont);
       case 9:
        return caml_cps_exact_call2(out, Opcodes[91], cont);
       case 10:
        return caml_cps_exact_call2(out, Opcodes[93], cont);
       case 11:
        return caml_cps_exact_call2(out, Opcodes[110], cont);
       case 12:
        return caml_cps_exact_call2(out, Opcodes[111], cont);
       case 13:
        return caml_cps_exact_call2(out, Opcodes[112], cont);
       case 14:
        return caml_cps_exact_call2(out, Opcodes[113], cont);
       case 15:
        return caml_cps_exact_call2(out, Opcodes[114], cont);
       case 16:
        return caml_cps_exact_call2(out, Opcodes[115], cont);
       case 17:
        return caml_cps_exact_call2(out, Opcodes[116], cont);
       case 18:
        return caml_cps_exact_call2(out, Opcodes[117], cont);
       case 19:
        return caml_cps_exact_call2(out, Opcodes[118], cont);
       case 20:
        return caml_cps_exact_call2(out, Opcodes[119], cont);
       case 21:
        return caml_cps_exact_call2(out, Opcodes[120], cont);
       case 22:
        return caml_cps_exact_call2(out, Opcodes[121], cont);
       case 23:
        return caml_cps_exact_call2(out, Opcodes[130], cont);
       case 24:
        return caml_cps_exact_call2(out, Opcodes[138], cont);
       case 25:
        return caml_cps_exact_call2(out, Opcodes[131], cont);
       case 26:
        return caml_cps_exact_call2(out, Opcodes[143], cont);
       case 27:
        return caml_cps_exact_call2(out, Opcodes[150], cont);
       case 28:
        return caml_cps_exact_call2(out, Opcodes[151], cont);
       default: return caml_cps_exact_call2(out, Opcodes[144], cont);
     }
    switch(param[0]){
      case 0:
       var
        lbl = param[1],
        _aF_ =
          function(_bD_){
           var match = caml_check_bound(label_table[1], lbl)[1 + lbl];
           if(0 === match[0])
            return caml_cps_call2(Misc[1], cst_Emitcode_define_label, cont);
           var patchlist = match[1];
           return caml_cps_call3
                   (Stdlib_List[17],
                    backpatch,
                    patchlist,
                    function(_bE_){
                     var _bF_ = [0, out_position[1]];
                     caml_check_bound(label_table[1], lbl)[1 + lbl] = _bF_;
                     return cont(undef);
                    });
          };
       return label_table[1].length - 1 <= lbl
               ? caml_cps_exact_call2(extend_label_table, lbl, _aF_)
               : _aF_(0);
      case 1:
       var n = param[1];
       return 8 <= n
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[9],
                  function(_bC_){
                   return caml_cps_exact_call2(out_int, n, cont);
                  })
               : caml_cps_exact_call2(out, Opcodes[1] + n | 0, cont);
      case 2:
       var n$0 = param[1];
       if(1 <= n$0 && 4 >= n$0)
        return caml_cps_exact_call2
                (out, (Opcodes[22] + n$0 | 0) - 1 | 0, cont);
       return caml_cps_exact_call2
               (out,
                Opcodes[26],
                function(_bB_){
                 return caml_cps_exact_call2(out_int, n$0, cont);
                });
      case 3:
       var n$1 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[20],
                function(_bA_){
                 return caml_cps_exact_call2(out_int, n$1, cont);
                });
      case 4:
       var n$2 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[21],
                function(_bz_){
                 return caml_cps_exact_call2(out_int, n$2, cont);
                });
      case 5:
       var lbl$0 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[32],
                function(_by_){
                 return caml_cps_exact_call2(out_label, lbl$0, cont);
                });
      case 6:
       var n$3 = param[1];
       return 4 <= n$3
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[33],
                  function(_bx_){
                   return caml_cps_exact_call2(out_int, n$3, cont);
                  })
               : caml_cps_exact_call2
                 (out, (Opcodes[34] + n$3 | 0) - 1 | 0, cont);
      case 7:
       var sz = param[2], n$4 = param[1];
       return 4 <= n$4
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[37],
                  function(_bu_){
                   return caml_cps_exact_call2
                           (out_int,
                            n$4,
                            function(_bv_){
                             return caml_cps_exact_call2(out_int, sz, cont);
                            });
                  })
               : caml_cps_exact_call2
                 (out,
                  (Opcodes[38] + n$4 | 0) - 1 | 0,
                  function(_bw_){
                   return caml_cps_exact_call2(out_int, sz, cont);
                  });
      case 8:
       var n$5 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[41],
                function(_bt_){
                 return caml_cps_exact_call2(out_int, n$5, cont);
                });
      case 9:
       var n$6 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[43],
                function(_bs_){
                 return caml_cps_exact_call2(out_int, n$6, cont);
                });
      case 10:
       var n$7 = param[2], lbl$1 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[44],
                function(_bq_){
                 return caml_cps_exact_call2
                         (out_int,
                          n$7,
                          function(_br_){
                           return caml_cps_exact_call2(out_label, lbl$1, cont);
                          });
                });
      case 11:
       var n$8 = param[2], lbls = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[45],
                function(_bl_){
                 return caml_cps_call2
                         (Stdlib_List[1],
                          lbls,
                          function(_bm_){
                           return caml_cps_exact_call2
                                   (out_int,
                                    _bm_,
                                    function(_bn_){
                                     return caml_cps_exact_call2
     (out_int,
      n$8,
      function(_bo_){
       var org = out_position[1];
       return caml_cps_call3
               (Stdlib_List[17],
                function(_bp_, cont){
                 return caml_cps_exact_call3
                         (out_label_with_orig, org, _bp_, cont);
                },
                lbls,
                cont);
      });
                                    });
                          });
                });
      case 12:
       var ofs = param[1];
       if(-3 !== ofs && 0 !== ofs && 3 !== ofs)
        return caml_cps_exact_call2
                (out,
                 Opcodes[49],
                 function(_bk_){
                  return caml_cps_exact_call2(out_int, ofs, cont);
                 });
       return caml_cps_exact_call2(out, Opcodes[47] + (ofs / 3 | 0) | 0, cont);
      case 13:
       var q = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[54],
                function(_bj_){
                 return caml_cps_exact_call2(slot_for_getglobal, q, cont);
                });
      case 14:
       var id = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[58],
                function(_bi_){
                 enter([2, id]);
                 return caml_cps_exact_call2(out_int, 0, cont);
                });
      case 15:
       var sc = param[1];
       switch(sc[0]){
         case 0:
          var match = sc[1];
          switch(match[0]){
            case 0:
             var i = match[1];
             if(is_immed(i)){
              if(0 <= i && 3 >= i)
               return caml_cps_exact_call2(out, Opcodes[100] + i | 0, cont);
              return caml_cps_exact_call2
                      (out,
                       Opcodes[104],
                       function(_bh_){
                        return caml_cps_exact_call2(out_int, i, cont);
                       });
             }
             break;
            case 1:
             var c = match[1];
             return caml_cps_exact_call2
                     (out,
                      Opcodes[104],
                      function(_bg_){
                       return caml_cps_exact_call2(out_int, c, cont);
                      });
          }
          break;
         case 1:
          if(! sc[2]){
           var t = sc[1];
           return 0 === t
                   ? caml_cps_exact_call2(out, Opcodes[59], cont)
                   : caml_cps_exact_call2
                     (out,
                      Opcodes[60],
                      function(_bf_){
                       return caml_cps_exact_call2(out_int, t, cont);
                      });
          }
          break;
       }
       return caml_cps_exact_call2
               (out,
                Opcodes[54],
                function(_be_){
                 return caml_cps_exact_call2(slot_for_literal, sc, cont);
                });
      case 16:
       var t$0 = param[2], n$9 = param[1];
       return 0 === n$9
               ? 0
                 === t$0
                 ? caml_cps_exact_call2(out, Opcodes[59], cont)
                 : caml_cps_exact_call2
                   (out,
                    Opcodes[60],
                    function(_ba_){
                     return caml_cps_exact_call2(out_int, t$0, cont);
                    })
               : 4
                 <= n$9
                 ? caml_cps_exact_call2
                   (out,
                    Opcodes[63],
                    function(_bb_){
                     return caml_cps_exact_call2
                             (out_int,
                              n$9,
                              function(_bc_){
                               return caml_cps_exact_call2(out_int, t$0, cont);
                              });
                    })
                 : caml_cps_exact_call2
                   (out,
                    (Opcodes[64] + n$9 | 0) - 1 | 0,
                    function(_bd_){
                     return caml_cps_exact_call2(out_int, t$0, cont);
                    });
      case 17:
       var n$10 = param[1];
       return 0 === n$10
               ? caml_cps_exact_call2(out, Opcodes[59], cont)
               : caml_cps_exact_call2
                 (out,
                  Opcodes[67],
                  function(_a$_){
                   return caml_cps_exact_call2(out_int, n$10, cont);
                  });
      case 18:
       var n$11 = param[1];
       return 4 <= n$11
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[72],
                  function(_a__){
                   return caml_cps_exact_call2(out_int, n$11, cont);
                  })
               : caml_cps_exact_call2(out, Opcodes[68] + n$11 | 0, cont);
      case 19:
       var n$12 = param[1];
       return 4 <= n$12
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[78],
                  function(_a9_){
                   return caml_cps_exact_call2(out_int, n$12, cont);
                  })
               : caml_cps_exact_call2(out, Opcodes[74] + n$12 | 0, cont);
      case 20:
       var n$13 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[73],
                function(_a8_){
                 return caml_cps_exact_call2(out_int, n$13, cont);
                });
      case 21:
       var n$14 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[79],
                function(_a7_){
                 return caml_cps_exact_call2(out_int, n$14, cont);
                });
      case 22:
       var lbl$2 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[85],
                function(_a6_){
                 return caml_cps_exact_call2(out_label, lbl$2, cont);
                });
      case 23:
       var lbl$3 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[86],
                function(_a5_){
                 return caml_cps_exact_call2(out_label, lbl$3, cont);
                });
      case 24:
       var lbl$4 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[87],
                function(_a4_){
                 return caml_cps_exact_call2(out_label, lbl$4, cont);
                });
      case 25:
       var lbl$5 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[86],
                function(_a3_){
                 return caml_cps_exact_call2(out_label, lbl$5, cont);
                });
      case 26:
       var lbl$6 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[87],
                function(_a2_){
                 return caml_cps_exact_call2(out_label, lbl$6, cont);
                });
      case 27:
       var tbl_block = param[2], tbl_const = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[88],
                function(_aX_){
                 return caml_cps_exact_call2
                         (out_int,
                          tbl_const.length - 1 + (tbl_block.length - 1 << 16) | 0,
                          function(_aY_){
                           var org = out_position[1];
                           return caml_cps_call3
                                   (Stdlib_Array[11],
                                    function(_a1_, cont){
                                     return caml_cps_exact_call3
     (out_label_with_orig, org, _a1_, cont);
                                    },
                                    tbl_const,
                                    function(_aZ_){
                                     return caml_cps_call3
     (Stdlib_Array[11],
      function(_a0_, cont){
       return caml_cps_exact_call3
               (out_label_with_orig, org, _a0_, cont);
      },
      tbl_block,
      cont);
                                    });
                          });
                });
      case 28:
       var lbl$7 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[90],
                function(_aW_){
                 return caml_cps_exact_call2(out_label, lbl$7, cont);
                });
      case 29:
       switch(param[1]){
         case 0:
          return caml_cps_exact_call2(out, Opcodes[92], cont);
         case 1:
          return caml_cps_exact_call2(out, Opcodes[147], cont);
         default: return caml_cps_exact_call2(out, Opcodes[148], cont);
       }
      case 30:
       var n$15 = param[2], name = param[1];
       return 5 < n$15
               ? caml_cps_exact_call2
                 (out,
                  Opcodes[99],
                  function(_aT_){
                   return caml_cps_exact_call2
                           (out_int,
                            n$15,
                            function(_aU_){
                             return caml_cps_exact_call2(slot_for_c_prim, name, cont);
                            });
                  })
               : caml_cps_exact_call2
                 (out,
                  (Opcodes[94] + n$15 | 0) - 1 | 0,
                  function(_aV_){
                   return caml_cps_exact_call2(slot_for_c_prim, name, cont);
                  });
      case 31:
       var c$0 = param[1];
       switch(c$0){
         case 0:
          return caml_cps_exact_call2(out, Opcodes[122], cont);
         case 1:
          return caml_cps_exact_call2(out, Opcodes[123], cont);
         case 2:
          return caml_cps_exact_call2(out, Opcodes[124], cont);
         case 3:
          return caml_cps_exact_call2(out, Opcodes[126], cont);
         case 4:
          return caml_cps_exact_call2(out, Opcodes[125], cont);
         default: return caml_cps_exact_call2(out, Opcodes[127], cont);
       }
      case 32:
       var n$16 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[128],
                function(_aS_){
                 return caml_cps_exact_call2(out_int, n$16, cont);
                });
      case 33:
       var n$17 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[129],
                function(_aR_){
                 return caml_cps_exact_call2(out_int, n$17, cont);
                });
      case 34:
       var tag = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[142],
                function(_aP_){
                 return caml_cps_exact_call2
                         (out_int,
                          tag,
                          function(_aQ_){
                           return caml_cps_exact_call2(out_int, 0, cont);
                          });
                });
      case 35:
       var ev = param[1], path = ev[3][1][1];
       return caml_cps_call2
               (Location[19],
                path,
                function(abspath){
                 var _aI_ = debug_dirs[1];
                 return caml_cps_call2
                         (Stdlib_Filename[14],
                          abspath,
                          function(_aJ_){
                           return caml_cps_call3
                                   (Misc[13][4][64][4],
                                    _aJ_,
                                    _aI_,
                                    function(_aK_){
                                     debug_dirs[1] = _aK_;
                                     return caml_cps_call2
     (Stdlib_Filename[5],
      path,
      function(_aL_){
       function _aN_(){
        ev[1] = out_position[1];
        events[1] = [0, ev, events[1]];
        return cont(undef);
       }
       if(! _aL_) return _aN_();
       var _aM_ = runtime.caml_sys_getcwd(0);
       return caml_cps_call2
               (Location[18],
                _aM_,
                function(cwd){
                 return caml_cps_call3
                         (Misc[13][4][64][4],
                          cwd,
                          debug_dirs[1],
                          function(_aO_){debug_dirs[1] = _aO_; return _aN_();});
                });
      });
                                    });
                          });
                });
      case 36:
       var n$18 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[152],
                function(_aH_){
                 return caml_cps_exact_call2(out_int, n$18, cont);
                });
      default:
       var n$19 = param[1];
       return caml_cps_exact_call2
               (out,
                Opcodes[153],
                function(_aG_){
                 return caml_cps_exact_call2(out_int, n$19, cont);
                });
    }
   }
   function remerge_events(ev1, c, cont){
    if(c){
     var match = c[1];
     if(typeof match !== "number" && 35 === match[0]){
      var c$0 = c[2], ev2 = match[1];
      return caml_cps_call3
              (Bytegen[4],
               ev1,
               ev2,
               function(_aE_){return cont([0, [35, _aE_], c$0]);});
     }
    }
    return cont([0, [35, ev1], c]);
   }
   function emit(param, cont){
    function _F_(param){
     if(! param) return cont(undef);
     var instr = param[1];
     if(typeof instr === "number"){
      if(0 === instr){
       var _G_ = param[2];
       if(_G_){
        var match = _G_[1];
        if(typeof match !== "number")
         a:
         switch(match[0]){
           case 1:
            var n = match[1];
            if(0 === n){
             var _H_ = _G_[2];
             if(_H_){
              var match$0 = _H_[1];
              if(typeof match$0 !== "number" && 8 === match$0[0]){
               var c$1 = _H_[2], m = match$0[1];
               return caml_cps_exact_call1(_F_, [0, [8, m - 1 | 0], c$1]);
              }
             }
            }
            var c$0 = _G_[2];
            return 8 <= n
                    ? caml_cps_exact_call2
                      (out,
                       Opcodes[19],
                       function(_ay_){
                        return caml_cps_exact_call2
                                (out_int,
                                 n,
                                 function(_az_){return caml_cps_exact_call1(_F_, c$0);});
                       })
                    : caml_cps_exact_call2
                      (out,
                       Opcodes[11] + n | 0,
                       function(_aA_){return caml_cps_exact_call1(_F_, c$0);});
           case 2:
            var c$2 = _G_[2], n$0 = match[1];
            if(1 <= n$0 && 4 > n$0)
             return caml_cps_exact_call2
                     (out,
                      (Opcodes[27] + n$0 | 0) - 1 | 0,
                      function(_ax_){return caml_cps_exact_call1(_F_, c$2);});
            return caml_cps_exact_call2
                    (out,
                     Opcodes[31],
                     function(_av_){
                      return caml_cps_exact_call2
                              (out_int,
                               n$0,
                               function(_aw_){return caml_cps_exact_call1(_F_, c$2);});
                     });
           case 12:
            var c$3 = _G_[2], ofs = match[1];
            if(-3 !== ofs && 0 !== ofs && 3 !== ofs)
             return caml_cps_exact_call2
                     (out,
                      Opcodes[53],
                      function(_at_){
                       return caml_cps_exact_call2
                               (out_int,
                                ofs,
                                function(_au_){return caml_cps_exact_call1(_F_, c$3);});
                      });
            return caml_cps_exact_call2
                    (out,
                     Opcodes[51] + (ofs / 3 | 0) | 0,
                     function(_as_){return caml_cps_exact_call1(_F_, c$3);});
           case 13:
            var id = match[1], _I_ = _G_[2];
            if(_I_){
             var match$1 = _I_[1];
             if(typeof match$1 !== "number" && 18 === match$1[0]){
              var c$5 = _I_[2], n$1 = match$1[1];
              return caml_cps_exact_call2
                      (out,
                       Opcodes[57],
                       function(_ap_){
                        return caml_cps_exact_call2
                                (slot_for_getglobal,
                                 id,
                                 function(_aq_){
                                  return caml_cps_exact_call2
  (out_int,
   n$1,
   function(_ar_){return caml_cps_exact_call1(_F_, c$5);});
                                 });
                       });
             }
            }
            var c$4 = _G_[2];
            return caml_cps_exact_call2
                    (out,
                     Opcodes[55],
                     function(_an_){
                      return caml_cps_exact_call2
                              (slot_for_getglobal,
                               id,
                               function(_ao_){return caml_cps_exact_call1(_F_, c$4);});
                     });
           case 15:
            var sc = match[1], _J_ = _G_[2];
            if(_J_){
             var _K_ = _J_[1];
             if(typeof _K_ === "number"){
              if(24 === _K_){
               var _L_ = _J_[2];
               if(_L_){
                var match$3 = _L_[1];
                if(typeof match$3 !== "number")
                 switch(match$3[0]){
                   case 23:
                    var rem = _L_[2], lbl = match$3[1];
                    if(is_immed_const(sc))
                     return caml_cps_exact_call2
                             (out,
                              Opcodes[140],
                              function(_ad_){
                               return caml_cps_exact_call2
                                       (out_const,
sc,
function(_ae_){
 return caml_cps_exact_call2
         (out_label,
          lbl,
          function(_af_){return caml_cps_exact_call1(_F_, rem);});
});
                              });
                    break;
                   case 24:
                    var rem$0 = _L_[2], lbl$0 = match$3[1];
                    if(is_immed_const(sc))
                     return caml_cps_exact_call2
                             (out,
                              Opcodes[141],
                              function(_aa_){
                               return caml_cps_exact_call2
                                       (out_const,
sc,
function(_ab_){
 return caml_cps_exact_call2
         (out_label,
          lbl$0,
          function(_ac_){return caml_cps_exact_call1(_F_, rem$0);});
});
                              });
                    break;
                 }
               }
              }
             }
             else if(31 === _K_[0]){
              var _M_ = _J_[2];
              if(_M_){
               var match$4 = _M_[1], c$8 = _K_[1];
               if(typeof match$4 !== "number")
                switch(match$4[0]){
                  case 23:
                   var rem$1 = _M_[2], lbl$1 = match$4[1];
                   if(is_immed_const(sc))
                    return caml_cps_exact_call2
                            (emit_branch_comp,
                             c$8,
                             function(_ak_){
                              return caml_cps_exact_call2
                                      (out_const,
                                       sc,
                                       function(_al_){
return caml_cps_exact_call2
        (out_label,
         lbl$1,
         function(_am_){return caml_cps_exact_call1(_F_, rem$1);});
                                       });
                             });
                   break;
                  case 24:
                   var rem$2 = _M_[2], lbl$2 = match$4[1];
                   if(is_immed_const(sc))
                    return caml_cps_call2
                            (Lambda[30],
                             c$8,
                             function(_ag_){
                              return caml_cps_exact_call2
                                      (emit_branch_comp,
                                       _ag_,
                                       function(_ah_){
return caml_cps_exact_call2
        (out_const,
         sc,
         function(_ai_){
          return caml_cps_exact_call2
                  (out_label,
                   lbl$2,
                   function(_aj_){return caml_cps_exact_call1(_F_, rem$2);});
         });
                                       });
                             });
                   break;
                }
              }
             }
            }
            var c$6 = _G_[2];
            switch(sc[0]){
              case 0:
               var match$2 = sc[1];
               switch(match$2[0]){
                 case 0:
                  var i = match$2[1];
                  if(is_immed(i)){
                   if(0 <= i && 3 >= i)
                    return caml_cps_exact_call2
                            (out,
                             Opcodes[105] + i | 0,
                             function(_$_){return caml_cps_exact_call1(_F_, c$6);});
                   return caml_cps_exact_call2
                           (out,
                            Opcodes[109],
                            function(_Z_){
                             return caml_cps_exact_call2
                                     (out_int,
                                      i,
                                      function(___){return caml_cps_exact_call1(_F_, c$6);});
                            });
                  }
                  break;
                 case 1:
                  var c$7 = match$2[1];
                  return caml_cps_exact_call2
                          (out,
                           Opcodes[109],
                           function(_X_){
                            return caml_cps_exact_call2
                                    (out_int,
                                     c$7,
                                     function(_Y_){return caml_cps_exact_call1(_F_, c$6);});
                           });
               }
               break;
              case 1:
               if(! sc[2]){
                var t = sc[1];
                return 0 === t
                        ? caml_cps_exact_call2
                          (out,
                           Opcodes[61],
                           function(_U_){return caml_cps_exact_call1(_F_, c$6);})
                        : caml_cps_exact_call2
                          (out,
                           Opcodes[62],
                           function(_V_){
                            return caml_cps_exact_call2
                                    (out_int,
                                     t,
                                     function(_W_){return caml_cps_exact_call1(_F_, c$6);});
                           });
               }
               break;
            }
            return caml_cps_exact_call2
                    (out,
                     Opcodes[55],
                     function(_S_){
                      return caml_cps_exact_call2
                              (slot_for_literal,
                               sc,
                               function(_T_){return caml_cps_exact_call1(_F_, c$6);});
                     });
           case 35:
            var ev = match[1], _N_ = ev[4];
            if(typeof _N_ === "number" && ! _N_){
             var match$5 = _G_[2];
             if(match$5){
              var instr1 = match$5[1];
              if(typeof instr1 !== "number"){
               switch(instr1[0]){
                 case 13:
                  var match$6 = match$5[2];
                  if(match$6){
                   var instr2 = match$6[1];
                   if(typeof instr2 !== "number" && 18 === instr2[0]){
                    var c$10 = match$6[2];
                    return caml_cps_exact_call3
                            (remerge_events,
                             ev,
                             c$10,
                             function(_R_){
                              return caml_cps_exact_call1
                                      (_F_, [0, 0, [0, instr1, [0, instr2, _R_]]]);
                             });
                   }
                  }
                  break;
                 case 1:
                 case 2:
                 case 12:
                 case 15: break;
                 default: break a;
               }
               var c$9 = match$5[2];
               return caml_cps_exact_call3
                       (remerge_events,
                        ev,
                        c$9,
                        function(_Q_){
                         return caml_cps_exact_call1(_F_, [0, 0, [0, instr1, _Q_]]);
                        });
              }
             }
            }
            break;
         }
       }
      }
     }
     else if(13 === instr[0]){
      var _O_ = param[2];
      if(_O_){
       var match$7 = _O_[1];
       if(typeof match$7 !== "number" && 18 === match$7[0]){
        var c$11 = _O_[2], n$2 = match$7[1], id$0 = instr[1];
        return caml_cps_exact_call2
                (out,
                 Opcodes[56],
                 function(_aB_){
                  return caml_cps_exact_call2
                          (slot_for_getglobal,
                           id$0,
                           function(_aC_){
                            return caml_cps_exact_call2
                                    (out_int,
                                     n$2,
                                     function(_aD_){return caml_cps_exact_call1(_F_, c$11);});
                           });
                 });
       }
      }
     }
     var c = param[2];
     return caml_cps_exact_call2
             (emit_instr,
              instr,
              function(_P_){return caml_cps_exact_call1(_F_, c);});
    }
    return _F_(param);
   }
   function to_file(outchan, unit_name, objfile, required_globals, code, cont){
    init(undef);
    return caml_cps_call3
            (Stdlib[66],
             outchan,
             Config[25],
             function(_k_){
              return caml_cps_call2
                      (Stdlib[74],
                       outchan,
                       function(pos_depl){
                        return caml_cps_call3
                                (Stdlib[71],
                                 outchan,
                                 0,
                                 function(_l_){
                                  return caml_cps_call2
  (Stdlib[74],
   outchan,
   function(pos_code){
    return caml_cps_exact_call2
            (emit,
             code,
             function(_m_){
              return caml_cps_call5
                      (Misc[46][7],
                       outchan,
                       out_buffer[1],
                       0,
                       out_position[1],
                       function(_n_){
                        function _p_(pos_debug, size_debug){
                         var _x_ = Clflags[23][1];
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  Primitive[6],
                                  Translmod[11][1],
                                  function(_y_){
                                   return caml_cps_call2
   (Ident[6][22],
    required_globals,
    function(_z_){
     return caml_cps_call2
             (Env[118],
              0,
              function(_A_){
               return caml_cps_call2
                       (Stdlib_List[9],
                        reloc_info[1],
                        function(_B_){
                         var
                          compunit =
                            [0,
                             unit_name,
                             pos_code,
                             out_position[1],
                             _B_,
                             _A_,
                             _z_,
                             _y_,
                             _x_,
                             pos_debug,
                             size_debug];
                         init(undef);
                         return caml_cps_call2
                                 (Btype[53],
                                  0,
                                  function(_C_){
                                   return caml_cps_call2
   (Stdlib[74],
    outchan,
    function(pos_compunit){
     return caml_cps_exact_call5
             (marshal_to_channel_with_possib,
              objfile,
              cst_bytecode_unit,
              outchan,
              compunit,
              function(_D_){
               return caml_cps_call3
                       (Stdlib[73],
                        outchan,
                        pos_depl,
                        function(_E_){
                         return caml_cps_call3
                                 (Stdlib[71], outchan, pos_compunit, cont);
                        });
              });
    });
                                  });
                        });
              });
    });
                                  });
                        }
                        if(! Clflags[19][1]) return _p_(0, 0);
                        var _o_ = debug_dirs[1];
                        return caml_cps_call2
                                (Location[19],
                                 objfile,
                                 function(_q_){
                                  return caml_cps_call2
  (Stdlib_Filename[14],
   _q_,
   function(_r_){
    return caml_cps_call3
            (Misc[13][4][64][4],
             _r_,
             _o_,
             function(_s_){
              debug_dirs[1] = _s_;
              return caml_cps_call2
                      (Stdlib[74],
                       outchan,
                       function(p){
                        return caml_cps_call3
                                (Stdlib[72],
                                 outchan,
                                 events[1],
                                 function(_t_){
                                  return caml_cps_call2
  (Misc[13][4][64][23],
   debug_dirs[1],
   function(_u_){
    return caml_cps_call3
            (Stdlib[72],
             outchan,
             _u_,
             function(_v_){
              return caml_cps_call2
                      (Stdlib[74],
                       outchan,
                       function(_w_){return _p_(p, _w_ - p | 0);});
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function to_memory(init_code, fun_code, cont){
    init(undef);
    return caml_cps_exact_call2
            (emit,
             init_code,
             function(_h_){
              return caml_cps_exact_call2
                      (emit,
                       fun_code,
                       function(_i_){
                        return caml_cps_call2
                                (Misc[46][1],
                                 out_position[1],
                                 function(code){
                                  return caml_cps_call6
  (Misc[46][5],
   out_buffer[1],
   0,
   code,
   0,
   out_position[1],
   function(_j_){
    return caml_cps_call2
            (Stdlib_List[9],
             reloc_info[1],
             function(reloc){
              var events$0 = events[1];
              init(undef);
              return cont([0, code, reloc, events$0]);
             });
   });
                                 });
                       });
             });
   }
   function to_packed_file(outchan, code, cont){
    init(undef);
    return caml_cps_exact_call2
            (emit,
             code,
             function(_f_){
              return caml_cps_call5
                      (Misc[46][7],
                       outchan,
                       out_buffer[1],
                       0,
                       out_position[1],
                       function(_g_){
                        var reloc = reloc_info[1];
                        init(undef);
                        return cont(reloc);
                       });
             });
   }
   function reset(param, cont){
    return caml_cps_call2
            (Misc[46][1],
             1024,
             function(_e_){
              out_buffer[1] = _e_;
              out_position[1] = 0;
              label_table[1] = [0];
              reloc_info[1] = 0;
              return cont(0);
             });
   }
   var
    Emitcode =
      [0,
       to_file,
       to_memory,
       to_packed_file,
       reset,
       marshal_to_channel_with_possib];
   runtime.caml_register_global(28, Emitcode, "Emitcode");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytelink
//# unitInfo: Requires: Bytesections, Ccomp, Clflags, Config, Consistbl, Dll, Emitcode, Ident, Load_path, Location, Misc, Opcodes, Stdlib, Stdlib__Array, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Marshal, Stdlib__Option, Stdlib__Printf, Stdlib__String, Stdlib__Sys, Symtable
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst$11 = "\n};\n\n",
    cst$12 = ", ",
    cst_lcamlrun$1 = "-lcamlrun",
    cst_c$4 = ".c",
    cst_hov_2 = "<hov 2>",
    cst_hov = "<hov>",
    cst$9 = "@ ",
    cst_CRCS$1 = "CRCS",
    cst_DBUG$1 = "DBUG",
    cst_Error_while_building_custo =
      "Error while building custom runtime system",
    cst_PRIM$1 = "PRIM",
    cst_SYMB$2 = "SYMB",
    cst_stdlib_cma$1 = "stdlib.cma",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_callback = runtime.caml_callback,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_output_value_to_string = runtime.caml_output_value_to_string,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_cps_exact_call0(f){
    return runtime.caml_stack_check_depth()
            ? f()
            : runtime.caml_trampoline_return(f, []);
   }
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 7
              ? f(a0, a1, a2, a3, a4, a5, a6)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_cps_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 8
              ? f(a0, a1, a2, a3, a4, a5, a6, a7)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/bytelink.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x07@\0\0\x01w\0\0\x05\x8d\0\0\x05J\xa0(Bytelink\xa0\xb0\xa0$link\x01\x02\x1d\xd0\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\xa1\x90\x92$Misc(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x90@\x02\x05\xf5\xe1\0@\0\xd7\xc0\xc1@\xc0\xb3\xa1\x04\x0b(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xd8\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xd9@\x02\x05\xf5\xe1\0@\0\xda@\x02\x05\xf5\xe1\0@\0\xdb@\xb0\xc05bytecomp/bytelink.mliT\x01\x04|\x01\x04|\xc0\x04\x02T\x01\x04|\x01\x04\xa8@@\xa1\x04)@@\xa0\xb0\xa0%reset\x01\x02\x1e\xd0\xc0\xc1@\xc0\xb3\x90\x04\x12@\x90@\x02\x05\xf5\xe1\0@\0\xdc\xc0\xb3\x90\x04\x16@\x90@\x02\x05\xf5\xe1\0@\0\xdd@\x02\x05\xf5\xe1\0@\0\xde@\xb0\xc0\x04\x14U\x01\x04\xa9\x01\x04\xa9\xc0\x04\x15U\x01\x04\xa9\x01\x04\xc1@@\xa1\x04<A@\xa0\xb0\xa01check_consistency\x01\x02\x1f\xd0\xc0\xc1@\xc0\xb3\xa1\x045(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xdf\xc0\xc1@\xc0\xb3\xa1\x90\x92*Cmo_format0compilation_unit@\x90@\x02\x05\xf5\xe1\0@\0\xe0\xc0\xb3\x90\x044@\x90@\x02\x05\xf5\xe1\0@\0\xe1@\x02\x05\xf5\xe1\0@\0\xe2@\x02\x05\xf5\xe1\0@\0\xe3@\xb0\xc0\x042W\x01\x04\xc3\x01\x04\xc3\xc0\x043W\x01\x04\xc3\x01\x05\t@@\xa1\x04ZB@\xa0\xb0\xa06extract_crc_interfaces\x01\x02 \xd0\xc0\xc1@\xc0\xb3\x90\x04C@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xc0\xb3\xa1\x04W$crcs@\x90@\x02\x05\xf5\xe1\0@\0\xe5@\x02\x05\xf5\xe1\0@\0\xe6@\xb0\xc0\x04FY\x01\x05\x0b\x01\x05\x0b\xc0\x04GY\x01\x05\x0b\x01\x053@@\xa1\x04nC@\xa0\xc1\xa0%error\x01\x02!\b\0\0;\0@@\xa1\xa0\xe0\xa0.File_not_found\x01\x01W\x90\xa0\xc0\xb3\xa1\x04l(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf8@@\xb0\xc0\x04[\\\x01\x05B\x01\x05D\xc0\x04\\\\\x01\x05B\x01\x05`@@\xa1\x04\x83E\xa0\xe0\xa02Not_an_object_file\x01\x01X\x90\xa0\xc0\xb3\xa1\x04{(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf7@@\xb0\xc0\x04j]\x01\x05a\x01\x05c\xc0\x04k]\x01\x05a\x01\x05\x83@@\xa1\x04\x92F\xa0\xe0\xa01Wrong_object_name\x01\x01Y\x90\xa0\xc0\xb3\xa1\x04\x8a(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@\xb0\xc0\x04y^\x01\x05\x84\x01\x05\x86\xc0\x04z^\x01\x05\x84\x01\x05\xa5@@\xa1\x04\xa1G\xa0\xe0\xa0,Symbol_error\x01\x01Z\x90\xa0\xc0\xb3\xa1\x04\x99(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xa0\xc0\xb3\xa1\x90\x92(Symtable%error@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x04\x91_\x01\x05\xa6\x01\x05\xa8\xc0\x04\x92_\x01\x05\xa6\x01\x05\xd3@@\xa1\x04\xb9H\xa0\xe0\xa03Inconsistent_import\x01\x01z\x90\xa0\xc0\xb3\xa1\x04\xb1'modname@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xa0\xc0\xb3\xa1\x04\xb7(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf2\xa0\xc0\xb3\xa1\x04\xbd(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf1@@\xb0\xc0\x04\xac`\x01\x05\xd4\x01\x05\xd6\xc0\x04\xad`\x01\x05\xd4\x01\x06\f@@\xa1\x04\xd4I\xa0\xe0\xa0.Custom_runtime\x01\x01{\x90@@\xb0\xc0\x04\xb5a\x01\x06\r\x01\x06\x0f\xc0\x04\xb6a\x01\x06\r\x01\x06\x1f@@\xa1\x04\xddJ\xa0\xe0\xa0+File_exists\x01\x01|\x90\xa0\xc0\xb3\xa1\x04\xd5(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xf0@@\xb0\xc0\x04\xc4b\x01\x06 \x01\x06\"\xc0\x04\xc5b\x01\x06 \x01\x06;@@\xa1\x04\xecK\xa0\xe0\xa0/Cannot_open_dll\x01\x01}\x90\xa0\xc0\xb3\xa1\x04\xe4(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xef@@\xb0\xc0\x04\xd3c\x01\x06<\x01\x06>\xc0\x04\xd4c\x01\x06<\x01\x06[@@\xa1\x04\xfbL\xa0\xe0\xa0;Required_module_unavailable\x01\x01~\x90\xa0\xc0\xb3\xa1\x04\xf3'modname@\x90@\x02\x05\xf5\xe1\0@\0\xee\xa0\xc0\xb3\xa1\x04\xf9'modname@\x90@\x02\x05\xf5\xe1\0@\0\xed@@\xb0\xc0\x04\xe8d\x01\x06\\\x01\x06^\xc0\x04\xe9d\x01\x06\\\x01\x06\x90@@\xa1\x05\x01\x10M\xa0\xe0\xa0*Camlheader\x01\x01\x7f\x90\xa0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xec\xa0\xc0\xb3\xa1\x05\x01\x0f(filepath@\x90@\x02\x05\xf5\xe1\0@\0\xeb@@\xb0\xc0\x04\xfee\x01\x06\x91\x01\x06\x93\xc0\x04\xffe\x01\x06\x91\x01\x06\xb4@@\xa1\x05\x01&N\xa0\xe0\xa00Wrong_link_order\x01\x01\x80\x90\xa0\xc0\xb3\x90\x05\x01$\xa0\xc0\x92\xa0\xc0\xb3\xa1\x05\x01%'modname@\x90@\x02\x05\xf5\xe1\0@\0\xe8\xa0\xc0\xb3\xa1\x05\x01+'modname@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe9@\x90@\x02\x05\xf5\xe1\0@\0\xea@@\xb0\xc0\x05\x01\x1bf\x01\x06\xb5\x01\x06\xb7\xc0\x05\x01\x1cf\x01\x06\xb5\x01\x06\xe5@@\xa1\x05\x01CO@@A@@@@@\xb0\xc0\x05\x01\x1f[\x01\x055\x01\x055\x04\x04@@@@\xa1\x05\x01FDA@\xa0\xc2\xa0%Error\x01\x02\"\b\0\0#\0\x90\xa3#exnG@\x90\xa0\xc0\xb3\x90\x04\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xf9@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x05\x01XPB@\xa0\xb0\xa0,report_error\x01\x02#\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\x04\x1b@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\x05\x01P@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x01Nl\x01\x07\x0e\x01\x07\x0e\xc0\x05\x01Ol\x01\x07\x0e\x01\x07:@@\xa1\x05\x01vQ@@\x84\x95\xa6\xbe\0\0\x05L\0\0\0\xd7\0\0\x03\x12\0\0\x02\x80\xa0\xa0(Bytelink\x900\x12\xf2g\x10\x0e\xa4\xd1\xe6\x1bA\x07U\xf0\xda\xd2{\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0(Symtable\x900j\xe1I\nY\xc9\xe8\xbah/ \xf7\xc2\xd2\xdc\xbf\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Obj\x900\x85e^\xce\xec[\xcdl|N\xf5\xddgX\xb1\x9d\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0-Stdlib__Int32\x900\x1d\xb6\x04\xc2\x10o\x99n\xa4zW's\xa5\xff\x7f\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0*Cmo_format\x900k\x8em\xa4\xcb\x19\x16\x96\xfc\x8d\x84\xc9\xb7\x16b\x9f\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$10,
    cst$7 = cst$10,
    cst$8 = cst$10,
    stable_name = [0, "camlobj.c"],
    cst$5 = cst$10,
    cst$4 = " ",
    cst$2 = cst$11,
    cst$3 = cst$11,
    cst$1 = "\n",
    cst = ")",
    cst$0 = "(",
    Ident = global_data.Ident,
    Location = global_data.Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Symtable = global_data.Symtable,
    Misc = global_data.Misc,
    Stdlib_List = global_data.Stdlib__List,
    Clflags = global_data.Clflags,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ccomp = global_data.Ccomp,
    Config = global_data.Config,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Opcodes = global_data.Opcodes,
    Bytesections = global_data.Bytesections,
    Load_path = global_data.Load_path,
    Dll = global_data.Dll,
    Emitcode = global_data.Emitcode,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Array = global_data.Stdlib__Array,
    Consistbl = global_data.Consistbl,
    Error = [248, "Bytelink.Error", runtime.caml_fresh_oo_id(0)],
    lib_ccobjs = [0, 0],
    lib_ccopts = [0, 0],
    lib_dllibs = [0, 0],
    missing_globals = [0, Ident[7][1]],
    provided_globals = [0, Ident[6][1]],
    badly_ordered_dependencies = [0, 0],
    cst_CAMLORIGIN = "$CAMLORIGIN";
   function is_required(param, cont){
    var rel = param[1];
    if(2 !== rel[0]) return cont(0);
    var id = rel[1];
    return caml_cps_call3(Ident[7][3], id, missing_globals[1], cont);
   }
   function add_required(compunit, cont){
    function add(id, cont){
     return caml_cps_call3
             (Ident[6][3],
              id,
              provided_globals[1],
              function(_dl_){
               function _do_(){
                return caml_cps_call4
                        (Ident[7][4],
                         id,
                         compunit[1],
                         missing_globals[1],
                         function(_dq_){missing_globals[1] = _dq_; return cont(0);});
               }
               if(! _dl_) return _do_();
               var _dm_ = badly_ordered_dependencies[1], _dn_ = compunit[1];
               return caml_cps_call2
                       (Ident[15],
                        id,
                        function(_dp_){
                         badly_ordered_dependencies[1] = [0, [0, _dp_, _dn_], _dm_];
                         return _do_();
                        });
              });
    }
    return caml_cps_call2
            (Symtable[19],
             compunit[4],
             function(_dj_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       add,
                       _dj_,
                       function(_dk_){
                        return caml_cps_call3
                                (Stdlib_List[17], add, compunit[6], cont);
                       });
             });
   }
   function remove_required(param, cont){
    var rel = param[1];
    if(2 !== rel[0]) return cont(0);
    var id = rel[1];
    return caml_cps_call3
            (Ident[7][7],
             id,
             missing_globals[1],
             function(_dh_){
              missing_globals[1] = _dh_;
              return caml_cps_call3
                      (Ident[6][4],
                       id,
                       provided_globals[1],
                       function(_di_){provided_globals[1] = _di_; return cont(0);});
             });
   }
   function scan_file(obj_name, tolink, cont){
    caml_push_trap
     (function(_dg_){
       if(_dg_ === Stdlib[8]){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Error, [0, obj_name]], 1));
       }
       var raise$0 = caml_pop_trap();
       return raise$0(caml_maybe_attach_backtrace(_dg_, 0));
      });
    return caml_cps_call2
            (Load_path[9],
             obj_name,
             function(file_name){
              caml_pop_trap();
              return caml_cps_call2
                      (Stdlib[80],
                       file_name,
                       function(ic){
                        caml_push_trap
                         (function(x){
                           return x === Stdlib[12]
                                   ? caml_cps_call2
                                     (Stdlib[93],
                                      ic,
                                      function(_de_){
                                       var raise = caml_pop_trap();
                                       return raise
       (caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1));
                                      })
                                   : caml_cps_call2
                                     (Stdlib[93],
                                      ic,
                                      function(_df_){
                                       var
raise = caml_pop_trap(),
x$0 = caml_maybe_attach_backtrace(x, 0);
                                       return raise(x$0);
                                      });
                          });
                        return caml_cps_call3
                                (Stdlib[86],
                                 ic,
                                 caml_ml_string_length(Config[25]),
                                 function(buffer){
                                  function _cV_(_dd_){caml_pop_trap(); return cont(_dd_);}
                                  if(caml_string_equal(buffer, Config[25]))
                                   return caml_cps_call2
   (Stdlib[88],
    ic,
    function(compunit_pos){
     return caml_cps_call3
             (Stdlib[90],
              ic,
              compunit_pos,
              function(_c$_){
               return caml_cps_call2
                       (Stdlib[89],
                        ic,
                        function(compunit){
                         return caml_cps_call2
                                 (Stdlib[93],
                                  ic,
                                  function(_da_){
                                   return caml_cps_exact_call2
   (add_required,
    compunit,
    function(_db_){
     return caml_cps_call3
             (Stdlib_List[17],
              remove_required,
              compunit[4],
              function(_dc_){
               return _cV_([0, [0, file_name, compunit], tolink]);
              });
    });
                                  });
                        });
              });
    });
                                  if(caml_string_equal(buffer, Config[26]))
                                   return caml_cps_call2
   (Stdlib[88],
    ic,
    function(pos_toc){
     return caml_cps_call3
             (Stdlib[90],
              ic,
              pos_toc,
              function(_cW_){
               return caml_cps_call2
                       (Stdlib[89],
                        ic,
                        function(toc){
                         return caml_cps_call2
                                 (Stdlib[93],
                                  ic,
                                  function(_cX_){
                                   return caml_cps_call2
   (Stdlib_Filename[14],
    file_name,
    function(origin){
     function _c0_(){
      return caml_cps_call4
              (Stdlib_List[26],
               function(compunit, reqd, cont){
                function _c7_(){
                 return caml_cps_exact_call2
                         (add_required,
                          compunit,
                          function(_c9_){
                           return caml_cps_call3
                                   (Stdlib_List[17],
                                    remove_required,
                                    compunit[4],
                                    function(_c__){return cont([0, compunit, reqd]);});
                          });
                }
                return compunit[8]
                        ? _c7_()
                        : Clflags
                            [23]
                           [1]
                          ? _c7_()
                          : caml_cps_call3
                            (Stdlib_List[33],
                             is_required,
                             compunit[4],
                             function(_c8_){return _c8_ ? _c7_() : cont(reqd);});
               },
               toc[1],
               0,
               function(required){
                return _cV_([0, [1, file_name, required], tolink]);
               });
     }
     if(! (1 - Clflags[59][1])) return _c0_();
     var
      _cY_ = 0 === caml_ml_string_length(Clflags[49][1]) ? 1 : 0,
      _cZ_ =
        _cY_
         ? 0 === caml_ml_string_length(Clflags[48][1]) ? 1 : 0
         : _cY_;
     function _c1_(){
      return caml_cps_call3
              (Stdlib[37],
               toc[5],
               lib_dllibs[1],
               function(_c6_){lib_dllibs[1] = _c6_; return _c0_();});
     }
     if(! _cZ_) return _c1_();
     if(toc[2]) Clflags[24][1] = 1;
     return caml_cps_call3
             (Stdlib[37],
              toc[3],
              lib_ccobjs[1],
              function(_c2_){
               lib_ccobjs[1] = _c2_;
               return caml_cps_call3
                       (Misc[35],
                        cst_CAMLORIGIN,
                        origin,
                        function(replace_origin){
                         var _c3_ = lib_ccopts[1];
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  replace_origin,
                                  toc[4],
                                  function(_c4_){
                                   return caml_cps_call3
   (Stdlib[37],
    _c4_,
    _c3_,
    function(_c5_){lib_ccopts[1] = _c5_; return _c1_();});
                                  });
                        });
              });
    });
                                  });
                        });
              });
    });
                                  var raise = caml_pop_trap();
                                  return raise
  (caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1));
                                 });
                       });
             });
   }
   var
    _a_ = Misc[13][4],
    Consistbl$0 =
      caml_callback(Consistbl[1], [[0, _a_[64], _a_[65], _a_[66], _a_[9]]]),
    crc_interfaces = caml_callback(Consistbl$0[1], [0]),
    interfaces = [0, 0],
    implementations_defined = [0, 0];
   function check_consistency(file_name, cu, cont){
    caml_push_trap
     (function(exn){
       if(exn[1] === Consistbl$0[10]){
        var
         auth = exn[4],
         user = exn[3],
         name = exn[2],
         raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace
                  ([0, Error, [4, name, user, auth]], 1));
       }
       var
        raise$0 = caml_pop_trap(),
        exn$0 = caml_maybe_attach_backtrace(exn, 0);
       return raise$0(exn$0);
      });
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var crco = param[2], name = param[1];
              interfaces[1] = [0, name, interfaces[1]];
              if(! crco) return cont(0);
              var crc = crco[1];
              return caml_string_equal(name, cu[1])
                      ? caml_cps_call5
                        (Consistbl$0[5], crc_interfaces, name, crc, file_name, cont)
                      : caml_cps_call5
                        (Consistbl$0[3], crc_interfaces, name, crc, file_name, cont);
             },
             cu[5],
             function(_cN_){
              caml_pop_trap();
              function _cO_(){
               implementations_defined[1] =
                [0, [0, cu[1], file_name], implementations_defined[1]];
               return cont(0);
              }
              caml_push_trap
               (function(_cU_){
                 if(_cU_ === Stdlib[8]) return _cO_();
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_cU_, 0));
                });
              return caml_cps_call3
                      (Stdlib_List[46],
                       cu[1],
                       implementations_defined[1],
                       function(source){
                        return caml_cps_call2
                                (Location[20],
                                 source,
                                 function(_cP_){
                                  return caml_cps_call2
  (Location[20],
   file_name,
   function(_cQ_){
    var _cR_ = [15, cu[1], _cQ_, _cP_];
    return caml_cps_call2
            (Location[3],
             file_name,
             function(_cS_){
              return caml_cps_call3
                      (Location[37],
                       _cS_,
                       _cR_,
                       function(_cT_){caml_pop_trap(); return _cO_();});
             });
   });
                                 });
                       });
             });
   }
   function extract_crc_interfaces(param, cont){
    return caml_cps_call3(Consistbl$0[7], interfaces[1], crc_interfaces, cont);
   }
   function clear_crc_interfaces(param, cont){
    return caml_cps_call2
            (Consistbl$0[2],
             crc_interfaces,
             function(_cM_){interfaces[1] = 0; return cont(undef);});
   }
   var
    debug_info = [0, 0],
    _b_ = [0, 1, [0, 4, [0, 3, [0, 6, 0]]]],
    cst_camlheader_ur = "camlheader_ur",
    cst_0 = ' "$0" "$@"',
    cst_bin_sh_exec = "/bin/sh\nexec ",
    cst_RNTM = "RNTM",
    cst_CODE = "CODE",
    cst_DLPT = "DLPT",
    cst_DLLS = "DLLS",
    cst_PRIM = cst_PRIM$1,
    cst_bytecode_executable = "bytecode executable",
    cst_DATA = "DATA",
    cst_SYMB = cst_SYMB$2,
    cst_CRCS = cst_CRCS$1,
    cst_DBUG = cst_DBUG$1,
    cst_camlheader = "camlheader";
   function link_compunit
   (output_fun, currpos_fun, inchan, file_name, compunit, cont){
    return caml_cps_exact_call3
            (check_consistency,
             file_name,
             compunit,
             function(_cz_){
              return caml_cps_call3
                      (Stdlib[90],
                       inchan,
                       compunit[2],
                       function(_cA_){
                        return caml_cps_call3
                                (Misc[46][9],
                                 inchan,
                                 compunit[3],
                                 function(code_block){
                                  return caml_cps_call3
  (Symtable[2],
   code_block,
   compunit[4],
   function(_cB_){
    var
     _cC_ = Clflags[19][1],
     _cD_ = _cC_ ? 0 < compunit[9] ? 1 : 0 : _cC_;
    function _cE_(){
     return caml_cps_call3
             (Stdlib_Array[11],
              output_fun,
              code_block,
              function(_cK_){
               var _cL_ = Clflags[23][1];
               return _cL_
                       ? caml_cps_call3
                         (Stdlib_List[17], Symtable[3], compunit[7], cont)
                       : cont(_cL_);
              });
    }
    return _cD_
            ? caml_cps_call3
              (Stdlib[90],
               inchan,
               compunit[9],
               function(_cF_){
                return caml_cps_call2
                        (Stdlib[89],
                         inchan,
                         function(debug_event_list){
                          return caml_cps_call2
                                  (Stdlib[89],
                                   inchan,
                                   function(debug_dirs){
                                    return caml_cps_call2
    (Location[19],
     file_name,
     function(_cG_){
      return caml_cps_call2
              (Stdlib_Filename[14],
               _cG_,
               function(file_path){
                return caml_cps_call3
                        (Stdlib_List[36],
                         file_path,
                         debug_dirs,
                         function(_cH_){
                          var
                           debug_dirs$0 =
                             _cH_ ? debug_dirs : [0, file_path, debug_dirs],
                           _cI_ = debug_info[1];
                          return caml_cps_exact_call2
                                  (currpos_fun,
                                   undef,
                                   function(_cJ_){
                                    debug_info[1] =
                                     [0, [0, _cJ_, debug_event_list, debug_dirs$0], _cI_];
                                    return _cE_();
                                   });
                         });
               });
     });
                                   });
                         });
               })
            : _cE_();
   });
                                 });
                       });
             });
   }
   function link_file(output_fun, currpos_fun, param, cont){
    if(0 === param[0]){
     var compunit = param[2], file_name = param[1];
     return caml_cps_call2
             (Stdlib[80],
              file_name,
              function(inchan){
               caml_push_trap
                (function(x){
                  if(x[1] !== Symtable[27])
                   return caml_cps_call2
                           (Stdlib[93],
                            inchan,
                            function(_cy_){
                             var
                              raise = caml_pop_trap(),
                              x$0 = caml_maybe_attach_backtrace(x, 0);
                             return raise(x$0);
                            });
                  var msg = x[2];
                  return caml_cps_call2
                          (Stdlib[93],
                           inchan,
                           function(_cx_){
                            var raise = caml_pop_trap();
                            return raise
                                    (caml_maybe_attach_backtrace
                                      ([0, Error, [3, file_name, msg]], 1));
                           });
                 });
               return caml_cps_exact_call6
                       (link_compunit,
                        output_fun,
                        currpos_fun,
                        inchan,
                        file_name,
                        compunit,
                        function(_cv_){
                         return caml_cps_call2
                                 (Stdlib[93],
                                  inchan,
                                  function(_cw_){caml_pop_trap(); return cont(_cw_);});
                        });
              });
    }
    var units_required = param[2], file_name$0 = param[1];
    return caml_cps_call2
            (Stdlib[80],
             file_name$0,
             function(inchan){
              caml_push_trap
               (function(x){
                 return caml_cps_call2
                         (Stdlib[93],
                          inchan,
                          function(_cu_){
                           var
                            raise = caml_pop_trap(),
                            x$0 = caml_maybe_attach_backtrace(x, 0);
                           return raise(x$0);
                          });
                });
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(cu, cont){
                        return caml_cps_call3
                                (Stdlib[28],
                                 cu[1],
                                 cst,
                                 function(_cr_){
                                  return caml_cps_call3
  (Stdlib[28],
   cst$0,
   _cr_,
   function(_cs_){
    return caml_cps_call3
            (Stdlib[28],
             file_name$0,
             _cs_,
             function(name){
              caml_push_trap
               (function(exn){
                 if(exn[1] === Symtable[27]){
                  var msg = exn[2], raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace([0, Error, [3, name, msg]], 1));
                 }
                 var
                  raise$0 = caml_pop_trap(),
                  exn$0 = caml_maybe_attach_backtrace(exn, 0);
                 return raise$0(exn$0);
                });
              return caml_cps_exact_call6
                      (link_compunit,
                       output_fun,
                       currpos_fun,
                       inchan,
                       name,
                       cu,
                       function(_ct_){caml_pop_trap(); return cont(_ct_);});
             });
   });
                                 });
                       },
                       units_required,
                       function(_cp_){
                        return caml_cps_call2
                                (Stdlib[93],
                                 inchan,
                                 function(_cq_){caml_pop_trap(); return cont(_cq_);});
                       });
             });
   }
   function output_debug_info(oc, cont){
    return caml_cps_call2
            (Stdlib_List[1],
             debug_info[1],
             function(_ck_){
              return caml_cps_call3
                      (Stdlib[71],
                       oc,
                       _ck_,
                       function(_cl_){
                        return caml_cps_call3
                                (Stdlib_List[17],
                                 function(param, cont){
                                  var debug_dirs = param[3], evl = param[2], ofs = param[1];
                                  return caml_cps_call3
  (Stdlib[71],
   oc,
   ofs,
   function(_cn_){
    return caml_cps_call3
            (Stdlib[72],
             oc,
             evl,
             function(_co_){
              return caml_cps_call3(Stdlib[72], oc, debug_dirs, cont);
             });
   });
                                 },
                                 debug_info[1],
                                 function(_cm_){debug_info[1] = 0; return cont(undef);});
                       });
             });
   }
   function output_stringlist(oc, l, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(s, cont){
              return caml_cps_call3
                      (Stdlib[66],
                       oc,
                       s,
                       function(_cj_){
                        return caml_cps_call3(Stdlib[70], oc, 0, cont);
                       });
             },
             l,
             cont);
   }
   function link_bytecode(final_name, tolink, exec_name, standalone, cont){
    return caml_cps_call3
            (Stdlib_Option[3],
             final_name,
             exec_name,
             function(final_name){
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(param, cont){
                        if(0 === param[0]){
                         var file_name = param[1];
                         if(caml_string_equal(file_name, exec_name)){
                          var raise = caml_pop_trap();
                          return raise
                                  (caml_maybe_attach_backtrace([0, Error, [2, exec_name]], 1));
                         }
                        }
                        return cont(0);
                       },
                       tolink,
                       function(_bo_){
                        return caml_cps_call2
                                (Misc[17],
                                 exec_name,
                                 function(_bp_){
                                  var outperm = Clflags[130][1] ? 511 : 438;
                                  return caml_cps_call4
  (Stdlib[62],
   _b_,
   outperm,
   exec_name,
   function(outchan){
    return caml_cps_call4
            (Misc[4],
             [0,
              function(param, cont){
               return caml_cps_call2(Stdlib[76], outchan, cont);
              }],
             [0,
              function(param, cont){
               return caml_cps_call2(Misc[17], exec_name, cont);
              }],
             function(param, cont){
              var _bq_ = standalone ? Clflags[130][1] : standalone;
              function _bs_(){
               return caml_cps_call2
                       (Bytesections[1],
                        outchan,
                        function(_bw_){
                         var
                          _bx_ = 0 < caml_ml_string_length(Clflags[49][1]) ? 1 : 0,
                          _by_ = _bx_ ? Clflags[130][1] : _bx_;
                         function _bz_(_bL_){
                          return caml_cps_call2
                                  (Stdlib[74],
                                   outchan,
                                   function(start_code){
                                    return caml_cps_call2
    (Symtable[1],
     0,
     function(_bM_){
      return caml_cps_exact_call2
              (clear_crc_interfaces,
               undef,
               function(_bN_){
                return caml_cps_call3
                        (Stdlib_List[19],
                         Dll[1],
                         Clflags[10][1],
                         function(sharedobjs){
                          var
                           check_dlls =
                             standalone
                              ? caml_string_equal(Config[54], Config[53])
                              : standalone;
                          function _bO_(){
                           return caml_cps_call2
                                   (Stdlib[67],
                                    outchan,
                                    function(output_fun){
                                     function currpos_fun(param, cont){
                                      return caml_cps_call2
      (Stdlib[74],
       outchan,
       function(_ci_){return cont(_ci_ - start_code | 0);});
                                     }
                                     return caml_cps_call3
     (Stdlib_List[17],
      function(_ch_, cont){
       return caml_cps_exact_call4
               (link_file, output_fun, currpos_fun, _ch_, cont);
      },
      tolink,
      function(_bT_){
       function _bU_(_bV_){
        return caml_cps_call3
                (Stdlib[70],
                 outchan,
                 Opcodes[144],
                 function(_bW_){
                  return caml_cps_call3
                          (Stdlib[70],
                           outchan,
                           0,
                           function(_bX_){
                            return caml_cps_call3
                                    (Stdlib[70],
                                     outchan,
                                     0,
                                     function(_bY_){
                                      return caml_cps_call3
      (Stdlib[70],
       outchan,
       0,
       function(_bZ_){
        return caml_cps_call3
                (Bytesections[2],
                 outchan,
                 cst_CODE,
                 function(_b0_){
                  function _b1_(_b5_){
                   return caml_cps_call2
                           (Symtable[6],
                            outchan,
                            function(_b6_){
                             return caml_cps_call3
                                     (Bytesections[2],
                                      outchan,
                                      cst_PRIM,
                                      function(_b7_){
                                       return caml_cps_call2
       (Symtable[4],
        0,
        function(_b8_){
         return caml_cps_call5
                 (Emitcode[5],
                  final_name,
                  cst_bytecode_executable,
                  outchan,
                  _b8_,
                  function(_b9_){
                   return caml_cps_call3
                           (Bytesections[2],
                            outchan,
                            cst_DATA,
                            function(_b__){
                             return caml_cps_call2
                                     (Symtable[5],
                                      outchan,
                                      function(_b$_){
                                       return caml_cps_call3
       (Bytesections[2],
        outchan,
        cst_SYMB,
        function(_ca_){
         return caml_cps_exact_call2
                 (extract_crc_interfaces,
                  undef,
                  function(_cb_){
                   return caml_cps_call3
                           (Stdlib[72],
                            outchan,
                            _cb_,
                            function(_cc_){
                             return caml_cps_call3
                                     (Bytesections[2],
                                      outchan,
                                      cst_CRCS,
                                      function(_cd_){
                                       function _ce_(_cg_){
return caml_cps_call2(Bytesections[3], outchan, cont);
                                       }
                                       return Clflags[19][1]
       ? caml_cps_exact_call2
         (output_debug_info,
          outchan,
          function(_cf_){
           return caml_cps_call3
                   (Bytesections[2], outchan, cst_DBUG, _ce_);
          })
       : _ce_(0);
                                      });
                            });
                  });
        });
                                      });
                            });
                  });
        });
                                      });
                            });
                  }
                  return standalone
                          ? caml_cps_exact_call3
                            (output_stringlist,
                             outchan,
                             Clflags[60][1],
                             function(_b2_){
                              return caml_cps_call3
                                      (Bytesections[2],
                                       outchan,
                                       cst_DLPT,
                                       function(_b3_){
return caml_cps_exact_call3
        (output_stringlist,
         outchan,
         sharedobjs,
         function(_b4_){
          return caml_cps_call3
                  (Bytesections[2], outchan, cst_DLLS, _b1_);
         });
                                       });
                             })
                          : _b1_(0);
                 });
       });
                                     });
                           });
                 });
       }
       return check_dlls
               ? caml_cps_call2(Dll[3], 0, _bU_)
               : _bU_(0);
      });
                                    });
                          }
                          return check_dlls
                                  ? caml_cps_call2
                                    (Dll[8],
                                     Clflags[15][1],
                                     function(_bP_){
                                      return caml_cps_call2
      (Load_path[8],
       0,
       function(_bQ_){
        return caml_cps_call2
                (Dll[6],
                 _bQ_,
                 function(_bR_){
                  caml_push_trap
                   (function(exn){
                     if(exn[1] === Stdlib[7]){
                      var reason = exn[2], raise = caml_pop_trap();
                      return raise
                              (caml_maybe_attach_backtrace([0, Error, [6, reason]], 1));
                     }
                     var
                      raise$0 = caml_pop_trap(),
                      exn$0 = caml_maybe_attach_backtrace(exn, 0);
                     return raise$0(exn$0);
                    });
                  return caml_cps_call3
                          (Dll[2],
                           0,
                           sharedobjs,
                           function(_bS_){caml_pop_trap(); return _bO_();});
                 });
       });
                                     })
                                  : _bO_();
                         });
               });
     });
                                   });
                         }
                         if(! _by_) return _bz_(0);
                         var file = Clflags[49][1];
                         return caml_cps_call2
                                 (Stdlib_Filename[5],
                                  file,
                                  function(_bA_){
                                   function _bC_(runtime){
                                    function _bF_(runtime){
                                     return caml_cps_call3
     (Stdlib[66],
      outchan,
      runtime,
      function(_bJ_){
       return caml_cps_call3
               (Stdlib[65],
                outchan,
                10,
                function(_bK_){
                 return caml_cps_call3
                         (Bytesections[2], outchan, cst_RNTM, _bz_);
                });
      });
                                    }
                                    function _bE_(){
                                     return caml_cps_call2
     (Stdlib_Filename[20],
      runtime,
      function(_bH_){
       return caml_cps_call3
               (Stdlib[28],
                _bH_,
                cst_0,
                function(_bI_){
                 return caml_cps_call3
                         (Stdlib[28], cst_bin_sh_exec, _bI_, _bF_);
                });
      });
                                    }
                                    return 125 < caml_ml_string_length(runtime)
    ? _bE_()
    : caml_cps_call3
      (Stdlib_String[14],
       runtime,
       32,
       function(_bG_){return _bG_ ? _bE_() : _bF_(runtime);});
                                   }
                                   if(! _bA_) return _bC_(file);
                                   var _bB_ = runtime.caml_sys_getcwd(0);
                                   return caml_cps_call3
   (Stdlib_Filename[4],
    _bB_,
    file,
    function(_bD_){
     return caml_cps_call2(Location[18], _bD_, _bC_);
    });
                                  });
                        });
              }
              if(! _bq_) return _bs_();
              function _br_(header){
               caml_push_trap
                (function(exn){
                  if(exn === Stdlib[8]){
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace([0, Error, [0, header]], 1));
                  }
                  if(exn[1] === Stdlib[11]){
                   var msg = exn[2], raise$0 = caml_pop_trap();
                   return raise$0
                           (caml_maybe_attach_backtrace
                             ([0, Error, [8, header, msg]], 1));
                  }
                  var
                   raise$1 = caml_pop_trap(),
                   exn$0 = caml_maybe_attach_backtrace(exn, 0);
                  return raise$1(exn$0);
                 });
               return caml_cps_call2
                       (Load_path[9],
                        header,
                        function(_bt_){
                         return caml_cps_call2
                                 (Stdlib[80],
                                  _bt_,
                                  function(inchan){
                                   return caml_cps_call3
   (Misc[21],
    inchan,
    outchan,
    function(_bu_){
     return caml_cps_call2
             (Stdlib[93],
              inchan,
              function(_bv_){caml_pop_trap(); return _bs_();});
    });
                                  });
                        });
              }
              return 0 < caml_ml_string_length(Clflags[49][1])
                      ? _br_(cst_camlheader_ur)
                      : caml_cps_call3
                        (Stdlib[28], cst_camlheader, Clflags[129][1], _br_);
             },
             cont);
   });
                                 });
                       });
             });
   }
   var
    output_code_string_counter = [0, 0],
    _c_ =
      [0,
       [11,
        "0x",
        [4,
         6,
         [0, 2, 2],
         0,
         [4,
          6,
          [0, 2, 2],
          0,
          [4, 6, [0, 2, 2], 0, [4, 6, [0, 2, 2], 0, [11, cst$12, 0]]]]]],
       "0x%02x%02x%02x%02x, "],
    _d_ = [0, [4, 0, 0, 0, [11, cst$12, 0]], "%d, "],
    _e_ = [0, 1, [0, 4, [0, 3, [0, 6, 0]]]],
    cst_SYMB$0 = cst_SYMB$2,
    cst_DBUG$0 = cst_DBUG$1,
    cst_define_CAML_INTERNALS_defi =
      '#define CAML_INTERNALS\n#define CAMLDLLIMPORT\n\n#ifdef __cplusplus\nextern "C" {\n#endif\n#include <caml/mlvalues.h>\n#include <caml/startup.h>\n#include <caml/sys.h>\n#include <caml/misc.h>\n',
    cst_static_int_caml_code = "static int caml_code[] = {\n",
    _f_ = [0, [11, "\n0x", [4, 6, 0, 0, [11, "};\n\n", 0]]], "\n0x%x};\n\n"],
    cst_static_char_caml_data = "static char caml_data[] = {\n",
    cst_CRCS$0 = cst_CRCS$1,
    cst_PRIM$0 = cst_PRIM$1,
    cst_SYMB$1 = cst_SYMB$2,
    cst_static_char_caml_sections = "static char caml_sections[] = {\n",
    cst_int_main_os_int_argc_char_ =
      "\nint main_os(int argc, char_os **argv)\n{\n  caml_byte_program_mode = COMPLETE_EXE;\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 0,\n                    argv);\n  caml_do_exit(0);\n  return 0; /* not reached */\n}\n",
    cst_ifdef_cplusplus_endif = "\n#ifdef __cplusplus\n}\n#endif\n",
    cst_void_caml_startup_char_os_ =
      "\nvoid caml_startup(char_os ** argv)\n{\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 0,\n                    argv);\n}\n\nvalue caml_startup_exn(char_os ** argv)\n{\n  return caml_startup_code_exn(caml_code, sizeof(caml_code),\n                               caml_data, sizeof(caml_data),\n                               caml_sections, sizeof(caml_sections),\n                               /* pooling */ 0,\n                               argv);\n}\n\nvoid caml_startup_pooled(char_os ** argv)\n{\n  caml_startup_code(caml_code, sizeof(caml_code),\n                    caml_data, sizeof(caml_data),\n                    caml_sections, sizeof(caml_sections),\n                    /* pooling */ 1,\n                    argv);\n}\n\nvalue caml_startup_pooled_exn(char_os ** argv)\n{\n  return caml_startup_code_exn(caml_code, sizeof(caml_code),\n                               caml_data, sizeof(caml_data),\n                               caml_sections, sizeof(caml_sections),\n                               /* pooling */ 1,\n                               argv);\n}\n",
    cst_cds = ".cds",
    cst_lcamlrun = cst_lcamlrun$1,
    cst_I = "-I",
    _g_ =
      [0,
       [11, "-fdebug-prefix-map=", [2, 0, [11, "=camlprim.c", 0]]],
       "-fdebug-prefix-map=%s=camlprim.c"],
    cst_link = "-link",
    _h_ = [0, 1, [0, 2, [0, 6, 0]]],
    cst_exe = ".exe",
    cst_c = cst_c$4,
    cst_c$0 = cst_c$4,
    cst_c$1 = cst_c$4,
    cst_lcamlrun$0 = cst_lcamlrun$1,
    cst_c$2 = cst_c$4,
    cst_camlobj = "camlobj",
    cst_camlcode = "camlcode",
    cst_camlprim_c = ".camlprim.c",
    cst_ifdef_cplusplus_extern_C_e =
      '#ifdef __cplusplus\nextern "C" {\n#endif\n#ifdef _WIN64\n#ifdef __MINGW32__\ntypedef long long value;\n#else\ntypedef __int64 value;\n#endif\n#else\ntypedef long value;\n#endif\n',
    cst_ifdef_cplusplus_endif$0 = "#ifdef __cplusplus\n}\n#endif\n",
    cst_c$3 = cst_c$4,
    cst_camlprim = "camlprim",
    _i_ = [0, "std_exit.cmo", 0],
    cst_stdlib_cma = cst_stdlib_cma$1,
    cst_stdlib_cma$0 = cst_stdlib_cma$1,
    _j_ =
      [0,
       [11, cst_Error_while_building_custo, 0],
       cst_Error_while_building_custo],
    _k_ = [0, [11, "Cannot find file ", [15, 0]], "Cannot find file %a"],
    _l_ =
      [0,
       [11, "The file ", [15, [11, " is not a bytecode object file", 0]]],
       "The file %a is not a bytecode object file"],
    _m_ =
      [0,
       [11,
        "The output file ",
        [2,
         0,
         [11,
          " has the wrong name. The extension implies an object file but the link step was requested",
          0]]],
       "The output file %s has the wrong name. The extension implies an object file but the link step was requested"],
    _n_ =
      [0,
       [11,
        "Error while linking ",
        [15, [12, 58, [17, [0, cst$9, 1, 0], [15, 0]]]]],
       "Error while linking %a:@ %a"],
    _o_ =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         "Files ",
         [15,
          [17,
           [0, cst$9, 1, 0],
           [11,
            "and ",
            [15,
             [17,
              [0, cst$9, 1, 0],
              [11,
               "make inconsistent assumptions over interface ",
               [2, 0, [17, 0, 0]]]]]]]]]],
       "@[<hov>Files %a@ and %a@ make inconsistent assumptions over interface %s@]"],
    _p_ =
      [0,
       [11, "Cannot overwrite existing file ", [15, 0]],
       "Cannot overwrite existing file %a"],
    _q_ =
      [0,
       [11, "Error on dynamically loaded library: ", [15, 0]],
       "Error on dynamically loaded library: %a"],
    _r_ =
      [0,
       [11,
        "Module `",
        [2, 0, [11, "' is unavailable (required by `", [2, 0, [11, "')", 0]]]]],
       "Module `%s' is unavailable (required by `%s')"],
    _s_ =
      [0,
       [11, "System error while copying file ", [2, 0, [11, ": ", [2, 0, 0]]]],
       "System error while copying file %s: %s"],
    _t_ = [0, [2, 0, [11, " depends on ", [2, 0, 0]]], "%s depends on %s"],
    _u_ = [0, [12, 44, [17, [0, cst$9, 1, 0], 0]], ",@ "],
    _v_ =
      [0,
       [18,
        [1, [0, [11, cst_hov_2, 0], cst_hov_2]],
        [11, "Wrong link order: ", [15, [17, 0, 0]]]],
       "@[<hov 2>Wrong link order: %a@]"];
   function output_data_string(outchan, data, cont){
    var counter = [0, 0], _bg_ = caml_ml_string_length(data) - 1 | 0;
    function _bi_(i){
     var _bj_ = runtime.caml_string_get(data, i);
     return caml_cps_call4
             (Stdlib_Printf[1],
              outchan,
              _d_,
              _bj_,
              function(_bk_){
               counter[1]++;
               function _bl_(){
                var _bn_ = i + 1 | 0;
                return _bg_ !== i ? caml_cps_exact_call1(_bi_, _bn_) : _bh_();
               }
               return 12 <= counter[1]
                       ? caml_cps_call3
                         (Stdlib[66],
                          outchan,
                          cst$1,
                          function(_bm_){counter[1] = 0; return _bl_();})
                       : _bl_();
              });
    }
    function _bh_(){return cont(undef);}
    var _bf_ = 0;
    return _bg_ < 0 ? _bh_() : _bi_(_bf_);
   }
   function build_custom_runtime(prim_name, exec_name, cont){
    function _a5_(runtime_lib){
     function _a7_(debug_prefix_map){
      return caml_cps_call3
              (Stdlib[28],
               cst$4,
               Config[13],
               function(_a9_){
                return caml_cps_call2
                        (Clflags[124],
                         cst_I,
                         function(_a__){
                          return caml_cps_call3
                                  (Stdlib[28],
                                   _a__,
                                   _a9_,
                                   function(exitcode){
                                    var _a$_ = [0, runtime_lib, 0];
                                    return caml_cps_call2
    (Stdlib_List[9],
     Clflags[9][1],
     function(_ba_){
      return caml_cps_call3
              (Stdlib[37],
               _ba_,
               _a$_,
               function(_bb_){
                return caml_cps_call3
                        (Stdlib[37],
                         [0, prim_name, 0],
                         _bb_,
                         function(_bc_){
                          return caml_cps_call3
                                  (Stdlib[37],
                                   debug_prefix_map,
                                   _bc_,
                                   function(_bd_){
                                    return caml_cps_call5
    (Ccomp[7],
     0,
     exec_name,
     _bd_,
     exitcode,
     function(_be_){return cont(0 === _be_ ? 1 : 0);});
                                   });
                         });
               });
     });
                                   });
                         });
               });
     }
     if(Config[7] && ! Clflags[80][1]){
      var _a6_ = 0;
      return caml_cps_call3
              (Stdlib_Printf[4],
               _g_,
               prim_name,
               function(_a8_){
                var flag = [0, _a8_, _a6_];
                return Ccomp[8] ? _a7_([0, cst_link, flag]) : _a7_(flag);
               });
     }
     return _a7_(0);
    }
    return Clflags[130][1]
            ? caml_cps_call3(Stdlib[28], cst_lcamlrun, Clflags[129][1], _a5_)
            : _a5_(cst$5);
   }
   function link(objfiles, output_name, cont){
    function _B_(objfiles){
     return caml_cps_call4
             (Stdlib_List[26],
              scan_file,
              objfiles,
              0,
              function(tolink){
               return caml_cps_call3
                       (Ident[7][16],
                        function(id, param, cont){
                         return caml_cps_call2
                                 (Ident[22], id, function(_a4_){return cont(1 - _a4_);});
                        },
                        missing_globals[1],
                        function(missing_modules){
                         return caml_cps_call2
                                 (Ident[7][20],
                                  missing_modules,
                                  function(match){
                                   if(! match)
                                    return caml_cps_call3
    (Stdlib[37],
     Clflags[9][1],
     lib_ccobjs[1],
     function(_D_){
      Clflags[9][1] = _D_;
      return caml_cps_call3
              (Stdlib[37],
               lib_ccopts[1],
               Clflags[30][1],
               function(_E_){
                Clflags[30][1] = _E_;
                return caml_cps_call3
                        (Stdlib[37],
                         lib_dllibs[1],
                         Clflags[10][1],
                         function(_F_){
                          Clflags[10][1] = _F_;
                          return Clflags[24][1]
                                  ? Clflags
                                      [27]
                                     [1]
                                    ? caml_cps_call2
                                      (Stdlib_Filename[11],
                                       output_name,
                                       function(basename){
function _H_(){
 return caml_cps_call3
         (Stdlib[28],
          basename,
          cst_c$0,
          function(c_file){
           if(! runtime.caml_sys_file_exists(c_file))
            return _G_(c_file, 0);
           var raise = caml_pop_trap();
           return raise
                   (caml_maybe_attach_backtrace([0, Error, [5, c_file]], 1));
          });
}
function _G_(outfile, stable_name){
 function _L_(obj_file){
  var temps = [0, 0];
  return caml_cps_call4
          (Misc[4],
           [0,
            function(param, cont){
             return caml_cps_call3
                     (Stdlib_List[17], Misc[17], temps[1], cont);
            }],
           0,
           function(param, cont){
            var with_main = Clflags[29][1];
            return caml_cps_call2
                    (Stdlib[60],
                     outfile,
                     function(outchan){
                      return caml_cps_call4
                              (Misc[4],
                               [0,
                                function(param, cont){
                                 return caml_cps_call2(Stdlib[76], outchan, cont);
                                }],
                               [0,
                                function(param, cont){
                                 return caml_cps_call2(Misc[17], outfile, cont);
                                }],
                               function(param, cont){
                                return caml_cps_call3
(Stdlib[66],
 outchan,
 cst_define_CAML_INTERNALS_defi,
 function(_ap_){
  return caml_cps_call3
          (Stdlib[66],
           outchan,
           cst_static_int_caml_code,
           function(_aq_){
            return caml_cps_call2
                    (Symtable[1],
                     0,
                     function(_ar_){
                      return caml_cps_exact_call2
                              (clear_crc_interfaces,
                               undef,
                               function(_as_){
                                var currpos = [0, 0];
                                function output_fun(code, cont){
                                 var pos = [0, 0], len = caml_ml_bytes_length(code);
                                 function _aM_(){
                                  if(pos[1] < len){
                                   var
                                    c1 = caml_bytes_get(code, pos[1]),
                                    c2 = caml_bytes_get(code, pos[1] + 1 | 0),
                                    c3 = caml_bytes_get(code, pos[1] + 2 | 0),
                                    c4 = caml_bytes_get(code, pos[1] + 3 | 0);
                                   pos[1] = pos[1] + 4 | 0;
                                   return caml_cps_call7
   (Stdlib_Printf[1],
    outchan,
    _c_,
    c4,
    c3,
    c2,
    c1,
    function(_aN_){
     output_code_string_counter[1]++;
     return 6 <= output_code_string_counter[1]
             ? caml_cps_call3
               (Stdlib[65],
                outchan,
                10,
                function(_aO_){
                 output_code_string_counter[1] = 0;
                 return caml_cps_exact_call0(_aM_);
                })
             : caml_cps_exact_call0(_aM_);
    });
                                  }
                                  currpos[1] = currpos[1] + caml_ml_bytes_length(code) | 0;
                                  return cont(0);
                                 }
                                 return _aM_();
                                }
                                function currpos_fun(param, cont){return cont(currpos[1]);}
                                return caml_cps_call3
(Stdlib_List[17],
 function(_aL_, cont){
  return caml_cps_exact_call4
          (link_file, output_fun, currpos_fun, _aL_, cont);
 },
 tolink,
 function(_at_){
  return caml_cps_call4
          (Stdlib_Printf[1],
           outchan,
           _f_,
           Opcodes[144],
           function(_au_){
            return caml_cps_call3
                    (Stdlib[66],
                     outchan,
                     cst_static_char_caml_data,
                     function(_av_){
                      return caml_cps_call2
                              (Symtable[4],
                               0,
                               function(_aw_){
                                return caml_cps_exact_call3
(output_data_string,
 outchan,
 caml_output_value_to_string(_aw_, 0),
 function(_ax_){
  return caml_cps_call3
          (Stdlib[66],
           outchan,
           cst$2,
           function(_ay_){
            var _az_ = 0;
            return caml_cps_exact_call2
                    (extract_crc_interfaces,
                     undef,
                     function(_aA_){
                      var _aB_ = [0, [0, cst_CRCS$0, _aA_], _az_];
                      return caml_cps_call2
                              (Symtable[9],
                               0,
                               function(_aC_){
                                var _aD_ = [0, [0, cst_PRIM$0, _aC_], _aB_];
                                return caml_cps_call2
(Symtable[8],
 0,
 function(_aE_){
  var sections = [0, [0, cst_SYMB$1, _aE_], _aD_];
  return caml_cps_call3
          (Stdlib[66],
           outchan,
           cst_static_char_caml_sections,
           function(_aF_){
            return caml_cps_exact_call3
                    (output_data_string,
                     outchan,
                     caml_output_value_to_string(sections, 0),
                     function(_aG_){
                      return caml_cps_call3
                              (Stdlib[66],
                               outchan,
                               cst$3,
                               function(_aH_){
                                return caml_cps_call2
(Symtable[7],
 outchan,
 function(_aI_){
  function _aJ_(_aK_){
   return caml_cps_call3
           (Stdlib[66], outchan, cst_ifdef_cplusplus_endif, cont);
  }
  return with_main
          ? caml_cps_call3
            (Stdlib[66], outchan, cst_int_main_os_int_argc_char_, _aJ_)
          : caml_cps_call3
            (Stdlib[66], outchan, cst_void_caml_startup_char_os_, _aJ_);
 });
                               });
                     });
           });
 });
                               });
                     });
           });
 });
                               });
                     });
           });
 });
                               });
                     });
           });
 });
                               },
                               function(_N_){
                                var _O_ = 1 - with_main, _P_ = _O_ ? Clflags[19][1] : _O_;
                                function _Q_(_Y_){
                                 return Clflags[29][1]
 ? (temps
    [1]
   = [0, outfile, temps[1]],
   caml_cps_exact_call3
    (build_custom_runtime,
     outfile,
     output_name,
     function(_Z_){
      var ___ = 1 - _Z_;
      if(! ___) return cont(___);
      var raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace([0, Error, 0], 1));
     }))
 : caml_cps_call3
   (Stdlib_Filename[7],
    output_name,
    cst_c$1,
    function(_$_){
     var _aa_ = 1 - _$_;
     function _ab_(_ao_){return cont(_ao_);}
     return _aa_
             ? (temps
                [1]
               = [0, outfile, temps[1]],
               caml_cps_call5
                (Ccomp[3],
                 [0, obj_file],
                 0,
                 stable_name,
                 outfile,
                 function(_ac_){
                  if(0 === _ac_)
                   return caml_cps_call3
                           (Stdlib_Filename[7],
                            output_name,
                            Config[45],
                            function(_ad_){
                             var _ae_ = 1 - _ad_, _af_ = _ae_ || Clflags[28][1];
                             return _af_
                                     ? (temps
[1]
                                       = [0, obj_file, temps[1]],
                                       caml_cps_call3
(Stdlib_Filename[7],
 output_name,
 Config[45],
 function(_ag_){
  if(_ag_)
   var c_libs = cst$6, mode = 3;
  else
   var c_libs$0 = Config[13], c_libs = c_libs$0, mode = 2;
  function _ah_(runtime_lib){
   var _ai_ = [0, runtime_lib, 0];
   return caml_cps_call2
           (Stdlib_List[9],
            Clflags[9][1],
            function(_aj_){
             return caml_cps_call3
                     (Stdlib[37],
                      _aj_,
                      _ai_,
                      function(_ak_){
                       return caml_cps_call3
                               (Stdlib[37],
                                [0, obj_file, 0],
                                _ak_,
                                function(_al_){
                                 return caml_cps_call5
 (Ccomp[7],
  mode,
  output_name,
  _al_,
  c_libs,
  function(_am_){
   var _an_ = 1 - (0 === _am_ ? 1 : 0);
   if(! _an_) return _ab_(_an_);
   var raise = caml_pop_trap();
   return raise(caml_maybe_attach_backtrace([0, Error, 0], 1));
  });
                                });
                      });
            });
  }
  return Clflags[130][1]
          ? caml_cps_call3
            (Stdlib[28], cst_lcamlrun$0, Clflags[129][1], _ah_)
          : _ah_(cst$7);
 }))
                                     : _ab_(_af_);
                            });
                  var raise = caml_pop_trap();
                  return raise(caml_maybe_attach_backtrace([0, Error, 0], 1));
                 }))
             : _ab_(_aa_);
    });
                                }
                                return _P_
? caml_cps_call2
  (Stdlib_Filename[12],
   outfile,
   function(_R_){
    return caml_cps_call3
            (Stdlib[28],
             _R_,
             cst_cds,
             function(outfile){
              return caml_cps_call2
                      (Misc[17],
                       outfile,
                       function(_S_){
                        return caml_cps_call4
                                (Stdlib[62],
                                 _e_,
                                 511,
                                 outfile,
                                 function(outchan){
                                  return caml_cps_call4
  (Misc[4],
   [0,
    function(param, cont){
     return caml_cps_call2(Stdlib[76], outchan, cont);
    }],
   [0,
    function(param, cont){
     return caml_cps_call2(Misc[17], outfile, cont);
    }],
   function(param, cont){
    return caml_cps_call2
            (Bytesections[1],
             outchan,
             function(_T_){
              return caml_cps_call2
                      (Symtable[5],
                       outchan,
                       function(_U_){
                        return caml_cps_call3
                                (Bytesections[2],
                                 outchan,
                                 cst_SYMB$0,
                                 function(_V_){
                                  return caml_cps_exact_call2
  (output_debug_info,
   outchan,
   function(_W_){
    return caml_cps_call3
            (Bytesections[2],
             outchan,
             cst_DBUG$0,
             function(_X_){
              return caml_cps_call2(Bytesections[3], outchan, cont);
             });
   });
                                 });
                       });
             });
   },
   _Q_);
                                 });
                       });
             });
   })
: _Q_(0);
                               });
                     });
           },
           cont);
 }
 if(! Clflags[28][1])
  return caml_cps_call3(Stdlib[28], basename, Config[45], _L_);
 var _K_ = Config[45];
 return caml_cps_call2
         (Stdlib_Filename[12],
          outfile,
          function(_M_){
           return caml_cps_call3(Stdlib[28], _M_, _K_, _L_);
          });
}
return Clflags[28][1]
        ? caml_cps_call3
          (Stdlib_Filename[7],
           output_name,
           cst_c,
           function(_I_){
            return _I_
                    ? _H_()
                    : caml_cps_call4
                      (Stdlib_Filename[16],
                       0,
                       cst_camlobj,
                       cst_c$2,
                       function(_J_){return _G_(_J_, stable_name);});
           })
        : _H_();
                                       })
                                    : caml_cps_call4
                                      (Stdlib_Filename[16],
                                       0,
                                       cst_camlcode,
                                       cst$8,
                                       function(bytecode_name){
function _aP_(prim_name){
 return caml_cps_call4
         (Misc[4],
          [0,
           function(param, cont){
            return caml_cps_call2
                    (Misc[17],
                     bytecode_name,
                     function(_a2_){
                      var _a3_ = 1 - Clflags[80][1];
                      return _a3_
                              ? caml_cps_call2(Misc[17], prim_name, cont)
                              : cont(_a3_);
                     });
           }],
          0,
          function(param, cont){
           return caml_cps_exact_call5
                   (link_bytecode,
                    [0, output_name],
                    tolink,
                    bytecode_name,
                    0,
                    function(_aQ_){
                     return caml_cps_call2
                             (Stdlib[60],
                              prim_name,
                              function(poc){
                               return caml_cps_call3
                                       (Stdlib[66],
poc,
cst_ifdef_cplusplus_extern_C_e,
function(_aR_){
 return caml_cps_call2
         (Symtable[7],
          poc,
          function(_aS_){
           return caml_cps_call3
                   (Stdlib[66],
                    poc,
                    cst_ifdef_cplusplus_endif$0,
                    function(_aT_){
                     return caml_cps_call2
                             (Stdlib[76],
                              poc,
                              function(_aV_){
                               var _aU_ = Stdlib_Sys[4];
                               function _aW_(exec_name){
                                return caml_cps_exact_call3
(build_custom_runtime,
 prim_name,
 exec_name,
 function(_aY_){
  if(1 - _aY_){
   var raise = caml_pop_trap();
   return raise(caml_maybe_attach_backtrace([0, Error, 0], 1));
  }
  var _aZ_ = 1 - Clflags[57][1];
  return _aZ_
          ? caml_cps_call4
            (Stdlib[62],
             _h_,
             0,
             exec_name,
             function(oc){
              return caml_cps_call2
                      (Stdlib[80],
                       bytecode_name,
                       function(ic){
                        return caml_cps_call3
                                (Misc[21],
                                 ic,
                                 oc,
                                 function(_a0_){
                                  return caml_cps_call2
  (Stdlib[93],
   ic,
   function(_a1_){return caml_cps_call2(Stdlib[76], oc, cont);});
                                 });
                       });
             })
          : cont(_aZ_);
 });
                               }
                               if
                                (caml_string_notequal(_aU_, "Cygwin")
                                 && caml_string_notequal(_aU_, "Win32"))
                                return _aW_(output_name);
                               return caml_cps_call3
                                       (Stdlib_String[14],
output_name,
46,
function(_aX_){
 return _aX_
         ? _aW_(output_name)
         : caml_cps_call3(Stdlib[28], output_name, cst_exe, _aW_);
});
                              });
                    });
          });
});
                              });
                    });
          },
          cont);
}
return Clflags[80][1]
        ? caml_cps_call3
          (Stdlib[28], output_name, cst_camlprim_c, _aP_)
        : caml_cps_call4
          (Stdlib_Filename[16], 0, cst_camlprim, cst_c$3, _aP_);
                                       })
                                  : caml_cps_exact_call5
                                    (link_bytecode, 0, tolink, output_name, 1, cont);
                         });
               });
     });
                                   var
                                    match$0 = match[1],
                                    cu_name = match$0[2],
                                    id = match$0[1],
                                    l = badly_ordered_dependencies[1];
                                   if(! l)
                                    return caml_cps_call2
    (Ident[15],
     id,
     function(_C_){
      var raise = caml_pop_trap();
      return raise
              (caml_maybe_attach_backtrace
                ([0, Error, [7, _C_, cu_name]], 1));
     });
                                   var raise = caml_pop_trap();
                                   return raise
   (caml_maybe_attach_backtrace([0, Error, [9, l]], 1));
                                  });
                        });
              });
    }
    var _z_ = Clflags[27][1], _A_ = Clflags[29][1];
    if(Clflags[32][1]) return _B_(objfiles);
    if(_z_ && ! _A_) return _B_([0, cst_stdlib_cma$0, objfiles]);
    return caml_cps_call3(Stdlib[37], [0, cst_stdlib_cma, objfiles], _i_, _B_);
   }
   function report_error(ppf, param, cont){
    if(typeof param === "number")
     return caml_cps_call3(Stdlib_Format[135], ppf, _j_, cont);
    switch(param[0]){
      case 0:
       var name = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _k_, Location[21], name, cont);
      case 1:
       var name$0 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _l_, Location[21], name$0, cont);
      case 2:
       var name$1 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _m_, name$1, cont);
      case 3:
       var err = param[2], name$2 = param[1];
       return caml_cps_call7
               (Stdlib_Format[135],
                ppf,
                _n_,
                Location[21],
                name$2,
                Symtable[28],
                err,
                cont);
      case 4:
       var file2 = param[3], file1 = param[2], intf = param[1];
       return caml_cps_call8
               (Stdlib_Format[135],
                ppf,
                _o_,
                Location[21],
                file1,
                Location[21],
                file2,
                intf,
                cont);
      case 5:
       var file = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _p_, Location[21], file, cont);
      case 6:
       var file$0 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _q_, Location[21], file$0, cont);
      case 7:
       var m = param[2], s = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _r_, s, m, cont);
      case 8:
       var header = param[2], msg = param[1];
       return caml_cps_call5(Stdlib_Format[135], ppf, _s_, header, msg, cont);
      default:
       var
        l = param[1],
        depends_on =
          function(ppf, param, cont){
           var depending = param[2], dep = param[1];
           return caml_cps_call5
                   (Stdlib_Format[135], ppf, _t_, depending, dep, cont);
          };
       return caml_cps_call3
               (Stdlib_Format[129],
                [0,
                 function(ppf, param, cont){
                  return caml_cps_call3(Stdlib_Format[135], ppf, _u_, cont);
                 }],
                depends_on,
                function(_y_){
                 return caml_cps_call5
                         (Stdlib_Format[135], ppf, _v_, _y_, l, cont);
                });
    }
   }
   caml_callback
    (Location[51],
     [function(param, cont){
       if(param[1] !== Error) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Location[50],
                report_error,
                err,
                function(_x_){return cont([0, _x_]);});
      }]);
   function reset(param, cont){
    lib_ccobjs[1] = 0;
    lib_ccopts[1] = 0;
    lib_dllibs[1] = 0;
    missing_globals[1] = Ident[7][1];
    return caml_cps_call2
            (Consistbl$0[2],
             crc_interfaces,
             function(_w_){
              implementations_defined[1] = 0;
              debug_info[1] = 0;
              output_code_string_counter[1] = 0;
              return cont(0);
             });
   }
   var
    Bytelink =
      [0,
       link,
       reset,
       check_consistency,
       extract_crc_interfaces,
       Error,
       report_error];
   runtime.caml_register_global(103, Bytelink, "Bytelink");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytelibrarian
//# unitInfo: Requires: Bytelink, Clflags, Config, Emitcode, Load_path, Location, Misc, Stdlib, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_equal = runtime.caml_string_equal;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/bytelibrarian.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x02\xb1\0\0\0\x8f\0\0\x02\"\0\0\x02\x0b\xa0-Bytelibrarian\xa0\xb0\xa0.create_archive\x01\x01\xad\xd0\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x90@\x02\x05\xf5\xe1\0@\0\xef\xc0\xc1@\xc0\xb3\x90\x04\t@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xf1@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf3@\xb0\xc0:bytecomp/bytelibrarian.mliY\x01\x05&\x01\x05&\xc0\x04\x02Y\x01\x05&\x01\x05W@@\xa1\x04&@@\xa0\xc1\xa0%error\x01\x01\xae\b\0\0;\0@@\xa1\xa0\xe0\xa0.File_not_found\x01\x01\x0e\x90\xa0\xc0\xb3\x90\x04$@\x90@\x02\x05\xf5\xe1\0@\0\xf5@@\xb0\xc0\x04\x15\\\x01\x05f\x01\x05j\xc0\x04\x16\\\x01\x05f\x01\x05\x82@@\xa1\x04:B\xa0\xe0\xa02Not_an_object_file\x01\x01\x0f\x90\xa0\xc0\xb3\x90\x042@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x04#]\x01\x05\x83\x01\x05\x85\xc0\x04$]\x01\x05\x83\x01\x05\xa3@@\xa1\x04HC@@A@@@@@\xb0\xc0\x04'[\x01\x05Y\x01\x05Y\x04\x04@@@@\xa1\x04KAA@\xa0\xc2\xa0%Error\x01\x01\xaf\b\0\0#\0\x90\xa3#exnG@\x90\xa0\xc0\xb3\x90\x040@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x04]DB@\xa0\xb0\xa0,report_error\x01\x01\xb0\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xc1@\xc0\xb3\x04\x1b@\x90@\x02\x05\xf5\xe1\0@\0\xf8\xc0\xb3\x90\x04X@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\xb0\xc0\x04Vc\x01\x05\xcc\x01\x05\xcc\xc0\x04Wc\x01\x05\xcc\x01\x05\xf8@@\xa1\x04{E@\xa0\xb0\xa0%reset\x01\x01\xb1\xd0\xc0\xc1@\xc0\xb3\x90\x04g@\x90@\x02\x05\xf5\xe1\0@\0\xfc\xc0\xb3\x90\x04k@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04ie\x01\x05\xfa\x01\x05\xfa\xc0\x04je\x01\x05\xfa\x01\x06\x11@@\xa1\x04\x8eF@@\x84\x95\xa6\xbe\0\0\x019\0\0\0-\0\0\0\xab\0\0\0\x88\xa0\xa0-Bytelibrarian\x900\xaa{\xb5\x84\xc7u\xa4\xc4\x9f?V\xbbM\xaf\xf1\x88\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    Location = global_data.Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Misc = global_data.Misc,
    Config = global_data.Config,
    Stdlib_List = global_data.Stdlib__List,
    Clflags = global_data.Clflags,
    Emitcode = global_data.Emitcode,
    Load_path = global_data.Load_path,
    Bytelink = global_data.Bytelink,
    Error = [248, "Bytelibrarian.Error", runtime.caml_fresh_oo_id(0)];
   function copy_compunit(ic, oc, compunit, cont){
    return caml_cps_call3
            (Stdlib[90],
             ic,
             compunit[2],
             function(_F_){
              return caml_cps_call2
                      (Stdlib[74],
                       oc,
                       function(_G_){
                        compunit[2] = _G_;
                        var _H_ = compunit[8], _I_ = _H_ || Clflags[23][1];
                        compunit[8] = _I_;
                        return caml_cps_call4
                                (Misc[22],
                                 ic,
                                 oc,
                                 compunit[3],
                                 function(_J_){
                                  var _K_ = 0 < compunit[9] ? 1 : 0;
                                  return _K_
  ? caml_cps_call3
    (Stdlib[90],
     ic,
     compunit[9],
     function(_L_){
      return caml_cps_call2
              (Stdlib[74],
               oc,
               function(_M_){
                compunit[9] = _M_;
                return caml_cps_call4(Misc[22], ic, oc, compunit[10], cont);
               });
     })
  : cont(_K_);
                                 });
                       });
             });
   }
   var
    lib_ccobjs = [0, 0],
    lib_ccopts = [0, 0],
    lib_dllibs = [0, 0],
    cst_bytecode_library = "bytecode library",
    _a_ = [0, [11, "Cannot find file ", [2, 0, 0]], "Cannot find file %s"],
    _b_ =
      [0,
       [11, "The file ", [15, [11, " is not a bytecode object file", 0]]],
       "The file %a is not a bytecode object file"];
   function create_archive(file_list, lib_name, cont){
    return caml_cps_call2
            (Stdlib[61],
             lib_name,
             function(outchan){
              return caml_cps_call4
                      (Misc[4],
                       [0,
                        function(param, cont){
                         return caml_cps_call2(Stdlib[76], outchan, cont);
                        }],
                       [0,
                        function(param, cont){
                         return caml_cps_call2(Misc[17], lib_name, cont);
                        }],
                       function(param, cont){
                        return caml_cps_call3
                                (Stdlib[66],
                                 outchan,
                                 Config[26],
                                 function(_d_){
                                  return caml_cps_call2
  (Stdlib[74],
   outchan,
   function(ofs_pos_toc){
    return caml_cps_call3
            (Stdlib[71],
             outchan,
             0,
             function(_e_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(name, cont){
                        caml_push_trap
                         (function(_E_){
                           if(_E_ === Stdlib[8]){
                            var raise = caml_pop_trap();
                            return raise
                                    (caml_maybe_attach_backtrace([0, Error, [0, name]], 1));
                           }
                           var raise$0 = caml_pop_trap();
                           return raise$0(caml_maybe_attach_backtrace(_E_, 0));
                          });
                        return caml_cps_call2
                                (Load_path[9],
                                 name,
                                 function(file_name){
                                  caml_pop_trap();
                                  return caml_cps_call2
  (Stdlib[80],
   file_name,
   function(ic){
    caml_push_trap
     (function(x){
       return x === Stdlib[12]
               ? caml_cps_call2
                 (Stdlib[93],
                  ic,
                  function(_C_){
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1));
                  })
               : caml_cps_call2
                 (Stdlib[93],
                  ic,
                  function(_D_){
                   var
                    raise = caml_pop_trap(),
                    x$0 = caml_maybe_attach_backtrace(x, 0);
                   return raise(x$0);
                  });
      });
    return caml_cps_call3
            (Stdlib[86],
             ic,
             runtime.caml_ml_string_length(Config[25]),
             function(buffer){
              function _l_(_B_){caml_pop_trap(); return cont(_B_);}
              if(caml_string_equal(buffer, Config[25]))
               return caml_cps_call2
                       (Stdlib[88],
                        ic,
                        function(compunit_pos){
                         return caml_cps_call3
                                 (Stdlib[90],
                                  ic,
                                  compunit_pos,
                                  function(_x_){
                                   return caml_cps_call2
   (Stdlib[89],
    ic,
    function(compunit){
     return caml_cps_call3
             (Bytelink[3],
              file_name,
              compunit,
              function(_y_){
               return caml_cps_exact_call4
                       (copy_compunit,
                        ic,
                        outchan,
                        compunit,
                        function(_z_){
                         return caml_cps_call2
                                 (Stdlib[93],
                                  ic,
                                  function(_A_){return _l_([0, compunit, 0]);});
                        });
              });
    });
                                  });
                        });
              if(caml_string_equal(buffer, Config[26]))
               return caml_cps_call2
                       (Stdlib[88],
                        ic,
                        function(toc_pos){
                         return caml_cps_call3
                                 (Stdlib[90],
                                  ic,
                                  toc_pos,
                                  function(_m_){
                                   return caml_cps_call2
   (Stdlib[89],
    ic,
    function(toc){
     var _n_ = toc[1];
     return caml_cps_call2
             (Bytelink[3],
              file_name,
              function(_o_){
               return caml_cps_call3
                       (Stdlib_List[17],
                        _o_,
                        _n_,
                        function(_p_){
                         function _q_(){
                          return caml_cps_call3
                                  (Stdlib_List[17],
                                   function(_w_, cont){
                                    return caml_cps_exact_call4
    (copy_compunit, ic, outchan, _w_, cont);
                                   },
                                   toc[1],
                                   function(_u_){
                                    return caml_cps_call2
    (Stdlib[93], ic, function(_v_){return _l_(toc[1]);});
                                   });
                         }
                         if(! (1 - Clflags[59][1])) return _q_();
                         if(toc[2]) Clflags[24][1] = 1;
                         return caml_cps_call3
                                 (Stdlib[37],
                                  lib_ccobjs[1],
                                  toc[3],
                                  function(_r_){
                                   lib_ccobjs[1] = _r_;
                                   return caml_cps_call3
   (Stdlib[37],
    lib_ccopts[1],
    toc[4],
    function(_s_){
     lib_ccopts[1] = _s_;
     return caml_cps_call3
             (Stdlib[37],
              lib_dllibs[1],
              toc[5],
              function(_t_){lib_dllibs[1] = _t_; return _q_();});
    });
                                  });
                        });
              });
    });
                                  });
                        });
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Error, [1, file_name]], 1));
             });
   });
                                 });
                       },
                       file_list,
                       function(_f_){
                        return caml_cps_call2
                                (Stdlib_List[14],
                                 _f_,
                                 function(units){
                                  return caml_cps_call3
  (Stdlib[37],
   Clflags[10][1],
   lib_dllibs[1],
   function(_g_){
    return caml_cps_call3
            (Stdlib[37],
             Clflags[30][1],
             lib_ccopts[1],
             function(_h_){
              return caml_cps_call3
                      (Stdlib[37],
                       Clflags[9][1],
                       lib_ccobjs[1],
                       function(_i_){
                        var toc = [0, units, Clflags[24][1], _i_, _h_, _g_];
                        return caml_cps_call2
                                (Stdlib[74],
                                 outchan,
                                 function(pos_toc){
                                  return caml_cps_call5
  (Emitcode[5],
   lib_name,
   cst_bytecode_library,
   outchan,
   toc,
   function(_j_){
    return caml_cps_call3
            (Stdlib[73],
             outchan,
             ofs_pos_toc,
             function(_k_){
              return caml_cps_call3(Stdlib[71], outchan, pos_toc, cont);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       },
                       cont);
             });
   }
   function report_error(ppf, param, cont){
    if(0 === param[0]){
     var name = param[1];
     return caml_cps_call4(Stdlib_Format[135], ppf, _a_, name, cont);
    }
    var name$0 = param[1];
    return caml_cps_call5
            (Stdlib_Format[135], ppf, _b_, Location[21], name$0, cont);
   }
   runtime.caml_callback
    (Location[51],
     [function(param, cont){
       if(param[1] !== Error) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Location[50],
                report_error,
                err,
                function(_c_){return cont([0, _c_]);});
      }]);
   function reset(param, cont){
    lib_ccobjs[1] = 0;
    lib_ccopts[1] = 0;
    lib_dllibs[1] = 0;
    return cont(0);
   }
   var Bytelibrarian = [0, create_archive, Error, report_error, reset];
   runtime.caml_register_global(14, Bytelibrarian, "Bytelibrarian");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bytepackager
//# unitInfo: Requires: Bytegen, Bytelink, Clflags, Config, Emitcode, Env, Ident, Load_path, Location, Misc, Printlambda, Simplif, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__List, Subst, Translmod, Typemod
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = ".",
    cst_cmi$1 = ".cmi",
    cst$3 = "@ ",
    cst_File = "File ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 7
              ? f(a0, a1, a2, a3, a4, a5, a6)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/bytepackager.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x04,\0\0\0\xe8\0\0\x03[\0\0\x03:\xa0,Bytepackager\xa0\xb0\xa0-package_files\x01\x02x\xd0\xc0\xc1\x90(ppf_dump\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xe3\xc0\xc1@\xc0\xb3\xa1\x90\x92#Env!t@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xe5@\x90@\x02\x05\xf5\xe1\0@\0\xe6\xc0\xc1@\xc0\xb3\x90\x04\t@\x90@\x02\x05\xf5\xe1\0@\0\xe7\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xe8@\x02\x05\xf5\xe1\0@\0\xe9@\x02\x05\xf5\xe1\0@\0\xea@\x02\x05\xf5\xe1\0@\0\xeb@\x02\x05\xf5\xe1\0@\0\xec@\xb0\xc09bytecomp/bytepackager.mliS\x01\x04\xa8\x01\x04\xa8\xc0\x04\x02T\x01\x04\xbb\x01\x05\0@@\xa1\x04>@@\xa0\xc1\xa0%error\x01\x02y\b\0\0;\0@@\xa1\xa0\xe0\xa01Forward_reference\x01\x02J\x90\xa0\xc0\xb3\x90\x04$@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xa0\xc0\xb3\xa1\x90\x92%Ident!t@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x04\x1eW\x01\x05\x0f\x01\x05\x13\xc0\x04\x1fW\x01\x05\x0f\x01\x058@@\xa1\x04[B\xa0\xe0\xa03Multiple_definition\x01\x02q\x90\xa0\xc0\xb3\x90\x04;@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xa0\xc0\xb3\xa1\x90\x04\x17!t@\x90@\x02\x05\xf5\xe1\0@\0\xf2@@\xb0\xc0\x043X\x01\x059\x01\x05;\xc0\x044X\x01\x059\x01\x05d@@\xa1\x04pC\xa0\xe0\xa02Not_an_object_file\x01\x02r\x90\xa0\xc0\xb3\x90\x04P@\x90@\x02\x05\xf5\xe1\0@\0\xf1@@\xb0\xc0\x04AY\x01\x05e\x01\x05g\xc0\x04BY\x01\x05e\x01\x05\x85@@\xa1\x04~D\xa0\xe0\xa00Illegal_renaming\x01\x02s\x90\xa0\xc0\xb3\x90\x04^@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xa0\xc0\xb3\x90\x04c@\x90@\x02\x05\xf5\xe1\0@\0\xef\xa0\xc0\xb3\x90\x04h@\x90@\x02\x05\xf5\xe1\0@\0\xee@@\xb0\xc0\x04YZ\x01\x05\x86\x01\x05\x88\xc0\x04ZZ\x01\x05\x86\x01\x05\xb6@@\xa1\x04\x96E\xa0\xe0\xa0.File_not_found\x01\x02t\x90\xa0\xc0\xb3\x90\x04v@\x90@\x02\x05\xf5\xe1\0@\0\xed@@\xb0\xc0\x04g[\x01\x05\xb7\x01\x05\xb9\xc0\x04h[\x01\x05\xb7\x01\x05\xd3@@\xa1\x04\xa4F@@A@@@@@\xb0\xc0\x04kV\x01\x05\x02\x01\x05\x02\x04\x04@@@@\xa1\x04\xa7AA@\xa0\xc2\xa0%Error\x01\x02z\b\0\0#\0\x90\xa3#exnG@\x90\xa0\xc0\xb3\x90\x04t@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x04\xb9GB@\xa0\xb0\xa0,report_error\x01\x02{\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\xb6&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xc1@\xc0\xb3\x04\x18@\x90@\x02\x05\xf5\xe1\0@\0\xf8\xc0\xb3\x90\x04\x99@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\xb0\xc0\x04\x97_\x01\x05\xef\x01\x05\xef\xc0\x04\x98_\x01\x05\xef\x01\x06\"@@\xa1\x04\xd4H@\xa0\xb0\xa0%reset\x01\x02|\xd0\xc0\xc1@\xc0\xb3\x90\x04\xa8@\x90@\x02\x05\xf5\xe1\0@\0\xfc\xc0\xb3\x90\x04\xac@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04\xaa`\x01\x06#\x01\x06#\xc0\x04\xab`\x01\x06#\x01\x06:@@\xa1\x04\xe7I@@\x84\x95\xa6\xbe\0\0\x04\x99\0\0\0\xb9\0\0\x02\xa7\0\0\x02'\xa0\xa0,Bytepackager\x900\xf2a\xc7v\x1c\xbf\x80X\fe$]y\xebJq\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = cst$4,
    cst$1 = cst$4,
    cst = cst$4,
    cst$0 = cst$4,
    Ident = global_data.Ident,
    Subst = global_data.Subst,
    Location = global_data.Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Misc = global_data.Misc,
    Typemod = global_data.Typemod,
    Load_path = global_data.Load_path,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Config = global_data.Config,
    Clflags = global_data.Clflags,
    Bytelink = global_data.Bytelink,
    Env = global_data.Env,
    Emitcode = global_data.Emitcode,
    Translmod = global_data.Translmod,
    Simplif = global_data.Simplif,
    Printlambda = global_data.Printlambda,
    Bytegen = global_data.Bytegen,
    Error = [248, "Bytepackager.Error", runtime.caml_fresh_oo_id(0)],
    relocs = [0, 0],
    events = [0, 0],
    debug_dirs = [0, Misc[13][4][64][1]],
    primitives = [0, 0],
    force_link = [0, 0],
    cst_cmi = cst_cmi$1,
    _a_ = [0, [15, [17, 4, 0]], "%a@."],
    cst_bytecode_unit = "bytecode unit",
    cst_cmi$0 = cst_cmi$1,
    _b_ =
      [0,
       [11, "Forward reference to ", [2, 0, [11, " in file ", [15, 0]]]],
       "Forward reference to %s in file %a"],
    _c_ =
      [0,
       [11, cst_File, [15, [11, " redefines ", [2, 0, 0]]]],
       "File %a redefines %s"],
    _d_ =
      [0,
       [15, [11, " is not a bytecode object file", 0]],
       "%a is not a bytecode object file"],
    _e_ =
      [0,
       [11,
        "Wrong file naming: ",
        [15,
         [17,
          [0, cst$3, 1, 0],
          [11,
           "contains the code for",
           [17,
            [0, cst$3, 1, 0],
            [2, 0, [11, " when ", [2, 0, [11, " was expected", 0]]]]]]]]],
       "Wrong file naming: %a@ contains the code for@ %s when %s was expected"],
    _f_ =
      [0, [11, cst_File, [2, 0, [11, " not found", 0]]], "File %s not found"];
   function read_member_info(file, cont){
    return caml_cps_call2
            (Misc[33],
             file,
             function(_aN_){
              return caml_cps_call2
                      (Stdlib_Filename[13],
                       _aN_,
                       function(_aO_){
                        return caml_cps_call2
                                (Misc[13][4][26],
                                 _aO_,
                                 function(name){
                                  return caml_cps_call3
  (Stdlib_Filename[7],
   file,
   cst_cmi,
   function(_aP_){
    function _aQ_(kind){return cont([0, file, name, kind]);}
    return _aP_
            ? _aQ_(0)
            : caml_cps_call2
              (Stdlib[80],
               file,
               function(ic){
                caml_push_trap
                 (function(x){
                   return caml_cps_call2
                           (Stdlib[93],
                            ic,
                            function(_aU_){
                             var
                              raise = caml_pop_trap(),
                              x$0 = caml_maybe_attach_backtrace(x, 0);
                             return raise(x$0);
                            });
                  });
                return caml_cps_call3
                        (Stdlib[86],
                         ic,
                         runtime.caml_ml_string_length(Config[25]),
                         function(buffer){
                          if(! caml_string_notequal(buffer, Config[25]))
                           return caml_cps_call2
                                   (Stdlib[88],
                                    ic,
                                    function(compunit_pos){
                                     return caml_cps_call3
     (Stdlib[90],
      ic,
      compunit_pos,
      function(_aR_){
       return caml_cps_call2
               (Stdlib[89],
                ic,
                function(compunit){
                 if(! caml_string_notequal(compunit[1], name))
                  return caml_cps_call2
                          (Stdlib[93],
                           ic,
                           function(_aT_){caml_pop_trap(); return _aQ_([0, compunit]);});
                 var
                  _aS_ = [0, Error, [3, name, file, compunit[1]]],
                  raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_aS_, 1));
                });
      });
                                    });
                          var raise = caml_pop_trap();
                          return raise
                                  (caml_maybe_attach_backtrace([0, Error, [2, file]], 1));
                         });
               });
   });
                                 });
                       });
             });
   }
   function package_files(ppf_dump, initial_env, files, targetfile, cont){
    return caml_cps_call3
            (Stdlib_List[19],
             function(f, cont){
              caml_push_trap
               (function(_aM_){
                 if(_aM_ === Stdlib[8]){
                  var raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace([0, Error, [4, f]], 1));
                 }
                 var raise$0 = caml_pop_trap();
                 return raise$0(caml_maybe_attach_backtrace(_aM_, 0));
                });
              return caml_cps_call2
                      (Load_path[9],
                       f,
                       function(_aL_){caml_pop_trap(); return cont(_aL_);});
             },
             files,
             function(files){
              return caml_cps_call2
                      (Misc[33],
                       targetfile,
                       function(prefix){
                        return caml_cps_call3
                                (Stdlib[28],
                                 prefix,
                                 cst_cmi$0,
                                 function(targetcmi){
                                  return caml_cps_call2
  (Stdlib_Filename[13],
   prefix,
   function(_k_){
    return caml_cps_call2
            (Misc[13][4][26],
             _k_,
             function(packagename){
              return caml_cps_call4
                      (Misc[4],
                       0,
                       [0,
                        function(param, cont){
                         return caml_cps_call2(Misc[17], targetfile, cont);
                        }],
                       function(param, cont){
                        return caml_cps_call5
                                (Typemod[12],
                                 initial_env,
                                 files,
                                 targetcmi,
                                 packagename,
                                 function(coercion){
                                  return caml_cps_call3
  (Misc[7],
   read_member_info,
   files,
   function(members){
    return caml_cps_call4
            (Stdlib_List[26],
             function(compunit, required_globals, cont){
              var _aK_ = compunit[3];
              if(! _aK_) return cont(required_globals);
              var
               match = _aK_[1],
               cu_required_globals = match[6],
               cu_reloc = match[4];
              function remove_required(param, required_globals, cont){
               var rel = param[1];
               if(2 !== rel[0]) return cont(required_globals);
               var id = rel[1];
               return caml_cps_call3
                       (Ident[6][6], id, required_globals, cont);
              }
              return caml_cps_call4
                      (Stdlib_List[26],
                       remove_required,
                       cu_reloc,
                       required_globals,
                       function(required_globals){
                        return caml_cps_call4
                                (Stdlib_List[26],
                                 Ident[6][4],
                                 cu_required_globals,
                                 required_globals,
                                 cont);
                       });
             },
             members,
             Ident[6][1],
             function(required_globals){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(m, cont){return cont(m[2]);},
                       members,
                       function(unit_names){
                        return caml_cps_call3
                                (Stdlib_List[19],
                                 function(name, cont){
                                  return caml_cps_call3
  (Stdlib[28],
   cst$2,
   name,
   function(_aG_){
    return caml_cps_call3
            (Stdlib[28],
             packagename,
             _aG_,
             function(_aH_){
              return caml_cps_call2
                      (Ident[12],
                       _aH_,
                       function(_aI_){
                        return caml_cps_call2
                                (Ident[12],
                                 name,
                                 function(_aJ_){return cont([0, _aJ_, _aI_]);});
                       });
             });
   });
                                 },
                                 unit_names,
                                 function(mapping){
                                  return caml_cps_call2
  (Stdlib[61],
   targetfile,
   function(oc){
    caml_push_trap
     (function(x){
       return caml_cps_call2
               (Stdlib[76],
                oc,
                function(_aF_){
                 var
                  raise = caml_pop_trap(),
                  x$0 = caml_maybe_attach_backtrace(x, 0);
                 return raise(x$0);
                });
      });
    return caml_cps_call3
            (Stdlib[66],
             oc,
             Config[25],
             function(_l_){
              return caml_cps_call2
                      (Stdlib[74],
                       oc,
                       function(pos_depl){
                        return caml_cps_call3
                                (Stdlib[71],
                                 oc,
                                 0,
                                 function(_m_){
                                  return caml_cps_call2
  (Stdlib[74],
   oc,
   function(pos_code){
    var subst = Subst[1];
    function _n_(param, subst, base, defined){
     if(! param)
      return caml_cps_call4
              (Stdlib_List[28],
               function(m, param, cont){
                var id2 = param[2];
                return m[3] ? cont([0, id2]) : cont(0);
               },
               members,
               mapping,
               function(components){
                return caml_cps_call2
                        (Ident[12],
                         packagename,
                         function(_af_){
                          return caml_cps_call4
                                  (Translmod[6],
                                   components,
                                   _af_,
                                   coercion,
                                   function(lam){
                                    return caml_cps_call2
    (Simplif[1],
     lam,
     function(lam){
      function _ag_(_ah_){
       return caml_cps_call3
               (Bytegen[1],
                packagename,
                lam,
                function(instrs){
                 return caml_cps_call3
                         (Emitcode[3],
                          oc,
                          instrs,
                          function(rel){
                           var _ai_ = relocs[1];
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    function(param, cont){
                                     var ofs = param[2], r = param[1];
                                     return cont([0, r, base + ofs | 0]);
                                    },
                                    rel,
                                    function(_aj_){
                                     return caml_cps_call3
     (Stdlib[37],
      _aj_,
      _ai_,
      function(_ak_){
       relocs[1] = _ak_;
       return caml_cps_call2
               (Stdlib[74],
                oc,
                function(pos_debug){
                 var
                  _al_ = Clflags[19][1],
                  _am_ = _al_ ? 0 !== events[1] ? 1 : 0 : _al_;
                 function _an_(_ar_){
                  return caml_cps_call2
                          (Stdlib[74],
                           oc,
                           function(pos_final){
                            return caml_cps_call2
                                    (Bytelink[4],
                                     0,
                                     function(_as_){
                                      return caml_cps_call3
      (Stdlib_List[41],
       function(param, cont){
        var name = param[1];
        return caml_cps_call3
                (Stdlib_List[36],
                 name,
                 unit_names,
                 function(_aE_){return cont(1 - _aE_);});
       },
       _as_,
       function(imports){
        var
         _at_ = pos_final - pos_debug | 0,
         pos_debug$0 = pos_debug < pos_final ? pos_debug : 0,
         _au_ = force_link[1],
         _av_ = primitives[1];
        return caml_cps_call2
                (Ident[6][22],
                 required_globals,
                 function(_aw_){
                  return caml_cps_call2
                          (Env[117],
                           packagename,
                           function(_ax_){
                            var _ay_ = [0, [0, packagename, [0, _ax_]], imports];
                            return caml_cps_call2
                                    (Stdlib_List[9],
                                     relocs[1],
                                     function(_az_){
                                      var
                                       compunit =
 [0,
  packagename,
  pos_code,
  pos_debug - pos_code | 0,
  _az_,
  _ay_,
  _aw_,
  _av_,
  _au_,
  pos_debug$0,
  _at_];
                                      return caml_cps_call5
      (Emitcode[5],
       targetfile,
       cst_bytecode_unit,
       oc,
       compunit,
       function(_aA_){
        return caml_cps_call3
                (Stdlib[73],
                 oc,
                 pos_depl,
                 function(_aB_){
                  return caml_cps_call3
                          (Stdlib[71],
                           oc,
                           pos_final,
                           function(_aC_){
                            return caml_cps_call2
                                    (Stdlib[76],
                                     oc,
                                     function(_aD_){caml_pop_trap(); return cont(_aD_);});
                           });
                 });
       });
                                     });
                           });
                 });
       });
                                     });
                           });
                 }
                 return _am_
                         ? caml_cps_call2
                           (Stdlib_List[9],
                            events[1],
                            function(_ao_){
                             return caml_cps_call3
                                     (Stdlib[72],
                                      oc,
                                      _ao_,
                                      function(_ap_){
                                       return caml_cps_call2
       (Misc[13][4][64][23],
        debug_dirs[1],
        function(_aq_){
         return caml_cps_call3(Stdlib[72], oc, _aq_, _an_);
        });
                                      });
                            })
                         : _an_(0);
                });
      });
                                    });
                          });
                });
      }
      return Clflags[73][1]
              ? caml_cps_call5
                (Stdlib_Format[135],
                 ppf_dump,
                 _a_,
                 Printlambda[4],
                 lam,
                 _ag_)
              : _ag_(0);
     });
                                   });
                         });
               });
     var rem = param[2], m = param[1], match = m[3];
     if(! match)
      return caml_cps_exact_call4(_n_, rem, subst, base, defined);
     var compunit = match[1], objfile = m[1];
     return caml_cps_call2
             (Stdlib[80],
              objfile,
              function(ic){
               caml_push_trap
                (function(x){
                  return caml_cps_call2
                          (Stdlib[93],
                           ic,
                           function(_ae_){
                            var
                             raise = caml_pop_trap(),
                             x$0 = caml_maybe_attach_backtrace(x, 0);
                            return raise(x$0);
                           });
                 });
               return caml_cps_call3
                       (Bytelink[3],
                        objfile,
                        compunit,
                        function(_o_){
                         return caml_cps_call3
                                 (Stdlib_List[17],
                                  function(param, cont){
                                   var ofs = param[2], rel = param[1];
                                   function _P_(rel){
                                    relocs[1] = [0, [0, rel, base + ofs | 0], relocs[1]];
                                    return cont(0);
                                   }
                                   switch(rel[0]){
                                     case 1:
                                      var id = rel[1];
                                      caml_push_trap
                                       (function(_Z_){
 if(_Z_ === Stdlib[8])
  return caml_cps_call2
          (Ident[15],
           id,
           function(name){
            return caml_cps_call3
                    (Misc[13][4][14],
                     name,
                     46,
                     function(___){
                      function _$_(_ad_){return _P_(_ad_);}
                      return ___
                              ? caml_cps_call3
                                (Stdlib[28],
                                 cst,
                                 name,
                                 function(_aa_){
                                  return caml_cps_call3
  (Stdlib[28],
   packagename,
   _aa_,
   function(_ab_){
    return caml_cps_call2
            (Ident[12], _ab_, function(_ac_){return _$_([1, _ac_]);});
   });
                                 })
                              : _$_(rel);
                     });
           });
 var raise = caml_pop_trap();
 return raise(caml_maybe_attach_backtrace(_Z_, 0));
});
                                      return caml_cps_call3
      (Stdlib_List[46],
       id,
       mapping,
       function(id$0){
        return caml_cps_call3
                (Stdlib_List[36],
                 id,
                 defined,
                 function(_Y_){
                  if(_Y_){caml_pop_trap(); return _P_([1, id$0]);}
                  var raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace
                            ([0, Error, [0, objfile, id]], 1));
                 });
       });
                                     case 2:
                                      var id$0 = rel[1];
                                      caml_push_trap
                                       (function(_R_){
 if(_R_ === Stdlib[8])
  return caml_cps_call2
          (Ident[15],
           id$0,
           function(name){
            return caml_cps_call3
                    (Misc[13][4][14],
                     name,
                     46,
                     function(_S_){
                      function _T_(_X_){return _P_(_X_);}
                      return _S_
                              ? caml_cps_call3
                                (Stdlib[28],
                                 cst$0,
                                 name,
                                 function(_U_){
                                  return caml_cps_call3
  (Stdlib[28],
   packagename,
   _U_,
   function(_V_){
    return caml_cps_call2
            (Ident[12], _V_, function(_W_){return _T_([2, _W_]);});
   });
                                 })
                              : _T_(rel);
                     });
           });
 var raise = caml_pop_trap();
 return raise(caml_maybe_attach_backtrace(_R_, 0));
});
                                      return caml_cps_call3
      (Stdlib_List[46],
       id$0,
       mapping,
       function(id){
        return caml_cps_call3
                (Stdlib_List[36],
                 id$0,
                 defined,
                 function(_Q_){
                  if(_Q_){
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace
                             ([0, Error, [1, objfile, id$0]], 1));
                  }
                  caml_pop_trap();
                  return _P_([2, id]);
                 });
       });
                                     default: return _P_(rel);
                                   }
                                  },
                                  compunit[4],
                                  function(_p_){
                                   return caml_cps_call3
   (Stdlib[37],
    compunit[7],
    primitives[1],
    function(_q_){
     primitives[1] = _q_;
     if(compunit[8]) force_link[1] = 1;
     return caml_cps_call3
             (Stdlib[90],
              ic,
              compunit[2],
              function(_r_){
               return caml_cps_call4
                       (Misc[22],
                        ic,
                        oc,
                        compunit[3],
                        function(_s_){
                         var
                          _t_ = Clflags[19][1],
                          _u_ = _t_ ? 0 < compunit[9] ? 1 : 0 : _t_;
                         function _v_(){
                          return caml_cps_call2
                                  (Stdlib[93],
                                   ic,
                                   function(_M_){
                                    var size = compunit[3];
                                    caml_pop_trap();
                                    return caml_cps_call2
    (Ident[12],
     m[2],
     function(id){
      return caml_cps_call2
              (Ident[12],
               packagename,
               function(_N_){
                var root = [0, _N_];
                return caml_cps_call2
                        (Ident[15],
                         id,
                         function(_O_){
                          return caml_cps_call4
                                  (Subst[5],
                                   id,
                                   [1, root, _O_],
                                   subst,
                                   function(subst){
                                    var ofs = base + size | 0, defined$0 = [0, id, defined];
                                    return caml_cps_exact_call4(_n_, rem, subst, ofs, defined$0);
                                   });
                         });
               });
     });
                                   });
                         }
                         return _u_
                                 ? caml_cps_call3
                                   (Stdlib[90],
                                    ic,
                                    compunit[9],
                                    function(_w_){
                                     return caml_cps_call2
     (Stdlib[89],
      ic,
      function(_x_){
       return caml_cps_call3
               (Stdlib_List[17],
                function(ev, cont){
                 var _B_ = ev[11], _C_ = ev[10], _D_ = ev[9];
                 return caml_cps_call3
                         (Subst[27],
                          ev[8],
                          subst,
                          function(_E_){
                           var
                            _F_ = ev[7],
                            _G_ = ev[6],
                            _H_ = ev[5],
                            _I_ = ev[4],
                            _J_ = ev[3];
                           return caml_cps_call3
                                   (Stdlib[28],
                                    cst$1,
                                    ev[2],
                                    function(_K_){
                                     return caml_cps_call3
     (Stdlib[28],
      packagename,
      _K_,
      function(_L_){
       var
        ev$0 =
          [0,
           base + ev[1] | 0,
           _L_,
           _J_,
           _I_,
           _H_,
           _G_,
           _F_,
           _E_,
           _D_,
           _C_,
           _B_];
       events[1] = [0, ev$0, events[1]];
       return cont(0);
      });
                                    });
                          });
                },
                _x_,
                function(_y_){
                 return caml_cps_call2
                         (Stdlib[89],
                          ic,
                          function(_z_){
                           return caml_cps_call4
                                   (Stdlib_List[25],
                                    function(s, e, cont){
                                     return caml_cps_call3(Misc[13][4][64][4], e, s, cont);
                                    },
                                    debug_dirs[1],
                                    _z_,
                                    function(_A_){debug_dirs[1] = _A_; return _v_();});
                          });
                });
      });
                                    })
                                 : _v_();
                        });
              });
    });
                                  });
                        });
              });
    }
    return _n_(members, subst, 0, 0);
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       },
                       cont);
             });
   });
                                 });
                       });
             });
   }
   function report_error(ppf, param, cont){
    switch(param[0]){
      case 0:
       var ident = param[2], file = param[1], _h_ = Location[21];
       return caml_cps_call2
               (Ident[15],
                ident,
                function(_j_){
                 return caml_cps_call6
                         (Stdlib_Format[135], ppf, _b_, _j_, _h_, file, cont);
                });
      case 1:
       var ident$0 = param[2], file$0 = param[1];
       return caml_cps_call2
               (Ident[15],
                ident$0,
                function(_i_){
                 return caml_cps_call6
                         (Stdlib_Format[135],
                          ppf,
                          _c_,
                          Location[21],
                          file$0,
                          _i_,
                          cont);
                });
      case 2:
       var file$1 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _d_, Location[21], file$1, cont);
      case 3:
       var id = param[3], file$2 = param[2], name = param[1];
       return caml_cps_call7
               (Stdlib_Format[135],
                ppf,
                _e_,
                Location[21],
                file$2,
                name,
                id,
                cont);
      default:
       var file$3 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _f_, file$3, cont);
    }
   }
   runtime.caml_callback
    (Location[51],
     [function(param, cont){
       if(param[1] !== Error) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Location[50],
                report_error,
                err,
                function(_g_){return cont([0, _g_]);});
      }]);
   function reset(param, cont){
    relocs[1] = 0;
    events[1] = 0;
    primitives[1] = 0;
    force_link[1] = 0;
    return cont(0);
   }
   var Bytepackager = [0, package_files, Error, report_error, reset];
   runtime.caml_register_global(33, Bytepackager, "Bytepackager");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Errors
//# unitInfo: Requires: Location
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   runtime.jsoo_create_file
    ("/static/cmis/errors.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\0\xb4\0\0\0&\0\0\0\x8a\0\0\0\x81\xa0&Errors\xa0\xb0\xa0,report_error\x01\x01\xa7\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\x90\xa3#exnG@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc01driver/errors.mliS\x01\x04W\x01\x04W\xc0\x04\x02S\x01\x04W\x01\x04\x81@@\xa1\x04%@@@\x84\x95\xa6\xbe\0\0\x012\0\0\0-\0\0\0\xa9\0\0\0\x87\xa0\xa0&Errors\x900\xd4^\xd0\xd7\xe8\xf1&)\x914\xf5\x8f`\xfc\xcew\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    Location = global_data.Location,
    report_error = Location[56],
    Errors = [0, report_error];
   runtime.caml_register_global(1, Errors, "Errors");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Compile
//# unitInfo: Requires: Bytegen, Clflags, Compile_common, Emitcode, Misc, Printinstr, Printlambda, Profile, Simplif, Stdlib, Translmod
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/compile.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x03I\0\0\0\xb7\0\0\x02\x8b\0\0\x02j\xa0'Compile\xa0\xb0\xa0)interface\x01\x02\x95\xd0\xc0\xc1\x90+source_file\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xe3\xc0\xc1\x90-output_prefix\xc0\xb3\x90\x04\n@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xe5@\x02\x05\xf5\xe1\0@\0\xe6@\x02\x05\xf5\xe1\0@\0\xe7@\xb0\xc02driver/compile.mliR\x01\x04l\x01\x04l\xc0\x04\x02S\x01\x04{\x01\x04\xaf@@\xa1\x04#@@\xa0\xb0\xa0.implementation\x01\x02\x96\xd0\xc0\xc1\x90*start_from\xc0\xb3\xa1\xa1\x90\x92'Clflags-Compiler_pass!t@\x90@\x02\x05\xf5\xe1\0@\0\xe8\xc0\xc1\x90+source_file\xc0\xb3\x90\x040@\x90@\x02\x05\xf5\xe1\0@\0\xe9\xc0\xc1\x90-output_prefix\xc0\xb3\x90\x048@\x90@\x02\x05\xf5\xe1\0@\0\xea\xc0\xb3\x90\x04.@\x90@\x02\x05\xf5\xe1\0@\0\xeb@\x02\x05\xf5\xe1\0@\0\xec@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xee@\xb0\xc0\x04,T\x01\x04\xb0\x01\x04\xb0\xc0\x04-V\x01\x04\xec\x01\x05 @@\xa1\x04NA@\xa0\xb0\xa0+to_bytecode\x01\x02\x97\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92.Compile_common$info@\x90@\x02\x05\xf5\xe1\0@\0\xef\xc0\xc1@\xc0\xb3\xa1\x90\x92)Typedtree.implementation@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\x92\xa0\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\xa1\x90\x92(Instruct+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xa0\xc0\xb3\xa1\xa1\x90\x92%Ident#Set!t@\x90@\x02\x05\xf5\xe1\0@\0\xf1@\x02\x05\xf5\xe1\0@\0\xf4@\x02\x05\xf5\xe1\0@\0\xf5@\x02\x05\xf5\xe1\0@\0\xf6@\xb0\xc0\x04fZ\x01\x05B\x01\x05B\xc0\x04g]\x01\x05\x8b\x01\x05\xb4@@\xa1\x04\x88E@\xa0\xb0\xa0-emit_bytecode\x01\x02\x98\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x04:$info@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xc1@\xc0\x92\xa0\xc0\xb3\x90\x040\xa0\xc0\xb3\xa1\x90\x04.+instruction@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xa0\xc0\xb3\xa1\xa1\x90\x04,#Set!t@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\x04\x96@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04\x94b\x01\x06\x17\x01\x06\x17\xc0\x04\x95c\x01\x06+\x01\x06s@@\xa1\x04\xb6F@@\x84\x95\xa6\xbe\0\0\x05\x83\0\0\0\xe1\0\0\x033\0\0\x02\x9b\xa0\xa0'Compile\x900-\xe5\x0b\xb6jS{\x0e\xdb8\x83\xd7\x1b\xc8\x91n\xa0\xa0(Warnings\x900\x1c&\xf0H\x13\xf6a9j\xbb\x13\x05J\x15\b\x14\xa0\xa0%Types\x900A^\xc5\xf0\xb6\x1e\x8e\x01\xc1\xfd\x8a#\f1\x04H\xa0\xa0)Typedtree\x900\xe1b\xf0\xd2\x17\xc9\xb0(\xa4=2\xa6\xcc\xac\xcc=\xa0\xa0.Type_immediacy\x900\x83\x94^\xa1\x93\x13\xfc\xf2\xd72\xa6r&-o\xb1\xa0\xa0%Subst\x900O8o*&\xe5\x03\bk\xc4\x16\xb8h\xdess\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Sys\x900\xa07\\G\xce\xe9\xc7\xe2\x0f\xf8\xf6\x1dO\x04\xe7H\xa0\xa0.Stdlib__String\x900\xfa\xca\xd7\xe0\xda\xdaYA\x14\x878\xb8\x18\x8d\x84O\xa0\xa0+Stdlib__Set\x900\xf8I\x88K\xcfH\xf8\x94\xe9\b\0\xc7\xcc\xd9\x8f!\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0,Stdlib__Lazy\x900\xca=\\2a1C}\xae\xf1\x8a\xe3N\x7fJ\xa9\xa0\xa0/Stdlib__Hashtbl\x900\xba\xfd\xec\xab\xd3\xfc\xe4\xf5\xcc\xc0\x9a\x1aU\x87\xda\xb4\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Digest\x900\xff\x87b&\xab%\x84\xc7\x9c\xfe\x1a\xfd&\xca/X\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0+Stdlib__Arg\x9007\xac\x8a\xbf\"\xd3\xdb\xe8\xe9\0\xdc\"\x1d\xa3\xab\xf4\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%Shape\x900\b#Y\xf0\xc8\xc7\xb9uE\xdb\xc2>\xab\0\x9e\x13\xa0\xa0'Profile\x900\xcdT\xd8w:R\xbe\xce\xafW:&i\x14\xe0\xf5\xa0\xa0)Primitive\x900\x0f\x9f\xa4\x82\xc8\xcb\xc2\xfe\xcc\xc7\x80\xe0\x0f\x93l9\xa0\xa0$Path\x900\x90\x9f\xee\xa8\x8d\xe1\xb1\xf5\xf5\x03\xb2\x1a\x91\x82#8\xa0\xa0)Parsetree\x900\toX\xe41*\xd2$\xf2-!\x96\r@8M\xa0\xa0+Outcometree\x900$Q\xf6Q\xb2\x80\xa3A\xdf\xd8\x0b\xf3\xf7\x12\x89k\xa0\xa0$Misc\x900\xc1`\xe2\xac`\xe8\x9d\x9c1Gg\xd7<$\x82\xac\xa0\xa0)Longident\x900\x0eu^\x8e$\xe8\xc8\xac\x7f.\xe4\xa4\x98Pv\xbe\xa0\xa0(Location\x900K\xbc\xd6\xf7\xd1cW\x93\x1e\xbb\xfd\xbf\x9fRg\xc8\xa0\xa0)Load_path\x900\xa5\xe6\xad\x16\x8a<\x17\x96\x9bW]\x04\x8d\\\x8d\x06\xa0\xa0&Lambda\x900\xb3\xe5|\x04\x95DR\x130\xc1\xfc\xb3\xbf\x06\x89h\xa0\xa0(Instruct\x900d\xcb\x7f\xe8\xf2\xe6\x0fx\x1e\x1a\tpX\x13\xabf\xa0\xa0,Identifiable\x900\x85\xbd\x9aZ\xc9\xaf\xff\x88\x89n?y?\x97l\xd5\xa0\xa0%Ident\x900Q!^c\x91\xbalr2\xe8\t2n\xec\xe5{\xa0\xa0#Env\x900%E\xca\xf0,F\xd1b\xf10}\xa4pZ\xdfm\xa0\xa0)Debuginfo\x900\xd5J\xc9\xec\xd0)\x0f\x80O\xc2\f\x93\x05\x03\xd0\xb6\xa0\xa0.Compile_common\x900\x87\x12\x1e\xb8\xc8\xb9\xfb\xcb\xde\xe4$CXn(;\xa0\xa0*Cmi_format\x9007\xa0\xea\xdd\xfcE=\xff\xfd\r]\f@\xc1\x90\\\xa0\xa0'Clflags\x900^\x86\xccH\x0f\b\x9a\x8fL\xd2^F\x92\x04^\xc1\xa0\xa00CamlinternalLazy\x900,yy\x17\xc3\x1a\x98\x0by\xe9\xd1m\x84\x05{p\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0\xa0\xa05Build_path_prefix_map\x900g\x070\x0e\xad\t\xf9\x8d\xa0\xd1\x11\x8e\xce\xde\xaa\x84\xa0\xa0(Asttypes\x900\x8e\x13\xc3\xe1\xe6\x19\xd6\t\xf0mL\xb9iQ\x0b\x9f@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    tool_name = "ocamlc",
    Clflags = global_data.Clflags,
    Misc = global_data.Misc,
    Compile_common = global_data.Compile_common,
    Stdlib = global_data.Stdlib,
    Emitcode = global_data.Emitcode,
    Profile = global_data.Profile,
    Printlambda = global_data.Printlambda,
    Simplif = global_data.Simplif,
    Bytegen = global_data.Bytegen,
    Printinstr = global_data.Printinstr,
    Translmod = global_data.Translmod,
    with_info = runtime.caml_callback(Compile_common[1], [0, tool_name]),
    cst_cmi = "cmi",
    _a_ = [0, 1],
    _b_ = [0, 1],
    _c_ = [0, [11, "Cannot start from ", [2, 0, 0]], "Cannot start from %s"],
    cst_cmo = "cmo";
   function interface$0(source_file, output_prefix, cont){
    function _z_(info, cont){
     return caml_cps_call2(Compile_common[5], info, cont);
    }
    return caml_cps_call4
            (with_info,
             source_file,
             output_prefix,
             cst_cmi,
             function(_A_){return caml_cps_call2(_A_, _z_, cont);});
   }
   function to_bytecode(i, param, cont){
    var
     coercion = param[2],
     structure = param[1],
     _j_ = [0, structure, coercion];
    return caml_cps_call2
            (Translmod[1],
             i[2],
             function(_k_){
              return caml_cps_call3
                      (Profile[3],
                       0,
                       Profile[8],
                       function(_l_){
                        return caml_cps_call2
                                (_l_,
                                 _k_,
                                 function(_m_){
                                  return caml_cps_call2
  (_m_,
   _j_,
   function(_n_){
    function _o_(param, cont){
     var lambda = param[4], required_globals = param[3];
     return caml_cps_call4
             (Misc[61],
              i[5],
              Clflags[72],
              Printlambda[4],
              function(_r_){
               return caml_cps_call2
                       (_r_,
                        lambda,
                        function(_s_){
                         return caml_cps_call2
                                 (Simplif[1],
                                  _s_,
                                  function(_t_){
                                   return caml_cps_call4
   (Misc[61],
    i[5],
    Clflags[73],
    Printlambda[4],
    function(_u_){
     return caml_cps_call2
             (_u_,
              _t_,
              function(_v_){
               return caml_cps_call2
                       (Bytegen[1],
                        i[2],
                        function(_w_){
                         return caml_cps_call2
                                 (_w_,
                                  _v_,
                                  function(_x_){
                                   return caml_cps_call4
   (Misc[61],
    i[5],
    Clflags[79],
    Printinstr[2],
    function(_y_){
     return caml_cps_call2
             (_y_,
              _x_,
              function(bytecode){
               return cont([0, bytecode, required_globals]);
              });
    });
                                  });
                        });
              });
    });
                                  });
                        });
              });
    }
    return caml_cps_call3
            (Profile[3],
             _a_,
             Profile[7],
             function(_p_){
              return caml_cps_call2
                      (_p_,
                       _o_,
                       function(_q_){return caml_cps_call2(_q_, _n_, cont);});
             });
   });
                                 });
                       });
             });
   }
   function emit_bytecode(i, param, cont){
    var required_globals = param[2], bytecode = param[1];
    return caml_cps_call2
            (Compile_common[9],
             i,
             function(cmofile){
              return caml_cps_call2
                      (Stdlib[61],
                       cmofile,
                       function(oc){
                        return caml_cps_call4
                                (Misc[4],
                                 [0,
                                  function(param, cont){
                                   return caml_cps_call2(Stdlib[76], oc, cont);
                                  }],
                                 [0,
                                  function(param, cont){
                                   return caml_cps_call2(Misc[17], cmofile, cont);
                                  }],
                                 function(param, cont){
                                  return caml_cps_call5
  (Emitcode[1],
   oc,
   i[2],
   cmofile,
   required_globals,
   function(_g_){
    return caml_cps_call3
            (Profile[3],
             _b_,
             Profile[7],
             function(_h_){
              return caml_cps_call2
                      (_h_,
                       _g_,
                       function(_i_){return caml_cps_call2(_i_, bytecode, cont);});
             });
   });
                                 },
                                 cont);
                       });
             });
   }
   function implementation(start_from, source_file, output_prefix, cont){
    function backend(info, typed, cont){
     return caml_cps_exact_call3
             (to_bytecode,
              info,
              typed,
              function(bytecode){
               return caml_cps_exact_call3
                       (emit_bytecode, info, bytecode, cont);
              });
    }
    function _d_(info, cont){
     return start_from
             ? caml_cps_call2
               (Clflags[164][2],
                start_from,
                function(_f_){return caml_cps_call3(Misc[2], _c_, _f_, cont);})
             : caml_cps_call3(Compile_common[8], info, backend, cont);
    }
    return caml_cps_call4
            (with_info,
             source_file,
             output_prefix,
             cst_cmo,
             function(_e_){return caml_cps_call2(_e_, _d_, cont);});
   }
   var Compile = [0, interface$0, implementation, to_bytecode, emit_bytecode];
   runtime.caml_register_global(17, Compile, "Compile");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Maindriver
//# unitInfo: Requires: Assert_failure, Bytelibrarian, Bytelink, Bytepackager, Clflags, Compenv, Compile, Compmisc, Config, Location, Main_args, Makedepend, Profile, Stdlib, Stdlib__Arg, Stdlib__Filename, Stdlib__List, Stdlib__Printf, Stdlib__String, Warnings
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_driver_maindriver_ml = "driver/maindriver.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/maindriver.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\0\xcd\0\0\0-\0\0\0\xa0\0\0\0\x96\xa0*Maindriver\xa0\xb0\xa0$main\x01\x01\xa7\xd0\xc0\xc1@\xc0\xb3\x90\xa3%arrayH\xa0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc05driver/maindriver.mliU\x01\x05-\x01\x05-\xc0\x04\x02U\x01\x05-\x01\x05_@@\xa1\x04,@@@\x84\x95\xa6\xbe\0\0\x016\0\0\0-\0\0\0\xaa\0\0\0\x88\xa0\xa0*Maindriver\x900}\xd7\x01\xe9\xb7(~\xd6Fz\xa2\xab\x8c}\x91\xcd\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    program = "ocamlc",
    cst = "|",
    Clflags = global_data.Clflags,
    Profile = global_data.Profile,
    Compmisc = global_data.Compmisc,
    Bytepackager = global_data.Bytepackager,
    Makedepend = global_data.Makedepend,
    Compenv = global_data.Compenv,
    Compile = global_data.Compile,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Bytelibrarian = global_data.Bytelibrarian,
    Warnings = global_data.Warnings,
    Config = global_data.Config,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Bytelink = global_data.Bytelink,
    Location = global_data.Location,
    Main_args = global_data.Main_args,
    Options = runtime.caml_callback(Main_args[1], [Main_args[7][3]]),
    cst_File_driver_maindriver_ml_ =
      'File "driver/maindriver.ml", line 23, characters 24-31',
    cst_options_Compute_dependenci =
      "<options> Compute dependencies (use 'ocamlc -depend -help' for details)",
    cst_depend = "-depend",
    cst_File_driver_maindriver_ml_$0 =
      'File "driver/maindriver.ml", line 24, characters 24-31',
    cst_plugin_is_only_supported_u =
      "-plugin is only supported up to OCaml 4.08.0",
    _a_ = [0, cst_driver_maindriver_ml, 66, 40],
    _b_ =
      [0,
       [11,
        "Options -i and -stop-after (",
        [2, 0, [11, ") are  incompatible with -pack, -a, -output-obj", 0]]],
       "Options -i and -stop-after (%s) are  incompatible with -pack, -a, -output-obj"],
    cst_profile = "profile",
    cst_c = ".c",
    _c_ =
      [0,
       [11,
        "The extension of the output file must be .c, ",
        [2, 0, [11, " or ", [2, 0, 0]]]],
       "The extension of the output file must be .c, %s or %s"],
    _d_ = [0, cst_driver_maindriver_ml, 60, 8],
    cst_Please_specify_at_most_one =
      "Please specify at most one of -pack, -a, -c, -output-obj",
    cst_cma = ".cma",
    cst_cmo = ".cmo";
   function main(argv, ppf, cont){
    return caml_cps_call3
            (Clflags[170],
             cst_File_driver_maindriver_ml_,
             Options[1],
             function(_e_){
              return caml_cps_call3
                      (Clflags[170],
                       cst_File_driver_maindriver_ml_$0,
                       [0,
                        [0,
                         cst_depend,
                         [0, Makedepend[2]],
                         cst_options_Compute_dependenci],
                        0],
                       function(_f_){
                        caml_push_trap
                         (function(x){
                           if(x[1] !== Compenv[1])
                            return caml_cps_call3
                                    (Location[56], ppf, x, function(_T_){return cont(2);});
                           var n = x[2];
                           return cont(n);
                          });
                        return caml_cps_call3
                                (Compenv[19],
                                 ppf,
                                 0,
                                 function(_g_){
                                  return caml_cps_call5
  (Compenv[28],
   0,
   [0, argv],
   Compenv[24],
   program,
   function(_h_){
    return caml_cps_call2
            (Compmisc[4],
             0,
             function(_i_){
              function _j_(_k_){
               function _l_(_p_){
                return caml_cps_call3
                        (Compenv[19],
                         ppf,
                         1,
                         function(_q_){
                          return caml_cps_call3
                                  (Stdlib_List[41],
                                   function(x, cont){return cont(x[1]);},
                                   [0,
                                    Clflags[18],
                                    [0, Clflags[61], [0, Compenv[17], [0, Clflags[27], 0]]]],
                                   function(_r_){
                                    return caml_cps_call2
    (Stdlib_List[1],
     _r_,
     function(_s_){
      function _u_(_y_){
       function _B_(_R_){
        caml_pop_trap();
        return caml_cps_call3
                (Compmisc[5],
                 cst_profile,
                 function(ppf, cont){
                  return caml_cps_call3
                          (Profile[4], ppf, Clflags[135][1], cont);
                 },
                 function(_S_){return cont(0);});
       }
       if(Clflags[18][1])
        return caml_cps_call4
                (Compmisc[1],
                 0,
                 0,
                 0,
                 function(_N_){
                  return caml_cps_call2
                          (Compenv[4],
                           Clflags[13][1],
                           function(_O_){
                            return caml_cps_call2
                                    (Compenv[14],
                                     0,
                                     function(_P_){
                                      return caml_cps_call3
      (Bytelibrarian[1],
       _P_,
       _O_,
       function(_Q_){return caml_cps_call2(Warnings[12], 0, _B_);});
                                     });
                           });
                 });
       if(Clflags[61][1])
        return caml_cps_call4
                (Compmisc[1],
                 0,
                 0,
                 0,
                 function(_K_){
                  return caml_cps_call2
                          (Compenv[4],
                           Clflags[13][1],
                           function(extracted_output){
                            return caml_cps_call2
                                    (Compenv[14],
                                     0,
                                     function(revd){
                                      return caml_cps_call3
      (Compmisc[5],
       extracted_output,
       function(ppf_dump, cont){
        return caml_cps_call2
                (Compmisc[2],
                 0,
                 function(_M_){
                  return caml_cps_call5
                          (Bytepackager[1],
                           ppf_dump,
                           _M_,
                           revd,
                           extracted_output,
                           cont);
                 });
       },
       function(_L_){return caml_cps_call2(Warnings[12], 0, _B_);});
                                     });
                           });
                 });
       var
        _z_ = 1 - Compenv[17][1],
        _A_ = _z_ ? 0 !== Clflags[8][1] ? 1 : 0 : _z_;
       if(! _A_) return _B_(0);
       function _C_(target){
        return caml_cps_call4
                (Compmisc[1],
                 0,
                 0,
                 0,
                 function(_H_){
                  return caml_cps_call2
                          (Compenv[14],
                           1,
                           function(_I_){
                            return caml_cps_call3
                                    (Bytelink[1],
                                     _I_,
                                     target,
                                     function(_J_){return caml_cps_call2(Warnings[12], 0, _B_);});
                           });
                 });
       }
       if(Clflags[27][1] && ! Clflags[29][1])
        return caml_cps_call2
                (Compenv[4],
                 Clflags[13][1],
                 function(s){
                  return caml_cps_call3
                          (Stdlib_Filename[7],
                           s,
                           Config[45],
                           function(_D_){
                            return _D_
                                    ? _C_(s)
                                    : caml_cps_call3
                                      (Stdlib_Filename[7],
                                       s,
                                       Config[48],
                                       function(_E_){
return _E_
        ? _C_(s)
        : caml_cps_call3
          (Stdlib_Filename[7],
           s,
           cst_c,
           function(_F_){
            return _F_
                    ? _C_(s)
                    : caml_cps_call4
                      (Stdlib_Printf[4],
                       _c_,
                       Config[45],
                       Config[48],
                       function(_G_){return caml_cps_call2(Compenv[9], _G_, _C_);});
           });
                                       });
                           });
                 });
       return caml_cps_call2(Compenv[5], Clflags[13][1], _C_);
      }
      if(1 >= _s_) return _u_(0);
      var _t_ = Clflags[165][1];
      if(! _t_)
       return caml_cps_call2
               (Compenv[9], cst_Please_specify_at_most_one, _u_);
      var p = _t_[1];
      if(2 > p)
       return caml_cps_call2
               (Clflags[164][3],
                p,
                function(_v_){
                 if(_v_)
                  return caml_cps_call3
                          (Clflags[164][4],
                           function(param, cont){return cont(1);},
                           0,
                           function(_w_){
                            return caml_cps_call3
                                    (Stdlib_String[6],
                                     cst,
                                     _w_,
                                     function(_x_){
                                      return caml_cps_call4
      (Stdlib_Printf[10], Compenv[9], _b_, _x_, _u_);
                                     });
                           });
                 var raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1));
                });
      var raise = caml_pop_trap();
      return raise
              (caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1));
     });
                                   });
                         });
               }
               caml_push_trap
                (function(exn){
                  if(exn[1] === Stdlib_Arg[8]){
                   var msg = exn[2];
                   return caml_cps_call2
                           (Stdlib[53],
                            msg,
                            function(_n_){
                             return caml_cps_call2
                                     (Clflags[172],
                                      program,
                                      function(_o_){return caml_cps_call2(Stdlib[99], 2, _l_);});
                            });
                  }
                  var
                   raise = caml_pop_trap(),
                   exn$0 = caml_maybe_attach_backtrace(exn, 0);
                  return raise(exn$0);
                 });
               return caml_cps_call2
                       (Compenv[27],
                        [0, ppf, Compile[2], Compile[1], cst_cmo, cst_cma],
                        function(_m_){caml_pop_trap(); return _l_(0);});
              }
              return Clflags[50][1]
                      ? caml_cps_call2
                        (Compenv[9], cst_plugin_is_only_supported_u, _j_)
                      : _j_(0);
             });
   });
                                 });
                       });
             });
   }
   var Maindriver = [0, main];
   runtime.caml_register_global(36, Maindriver, "Maindriver");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
