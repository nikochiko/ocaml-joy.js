// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Str
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Domain, Stdlib__Int, Stdlib__List, Stdlib__Map, Stdlib__String
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_str_ml = "str.ml",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   return caml_callback
           (function(cont){
             var undef = undefined;
             runtime.jsoo_create_file
              ("/static/cmis/str.cmi",
               "Caml1999I032\x84\x95\xa6\xbe\0\0\x11\x16\0\0\x03G\0\0\f\xc3\0\0\f\x84\xa0#Str\xa0\xc1\xa0&regexp\x01\x01.\b\0\0;\0@@@A@@@@@\xb0\xc0'str.mliV\x01\x04\x96\x01\x04\x96\xc0\x04\x02V\x01\x04\x96\x01\x04\xa1@@@@\xa1\x04\x0b@A@\xa0\xb0\xa0&regexp\x01\x01/\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\x01\xff[\xc0\xb3\x90\x04\x18@\x90@\x02\x05\xf5\xe1\0@\x01\xff\\@\x02\x05\xf5\xe1\0@\x01\xff]@\xb0\xc0\x04\x16Z\x01\x04\xd5\x01\x04\xd5\xc0\x04\x17Z\x01\x04\xd5\x01\x04\xf2@@\xa1\x04 A@\xa0\xb0\xa00regexp_case_fold\x01\x010\xd0\xc0\xc1@\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xff^\xc0\xb3\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xff_@\x02\x05\xf5\xe1\0@\x01\xff`@\xb0\xc0\x04(\0J\x01\r\xcd\x01\r\xcd\xc0\x04)\0J\x01\r\xcd\x01\r\xf4@@\xa1\x042B@\xa0\xb0\xa0%quote\x01\x011\xd0\xc0\xc1@\xc0\xb3\x90\x04'@\x90@\x02\x05\xf5\xe1\0@\x01\xffa\xc0\xb3\x90\x04+@\x90@\x02\x05\xf5\xe1\0@\x01\xffb@\x02\x05\xf5\xe1\0@\x01\xffc@\xb0\xc0\x04;\0O\x01\x0e\x9d\x01\x0e\x9d\xc0\x04<\0O\x01\x0e\x9d\x01\x0e\xb9@@\xa1\x04EC@\xa0\xb0\xa0-regexp_string\x01\x012\xd0\xc0\xc1@\xc0\xb3\x90\x04:@\x90@\x02\x05\xf5\xe1\0@\x01\xffd\xc0\xb3\x048@\x90@\x02\x05\xf5\xe1\0@\x01\xffe@\x02\x05\xf5\xe1\0@\x01\xfff@\xb0\xc0\x04M\0S\x01\x0f\x16\x01\x0f\x16\xc0\x04N\0S\x01\x0f\x16\x01\x0f:@@\xa1\x04WD@\xa0\xb0\xa07regexp_string_case_fold\x01\x013\xd0\xc0\xc1@\xc0\xb3\x90\x04L@\x90@\x02\x05\xf5\xe1\0@\x01\xffg\xc0\xb3\x04J@\x90@\x02\x05\xf5\xe1\0@\x01\xffh@\x02\x05\xf5\xe1\0@\x01\xffi@\xb0\xc0\x04_\0W\x01\x0f\xa3\x01\x0f\xa3\xc0\x04`\0W\x01\x0f\xa3\x01\x0f\xd1@@\xa1\x04iE@\xa0\xb0\xa0,string_match\x01\x014\xd0\xc0\xc1@\xc0\xb3\x04X@\x90@\x02\x05\xf5\xe1\0@\x01\xffj\xc0\xc1@\xc0\xb3\x90\x04c@\x90@\x02\x05\xf5\xe1\0@\x01\xffk\xc0\xc1@\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\x01\xffl\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\x01\xffm@\x02\x05\xf5\xe1\0@\x01\xffn@\x02\x05\xf5\xe1\0@\x01\xffo@\x02\x05\xf5\xe1\0@\x01\xffp@\xb0\xc0\x04\x81\0_\x01\x10}\x01\x10}\xc0\x04\x82\0_\x01\x10}\x01\x10\xaf@@\xa1\x04\x8bF@\xa0\xb0\xa0.search_forward\x01\x015\xd0\xc0\xc1@\xc0\xb3\x04z@\x90@\x02\x05\xf5\xe1\0@\x01\xffq\xc0\xc1@\xc0\xb3\x90\x04\x85@\x90@\x02\x05\xf5\xe1\0@\x01\xffr\xc0\xc1@\xc0\xb3\x90\x04\"@\x90@\x02\x05\xf5\xe1\0@\x01\xffs\xc0\xb3\x90\x04&@\x90@\x02\x05\xf5\xe1\0@\x01\xfft@\x02\x05\xf5\xe1\0@\x01\xffu@\x02\x05\xf5\xe1\0@\x01\xffv@\x02\x05\xf5\xe1\0@\x01\xffw@\xb0\xc0\x04\x9f\0d\x01\x11x\x01\x11x\xc0\x04\xa0\0d\x01\x11x\x01\x11\xab@@\xa1\x04\xa9G@\xa0\xb0\xa0/search_backward\x01\x016\xd0\xc0\xc1@\xc0\xb3\x04\x98@\x90@\x02\x05\xf5\xe1\0@\x01\xffx\xc0\xc1@\xc0\xb3\x90\x04\xa3@\x90@\x02\x05\xf5\xe1\0@\x01\xffy\xc0\xc1@\xc0\xb3\x90\x04@@\x90@\x02\x05\xf5\xe1\0@\x01\xffz\xc0\xb3\x90\x04D@\x90@\x02\x05\xf5\xe1\0@\x01\xff{@\x02\x05\xf5\xe1\0@\x01\xff|@\x02\x05\xf5\xe1\0@\x01\xff}@\x02\x05\xf5\xe1\0@\x01\xff~@\xb0\xc0\x04\xbd\0l\x01\x12\xec\x01\x12\xec\xc0\x04\xbe\0l\x01\x12\xec\x01\x13 @@\xa1\x04\xc7H@\xa0\xb0\xa04string_partial_match\x01\x017\xd0\xc0\xc1@\xc0\xb3\x04\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x7f\xc0\xc1@\xc0\xb3\x90\x04\xc1@\x90@\x02\x05\xf5\xe1\0@\0\x80\xc0\xc1@\xc0\xb3\x90\x04^@\x90@\x02\x05\xf5\xe1\0@\0\x81\xc0\xb3\x90\x04\\@\x90@\x02\x05\xf5\xe1\0@\0\x82@\x02\x05\xf5\xe1\0@\0\x83@\x02\x05\xf5\xe1\0@\0\x84@\x02\x05\xf5\xe1\0@\0\x85@\xb0\xc0\x04\xdb\0t\x01\x14|\x01\x14|\xc0\x04\xdc\0t\x01\x14|\x01\x14\xb6@@\xa1\x04\xe5I@\xa0\xb0\xa0.matched_string\x01\x018\xd0\xc0\xc1@\xc0\xb3\x90\x04\xda@\x90@\x02\x05\xf5\xe1\0@\0\x86\xc0\xb3\x90\x04\xde@\x90@\x02\x05\xf5\xe1\0@\0\x87@\x02\x05\xf5\xe1\0@\0\x88@\xb0\xc0\x04\xee\0y\x01\x15i\x01\x15i\xc0\x04\xef\0y\x01\x15i\x01\x15\x8e@@\xa1\x04\xf8J@\xa0\xb0\xa0/match_beginning\x01\x019\xd0\xc0\xc1@\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\x89\xc0\xb3\x90\x04\x8a@\x90@\x02\x05\xf5\xe1\0@\0\x8a@\x02\x05\xf5\xe1\0@\0\x8b@\xb0\xc0\x05\x01\x03\x01\0\x95\x01\x19:\x01\x19:\xc0\x05\x01\x04\x01\0\x95\x01\x19:\x01\x19[@@\xa1\x05\x01\rK@\xa0\xb0\xa0)match_end\x01\x01:\xd0\xc0\xc1@\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\x8c\xc0\xb3\x90\x04\x9d@\x90@\x02\x05\xf5\xe1\0@\0\x8d@\x02\x05\xf5\xe1\0@\0\x8e@\xb0\xc0\x05\x01\x16\x01\0\x9a\x01\x1a*\x01\x1a*\xc0\x05\x01\x17\x01\0\x9a\x01\x1a*\x01\x1aE@@\xa1\x05\x01 L@\xa0\xb0\xa0-matched_group\x01\x01;\xd0\xc0\xc1@\xc0\xb3\x90\x04\xac@\x90@\x02\x05\xf5\xe1\0@\0\x8f\xc0\xc1@\xc0\xb3\x90\x05\x01\x1b@\x90@\x02\x05\xf5\xe1\0@\0\x90\xc0\xb3\x90\x05\x01\x1f@\x90@\x02\x05\xf5\xe1\0@\0\x91@\x02\x05\xf5\xe1\0@\0\x92@\x02\x05\xf5\xe1\0@\0\x93@\xb0\xc0\x05\x01/\x01\0\xa0\x01\x1b(\x01\x1b(\xc0\x05\x010\x01\0\xa0\x01\x1b(\x01\x1bS@@\xa1\x05\x019M@\xa0\xb0\xa0/group_beginning\x01\x01<\xd0\xc0\xc1@\xc0\xb3\x90\x04\xc5@\x90@\x02\x05\xf5\xe1\0@\0\x94\xc0\xb3\x90\x04\xc9@\x90@\x02\x05\xf5\xe1\0@\0\x95@\x02\x05\xf5\xe1\0@\0\x96@\xb0\xc0\x05\x01B\x01\0\xaf\x01\x1eo\x01\x1eo\xc0\x05\x01C\x01\0\xaf\x01\x1eo\x01\x1e\x8f@@\xa1\x05\x01LN@\xa0\xb0\xa0)group_end\x01\x01=\xd0\xc0\xc1@\xc0\xb3\x90\x04\xd8@\x90@\x02\x05\xf5\xe1\0@\0\x97\xc0\xb3\x90\x04\xdc@\x90@\x02\x05\xf5\xe1\0@\0\x98@\x02\x05\xf5\xe1\0@\0\x99@\xb0\xc0\x05\x01U\x01\0\xb9\x01 P\x01 P\xc0\x05\x01V\x01\0\xb9\x01 P\x01 j@@\xa1\x05\x01_O@\xa0\xb0\xa0.global_replace\x01\x01>\xd0\xc0\xc1@\xc0\xb3\x05\x01N@\x90@\x02\x05\xf5\xe1\0@\0\x9a\xc0\xc1@\xc0\xb3\x90\x05\x01Y@\x90@\x02\x05\xf5\xe1\0@\0\x9b\xc0\xc1@\xc0\xb3\x90\x05\x01_@\x90@\x02\x05\xf5\xe1\0@\0\x9c\xc0\xb3\x90\x05\x01c@\x90@\x02\x05\xf5\xe1\0@\0\x9d@\x02\x05\xf5\xe1\0@\0\x9e@\x02\x05\xf5\xe1\0@\0\x9f@\x02\x05\xf5\xe1\0@\0\xa0@\xb0\xc0\x05\x01s\x01\0\xc8\x01\"U\x01\"U\xc0\x05\x01t\x01\0\xc8\x01\"U\x01\"\x8e@@\xa1\x05\x01}P@\xa0\xb0\xa0-replace_first\x01\x01?\xd0\xc0\xc1@\xc0\xb3\x05\x01l@\x90@\x02\x05\xf5\xe1\0@\0\xa1\xc0\xc1@\xc0\xb3\x90\x05\x01w@\x90@\x02\x05\xf5\xe1\0@\0\xa2\xc0\xc1@\xc0\xb3\x90\x05\x01}@\x90@\x02\x05\xf5\xe1\0@\0\xa3\xc0\xb3\x90\x05\x01\x81@\x90@\x02\x05\xf5\xe1\0@\0\xa4@\x02\x05\xf5\xe1\0@\0\xa5@\x02\x05\xf5\xe1\0@\0\xa6@\x02\x05\xf5\xe1\0@\0\xa7@\xb0\xc0\x05\x01\x91\x01\0\xd0\x01$)\x01$)\xc0\x05\x01\x92\x01\0\xd0\x01$)\x01$a@@\xa1\x05\x01\x9bQ@\xa0\xb0\xa01global_substitute\x01\x01@\xd0\xc0\xc1@\xc0\xb3\x05\x01\x8a@\x90@\x02\x05\xf5\xe1\0@\0\xa8\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\x05\x01\x97@\x90@\x02\x05\xf5\xe1\0@\0\xa9\xc0\xb3\x90\x05\x01\x9b@\x90@\x02\x05\xf5\xe1\0@\0\xaa@\x02\x05\xf5\xe1\0@\0\xab\xc0\xc1@\xc0\xb3\x90\x05\x01\xa1@\x90@\x02\x05\xf5\xe1\0@\0\xac\xc0\xb3\x90\x05\x01\xa5@\x90@\x02\x05\xf5\xe1\0@\0\xad@\x02\x05\xf5\xe1\0@\0\xae@\x02\x05\xf5\xe1\0@\0\xaf@\x02\x05\xf5\xe1\0@\0\xb0@\xb0\xc0\x05\x01\xb5\x01\0\xd4\x01$\xde\x01$\xde\xc0\x05\x01\xb6\x01\0\xd4\x01$\xde\x01%&@@\xa1\x05\x01\xbfR@\xa0\xb0\xa00substitute_first\x01\x01A\xd0\xc0\xc1@\xc0\xb3\x05\x01\xae@\x90@\x02\x05\xf5\xe1\0@\0\xb1\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\x05\x01\xbb@\x90@\x02\x05\xf5\xe1\0@\0\xb2\xc0\xb3\x90\x05\x01\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xb3@\x02\x05\xf5\xe1\0@\0\xb4\xc0\xc1@\xc0\xb3\x90\x05\x01\xc5@\x90@\x02\x05\xf5\xe1\0@\0\xb5\xc0\xb3\x90\x05\x01\xc9@\x90@\x02\x05\xf5\xe1\0@\0\xb6@\x02\x05\xf5\xe1\0@\0\xb7@\x02\x05\xf5\xe1\0@\0\xb8@\x02\x05\xf5\xe1\0@\0\xb9@\xb0\xc0\x05\x01\xd9\x01\0\xdb\x01&]\x01&]\xc0\x05\x01\xda\x01\0\xdb\x01&]\x01&\xa4@@\xa1\x05\x01\xe3S@\xa0\xb0\xa0/replace_matched\x01\x01B\xd0\xc0\xc1@\xc0\xb3\x90\x05\x01\xd8@\x90@\x02\x05\xf5\xe1\0@\0\xba\xc0\xc1@\xc0\xb3\x90\x05\x01\xde@\x90@\x02\x05\xf5\xe1\0@\0\xbb\xc0\xb3\x90\x05\x01\xe2@\x90@\x02\x05\xf5\xe1\0@\0\xbc@\x02\x05\xf5\xe1\0@\0\xbd@\x02\x05\xf5\xe1\0@\0\xbe@\xb0\xc0\x05\x01\xf2\x01\0\xdf\x01'$\x01'$\xc0\x05\x01\xf3\x01\0\xdf\x01'$\x01'T@@\xa1\x05\x01\xfcT@\xa0\xb0\xa0%split\x01\x01C\xd0\xc0\xc1@\xc0\xb3\x05\x01\xeb@\x90@\x02\x05\xf5\xe1\0@\0\xbf\xc0\xc1@\xc0\xb3\x90\x05\x01\xf6@\x90@\x02\x05\xf5\xe1\0@\0\xc0\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x05\x02\0@\x90@\x02\x05\xf5\xe1\0@\0\xc1@\x90@\x02\x05\xf5\xe1\0@\0\xc2@\x02\x05\xf5\xe1\0@\0\xc3@\x02\x05\xf5\xe1\0@\0\xc4@\xb0\xc0\x05\x02\x11\x01\0\xec\x01(\xfd\x01(\xfd\xc0\x05\x02\x12\x01\0\xec\x01(\xfd\x01)(@@\xa1\x05\x02\x1bU@\xa0\xb0\xa0-bounded_split\x01\x01D\xd0\xc0\xc1@\xc0\xb3\x05\x02\n@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xc0\xc1@\xc0\xb3\x90\x05\x02\x15@\x90@\x02\x05\xf5\xe1\0@\0\xc6\xc0\xc1@\xc0\xb3\x90\x05\x01\xb2@\x90@\x02\x05\xf5\xe1\0@\0\xc7\xc0\xb3\x90\x04%\xa0\xc0\xb3\x90\x05\x02#@\x90@\x02\x05\xf5\xe1\0@\0\xc8@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\x02\x05\xf5\xe1\0@\0\xcb@\x02\x05\xf5\xe1\0@\0\xcc@\xb0\xc0\x05\x024\x01\0\xf3\x01*g\x01*g\xc0\x05\x025\x01\0\xf3\x01*g\x01*\xa1@@\xa1\x05\x02>V@\xa0\xb0\xa0+split_delim\x01\x01E\xd0\xc0\xc1@\xc0\xb3\x05\x02-@\x90@\x02\x05\xf5\xe1\0@\0\xcd\xc0\xc1@\xc0\xb3\x90\x05\x028@\x90@\x02\x05\xf5\xe1\0@\0\xce\xc0\xb3\x90\x04B\xa0\xc0\xb3\x90\x05\x02@@\x90@\x02\x05\xf5\xe1\0@\0\xcf@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\x02\x05\xf5\xe1\0@\0\xd2@\xb0\xc0\x05\x02Q\x01\0\xf7\x01+\x15\x01+\x15\xc0\x05\x02R\x01\0\xf7\x01+\x15\x01+F@@\xa1\x05\x02[W@\xa0\xb0\xa03bounded_split_delim\x01\x01F\xd0\xc0\xc1@\xc0\xb3\x05\x02J@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xc1@\xc0\xb3\x90\x05\x02U@\x90@\x02\x05\xf5\xe1\0@\0\xd4\xc0\xc1@\xc0\xb3\x90\x05\x01\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xd5\xc0\xb3\x90\x04e\xa0\xc0\xb3\x90\x05\x02c@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x90@\x02\x05\xf5\xe1\0@\0\xd7@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\x02\x05\xf5\xe1\0@\0\xda@\xb0\xc0\x05\x02t\x01\0\xff\x01,\x83\x01,\x83\xc0\x05\x02u\x01\0\xff\x01,\x83\x01,\xc3@@\xa1\x05\x02~X@\xa0\xc1\xa0,split_result\x01\x01G\b\0\0;\0@@\xa1\xa0\xe0\xa0$Text\x01\x01&\x90\xa0\xc0\xb3\x90\x05\x02x@\x90@\x02\x05\xf5\xe1\0@\0\xdc@@\xb0\xc0\x05\x02\x88\x01\x01\x05\x01-\x8f\x01-\x93\xc0\x05\x02\x89\x01\x01\x05\x01-\x8f\x01-\xa1@@\xa1\x05\x02\x92Z\xa0\xe0\xa0%Delim\x01\x01'\x90\xa0\xc0\xb3\x90\x05\x02\x86@\x90@\x02\x05\xf5\xe1\0@\0\xdb@@\xb0\xc0\x05\x02\x96\x01\x01\x06\x01-\xa2\x01-\xa4\xc0\x05\x02\x97\x01\x01\x06\x01-\xa2\x01-\xb5@@\xa1\x05\x02\xa0[@@A@@@@@\xb0\xc0\x05\x02\x9a\x01\x01\x04\x01-{\x01-{\x04\x04@@@@\xa1\x05\x02\xa3YA@\xa0\xb0\xa0*full_split\x01\x01H\xd0\xc0\xc1@\xc0\xb3\x05\x02\x92@\x90@\x02\x05\xf5\xe1\0@\0\xdd\xc0\xc1@\xc0\xb3\x90\x05\x02\x9d@\x90@\x02\x05\xf5\xe1\0@\0\xde\xc0\xb3\x90\x04\xa7\xa0\xc0\xb3\x90\x04:@\x90@\x02\x05\xf5\xe1\0@\0\xdf@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\x02\x05\xf5\xe1\0@\0\xe2@\xb0\xc0\x05\x02\xb6\x01\x01\b\x01-\xb7\x01-\xb7\xc0\x05\x02\xb7\x01\x01\b\x01-\xb7\x01-\xed@@\xa1\x05\x02\xc0\\@\xa0\xb0\xa02bounded_full_split\x01\x01I\xd0\xc0\xc1@\xc0\xb3\x05\x02\xaf@\x90@\x02\x05\xf5\xe1\0@\0\xe3\xc0\xc1@\xc0\xb3\x90\x05\x02\xba@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xc0\xc1@\xc0\xb3\x90\x05\x02W@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xc0\xb3\x90\x04\xca\xa0\xc0\xb3\x04#@\x90@\x02\x05\xf5\xe1\0@\0\xe6@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\x02\x05\xf5\xe1\0@\0\xe9@\x02\x05\xf5\xe1\0@\0\xea@\xb0\xc0\x05\x02\xd8\x01\x01\x10\x01/%\x01/%\xc0\x05\x02\xd9\x01\x01\x10\x01/%\x01/j@@\xa1\x05\x02\xe2]@\xa0\xb0\xa0-string_before\x01\x01J\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xd7@\x90@\x02\x05\xf5\xe1\0@\0\xeb\xc0\xc1@\xc0\xb3\x90\x05\x02t@\x90@\x02\x05\xf5\xe1\0@\0\xec\xc0\xb3\x90\x05\x02\xe1@\x90@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\xb0\xc0\x05\x02\xf1\x01\x01\x1a\x010h\x010h\xc0\x05\x02\xf2\x01\x01\x1a\x010h\x010\x93@@\xa1\x05\x02\xfb^@\xa0\xb0\xa0,string_after\x01\x01K\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xf0@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\xc1@\xc0\xb3\x90\x05\x02\x8d@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xb3\x90\x05\x02\xfa@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf3@\x02\x05\xf5\xe1\0@\0\xf4@\xb0\xc0\x05\x03\n\x01\x01\x1f\x011*\x011*\xc0\x05\x03\x0b\x01\x01\x1f\x011*\x011T@@\xa1\x05\x03\x14_@\xa0\xb0\xa0+first_chars\x01\x01L\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\t@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1@\xc0\xb3\x90\x05\x02\xa6@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xb3\x90\x05\x03\x13@\x90@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\xb0\xc0\x05\x03#\x01\x01$\x011\xe9\x011\xe9\xc0\x05\x03$\x01\x01$\x011\xe9\x012\x12@@\xa1\x05\x03-`@\xa0\xb0\xa0*last_chars\x01\x01M\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\"@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\x90\x05\x02\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\x05\x03,@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x03<\x01\x01(\x012\x8c\x012\x8c\xc0\x05\x03=\x01\x01(\x012\x8c\x012\xb4@@\xa1\x05\x03Fa@@\x84\x95\xa6\xbe\0\0\0a\0\0\0\x0f\0\0\x007\0\0\0-\xa0\xa0#Str\x900`3\x10K\xfe\x80M-\xa0Hk\xb3\x8d\xa8f\b\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
             var
              global_data = runtime.caml_get_global_data(),
              cst$2 = cst,
              cst$1 = cst,
              cst$0 = cst,
              Stdlib_List = global_data.Stdlib__List,
              Stdlib_String = global_data.Stdlib__String,
              Stdlib = global_data.Stdlib,
              Stdlib_Domain = global_data.Stdlib__Domain,
              Stdlib_Bytes = global_data.Stdlib__Bytes,
              Assert_failure = global_data.Assert_failure,
              Stdlib_Buffer = global_data.Stdlib__Buffer,
              Stdlib_Int = global_data.Stdlib__Int,
              Stdlib_Array = global_data.Stdlib__Array,
              Stdlib_Char = global_data.Stdlib__Char,
              Stdlib_Map = global_data.Stdlib__Map;
             function string_before(s, n, cont){
              return caml_cps_call4(Stdlib_String[15], s, 0, n, cont);
             }
             function string_after(s, n, cont){
              return caml_cps_call4
                      (Stdlib_String[15],
                       s,
                       n,
                       caml_ml_string_length(s) - n | 0,
                       cont);
             }
             function first_chars(s, n, cont){
              return caml_cps_call4(Stdlib_String[15], s, 0, n, cont);
             }
             function last_chars(s, n, cont){
              return caml_cps_call4
                      (Stdlib_String[15],
                       s,
                       caml_ml_string_length(s) - n | 0,
                       n,
                       cont);
             }
             function lowercase_latin1(c, cont){
              var _cF_ = c - 192 | 0;
              a:
              {
               if(30 < _cF_ >>> 0){
                if(25 < _cF_ + 127 >>> 0) break a;
               }
               else if(23 === _cF_) break a;
               return cont(c + 32 | 0);
              }
              return cont(c);
             }
             var full = caml_callback(Stdlib_Bytes[1], [32, 255]);
             function make_empty(param, cont){
              return caml_cps_call3(Stdlib_Bytes[1], 32, 0, cont);
             }
             function add(s, c, cont){
              var _cD_ = caml_bytes_get(s, c >>> 3 | 0) | 1 << (c & 7);
              return caml_cps_call2
                      (Stdlib_Char[1],
                       _cD_,
                       function(_cE_){
                        caml_bytes_set(s, c >>> 3 | 0, _cE_);
                        return cont(undef);
                       });
             }
             function singleton(c, cont){
              return caml_cps_exact_call2
                      (make_empty,
                       undef,
                       function(s){
                        return caml_cps_exact_call3
                                (add, s, c, function(_cC_){return cont(s);});
                       });
             }
             function complement(s, cont){
              var r = caml_create_bytes(32);
              function _cy_(i){
               var _cz_ = caml_bytes_get(s, i) ^ 255;
               return caml_cps_call2
                       (Stdlib_Char[1],
                        _cz_,
                        function(_cA_){
                         caml_bytes_set(r, i, _cA_);
                         var _cB_ = i + 1 | 0;
                         return 31 !== i ? caml_cps_exact_call1(_cy_, _cB_) : cont(r);
                        });
              }
              return _cy_(0);
             }
             function union(s1, s2, cont){
              var r = caml_create_bytes(32);
              function _ct_(i){
               var
                _cu_ = caml_bytes_get(s2, i),
                _cv_ = caml_bytes_get(s1, i) | _cu_;
               return caml_cps_call2
                       (Stdlib_Char[1],
                        _cv_,
                        function(_cw_){
                         caml_bytes_set(r, i, _cw_);
                         var _cx_ = i + 1 | 0;
                         return 31 !== i ? caml_cps_exact_call1(_ct_, _cx_) : cont(r);
                        });
              }
              return _ct_(0);
             }
             function disjoint(s1, s2){
              try{
               var i = 0;
               for(;;){
                var _cq_ = caml_bytes_get(s2, i);
                if(0 !== (caml_bytes_get(s1, i) & _cq_))
                 throw caml_maybe_attach_backtrace(Stdlib[3], 1);
                var _cr_ = i + 1 | 0;
                if(31 === i){var _cp_ = 1; return _cp_;}
                var i = _cr_;
               }
              }
              catch(_cs_){
               var _co_ = caml_wrap_exception(_cs_);
               if(_co_ === Stdlib[3]) return 0;
               throw caml_maybe_attach_backtrace(_co_, 0);
              }
             }
             function iter(fn, s, cont){
              function _cg_(i){
               var c = caml_bytes_get(s, i);
               function _ch_(){
                var _cn_ = i + 1 | 0;
                return 31 !== i
                        ? caml_cps_exact_call1(_cg_, _cn_)
                        : cont(undef);
               }
               if(0 === c) return _ch_();
               function _ci_(j){
                function _cj_(_cl_){
                 var _cm_ = j + 1 | 0;
                 return 7 !== j ? caml_cps_exact_call1(_ci_, _cm_) : _ch_();
                }
                return 0 !== (c & 1 << j)
                        ? caml_cps_call2
                          (Stdlib_Char[1],
                           (i << 3) + j | 0,
                           function(_ck_){return caml_cps_exact_call2(fn, _ck_, _cj_);})
                        : _cj_(0);
               }
               return _ci_(0);
              }
              return _cg_(0);
             }
             function fold_case(s, cont){
              return caml_cps_exact_call2
                      (make_empty,
                       undef,
                       function(r){
                        return caml_cps_exact_call3
                                (iter,
                                 function(c, cont){
                                  return caml_cps_exact_call2
  (lowercase_latin1,
   c,
   function(_cc_){
    return caml_cps_exact_call3
            (add,
             r,
             _cc_,
             function(_ce_){
              var _cd_ = c - 224 | 0;
              a:
              {
               if(30 < _cd_ >>> 0){
                if(25 < _cd_ + 127 >>> 0){var _cf_ = c; break a;}
               }
               else if(23 === _cd_){var _cf_ = c; break a;}
               var _cf_ = c - 32 | 0;
              }
              return caml_cps_exact_call3(add, r, _cf_, cont);
             });
   });
                                 },
                                 s,
                                 function(_cb_){return cont(r);});
                       });
             }
             var
              op_CHAR = 0,
              op_CHARNORM = 1,
              op_GOTO = 15,
              op_PUSHBACK = 16,
              op_SETMARK = 17,
              op_CHECKPROGRESS = 18,
              _a_ = [0, cst_str_ml, 228, 11];
             function instr(opc, arg){return opc | arg << 8;}
             function displ(dest, from){return (dest - from | 0) - 1 | 0;}
             function is_nullable(param, cont){
              function _b$_(param){
               if(typeof param === "number")
                switch(param){
                  case 0:
                   return cont(1);
                  case 1:
                   return cont(1);
                  default: return cont(1);
                }
               switch(param[0]){
                 case 0:
                  return cont(0);
                 case 1:
                  var s = param[1]; return cont(caml_string_equal(s, cst));
                 case 2:
                  return cont(0);
                 case 3:
                  var rl = param[1];
                  return caml_cps_call3
                          (Stdlib_List[32], is_nullable, rl, cont);
                 case 4:
                  var r2 = param[2], r1 = param[1];
                  return caml_cps_exact_call2
                          (is_nullable,
                           r1,
                           function(_ca_){
                            return _ca_ ? cont(_ca_) : caml_cps_exact_call1(_b$_, r2);
                           });
                 case 5:
                  return cont(1);
                 case 6:
                  var r = param[1]; return caml_cps_exact_call1(_b$_, r);
                 case 7:
                  return cont(1);
                 case 8:
                  var r$0 = param[2]; return caml_cps_exact_call1(_b$_, r$0);
                 default: return cont(1);
               }
              }
              return _b$_(param);
             }
             function first(param, cont){
              var param$0 = param;
              for(;;){
               if(typeof param$0 === "number")
                switch(param$0){
                  case 0:
                   return cont(full);
                  case 1:
                   return cont(full);
                  default: return cont(full);
                }
               switch(param$0[0]){
                 case 0:
                  var c = param$0[1];
                  return caml_cps_exact_call2(singleton, c, cont);
                 case 1:
                  var s = param$0[1];
                  return caml_string_equal(s, cst)
                          ? cont(full)
                          : caml_cps_exact_call2
                            (singleton, caml_string_get(s, 0), cont);
                 case 2:
                  var cmpl = param$0[2], cl = param$0[1];
                  return cmpl
                          ? caml_cps_exact_call2(complement, cl, cont)
                          : cont(cl);
                 case 3:
                  var rl = param$0[1];
                  return caml_cps_exact_call2(first_seq, rl, cont);
                 case 4:
                  var r2 = param$0[2], r1 = param$0[1];
                  return caml_cps_exact_call2
                          (first,
                           r2,
                           function(_b9_){
                            return caml_cps_exact_call2
                                    (first,
                                     r1,
                                     function(_b__){
                                      return caml_cps_exact_call3(union, _b__, _b9_, cont);
                                     });
                           });
                 case 5:
                  return cont(full);
                 case 6:
                  var r = param$0[1], param$0 = r; break;
                 case 7:
                  return cont(full);
                 case 8:
                  var r$0 = param$0[2], param$0 = r$0; break;
                 default: return cont(full);
               }
              }
             }
             function first_seq(param, cont){
              var param$0 = param;
              for(;;){
               if(! param$0) return cont(full);
               var r = param$0[1];
               if(typeof r !== "number")
                switch(r[0]){
                  case 5:
                   var rl$0 = param$0[2], r$0 = r[1];
                   return caml_cps_exact_call2
                           (first_seq,
                            rl$0,
                            function(_b7_){
                             return caml_cps_exact_call2
                                     (first,
                                      r$0,
                                      function(_b8_){
                                       return caml_cps_exact_call3(union, _b8_, _b7_, cont);
                                      });
                            });
                  case 7:
                   var rl$1 = param$0[2], r$1 = r[1];
                   return caml_cps_exact_call2
                           (first_seq,
                            rl$1,
                            function(_b5_){
                             return caml_cps_exact_call2
                                     (first,
                                      r$1,
                                      function(_b6_){
                                       return caml_cps_exact_call3(union, _b6_, _b5_, cont);
                                      });
                            });
                  default: return caml_cps_exact_call2(first, r, cont);
                }
               var rl = param$0[2], param$0 = rl;
              }
             }
             function charclass_of_regexp(fold_case$0, re, cont){
              if(typeof re !== "number"){
               var
                _b0_ =
                  function(cl1, compl){
                   function _b2_(cl2){
                    function _b3_(_b4_){
                     return caml_cps_call2(Stdlib_Bytes[6], _b4_, cont);
                    }
                    return compl
                            ? caml_cps_exact_call2(complement, cl2, _b3_)
                            : _b3_(cl2);
                   }
                   return fold_case$0
                           ? caml_cps_exact_call2(fold_case, cl1, _b2_)
                           : _b2_(cl1);
                  };
               switch(re[0]){
                 case 0:
                  var c = re[1], compl = 0;
                  return caml_cps_exact_call2
                          (singleton, c, function(_b1_){return _b0_(_b1_, compl);});
                 case 2:
                  var compl$0 = re[2], cl = re[1]; return _b0_(cl, compl$0);
               }
              }
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1));
             }
             var
              t = caml_create_bytes(256),
              op_STRING = 2,
              op_STRINGNORM = 3,
              op_CHARCLASS = 4,
              op_BOL = 5,
              op_EOL = 6,
              op_WORDBOUNDARY = 7,
              op_BEGGROUP = 8,
              op_ENDGROUP = 9,
              op_REFGROUP = 10,
              op_ACCEPT = 11,
              op_SIMPLEOPT = 12,
              op_SIMPLESTAR = 13,
              op_SIMPLEPLUS = 14,
              cst_too_many_r_or_r_where_r_is =
                "too many r* or r+ where r is nullable",
              _b_ = [0, 92],
              _c_ = [0, cst_str_ml, 533, 10],
              cst_group_not_closed_by = "\\( group not closed by \\)",
              cst_class_not_closed_by = "[ class not closed by ]",
              cst_spurious_in_regular_expres =
                "spurious \\) in regular expression",
              cst_Str_group_beginning = "Str.group_beginning",
              cst_Str_group_end = "Str.group_end",
              cst_Str_matched_group = "Str.matched_group";
             function _d_(i){
              return caml_cps_call2
                      (Stdlib_Char[1],
                       i,
                       function(_e_){
                        return caml_cps_exact_call2
                                (lowercase_latin1,
                                 _e_,
                                 function(_f_){
                                  caml_bytes_set(t, i, _f_);
                                  var _g_ = i + 1 | 0;
                                  if(255 !== i) return caml_cps_exact_call1(_d_, _g_);
                                  var fold_case_table = caml_callback(Stdlib_Bytes[6], [t]);
                                  function compare(x, y, cont){
                                   return cont(runtime.caml_string_compare(x, y));
                                  }
                                  var
                                   StringMap = caml_callback(Stdlib_Map[1], [[0, compare]]);
                                  function compile(fold_case$0, re, cont){
                                   var
                                    prog = [0, caml_make_vect(32, 0)],
                                    progpos = [0, 0],
                                    cpool = [0, StringMap[1]],
                                    cpoolpos = [0, 0],
                                    numgroups = [0, 1],
                                    numregs = [0, 0];
                                   function emit_instr(opc, arg, cont){
                                    function _bW_(){
                                     var _bY_ = instr(opc, arg), _bZ_ = progpos[1];
                                     caml_check_bound(prog[1], _bZ_)[1 + _bZ_] = _bY_;
                                     progpos[1]++;
                                     return cont(undef);
                                    }
                                    if(prog[1].length - 1 > progpos[1]) return _bW_();
                                    var newlen = [0, prog[1].length - 1];
                                    for(;;){
                                     if(newlen[1] > progpos[1]) break;
                                     newlen[1] = newlen[1] * 2 | 0;
                                    }
                                    var nprog = caml_make_vect(newlen[1], 0);
                                    return caml_cps_call6
    (Stdlib_Array[8],
     prog[1],
     0,
     nprog,
     0,
     prog[1].length - 1,
     function(_bX_){prog[1] = nprog; return _bW_();});
                                   }
                                   function emit_hole(param, cont){
                                    var p = progpos[1];
                                    return caml_cps_exact_call3
    (emit_instr, op_CHAR, 0, function(_bV_){return cont(p);});
                                   }
                                   function patch_instr(pos, opc, dest){
                                    var _bU_ = instr(opc, displ(dest, pos));
                                    caml_check_bound(prog[1], pos)[1 + pos] = _bU_;
                                    return;
                                   }
                                   function cpool_index(s, cont){
                                    caml_push_trap
                                     (function(_bS_){
                                       if(_bS_ === Stdlib[8]){
var p = cpoolpos[1];
return caml_cps_call4
        (StringMap[4],
         s,
         p,
         cpool[1],
         function(_bT_){
          cpool[1] = _bT_;
          cpoolpos[1]++;
          return cont(p);
         });
                                       }
                                       var raise = caml_pop_trap();
                                       return raise(caml_maybe_attach_backtrace(_bS_, 0));
                                      });
                                    return caml_cps_call3
    (StringMap[28],
     s,
     cpool[1],
     function(_bR_){caml_pop_trap(); return cont(_bR_);});
                                   }
                                   function allocate_register_if_nullable(r, cont){
                                    return caml_cps_exact_call2
    (is_nullable,
     r,
     function(_bO_){
      if(! _bO_) return cont(-1);
      var n = numregs[1];
      function _bP_(_bQ_){numregs[1]++; return cont(n);}
      return 64 <= n
              ? caml_cps_call2
                (Stdlib[2], cst_too_many_r_or_r_where_r_is, _bP_)
              : _bP_(0);
     });
                                   }
                                   function emit_code(param, cont){
                                    if(typeof param === "number")
                                     switch(param){
                                       case 0:
return caml_cps_exact_call3(emit_instr, op_BOL, 0, cont);
                                       case 1:
return caml_cps_exact_call3(emit_instr, op_EOL, 0, cont);
                                       default:
return caml_cps_exact_call3
        (emit_instr, op_WORDBOUNDARY, 0, cont);
                                     }
                                    switch(param[0]){
                                      case 0:
                                       var c = param[1];
                                       return fold_case$0
       ? caml_cps_exact_call2
         (lowercase_latin1,
          c,
          function(_bN_){
           return caml_cps_exact_call3
                   (emit_instr, op_CHARNORM, _bN_, cont);
          })
       : caml_cps_exact_call3(emit_instr, op_CHAR, c, cont);
                                      case 1:
                                       var s = param[1], match = caml_ml_string_length(s);
                                       return 0 === match
       ? cont(undef)
       : 1
         === match
         ? fold_case$0
           ? caml_cps_exact_call2
             (lowercase_latin1,
              caml_string_get(s, 0),
              function(_bD_){
               return caml_cps_exact_call3
                       (emit_instr, op_CHARNORM, _bD_, cont);
              })
           : caml_cps_exact_call3
             (emit_instr, op_CHAR, caml_string_get(s, 0), cont)
         : (caml_push_trap
            (function(_bE_){
              if(_bE_ === Stdlib[8])
               return fold_case$0
                       ? caml_cps_call3
                         (Stdlib_String[17],
                          lowercase_latin1,
                          s,
                          function(_bF_){
                           return caml_cps_exact_call2
                                   (cpool_index,
                                    _bF_,
                                    function(_bG_){
                                     return caml_cps_exact_call3
     (emit_instr, op_STRINGNORM, _bG_, cont);
                                    });
                          })
                       : caml_cps_exact_call2
                         (cpool_index,
                          s,
                          function(_bH_){
                           return caml_cps_exact_call3
                                   (emit_instr, op_STRING, _bH_, cont);
                          });
              var raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_bE_, 0));
             }),
           caml_cps_call3
            (Stdlib_String[35],
             s,
             0,
             function(i){
              return caml_cps_exact_call3
                      (string_before,
                       s,
                       i,
                       function(_bI_){
                        return caml_cps_exact_call2
                                (emit_code,
                                 [1, _bI_],
                                 function(_bJ_){
                                  return caml_cps_exact_call3
  (emit_instr,
   op_CHAR,
   0,
   function(_bK_){
    return caml_cps_exact_call3
            (string_after,
             s,
             i + 1 | 0,
             function(_bL_){
              return caml_cps_exact_call2
                      (emit_code,
                       [1, _bL_],
                       function(_bM_){caml_pop_trap(); return cont(undef);});
             });
   });
                                 });
                       });
             }));
                                      case 2:
                                       var
compl = param[2],
cl = param[1],
_aV_ =
  function(cl1){
   function _bA_(cl2){
    return caml_cps_call2
            (Stdlib_Bytes[6],
             cl2,
             function(_bB_){
              return caml_cps_exact_call2
                      (cpool_index,
                       _bB_,
                       function(_bC_){
                        return caml_cps_exact_call3
                                (emit_instr, op_CHARCLASS, _bC_, cont);
                       });
             });
   }
   return compl
           ? caml_cps_exact_call2(complement, cl1, _bA_)
           : _bA_(cl1);
  };
                                       return fold_case$0
       ? caml_cps_exact_call2(fold_case, cl, _aV_)
       : _aV_(cl);
                                      case 3:
                                       var
rl = param[1],
_aW_ =
  function(param){
   if(! param) return cont(undef);
   var r = param[1];
   function _bg_(){
    var rl = param[2];
    return caml_cps_exact_call2
            (emit_code,
             r,
             function(_bz_){return caml_cps_exact_call1(_aW_, rl);});
   }
   if(typeof r === "number") return _bg_();
   switch(r[0]){
     case 5:
      var r$0 = r[1];
      if(typeof r$0 === "number") return _bg_();
      switch(r$0[0]){
        case 0:
        case 2:
         var rl = param[2];
         return caml_cps_exact_call2
                 (first_seq,
                  rl,
                  function(_bt_){
                   return caml_cps_exact_call2
                           (first,
                            r$0,
                            function(_bu_){
                             return caml_cps_exact_call3
                                     (disjoint_modulo_case,
                                      _bu_,
                                      _bt_,
                                      function(_bv_){
                                       return _bv_
       ? caml_cps_exact_call3
         (charclass_of_regexp,
          fold_case$0,
          r$0,
          function(_bw_){
           return caml_cps_exact_call2
                   (cpool_index,
                    _bw_,
                    function(_bx_){
                     return caml_cps_exact_call3
                             (emit_instr,
                              op_SIMPLESTAR,
                              _bx_,
                              function(_by_){return caml_cps_exact_call1(_aW_, rl);});
                    });
          })
       : _bg_();
                                      });
                            });
                  });
        default: return _bg_();
      }
     case 6:
      var r$1 = r[1];
      if(typeof r$1 === "number") return _bg_();
      switch(r$1[0]){
        case 0:
        case 2:
         var rl$0 = param[2];
         return caml_cps_exact_call2
                 (first_seq,
                  rl$0,
                  function(_bn_){
                   return caml_cps_exact_call2
                           (first,
                            r$1,
                            function(_bo_){
                             return caml_cps_exact_call3
                                     (disjoint_modulo_case,
                                      _bo_,
                                      _bn_,
                                      function(_bp_){
                                       return _bp_
       ? caml_cps_exact_call3
         (charclass_of_regexp,
          fold_case$0,
          r$1,
          function(_bq_){
           return caml_cps_exact_call2
                   (cpool_index,
                    _bq_,
                    function(_br_){
                     return caml_cps_exact_call3
                             (emit_instr,
                              op_SIMPLEPLUS,
                              _br_,
                              function(_bs_){return caml_cps_exact_call1(_aW_, rl$0);});
                    });
          })
       : _bg_();
                                      });
                            });
                  });
        default: return _bg_();
      }
     case 7:
      var r$2 = r[1];
      if(typeof r$2 === "number") return _bg_();
      switch(r$2[0]){
        case 0:
        case 2:
         var rl$1 = param[2];
         return caml_cps_exact_call2
                 (first_seq,
                  rl$1,
                  function(_bh_){
                   return caml_cps_exact_call2
                           (first,
                            r$2,
                            function(_bi_){
                             return caml_cps_exact_call3
                                     (disjoint_modulo_case,
                                      _bi_,
                                      _bh_,
                                      function(_bj_){
                                       return _bj_
       ? caml_cps_exact_call3
         (charclass_of_regexp,
          fold_case$0,
          r$2,
          function(_bk_){
           return caml_cps_exact_call2
                   (cpool_index,
                    _bk_,
                    function(_bl_){
                     return caml_cps_exact_call3
                             (emit_instr,
                              op_SIMPLEOPT,
                              _bl_,
                              function(_bm_){return caml_cps_exact_call1(_aW_, rl$1);});
                    });
          })
       : _bg_();
                                      });
                            });
                  });
        default: return _bg_();
      }
     default: return _bg_();
   }
  };
                                       return _aW_(rl);
                                      case 4:
                                       var r2 = param[2], r1 = param[1];
                                       return caml_cps_exact_call2
       (emit_hole,
        undef,
        function(pos_pushback){
         return caml_cps_exact_call2
                 (emit_code,
                  r1,
                  function(_be_){
                   return caml_cps_exact_call2
                           (emit_hole,
                            undef,
                            function(pos_goto_end){
                             var lbl1 = progpos[1];
                             return caml_cps_exact_call2
                                     (emit_code,
                                      r2,
                                      function(_bf_){
                                       var lbl2 = progpos[1];
                                       patch_instr(pos_pushback, op_PUSHBACK, lbl1);
                                       return cont(patch_instr(pos_goto_end, op_GOTO, lbl2));
                                      });
                            });
                  });
        });
                                      case 5:
                                       var r = param[1];
                                       return caml_cps_exact_call2
       (allocate_register_if_nullable,
        r,
        function(regno){
         return caml_cps_exact_call2
                 (emit_hole,
                  undef,
                  function(lbl1){
                   function _a__(_a$_){
                    return caml_cps_exact_call2
                            (emit_code,
                             r,
                             function(_ba_){
                              function _bb_(_bc_){
                               return caml_cps_exact_call3
                                       (emit_instr,
op_GOTO,
displ(lbl1, progpos[1]),
function(_bd_){
 var lbl2 = progpos[1];
 return cont(patch_instr(lbl1, op_PUSHBACK, lbl2));
});
                              }
                              return 0 <= regno
                                      ? caml_cps_exact_call3
(emit_instr, op_CHECKPROGRESS, regno, _bb_)
                                      : _bb_(0);
                             });
                   }
                   return 0 <= regno
                           ? caml_cps_exact_call3(emit_instr, op_SETMARK, regno, _a__)
                           : _a__(0);
                  });
        });
                                      case 6:
                                       var r$0 = param[1];
                                       return caml_cps_exact_call2
       (allocate_register_if_nullable,
        r$0,
        function(regno){
         var lbl1 = progpos[1];
         return caml_cps_exact_call2
                 (emit_code,
                  r$0,
                  function(_a4_){
                   function _a5_(_a6_){
                    return caml_cps_exact_call2
                            (emit_hole,
                             undef,
                             function(pos_pushback){
                              function _a7_(_a8_){
                               return caml_cps_exact_call3
                                       (emit_instr,
op_GOTO,
displ(lbl1, progpos[1]),
function(_a9_){
 var lbl2 = progpos[1];
 return cont(patch_instr(pos_pushback, op_PUSHBACK, lbl2));
});
                              }
                              return 0 <= regno
                                      ? caml_cps_exact_call3(emit_instr, op_SETMARK, regno, _a7_)
                                      : _a7_(0);
                             });
                   }
                   return 0 <= regno
                           ? caml_cps_exact_call3
                             (emit_instr, op_CHECKPROGRESS, regno, _a5_)
                           : _a5_(0);
                  });
        });
                                      case 7:
                                       var r$1 = param[1];
                                       return caml_cps_exact_call2
       (emit_hole,
        undef,
        function(pos_pushback){
         return caml_cps_exact_call2
                 (emit_code,
                  r$1,
                  function(_a3_){
                   var lbl = progpos[1];
                   return cont(patch_instr(pos_pushback, op_PUSHBACK, lbl));
                  });
        });
                                      case 8:
                                       var r$2 = param[2], n = param[1];
                                       return caml_cps_exact_call3
       (emit_instr,
        op_BEGGROUP,
        n,
        function(_aZ_){
         return caml_cps_exact_call2
                 (emit_code,
                  r$2,
                  function(_a0_){
                   return caml_cps_exact_call3
                           (emit_instr,
                            op_ENDGROUP,
                            n,
                            function(_a1_){
                             return caml_cps_call3
                                     (Stdlib_Int[11],
                                      numgroups[1],
                                      n + 1 | 0,
                                      function(_a2_){numgroups[1] = _a2_; return cont(undef);});
                            });
                  });
        });
                                      default:
                                       var n$0 = param[1];
                                       return caml_cps_exact_call3
       (emit_instr,
        op_REFGROUP,
        n$0,
        function(_aX_){
         return caml_cps_call3
                 (Stdlib_Int[11],
                  numgroups[1],
                  n$0 + 1 | 0,
                  function(_aY_){numgroups[1] = _aY_; return cont(undef);});
        });
                                    }
                                   }
                                   function disjoint_modulo_case(c1, c2, cont){
                                    return fold_case$0
    ? caml_cps_exact_call2
      (fold_case,
       c2,
       function(_aT_){
        return caml_cps_exact_call2
                (fold_case,
                 c1,
                 function(_aU_){return cont(disjoint(_aU_, _aT_));});
       })
    : cont(disjoint(c1, c2));
                                   }
                                   return caml_cps_exact_call2
   (emit_code,
    re,
    function(_aJ_){
     return caml_cps_exact_call3
             (emit_instr,
              op_ACCEPT,
              0,
              function(_aK_){
               return caml_cps_exact_call2
                       (first,
                        re,
                        function(start){
                         function _aL_(start$0){
                          function _aM_(start_pos){
                           var constantpool = caml_make_vect(cpoolpos[1], cst);
                           return caml_cps_call3
                                   (StringMap[12],
                                    function(str, idx, cont){
                                     caml_check_bound(constantpool, idx)[1 + idx] = str;
                                     return cont(0);
                                    },
                                    cpool[1],
                                    function(_aP_){
                                     var
                                      _aQ_ = numregs[1],
                                      _aR_ = numgroups[1],
                                      fold_case_table$0 = fold_case$0 ? fold_case_table : cst$0;
                                     return caml_cps_call4
     (Stdlib_Array[5],
      prog[1],
      0,
      progpos[1],
      function(_aS_){
       return cont
               ([0,
                 _aS_,
                 constantpool,
                 fold_case_table$0,
                 _aR_,
                 _aQ_,
                 start_pos]);
      });
                                    });
                          }
                          return runtime.caml_bytes_equal(start, full)
                                  ? _aM_(-1)
                                  : caml_cps_call3
                                    (Stdlib_Bytes[1],
                                     256,
                                     0,
                                     function(r){
                                      return caml_cps_exact_call3
      (iter,
       function(c, cont){
        caml_bytes_set(r, c, 1);
        return cont(undef);
       },
       start$0,
       function(_aN_){
        return caml_cps_call2
                (Stdlib_Bytes[6],
                 r,
                 function(_aO_){
                  return caml_cps_exact_call2(cpool_index, _aO_, _aM_);
                 });
       });
                                     });
                         }
                         return fold_case$0
                                 ? caml_cps_exact_call2(fold_case, start, _aL_)
                                 : _aL_(start);
                        });
              });
    });
                                  }
                                  function flush(buf, cont){
                                   return caml_cps_call2
   (Stdlib_Buffer[2],
    buf[1],
    function(s){
     return caml_cps_call2
             (Stdlib_Buffer[8],
              buf[1],
              function(_aH_){
               var match = caml_ml_string_length(s);
               if(0 === match) return cont(undef);
               if(1 === match){
                var _aI_ = buf[2];
                buf[2] = [0, [0, caml_string_get(s, 0)], _aI_];
                return cont(undef);
               }
               buf[2] = [0, [1, s], buf[2]];
               return cont(undef);
              });
    });
                                  }
                                  var
                                   dotclass =
                                     caml_callback(complement, [caml_callback(singleton, [10])]);
                                  function parse(s, cont){
                                   var len = caml_ml_string_length(s), group_counter = [0, 1];
                                   function regexp0(i, cont){
                                    return caml_cps_exact_call2
    (regexp1,
     i,
     function(match){
      var j = match[2], r1 = match[1];
      function _aG_(i, r1){
       if
        ((i + 2 | 0) <= len
         &&
          92 === caml_string_get(s, i)
          && 124 === caml_string_get(s, i + 1 | 0))
        return caml_cps_exact_call2
                (regexp1,
                 i + 2 | 0,
                 function(match){
                  var j = match[2], r2 = match[1], r1$0 = [4, r1, r2];
                  return caml_cps_exact_call2(_aG_, j, r1$0);
                 });
       return cont([0, r1, i]);
      }
      return _aG_(j, r1);
     });
                                   }
                                   function regexp1(i, cont){
                                    var _av_ = 0;
                                    return caml_cps_call2
    (Stdlib_Buffer[1],
     16,
     function(_aw_){
      var buf = [0, _aw_, _av_];
      function _ax_(i){
       a:
       if(len > i){
        if((i + 2 | 0) <= len && 92 === caml_string_get(s, i)){
         var
          c = caml_string_get(s, i + 1 | 0),
          _ay_ = 124 === c ? 1 : 0,
          _az_ = _ay_ || (41 === c ? 1 : 0);
         if(_az_) break a;
        }
        var
         c$0 = caml_string_get(s, i),
         _aA_ =
           function(match){
            var j = match[2], r = match[1], re = r, i = j;
            for(;;){
             if(len <= i) break;
             var switcher = caml_string_get(s, i) - 42 | 0;
             if(1 < switcher >>> 0){
              if(21 !== switcher) break;
              var i$0 = i + 1 | 0, r$0 = [7, re], re = r$0, i = i$0;
             }
             else if(switcher)
              var i$1 = i + 1 | 0, r$1 = [6, re], re = r$1, i = i$1;
             else
              var i$2 = i + 1 | 0, r$2 = [5, re], re = r$2, i = i$2;
            }
            if(typeof re !== "number" && 0 === re[0]){
             var c = re[1];
             return caml_cps_call3
                     (Stdlib_Buffer[12],
                      buf[1],
                      c,
                      function(_aF_){return caml_cps_exact_call1(_ax_, i);});
            }
            return caml_cps_exact_call2
                    (flush,
                     buf,
                     function(_aE_){
                      buf[2] = [0, re, buf[2]];
                      return caml_cps_exact_call1(_ax_, i);
                     });
           };
        if(36 === c$0) return _aA_([0, 1, i + 1 | 0]);
        if(91 <= c$0){
         if(95 > c$0)
          switch(c$0 - 91 | 0){
            case 0:
             var
              i$0 = i + 1 | 0,
              _aB_ =
                function(match){
                 var j = match[3], compl = match[2], c = match[1];
                 return _aA_([0, [2, c, compl], j]);
                };
             if(i$0 < len && 94 === caml_string_get(s, i$0))
              return caml_cps_exact_call2
                      (regexpclass1,
                       i$0 + 1 | 0,
                       function(match){
                        var j = match[2], c = match[1];
                        return _aB_([0, c, 1, j]);
                       });
             return caml_cps_exact_call2
                     (regexpclass1,
                      i$0,
                      function(match){
                       var j = match[2], c = match[1];
                       return _aB_([0, c, 0, j]);
                      });
            case 1:
             var i$1 = i + 1 | 0;
             if(len <= i$1) return _aA_([0, _b_, i$1]);
             var c$1 = caml_string_get(s, i$1);
             b:
             {
              if(58 <= c$1){
               if(98 === c$1) return _aA_([0, 2, i$1 + 1 | 0]);
               if(124 !== c$1) break b;
              }
              else{
               var switcher = c$1 - 40 | 0;
               if(1 < switcher >>> 0){
                if(9 <= switcher)
                 return _aA_([0, [9, c$1 - 48 | 0], i$1 + 1 | 0]);
                break b;
               }
               if(! switcher){
                var group_no = group_counter[1];
                group_counter[1]++;
                return caml_cps_exact_call2
                        (regexp0,
                         i$1 + 1 | 0,
                         function(match){
                          var j = match[2], r = match[1];
                          if
                           ((j + 1 | 0) < len
                            &&
                             92 === caml_string_get(s, j)
                             && 41 === caml_string_get(s, j + 1 | 0))
                           return _aA_([0, [8, group_no, r], j + 2 | 0]);
                          return caml_cps_call2
                                  (Stdlib[2], cst_group_not_closed_by, _aA_);
                         });
               }
              }
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1));
             }
             return _aA_([0, [0, c$1], i$1 + 1 | 0]);
            case 3:
             return _aA_([0, 0, i + 1 | 0]);
          }
        }
        else if(46 === c$0)
         return _aA_([0, [2, dotclass, 0], i + 1 | 0]);
        return _aA_([0, [0, c$0], i + 1 | 0]);
       }
       return caml_cps_exact_call2
               (flush,
                buf,
                function(_aC_){
                 return caml_cps_call2
                         (Stdlib_List[9],
                          buf[2],
                          function(_aD_){return cont([0, [3, _aD_], i]);});
                });
      }
      return _ax_(i);
     });
                                   }
                                   function regexpclass1(start, cont){
                                    return caml_cps_exact_call2
    (make_empty,
     undef,
     function(c){
      function _am_(i){
       function _an_(_ao_){
        if(93 === caml_string_get(s, i) && start < i){var j = i + 1 | 0; return cont([0, c, j]);}
        var c1 = caml_string_get(s, i);
        if
         ((i + 2 | 0) < len
          &&
           45 === caml_string_get(s, i + 1 | 0)
           && 93 !== caml_string_get(s, i + 2 | 0)){
         var
          c2 = caml_string_get(s, i + 2 | 0),
          _aq_ =
            function(){
             var i$0 = i + 3 | 0;
             return caml_cps_exact_call1(_am_, i$0);
            },
          _ap_ =
            function(i){
             return caml_cps_call2
                     (Stdlib_Char[1],
                      i,
                      function(_as_){
                       return caml_cps_exact_call3
                               (add,
                                c,
                                _as_,
                                function(_at_){
                                 var _au_ = i + 1 | 0;
                                 return c2 !== i ? caml_cps_exact_call1(_ap_, _au_) : _aq_();
                                });
                      });
            };
         return c2 < c1 ? _aq_() : _ap_(c1);
        }
        return caml_cps_exact_call3
                (add,
                 c,
                 c1,
                 function(_ar_){
                  var i$0 = i + 1 | 0;
                  return caml_cps_exact_call1(_am_, i$0);
                 });
       }
       return len <= i
               ? caml_cps_call2(Stdlib[2], cst_class_not_closed_by, _an_)
               : _an_(0);
      }
      return _am_(start);
     });
                                   }
                                   return caml_cps_exact_call2
   (regexp0,
    0,
    function(match){
     var j = match[2], r = match[1];
     return j === len
             ? cont(r)
             : caml_cps_call2
               (Stdlib[2], cst_spurious_in_regular_expres, cont);
    });
                                  }
                                  function regexp(e, cont){
                                   return caml_cps_exact_call2
   (parse,
    e,
    function(_al_){
     return caml_cps_exact_call3(compile, 0, _al_, cont);
    });
                                  }
                                  function regexp_case_fold(e, cont){
                                   return caml_cps_exact_call2
   (parse,
    e,
    function(_ak_){
     return caml_cps_exact_call3(compile, 1, _ak_, cont);
    });
                                  }
                                  function quote(s, cont){
                                   var
                                    len = caml_ml_string_length(s),
                                    buf = caml_create_bytes(2 * len | 0),
                                    pos = [0, 0],
                                    _ag_ = len - 1 | 0,
                                    _af_ = 0;
                                   if(_ag_ >= 0){
                                    var i = _af_;
                                    for(;;){
                                     var c = caml_string_get(s, i), _ah_ = c - 63 | 0;
                                     a:
                                     {
                                      b:
                                      {
                                       if(31 < _ah_ >>> 0){
var _ai_ = _ah_ + 27 | 0;
if(10 < _ai_ >>> 0) break b;
switch(_ai_){
  case 0:
  case 6:
  case 7:
  case 10: break;
  default: break b;
}
                                       }
                                       else if(26 >= _ah_ - 1 >>> 0) break b;
                                       caml_bytes_set(buf, pos[1], 92);
                                       caml_bytes_set(buf, pos[1] + 1 | 0, c);
                                       pos[1] = pos[1] + 2 | 0;
                                       break a;
                                      }
                                      caml_bytes_set(buf, pos[1], c);
                                      pos[1] = pos[1] + 1 | 0;
                                     }
                                     var _aj_ = i + 1 | 0;
                                     if(_ag_ === i) break;
                                     var i = _aj_;
                                    }
                                   }
                                   return caml_cps_call4(Stdlib_Bytes[8], buf, 0, pos[1], cont);
                                  }
                                  function regexp_string(s, cont){
                                   return caml_cps_exact_call3(compile, 0, [1, s], cont);
                                  }
                                  function regexp_string_case_fold(s, cont){
                                   return caml_cps_exact_call3(compile, 1, [1, s], cont);
                                  }
                                  var
                                   last_search_result_key =
                                     caml_callback
                                      (Stdlib_Domain[10][1],
                                       [0, function(param, cont){return cont([0]);}]);
                                  function string_match(re, s, pos, cont){
                                   var res = runtime.re_string_match(re, s, pos);
                                   return caml_cps_call3
   (Stdlib_Domain[10][3],
    last_search_result_key,
    res,
    function(_ae_){return cont(0 < res.length - 1 ? 1 : 0);});
                                  }
                                  function string_partial_match(re, s, pos, cont){
                                   var res = runtime.re_partial_match(re, s, pos);
                                   return caml_cps_call3
   (Stdlib_Domain[10][3],
    last_search_result_key,
    res,
    function(_ad_){return cont(0 < res.length - 1 ? 1 : 0);});
                                  }
                                  function search_forward(re, s, pos, cont){
                                   var res = runtime.re_search_forward(re, s, pos);
                                   return caml_cps_call3
   (Stdlib_Domain[10][3],
    last_search_result_key,
    res,
    function(_ab_){
     if(0 !== res.length - 1)
      return cont(caml_check_bound(res, 0)[1]);
     var _ac_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_ac_, 1));
    });
                                  }
                                  function search_backward(re, s, pos, cont){
                                   var res = runtime.re_search_backward(re, s, pos);
                                   return caml_cps_call3
   (Stdlib_Domain[10][3],
    last_search_result_key,
    res,
    function(_$_){
     if(0 !== res.length - 1)
      return cont(caml_check_bound(res, 0)[1]);
     var _aa_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_aa_, 1));
    });
                                  }
                                  function group_beginning(n, cont){
                                   return caml_cps_call2
   (Stdlib_Domain[10][2],
    last_search_result_key,
    function(last_search_result){
     var n2 = n + n | 0;
     if(0 <= n && last_search_result.length - 1 > n2){
      var pos = caml_check_bound(last_search_result, n2)[1 + n2];
      if(-1 !== pos) return cont(pos);
      var ___ = Stdlib[8], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(___, 1));
     }
     return caml_cps_call2
             (Stdlib[1], cst_Str_group_beginning, cont);
    });
                                  }
                                  function group_end(n, cont){
                                   return caml_cps_call2
   (Stdlib_Domain[10][2],
    last_search_result_key,
    function(last_search_result){
     var n2 = n + n | 0;
     if(0 <= n && last_search_result.length - 1 > n2){
      var
       _Y_ = n2 + 1 | 0,
       pos = caml_check_bound(last_search_result, _Y_)[1 + _Y_];
      if(-1 !== pos) return cont(pos);
      var _Z_ = Stdlib[8], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_Z_, 1));
     }
     return caml_cps_call2(Stdlib[1], cst_Str_group_end, cont);
    });
                                  }
                                  function matched_group(n, txt, cont){
                                   return caml_cps_call2
   (Stdlib_Domain[10][2],
    last_search_result_key,
    function(last_search_result){
     var n2 = n + n | 0;
     if(0 <= n && last_search_result.length - 1 > n2){
      var
       b = caml_check_bound(last_search_result, n2)[1 + n2],
       _W_ = n2 + 1 | 0,
       e = caml_check_bound(last_search_result, _W_)[1 + _W_];
      if(-1 !== b)
       return caml_cps_call4
               (Stdlib_String[15], txt, b, e - b | 0, cont);
      var _X_ = Stdlib[8], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_X_, 1));
     }
     return caml_cps_call2
             (Stdlib[1], cst_Str_matched_group, cont);
    });
                                  }
                                  function match_beginning(param, cont){
                                   return caml_cps_exact_call2(group_beginning, 0, cont);
                                  }
                                  function match_end(param, cont){
                                   return caml_cps_exact_call2(group_end, 0, cont);
                                  }
                                  function matched_string(txt, cont){
                                   return caml_cps_exact_call3(matched_group, 0, txt, cont);
                                  }
                                  function replace_matched(repl, matched, cont){
                                   return caml_cps_call2
   (Stdlib_Domain[10][2],
    last_search_result_key,
    function(last_search_result){
     return cont
             (runtime.re_replacement_text
               (repl, last_search_result, matched));
    });
                                  }
                                  function substitute_first(expr, repl_fun, text, cont){
                                   caml_push_trap
                                    (function(_V_){
                                      if(_V_ === Stdlib[8]) return cont(text);
                                      var raise = caml_pop_trap();
                                      return raise(caml_maybe_attach_backtrace(_V_, 0));
                                     });
                                   return caml_cps_exact_call4
   (search_forward,
    expr,
    text,
    0,
    function(pos){
     var _N_ = 0;
     return caml_cps_exact_call2
             (match_end,
              undef,
              function(_O_){
               return caml_cps_exact_call3
                       (string_after,
                        text,
                        _O_,
                        function(_P_){
                         var _Q_ = [0, _P_, _N_];
                         return caml_cps_call2
                                 (repl_fun,
                                  text,
                                  function(_R_){
                                   var _S_ = [0, _R_, _Q_];
                                   return caml_cps_exact_call3
   (string_before,
    text,
    pos,
    function(_T_){
     return caml_cps_call3
             (Stdlib_String[6],
              cst$1,
              [0, _T_, _S_],
              function(_U_){caml_pop_trap(); return cont(_U_);});
    });
                                  });
                        });
              });
    });
                                  }
                                  function opt_search_forward(re, s, pos, cont){
                                   caml_push_trap
                                    (function(_M_){
                                      if(_M_ === Stdlib[8]) return cont(0);
                                      var raise = caml_pop_trap();
                                      return raise(caml_maybe_attach_backtrace(_M_, 0));
                                     });
                                   return caml_cps_exact_call4
   (search_forward,
    re,
    s,
    pos,
    function(_L_){caml_pop_trap(); return cont([0, _L_]);});
                                  }
                                  function global_substitute(expr, repl_fun, text, cont){
                                   function _E_(last_was_empty, start, accu){
                                    var startpos = last_was_empty ? start + 1 | 0 : start;
                                    function _F_(_J_){
                                     return caml_cps_call2
     (Stdlib_List[9],
      _J_,
      function(_K_){
       return caml_cps_call3(Stdlib_String[6], cst$2, _K_, cont);
      });
                                    }
                                    return caml_ml_string_length(text) < startpos
    ? caml_cps_exact_call3
      (string_after,
       text,
       start,
       function(_G_){return _F_([0, _G_, accu]);})
    : caml_cps_exact_call4
      (opt_search_forward,
       expr,
       text,
       startpos,
       function(match){
        if(! match)
         return caml_cps_exact_call3
                 (string_after,
                  text,
                  start,
                  function(_I_){return _F_([0, _I_, accu]);});
        var pos = match[1];
        return caml_cps_exact_call2
                (match_end,
                 undef,
                 function(end_pos){
                  return caml_cps_call2
                          (repl_fun,
                           text,
                           function(repl_text){
                            var last_was_empty = end_pos === pos ? 1 : 0;
                            return caml_cps_call4
                                    (Stdlib_String[15],
                                     text,
                                     start,
                                     pos - start | 0,
                                     function(_H_){
                                      var accu$0 = [0, repl_text, [0, _H_, accu]];
                                      return caml_cps_exact_call3
      (_E_, last_was_empty, end_pos, accu$0);
                                     });
                           });
                 });
       });
                                   }
                                   return _E_(0, 0, 0);
                                  }
                                  function global_replace(expr, repl, text, cont){
                                   return caml_cps_exact_call4
   (global_substitute,
    expr,
    function(_D_, cont){
     return caml_cps_exact_call3
             (replace_matched, repl, _D_, cont);
    },
    text,
    cont);
                                  }
                                  function replace_first(expr, repl, text, cont){
                                   return caml_cps_exact_call4
   (substitute_first,
    expr,
    function(_C_, cont){
     return caml_cps_exact_call3
             (replace_matched, repl, _C_, cont);
    },
    text,
    cont);
                                  }
                                  function opt_search_forward_progress
                                  (expr, text, start, cont){
                                   return caml_cps_exact_call4
   (opt_search_forward,
    expr,
    text,
    start,
    function(match){
     if(! match) return cont(0);
     var pos = match[1];
     return caml_cps_exact_call2
             (match_end,
              undef,
              function(_B_){
               return start < _B_
                       ? cont([0, pos])
                       : start
                         < caml_ml_string_length(text)
                         ? caml_cps_exact_call4
                           (opt_search_forward, expr, text, start + 1 | 0, cont)
                         : cont(0);
              });
    });
                                  }
                                  function bounded_split(expr, text, num, cont){
                                   return caml_cps_exact_call4
   (string_match,
    expr,
    text,
    0,
    function(_t_){
     function _u_(start){
      function _v_(n, start, accu){
       function _w_(_A_){
        return caml_cps_call2(Stdlib_List[9], _A_, cont);
       }
       return caml_ml_string_length(text) <= start
               ? _w_(accu)
               : 1
                 === n
                 ? caml_cps_exact_call3
                   (string_after,
                    text,
                    start,
                    function(_x_){return _w_([0, _x_, accu]);})
                 : caml_cps_exact_call4
                   (opt_search_forward_progress,
                    expr,
                    text,
                    start,
                    function(match){
                     if(! match)
                      return caml_cps_exact_call3
                              (string_after,
                               text,
                               start,
                               function(_z_){return _w_([0, _z_, accu]);});
                     var pos = match[1], n$0 = n - 1 | 0;
                     return caml_cps_exact_call2
                             (match_end,
                              undef,
                              function(start$0){
                               return caml_cps_call4
                                       (Stdlib_String[15],
text,
start,
pos - start | 0,
function(_y_){
 var accu$0 = [0, _y_, accu];
 return caml_cps_exact_call3(_v_, n$0, start$0, accu$0);
});
                              });
                    });
      }
      return _v_(num, start, 0);
     }
     return _t_
             ? caml_cps_exact_call2(match_end, undef, _u_)
             : _u_(0);
    });
                                  }
                                  function split(expr, text, cont){
                                   return caml_cps_exact_call4
   (bounded_split, expr, text, 0, cont);
                                  }
                                  function bounded_split_delim(expr, text, num, cont){
                                   if(caml_string_equal(text, cst)) return cont(0);
                                   function _n_(n, start, accu){
                                    function _o_(_s_){
                                     return caml_cps_call2(Stdlib_List[9], _s_, cont);
                                    }
                                    return caml_ml_string_length(text) < start
    ? _o_(accu)
    : 1
      === n
      ? caml_cps_exact_call3
        (string_after,
         text,
         start,
         function(_p_){return _o_([0, _p_, accu]);})
      : caml_cps_exact_call4
        (opt_search_forward_progress,
         expr,
         text,
         start,
         function(match){
          if(! match)
           return caml_cps_exact_call3
                   (string_after,
                    text,
                    start,
                    function(_r_){return _o_([0, _r_, accu]);});
          var pos = match[1], n$0 = n - 1 | 0;
          return caml_cps_exact_call2
                  (match_end,
                   undef,
                   function(start$0){
                    return caml_cps_call4
                            (Stdlib_String[15],
                             text,
                             start,
                             pos - start | 0,
                             function(_q_){
                              var accu$0 = [0, _q_, accu];
                              return caml_cps_exact_call3(_n_, n$0, start$0, accu$0);
                             });
                   });
         });
                                   }
                                   return _n_(num, 0, 0);
                                  }
                                  function split_delim(expr, text, cont){
                                   return caml_cps_exact_call4
   (bounded_split_delim, expr, text, 0, cont);
                                  }
                                  function bounded_full_split(expr, text, num, cont){
                                   function _h_(n, start, accu){
                                    function _i_(_m_){
                                     return caml_cps_call2(Stdlib_List[9], _m_, cont);
                                    }
                                    return caml_ml_string_length(text) <= start
    ? _i_(accu)
    : 1
      === n
      ? caml_cps_exact_call3
        (string_after,
         text,
         start,
         function(_j_){return _i_([0, [0, _j_], accu]);})
      : caml_cps_exact_call4
        (opt_search_forward_progress,
         expr,
         text,
         start,
         function(match){
          if(! match)
           return caml_cps_exact_call3
                   (string_after,
                    text,
                    start,
                    function(_l_){return _i_([0, [0, _l_], accu]);});
          var pos = match[1];
          return caml_cps_exact_call2
                  (matched_string,
                   text,
                   function(s){
                    if(start < pos){
                     var n$0 = n - 1 | 0;
                     return caml_cps_exact_call2
                             (match_end,
                              undef,
                              function(start$0){
                               return caml_cps_call4
                                       (Stdlib_String[15],
text,
start,
pos - start | 0,
function(_k_){
 var accu$0 = [0, [1, s], [0, [0, _k_], accu]];
 return caml_cps_exact_call3(_h_, n$0, start$0, accu$0);
});
                              });
                    }
                    var n$1 = n - 1 | 0;
                    return caml_cps_exact_call2
                            (match_end,
                             undef,
                             function(start){
                              var accu$0 = [0, [1, s], accu];
                              return caml_cps_exact_call3(_h_, n$1, start, accu$0);
                             });
                   });
         });
                                   }
                                   return _h_(num, 0, 0);
                                  }
                                  function full_split(expr, text, cont){
                                   return caml_cps_exact_call4
   (bounded_full_split, expr, text, 0, cont);
                                  }
                                  var
                                   Str =
                                     [0,
                                      regexp,
                                      regexp_case_fold,
                                      quote,
                                      regexp_string,
                                      regexp_string_case_fold,
                                      string_match,
                                      search_forward,
                                      search_backward,
                                      string_partial_match,
                                      matched_string,
                                      match_beginning,
                                      match_end,
                                      matched_group,
                                      group_beginning,
                                      group_end,
                                      global_replace,
                                      replace_first,
                                      global_substitute,
                                      substitute_first,
                                      replace_matched,
                                      split,
                                      bounded_split,
                                      split_delim,
                                      bounded_split_delim,
                                      full_split,
                                      bounded_full_split,
                                      string_before,
                                      string_after,
                                      first_chars,
                                      last_chars];
                                  runtime.caml_register_global(28, Str, "Str");
                                  return;
                                 });
                       });
             }
             return _d_(0);
            },
            []);
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzdHIuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbXSwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2MsTzthOztjOzs7Ozs7YTs7YyxPO2E7O2MsTzs7Ozs7O2E7O2M7Ozs7Ozs7ZTs7YzthO2EsVzs7YyxPO2E7O2MsVztjLE87Ozs7d0I7d0I7O2E7O2MsTzs7Ozt3QixPOzJEOzthOztjLFE7O2UsVztlLE87Ozs7eUI7eUI7Ozs7O2E7O2MsUTs7ZTtnQixPO2dCLE87ZSxPOzs7O3lCO3lCOzs7OzthOztjOzs7Z0IsVzswQjtpQixNOzs2QixjOzs7Ozs7c0M7OzthOzs7ZSxROztnQjs7Ozs7Ozs7aUI7O2dCOzswQjs7OzBDLE87Ozs7OzthOztjLE87Ozs7d0IsTzs7O2tDLE87Ozs7SSxPOzs7OztjOzs7Ozs7Ozs7YyxPO2E7O2lDOztnRDs7YTs7Ozs7Ozs7O3NDLHNCO3dDLGlDOzs7ZTs7O21COzttQjsyQjs7OztrQjs7b0MsWTs7a0I7OztrQixPOzs7O2tCLE87Ozs7NEIsMkI7OztrQjs7b0MsTzs7a0I7O3NDLE87MEI7O2M7Ozs7YztjOzs7Ozs7Ozs7Ozs7a0IsTzs7O2tCLE87OzRCO3dDOzs7a0I7NEI7Ozs7a0IsTzs7O2tCLE87Ozs7NEIsTzs7OztzQyxPOzs7Ozs7Ozs7Ozs7OzthOztjO2M7Ozs7Ozs7bUIsTzs7Ozs2QixPOzs7O3VDLE87Ozs7O21CLE87Ozs7NkIsTzs7Ozt1QyxPOzs7MkIsTzs7OzthOztjOzs7Ozs7cUIsTzs7b0I7OEI7Ozs7NkI7O2tCOzs7O2tCLE87d0Q7Ozs7OztjOzthO2E7YyxJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztjLE87Ozs7d0IsTzs7OztrQztrQzs7a0Msc0I7O21DLFk7a0M7Ozs7bUM7b0MsVztvQztvQztvQztvQztvQzs7O3FDLEk7cUM7OztvQzs7b0M7Ozs7O29DLFk7b0MsTzs7Ozs7OztvQjttQzs7b0M7b0MsTzs0QzttQzs7b0M7b0M7b0M7bUM7O29DOzt1Qzs7QSxPOzs7Ozs7VTs7VTs7Ozs7O29DLE87Ozs7b0IsaUI7bUM7O29DLE87Ozs7TSxXOzswQixjLGU7O2dCOzs7O21DOztvQzs7O0EsTzs7QSxPOztBLE87Ozs7Ozt1QztTOzs7O1csTzs7O1M7O3VDLGtCLFE7Ozs7OzthOztjOztlLE87OzthO21DOzs7Yzs7eUI7Ozs7OzJCLE87Ozs7cUMsTzs7Ozt5Qjs7OzsyQixPOzs7Ozs7Vzs7Ozs7YyxPOzs7Ozt3QixPOzs7O2tDLE87Ozs7O0ksTzs7Ozs7YyxPOzs7c0MsaUI7Ozs7Ozs7Ozs7Ozs7SSxPOzs7O2MsTzs7Ozt3QixPOzs7OztHO2E7Ozt1QztTOzs7Ozs7O0csWTs7OztJLE87Ozs0QixPOzs7Ozs7Ozs7OztTLE87Ozs7bUIsTzs7Ozs2QixPOzs7Ozt1QztTOzs7OztXLE87Ozs7cUIsTzs7Ozs2QyxPOzs7Ozs7Ozs7Ozs7Ozs7O1MsTzs7OzttQixPOzs7OzZCLE87Ozs7O3VDO1M7Ozs7O1csTzs7OztxQixPOzs7OzZDLE87Ozs7Ozs7Ozs7Ozs7Ozs7UyxPOzs7O21CLE87Ozs7NkIsTzs7Ozs7dUM7Uzs7Ozs7VyxPOzs7O3FCLE87Ozs7NkMsTzs7Ozs7Ozs7Ozs7RTt1Qzs7O3VDLE87Ozs7UyxPOzs7O21CLE87Ozs7NkI7NkIsTzs7Ozs7dUM7dUM7Ozs7Ozs7dUMsTzs7OztTLE87Ozs7O29CLE87Ozs7OytCLE87Ozs7OztDOzs4Qjs7d0M7Ozs7bUI7OzZCOzs7Ozs7dUMsTzs7OztTO1MsTzs7Ozs7b0IsTzs7Ozs7K0IsTzs7Ozs7O0M7OzhCOzt3Qzs7O21COzs2Qjs7Ozs7Ozt1QyxPOzs7O1MsTzs7Ozs7bUI7Ozs7O3VDLE87Ozs7O1MsTzs7OzttQixPOzs7Ozs2QixPOzs7O3FEOzs7Ozs7dUMsTzs7Ozs7UyxPOzs7O2lDOzs7bUM7O29DO007Ozs7USxPOzs7Z0M7OzttQzttQyxPOzs7O0ssTzs7Ozs7ZSxPOzs7Ozs7MkIsbUI7MkIsTzs7O3FDO3FDO29DOzs7Ozs7O3FDLE87Ozs7OztPOzs7Ozs7Ozs7OzBCOzBCLE87O29DOzs7OztzQyxPOzs7UTtRO087OztRLE87Ozs7a0IsTzs7Ozs7eUI7bUM7Ozs7Ozs7bUMsTzs7OztLLE87Ozs7OytCOzs7aUM7Ozs7Ozs7a0M7a0M7O3FDLDJCOzttQyxvQzs7b0MsTzs7Ozs7O087OztpQjtxQjtRLE87Ozs7a0IsaUM7a0IsTzs7TztNO007O21DOztvQztvQyxPOzs7O007O087O1EsZ0M7UztVLEk7Ozs7O1E7UyxNOzs7O1k7O2EsZTs7O2MsSSxpQjs7O2MsSSxpQjs7YyxJLGlCOzs7O2EsTzs7OztxQyxPOztZLE87Ozs7c0I7Ozs7dUI7Ozs7O2E7Yzs7OztpQjs7YSx1QjtjLE87Ozs7O3dCOzthLE87Ozs7O3VCOzs7YTs0QjthLFU7Ozs7OEI7Ozs7ZTs7O2lCOzs7OztnQjtnQixPOzs7OzswQjs7O29DO3VDOzJCOzBCLE87Ozs7OztjOzs7YTs7YTs7OztTO1E7O08sTzs7OztpQixPOzs7eUM7O007TTs7bUM7O29DLE87Ozs7OztRLFUsb0MsbUI7USxTO1E7OztrQjtxQjtTO1UsSzs7O2E7YSxPOzs7O2EsTzs7Ozt1QixPOzs7OztpQzs7Ozs7OztRLE87Ozs7O2tCO2tCLE87O087O2lCOztNO007O21DO21DLE87Ozs7Ozs7ZTs7O2tDOzttQyxPOzs7O0ssTzs7a0M7O21DLE87Ozs7SyxPOztrQzs7bUM7O29DLE07b0M7b0M7b0M7Ozs7cUMsSSxJLHVCOzs7Ozs7QTs7Ozs7Ozs7Ozs7dUM7dUM7Ozs7c0M7OztxQzs7Ozs7bUMsTztrQzs7bUMsTztrQzs7bUMsTztrQztrQzs7cUM7O2lFLGlCOzttQyxVO21DLE87Ozs7bUI7a0M7O21DLFU7bUMsTzs7OzttQjtrQzs7bUMsVTttQyxPOzs7OztLO007SyxJO0s7O2tDOzttQyxVO21DLE87Ozs7O0s7TTtLLEk7Szs7a0M7O21DLE87Ozs7OztNO00sZTtNLEk7TTs7SyxPOzs7a0M7O21DLE87Ozs7OztNO087TztNLGU7TSxJO007O0ssTzs7a0M7O21DLE87Ozs7OztNO087TztPO007TyxPOztNLEk7TTs7SyxPOzs7a0M7O21DLE87a0M7O21DLE87a0M7O21DLE87a0M7O21DLE87Ozs7SztjOzs7a0M7O21DOztzQyxzQjs7OzttQyxPOzs7Ozs7SztLLE87Ozs7ZSxPOzs7Ozs7eUIsTzs7Ozs7bUMsTzs7Ozs7SyxPOzs7OzRCLGlCOzs7Ozs7a0M7O21DOztzQyxzQjs7OzttQyxPOzs7OztrQixpQjtrQzs7O29DOztxQyxPOzs7O08sTzs7OzJDO007Ozs7cUI7TTs7Ozs7O1E7UyxPOzs7O2dDOztRLE87Ozs7a0IsTzs7Ozs7NEIsTzs7Ozs7O3NDO3NDLE87Ozs7OzttQzttQztrQzs7bUMsTzs7OztLOzs7OztrQzs7bUMsTzs7OztLOzs7OztrQzs7O21DLE87Ozs7OztLLFk7O0ssTzs7OztlOzs7OzJCOzs7OztrQzs7bUMsTzs7Ozs7Ozs7O1EsTzs7Ozs7O21COzs7O2tDO21COzs7Ozs7cUI7c0IsTzs7Ozs2QztxQixvQjtxQixPOzs7OytCLE87Ozs7OztDO0MsTzs7OztNO007O0s7ZTs7O2tDOzttQyxPOztrQzs7bUMsRyw4Qjs7O3FDLE87Ozs7OztROzs7O3VCO1E7Ozs7OztVO1csTzs7OztrQztVLG9CO1UsTzs7OztvQixPOzs7Ozs7OEI7OEIsTzs7OzttQzttQztrQzs7bUMsTzs7a0M7Ozs7cUMsTzs7Ozs7O1E7Ozs7dUI7UTs7Ozs7O1U7VyxPOzs7O2tDOztVLE87Ozs7b0I7cUI7cUIsTzs7OzsrQixPOzs7Ozs7QztDLE87Ozs7b0I7b0IsTzs7Ozs4Qjs4QixPOzs7O21DO21DO2tDOzttQyxPOztrQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6W119
