// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Dynlink_compilerlibs
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Digest, Stdlib__Filename, Stdlib__Float, Stdlib__Format, Stdlib__Fun, Stdlib__Gc, Stdlib__Hashtbl, Stdlib__Int, Stdlib__Int32, Stdlib__Int64, Stdlib__Lexing, Stdlib__List, Stdlib__Map, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Option, Stdlib__Parsing, Stdlib__Printexc, Stdlib__Printf, Stdlib__Seq, Stdlib__Set, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$117 = "",
    cst$140 = "\n",
    cst_The_first_one_was_selected$1 =
      "\nThe first one was selected. Please disambiguate if this is wrong.",
    cst$125 = "\x1b[",
    cst$118 = " ",
    cst$132 = "  ",
    cst_char_0 = "  (char *) 0 };\n",
    cst_primitive_0 = "  (primitive) 0 };\n",
    cst$120 = " (",
    cst$129 = " ( ",
    cst_which_is_later_used = " (which is later used)",
    cst$133 = " [",
    cst_and = " and ",
    cst_is_never_used_to_build_val$3 =
      " is never used to build values.\n(However, this constructor appears in patterns.)",
    cst_is_out_of_range = " is out of range",
    cst_is_overridden$1 = " is overridden.",
    cst_version_of_OCaml = " version of OCaml.",
    cst_was_expected = " was expected",
    cst_when = " when ",
    cst$144 = "#",
    cst_a = "%a",
    cst_s$1 = "%s",
    cst_s_i_i = "%s %i-%i",
    cst$141 = "'.",
    cst$142 = "(",
    cst$143 = "()",
    cst$130 = ")",
    cst_predef = "*predef*",
    cst$131 = "+",
    cst$126 = ", ",
    cst$127 = "-",
    cst_D_FILE_OFFSET_BITS_64 = "-D_FILE_OFFSET_BITS=64 ",
    cst_O2_fno_strict_aliasing_fwr =
      "-O2 -fno-strict-aliasing -fwrapv -pthread  ",
    cst_lm_lpthread = "-lm  -lpthread",
    cst$135 = ".",
    cst$134 = ".\n",
    cst_cmi$1 = ".cmi",
    cst_i = "/%i",
    cst_toplevel = "//toplevel//",
    cst_0$2 = "0",
    cst_0x = "0x",
    cst_1$1 = "1",
    cst_3$1 = "3",
    cst_4$1 = "4",
    cst$136 = ":\n ",
    cst$119 = ": ",
    cst$138 = "::",
    cst$124 = ";",
    cst_a$1 = "<%a>",
    cst_1$2 = "<1>",
    cst_error$0 = "<error>",
    cst_hov = "<hov>",
    cst_hv_4 = "<hv 4>",
    cst_loc = "<loc>",
    cst_v = "<v>",
    cst_warning$0 = "<warning>",
    cst$128 = "@ ",
    cst$121 = "@,",
    cst_s_a_s = "@.@[%s %a, %s@]",
    cst_1_a = "@[<1>{@[%a@ @]}@]",
    cst_v$0 = "@[<v>",
    cst_a$0 = "@[@\n%a@]",
    cst$123 = "@]",
    cst$137 = "@}",
    cst_Assert_failure$0 = "Assert_failure",
    cst_Caml1999A$0 = "Caml1999A",
    cst_Caml1999D$0 = "Caml1999D",
    cst_Caml1999I$0 = "Caml1999I",
    cst_Caml1999M$0 = "Caml1999M",
    cst_Caml1999N$0 = "Caml1999N",
    cst_Caml1999O$0 = "Caml1999O",
    cst_Caml1999T$0 = "Caml1999T",
    cst_Caml1999X$0 = "Caml1999X",
    cst_Caml1999Y$0 = "Caml1999Y",
    cst_Caml1999Z$0 = "Caml1999Z",
    cst_Caml1999y$0 = "Caml1999y",
    cst_Caml1999z$0 = "Caml1999z",
    cst_Deepsep = "Deepsep",
    cst_Division_by_zero$0 = "Division_by_zero",
    cst_End_of_file$0 = "End_of_file",
    cst_Error = "Error",
    cst_Failure$0 = "Failure",
    cst_Ill_formed_list_of_alert_s$2 = "Ill-formed list of alert settings",
    cst_Illegal_recursive_module_r = "Illegal recursive module reference",
    cst_Ind = "Ind",
    cst_Internal_error_invalid = "Internal error: invalid [",
    cst_Internal_error_vmthreads_n =
      "Internal error: vmthreads not supported after 4.09.0",
    cst_Internal_path = "Internal path",
    cst_Invalid_syntax_for_sub_mes =
      "Invalid syntax for sub-message of extension '",
    cst_Invalid_syntax_for_sub_mes$0 =
      "Invalid syntax for sub-message of extension '%s'.",
    cst_Invalid_argument$0 = "Invalid_argument",
    cst_Map_disjoint_union = "Map.disjoint_union ",
    cst_Match_failure$0 = "Match_failure",
    cst_None$2 = "None",
    cst_Not_found$0 = "Not_found",
    cst_Out_of_memory$0 = "Out_of_memory",
    cst_Sep = "Sep",
    cst_Some$1 = "Some",
    cst_Stack_overflow$0 = "Stack_overflow",
    cst_Subst_modtype_path$1 = "Subst.modtype_path",
    cst_Sys_blocked_io$0 = "Sys_blocked_io",
    cst_Sys_error$0 = "Sys_error",
    cst_TERM = "TERM",
    cst_The_module = "The module ",
    cst_Undefined_recursive_module$0 = "Undefined_recursive_module",
    cst_Uninterpreted_extension = "Uninterpreted extension '",
    cst_Uninterpreted_extension_s = "Uninterpreted extension '%s'.",
    cst_Usage = "Usage: ",
    cst_Win32 = "Win32",
    cst$139 = "[]",
    cst$116 = "_",
    cst_none$3 = "_none_",
    cst_a_newer$1 = "a newer",
    cst_aarch64_apple_darwin22_4_0 = "aarch64-apple-darwin22.4.0",
    cst_alert = "alert",
    cst_all = "all",
    cst_always$0 = "always",
    cst_an_older$1 = "an older",
    cst_auto$0 = "auto",
    cst_caml_ppx_context = "caml.ppx.context { ",
    cst_cannot_be_accessed_from_th =
      "cannot be accessed from the definition of an instance variable",
    cst_cc = "cc",
    cst_cc_shared_undefined_dynami$1 =
      "cc -shared -undefined dynamic_lookup -Wl,-w  ",
    cst_class$0 = "class",
    cst_class_type$0 = "class type",
    cst_const_char_caml_names_of_b =
      "const char * caml_names_of_builtin_cprim[] = {\n",
    cst_constructor$2 = "constructor",
    cst_constructor$1 = "constructor ",
    cst_contextual$0 = "contextual",
    cst_cookies$0 = "cookies",
    cst_debug$0 = "debug",
    cst_deprecated$5 = "deprecated",
    cst_dumb = "dumb",
    cst_dynlink_compilerlibs_btype = "dynlink_compilerlibs/btype.ml",
    cst_dynlink_compilerlibs_env_m = "dynlink_compilerlibs/env.ml",
    cst_dynlink_compilerlibs_ident = "dynlink_compilerlibs/ident.ml",
    cst_dynlink_compilerlibs_lambd = "dynlink_compilerlibs/lambda.ml",
    cst_dynlink_compilerlibs_load_ = "dynlink_compilerlibs/load_path.ml",
    cst_dynlink_compilerlibs_local = "dynlink_compilerlibs/local_store.ml",
    cst_dynlink_compilerlibs_locat = "dynlink_compilerlibs/location.ml",
    cst_dynlink_compilerlibs_misc_ = "dynlink_compilerlibs/misc.ml",
    cst_dynlink_compilerlibs_path_ = "dynlink_compilerlibs/path.ml",
    cst_dynlink_compilerlibs_persi = "dynlink_compilerlibs/persistent_env.ml",
    cst_dynlink_compilerlibs_subst = "dynlink_compilerlibs/subst.ml",
    cst_dynlink_compilerlibs_types = "dynlink_compilerlibs/types.ml",
    cst_dynlink_compilerlibs_warni = "dynlink_compilerlibs/warnings.ml",
    cst_emit$0 = "emit",
    cst_error$1 = "error",
    cst_extension_constructor$2 = "extension constructor",
    cst_false$1 = "false",
    cst_flambda$1 = "flambda",
    cst_float$0 = "float",
    cst_for_package$0 = "for_package",
    cst_include_dirs$0 = "include_dirs",
    cst_label$0 = "label",
    cst_let$1 = "let",
    cst_load_path$0 = "load_path",
    cst_module$0 = "module",
    cst_module_type$0 = "module type",
    cst_mutating_field = "mutating field ",
    cst_mutating_field_s = "mutating field %s",
    cst_never$0 = "never",
    cst_noalloc = "noalloc",
    cst_ocaml_alert = "ocaml.alert",
    cst_ocaml_doc$0 = "ocaml.doc",
    cst_ocaml_error$2 = "ocaml.error",
    cst_ocaml_ppwarning$0 = "ocaml.ppwarning",
    cst_ocaml_ppx_context$0 = "ocaml.ppx.context",
    cst_ocaml_text$0 = "ocaml.text",
    cst_ocaml_warn_on_literal_patt$0 = "ocaml.warn_on_literal_pattern",
    cst_ocaml_deprecated_cli$1 = "ocaml_deprecated_cli",
    cst_open_modules$0 = "open_modules",
    cst_other$0 = "other",
    cst_parsing$0 = "parsing",
    cst_primitive_caml_builtin_cpr = "primitive caml_builtin_cprim[] = {\n",
    cst_principal$0 = "principal",
    cst_recursive_types$0 = "recursive_types",
    cst_s$2 = "s",
    cst_scheduling$0 = "scheduling",
    cst_short$0 = "short",
    cst_the = "the ",
    cst_this_open_statement_shadow = "this open statement shadows the ",
    cst_tool_name$0 = "tool_name",
    cst_transparent_modules$0 = "transparent_modules",
    cst_true$1 = "true",
    cst_type$0 = "type",
    cst_typedef_value_primitive = "typedef value (*primitive)();\n",
    cst_typing$0 = "typing",
    cst_unboxed = "unboxed",
    cst_unboxed_types$0 = "unboxed_types",
    cst_use_threads$0 = "use_threads",
    cst_use_vmthreads$0 = "use_vmthreads",
    cst_value$0 = "value",
    cst_warning$1 = "warning",
    cst$122 = "|",
    caml_array_get = runtime.caml_array_get,
    caml_array_set = runtime.caml_array_set,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_get_global_data = runtime.caml_get_global_data,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int_compare = runtime.caml_int_compare,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_lessequal = runtime.caml_lessequal,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_register_global = runtime.caml_register_global,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_file_exists = runtime.caml_sys_file_exists,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_sys_isatty = runtime.caml_sys_isatty,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_cps_exact_call0(f){
    return runtime.caml_stack_check_depth()
            ? f()
            : runtime.caml_trampoline_return(f, []);
   }
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_exact_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 7
              ? f(a0, a1, a2, a3, a4, a5, a6)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_cps_exact_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_cps_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 8
              ? f(a0, a1, a2, a3, a4, a5, a6, a7)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_cps_exact_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_cps_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 9
              ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_cps_exact_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_cps_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 10
              ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
              : runtime.caml_call_gen
                (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_cps_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 11
              ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
              : runtime.caml_call_gen
                (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_cps_call17
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 17
              ? f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16)
              : runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16])
            : runtime.caml_trampoline_return
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16]);
   }
   var
    undef = undefined,
    global_data = caml_get_global_data(),
    cst$1 = cst$116,
    cst$0 = cst$117,
    cst = cst$118,
    bindir =
      "/Users/kaustubh/Desktop/projects/ocaml-retreat/ocaml.org/playground/_opam/bin",
    standard_library_default =
      "/Users/kaustubh/Desktop/projects/ocaml-retreat/ocaml.org/playground/_opam/lib/ocaml",
    ccomp_type = cst_cc,
    c_compiler = cst_cc,
    c_output_obj = "-o ",
    ocamlc_cflags = cst_O2_fno_strict_aliasing_fwr,
    ocamlc_cppflags = cst_D_FILE_OFFSET_BITS_64,
    ocamlopt_cflags = cst_O2_fno_strict_aliasing_fwr,
    ocamlopt_cppflags = cst_D_FILE_OFFSET_BITS_64,
    bytecomp_c_libraries = cst_lm_lpthread,
    cst$2 = cst$118,
    cst$3 = cst$118,
    cst$4 = cst$118,
    cst$5 = cst$118,
    native_c_libraries = cst_lm_lpthread,
    native_pack_linker = "ld -r -o ",
    default_rpath = cst$117,
    mksharedlibrpath = cst$117,
    ar = "ar",
    flags = " -chain  ",
    cst$6 = cst$117,
    cst$7 = cst$118,
    cst$8 = cst$117,
    architecture = "arm64",
    model = "default",
    system = "macosx",
    asm = "cc -c -Wno-trigraphs",
    ext_exe = cst$117,
    ext_obj = ".o",
    ext_asm = ".s",
    ext_lib = ".a",
    ext_dll = ".so",
    host = cst_aarch64_apple_darwin22_4_0,
    target = cst_aarch64_apple_darwin22_4_0,
    exec_magic_number = "Caml1999X032",
    cmi_magic_number = "Caml1999I032",
    cmo_magic_number = "Caml1999O032",
    cma_magic_number = "Caml1999A032",
    cmx_magic_number = "Caml1999Y032",
    cmxa_magic_number = "Caml1999Z032",
    ast_impl_magic_number = "Caml1999M032",
    ast_intf_magic_number = "Caml1999N032",
    cmxs_magic_number = "Caml1999D032",
    cmt_magic_number = "Caml1999T032",
    linear_magic_number = "Caml1999L032",
    cst_camlprog_exe = "camlprog.exe",
    cst$13 = cst$117,
    cst$14 = ":",
    cst$12 = "=",
    cst$11 = "%+",
    cst$10 = "%.",
    cst$9 = "%#",
    cst$23 = cst$122,
    cst$22 = cst$117,
    cst$21 = cst$117,
    cst$20 = cst$117,
    cst$18 = cst$124,
    cst$19 = cst$125,
    cst$16 = cst$117,
    cst$17 = cst$126,
    cst$15 = cst$127,
    default_styles =
      [0, [0, 0, [0, [0, 1], 0]], [0, 0, [0, [0, 5], 0]], [0, 0, 0]],
    all_native_obj_configs = [0, [0, 1], [0, [0, 0], 0]],
    cst$24 = cst$131,
    ext = "linear",
    cst$27 = cst$117,
    cst$25 = cst$117,
    cst$26 = cst$117,
    cst$28 = cst$117,
    o1_arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    all = [0, 0, 0],
    passes = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    cst$29 = cst$118,
    cst$30 = cst$132,
    cst$31 = cst$117,
    zero = [0, 0., 0., 0],
    column_mapping =
      [0,
       [0, "time", 936769581],
       [0,
        [0, "alloc", 885068885],
        [0,
         [0, "top-heap", 208707190],
         [0, [0, "absolute-top-heap", -494364893], 0]]]],
    cst$32 = cst$118,
    generate = "generate",
    transl = "transl",
    typing = cst_typing$0,
    cst$33 = cst$117,
    cst$60 = "]",
    cst$61 = cst$133,
    cst$62 = cst$117,
    cst$63 = cst$126,
    cst$34 = cst$135,
    cst$35 = cst$126,
    cst$36 = cst$136,
    cst$37 = cst$118,
    cst$38 = cst$136,
    cst$39 = cst$118,
    cst$40 = cst$135,
    cst$41 = cst$118,
    cst$43 = cst$135,
    cst$44 = cst$135,
    cst$45 = cst$135,
    cst$46 = cst$135,
    cst$47 = cst$135,
    cst$48 = cst$135,
    cst$49 = cst$118,
    cst$50 = cst$118,
    cst$52 = cst$118,
    cst$51 = cst$118,
    cst$53 = cst$126,
    cst$54 = cst$117,
    in_different_places =
      "in different places in different or-pattern alternatives",
    cst$55 = cst$126,
    cst$56 = cst$135,
    cst$57 = cst$135,
    cst$58 = cst$135,
    cst$59 = cst$135,
    cst$42 = cst$135,
    partial = [16, [17, 2, [17, 0, 0]]],
    partial$0 =
      [17,
       [0, cst$128, 1, 0],
       [18,
        [1, [0, 0, cst$117]],
        [11,
         "Use the equivalent signed form:",
         [17,
          [0, cst$128, 1, 0],
          [16,
           [12,
            46,
            [17,
             0,
             [17,
              [0, cst$128, 1, 0],
              [18,
               [1, [0, 0, cst$117]],
               [11,
                "Hint: Enabling or disabling a warning by its mnemonic name requires a + or - prefix.",
                [17, 0, partial]]]]]]]]]]],
    defaults_w = "+a-4-7-9-27-29-30-32..42-44-45-48-50-60-66..70",
    defaults_warn_error = "-a+31",
    default_disabled_alerts = [0, "unstable", [0, "unsynchronized_access", 0]],
    partial$1 = [11, " for ocamlfind).", 0],
    partial$2 = [17, 4, 0],
    cst_error = cst_error$1,
    cst_warning = cst_warning$1,
    cst$66 = cst$117,
    cst$67 = cst$117,
    cst$64 = "# ",
    cst$65 = cst$132,
    empty_docs = [0, 0, 0],
    cst$68 = cst$138,
    cst$69 = cst$139,
    cst$72 = cst$140,
    cst$71 = cst$117,
    cst$70 = cst$117,
    cst$75 = cst$117,
    cst$77 = cst$117,
    cst$76 = cst$117,
    cst$78 = cst$117,
    cst$74 = "/",
    cst$73 = cst$116,
    key_name = cst$117,
    cst$79 = " )",
    cst$80 = ".( ",
    cst$81 = cst$135,
    cst$82 = cst$130,
    cst$83 = cst$142,
    cst$85 = cst$117,
    cst$86 = cst$117,
    cst$84 = cst$117,
    oattr_unboxed = [0, cst_unboxed],
    oattr_untagged = [0, "untagged"],
    oattr_noalloc = [0, cst_noalloc],
    partial$3 = [15, [17, 0, [17, 0, [12, 41, [17, 0, 0]]]]],
    partial$4 = [1, [0, 0, cst$117]],
    partial$5 = [17, 0, 0],
    cst$87 = cst$143,
    leaf_for_unpack = [0, 0, 0],
    cst$89 = cst$117,
    cst$90 = "~",
    cst$91 = "?",
    cst$88 = cst$117,
    dummy_method = "*dummy method*",
    tvar_none = [0, 0],
    tunivar_none = [9, 0],
    cst$92 = cst$143,
    cst$93 = cst$139,
    cst$94 = cst$138,
    cst$95 = cst$117,
    partial$6 = [2, 0, [17, 0, 0]],
    cst$100 = cst$117,
    partial$7 = [17, 0, 0],
    partial$8 =
      [17,
       [0, cst$128, 1, 0],
       [11,
        "applied",
        [17,
         [0, cst$128, 1, 0],
         [11,
          "in",
          [17,
           [0, cst$128, 1, 0],
           [11,
            cst_type$0,
            [17, [0, cst$128, 1, 0], [11, "expressions", [17, 0, 0]]]]]]]]],
    cst$101 = cst$117,
    cst$102 = cst$140,
    cst$98 = cst$144,
    cst$99 = cst$144,
    cst$97 = cst$117,
    _hO_ = [0, 1],
    cst$96 = cst$117,
    cst$108 = "}",
    cst$109 = cst$124,
    cst$110 = "{",
    cst$111 = cst$117,
    cst$107 = "??",
    cst$106 = cst$135,
    cst$105 = cst$117,
    cst$103 = cst$130,
    cst$104 = cst$142,
    default_function_attribute = [0, 3, 2, 2, 1, 0, 0, 0],
    staticfail = [11, 0, 0],
    cst$112 = cst$119,
    cst$113 = cst$119,
    cst$115 = cst$117,
    cst$114 = cst$117,
    Stdlib = global_data.Stdlib,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Option = global_data.Stdlib__Option,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Obj = global_data.Stdlib__Obj,
    _a_ = [0, [11, cst_0x, [4, 6, [0, 2, 2], 0, 0]], "0x%02x"],
    cst_Truncated_file = "Truncated file",
    _c_ =
      [0, [11, "Unrecognized magic: ", [2, 0, 0]], "Unrecognized magic: %s"],
    _d_ =
      [0,
       [11, "Unsupported: ", [2, 0, [11, ": 0x", [7, 6, 0, 0, 0]]]],
       "Unsupported: %s: 0x%Lx"],
    _e_ =
      [0,
       [11, "Out of range constant: ", [2, 0, 0]],
       "Out of range constant: %s"];
   function error_to_string(param, cont){
    if(typeof param === "number") return cont(cst_Truncated_file);
    switch(param[0]){
      case 0:
       var magic = param[1];
       return caml_cps_call3
               (Stdlib_List[10],
                caml_ml_string_length(magic),
                function(i, cont){
                 var c = caml_string_get(magic, i);
                 return caml_cps_call3(Stdlib_Printf[4], _a_, c, cont);
                },
                function(_auA_){
                 return caml_cps_call3
                         (Stdlib_String[6],
                          cst,
                          _auA_,
                          function(_auB_){
                           return caml_cps_call3(Stdlib_Printf[4], _c_, _auB_, cont);
                          });
                });
      case 1:
       var n = param[2], s = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _d_, s, n, cont);
      default:
       var s$0 = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _e_, s$0, cont);
    }
   }
   var
    Error = [248, "Dynlink_compilerlibs.Binutils.Error", caml_fresh_oo_id(0)],
    _b_ = [0, [11, cst_0x, [4, 6, 0, 0, 0]], "0x%x"],
    _f_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0);
   function name_at(max_len, buf, start, cont){
    var
     _auw_ = start < 0 ? 1 : 0,
     _aux_ = _auw_ || (caml_ml_bytes_length(buf) < start ? 1 : 0);
    if(_aux_)
     return caml_cps_call3
             (Stdlib_Printf[4],
              _b_,
              start,
              function(_auz_){
               var raise = caml_pop_trap();
               return raise
                       (caml_maybe_attach_backtrace([0, Error, [2, _auz_]], 1));
              });
    function _auy_(max_pos){
     var pos = start;
     for(;;){
      if(max_pos > pos && 0 !== caml_bytes_get(buf, pos)){var pos$0 = pos + 1 | 0, pos = pos$0; continue;}
      return caml_cps_call4
              (Stdlib_Bytes[8], buf, start, pos - start | 0, cont);
     }
    }
    if(! max_len) return _auy_(caml_ml_bytes_length(buf));
    var n = max_len[1];
    return caml_cps_call3
            (Stdlib_Int[10], caml_ml_bytes_length(buf), start + n | 0, _auy_);
   }
   function array_find_map(f, a){
    var i = 0;
    for(;;){
     if(a.length - 1 <= i) return 0;
     var r = f(caml_check_bound(a, i)[1 + i]);
     if(r) return r;
     var i$0 = i + 1 | 0, i = i$0;
    }
   }
   function array_find(f, a){
    return array_find_map(function(x){return f(x) ? [0, x] : 0;}, a);
   }
   function really_input_bytes(ic, len, cont){
    var buf = caml_create_bytes(len);
    return caml_cps_call5
            (Stdlib[85], ic, buf, 0, len, function(_auv_){return cont(buf);});
   }
   function uint64_of_uint32(n){
    return runtime.caml_int64_and(caml_int64_of_int32(n), _f_);
   }
   function word_size(param){return param[3] ? 8 : 4;}
   function get_uint16(param, buf, idx, cont){
    var endianness = param[2];
    return endianness
            ? caml_cps_call3(Stdlib_Bytes[62], buf, idx, cont)
            : caml_cps_call3(Stdlib_Bytes[63], buf, idx, cont);
   }
   function get_uint32(param, buf, idx, cont){
    var endianness = param[2];
    return endianness
            ? caml_cps_call3(Stdlib_Bytes[68], buf, idx, cont)
            : caml_cps_call3(Stdlib_Bytes[69], buf, idx, cont);
   }
   function get_uint(s, d, buf, idx, cont){
    return caml_cps_exact_call4
            (get_uint32,
             d,
             buf,
             idx,
             function(n){
              return caml_cps_call2
                      (Stdlib_Int32[12],
                       n,
                       function(match){
                        if(match){var n$0 = match[1]; return cont(n$0);}
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace
                                  ([0, Error, [1, s, caml_int64_of_int32(n)]], 1));
                       });
             });
   }
   function get_uint64(param, buf, idx, cont){
    var endianness = param[2];
    return endianness
            ? caml_cps_call3(Stdlib_Bytes[71], buf, idx, cont)
            : caml_cps_call3(Stdlib_Bytes[72], buf, idx, cont);
   }
   function get_word(d, buf, idx, cont){
    return d[3]
            ? caml_cps_exact_call4(get_uint64, d, buf, idx, cont)
            : caml_cps_exact_call4
              (get_uint32,
               d,
               buf,
               idx,
               function(_auu_){return cont(uint64_of_uint32(_auu_));});
   }
   function uint64_to_int(s, n, cont){
    return caml_cps_call2
            (Stdlib_Int64[12],
             n,
             function(match){
              if(match){var n$0 = match[1]; return cont(n$0);}
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Error, [1, s, n]], 1));
             });
   }
   function load_bytes(d, off, len, cont){
    return caml_cps_call3
            (Stdlib[96][4],
             d[1],
             off,
             function(_aut_){
              return caml_cps_exact_call3(really_input_bytes, d[1], len, cont);
             });
   }
   function load_section_body(d, param, cont){
    var sh_size = param[5], sh_offset = param[4];
    return caml_cps_exact_call4(load_bytes, d, sh_offset, sh_size, cont);
   }
   function find_section(sections, type, sectname){
    function f(param){
     var
      sh_name_str = param[7],
      sh_type = param[2],
      _aur_ = sh_type === type ? 1 : 0,
      _aus_ = _aur_ ? caml_string_equal(sh_name_str, sectname) : _aur_;
     return _aus_;
    }
    return array_find(f, sections);
   }
   function find_symbol(symbols, symname){
    function f(param){
     var st_name = param[1];
     return 0 === param[3] ? 0 : caml_string_equal(st_name, symname);
    }
    return array_find(f, symbols);
   }
   function header_size(param){
    var bitness = param[3], _auq_ = bitness ? 6 : 5;
    return (_auq_ * 4 | 0) + 8 | 0;
   }
   function size_nlist(d){return 8 + word_size(d) | 0;}
   function fix(symname, cont){
    return caml_cps_call3(Stdlib[28], cst$1, symname, cont);
   }
   function find_symbol$0(symbols, symname){
    function f(param){
     var
      n_type = param[2],
      n_name = param[1],
      _auo_ = 15 === (n_type & 15) ? 1 : 0,
      _aup_ = _auo_ ? caml_string_equal(n_name, symname) : _auo_;
     return _aup_;
    }
    return array_find(f, symbols);
   }
   var
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_sh_name = "sh_name",
    cst_sh_size = "sh_size",
    cst_sh_entsize = "sh_entsize",
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_e_shnum = "e_shnum",
    cst_e_shstrndx = "e_shstrndx",
    cst_dynsym = ".dynsym",
    _i_ = [2, "sh_entsize=0"],
    cst_dynstr = ".dynstr",
    cst_st_name = "st_name",
    cst_ELFCLASS = "ELFCLASS",
    cst_ELFDATA = "ELFDATA",
    _j_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_ncmds = "ncmds",
    cst_sizeofcmds = "sizeofcmds",
    cst_cmdsize = "cmdsize",
    cst_nsyms = "nsyms",
    cst_strsize = "strsize",
    cst_n_name = "n_name",
    header_size$0 = 24,
    _k_ = [0, "SizeOfOptionalHeader=0"],
    cst_optional_header_magic = "optional_header_magic",
    _l_ = [0, 8],
    cst_virtual_size = "virtual_size",
    cst_size_of_raw_data = "size_of_raw_data",
    cst_exptbl = ".exptbl",
    cst_numexports = "numexports",
    cst_exptbl_name_offset = "exptbl name offset",
    cst_data = ".data",
    cst_MACHINETYPE = "MACHINETYPE",
    _m_ = [1, 0];
   function find_section$0(sections, sectname){
    return array_find
            (function(param){
              var name = param[1];
              return caml_string_equal(name, sectname);
             },
             sections);
   }
   function f(ic, cont){
    return caml_cps_call3
            (Stdlib[90],
             ic,
             0,
             function(_atL_){
              return caml_cps_call3
                      (Stdlib[86],
                       ic,
                       4,
                       function(magic){
                        var
                         match = caml_string_get(magic, 0),
                         match$0 = caml_string_get(magic, 1),
                         match$1 = caml_string_get(magic, 2),
                         match$2 = caml_string_get(magic, 3);
                        a:
                        {
                         if(128 <= match){
                          if(208 <= match){
                           if
                            (254 !== match
                             ||
                              237 !== match$0
                              || 250 !== match$1 || 1 < match$2 - 206 >>> 0)
                            break a;
                          }
                          else if
                           (206 > match
                            || 250 !== match$0 || 237 !== match$1 || 254 !== match$2)
                           break a;
                          return caml_cps_call3
                                  (Stdlib[90],
                                   ic,
                                   0,
                                   function(_aug_){
                                    return caml_cps_exact_call3
    (really_input_bytes,
     ic,
     4,
     function(magic){
      return caml_cps_call3
              (Stdlib_Bytes[67],
               magic,
               0,
               function(match){
                a:
                {
                 if(runtime.caml_lessthan(match, -17958194)){
                  if(! caml_notequal(match, -822415874)){var magic$0 = 1; break a;}
                  if(! caml_notequal(match, -805638658)){var magic$0 = 3; break a;}
                 }
                 else{
                  if(! caml_notequal(match, -17958194)){var magic$0 = 0; break a;}
                  if(! caml_notequal(match, -17958193)){var magic$0 = 2; break a;}
                 }
                 return caml_cps_call2
                         (Stdlib_Bytes[6],
                          magic,
                          function(_aun_){
                           var raise = caml_pop_trap();
                           return raise
                                   (caml_maybe_attach_backtrace([0, Error, [0, _aun_]], 1));
                          });
                }
                var bitness = 2 <= magic$0 ? 1 : 0, _auh_ = Stdlib_Sys[11];
                a:
                {
                 b:
                 {
                  c:
                  {
                   if(1 !== magic$0 && 3 > magic$0){if(_auh_) break c; break b;}
                   if(_auh_) break b;
                  }
                  var endianness = 1;
                  break a;
                 }
                 var endianness = 0;
                }
                var d = [0, ic, endianness, bitness];
                return caml_cps_exact_call4
                        (load_bytes,
                         d,
                         _j_,
                         header_size(d),
                         function(buf){
                          return caml_cps_exact_call5
                                  (get_uint,
                                   cst_ncmds,
                                   d,
                                   buf,
                                   16,
                                   function(ncmds){
                                    return caml_cps_exact_call5
    (get_uint,
     cst_sizeofcmds,
     d,
     buf,
     20,
     function(sizeofcmds){
      return caml_cps_exact_call4
              (load_bytes,
               d,
               caml_int64_of_int32(header_size(d)),
               sizeofcmds,
               function(buf){
                var base = [0, 0];
                function mk(param, cont){
                 return caml_cps_exact_call4
                         (get_uint32,
                          d,
                          buf,
                          base[1] | 0,
                          function(cmd){
                           return caml_cps_exact_call5
                                   (get_uint,
                                    cst_cmdsize,
                                    d,
                                    buf,
                                    base[1] + 4 | 0,
                                    function(cmdsize){
                                     function _aum_(lc){
                                      base[1] = base[1] + cmdsize | 0;
                                      return cont(lc);
                                     }
                                     return caml_notequal(cmd, 2)
     ? _aum_(0)
     : caml_cps_exact_call4
       (get_uint32,
        d,
        buf,
        base[1] + 8 | 0,
        function(symoff){
         return caml_cps_exact_call5
                 (get_uint,
                  cst_nsyms,
                  d,
                  buf,
                  base[1] + 12 | 0,
                  function(nsyms){
                   return caml_cps_exact_call4
                           (get_uint32,
                            d,
                            buf,
                            base[1] + 16 | 0,
                            function(stroff){
                             return caml_cps_exact_call5
                                     (get_uint,
                                      cst_strsize,
                                      d,
                                      buf,
                                      base[1] + 20 | 0,
                                      function(strsize){
                                       return _aum_([0, [0, symoff, nsyms, stroff, strsize]]);
                                      });
                            });
                  });
        });
                                    });
                          });
                }
                return caml_cps_call3
                        (Stdlib_Array[1],
                         ncmds,
                         mk,
                         function(load_commands){
                          var
                           match =
                             array_find_map
                              (function(param){
                                if(! param) return 0;
                                var symtab = param[1];
                                return [0, symtab];
                               },
                               load_commands);
                          function _aui_(symbols){
                           function symbol_offset(symname, cont){
                            return caml_cps_exact_call2
                                    (fix,
                                     symname,
                                     function(symname){
                                      var match = find_symbol$0(symbols, symname);
                                      if(! match) return cont(0);
                                      var n_value = match[1][3];
                                      return cont([0, n_value]);
                                     });
                           }
                           function defines_symbol(symname, cont){
                            return caml_cps_exact_call2
                                    (fix,
                                     symname,
                                     function(symname){
                                      var _aul_ = find_symbol$0(symbols, symname);
                                      return caml_cps_call2(Stdlib_Option[11], _aul_, cont);
                                     });
                           }
                           return cont([0, defines_symbol, symbol_offset]);
                          }
                          if(! match) return _aui_([0]);
                          var
                           match$0 = match[1],
                           strsize = match$0[4],
                           stroff = match$0[3],
                           nsyms = match$0[2],
                           symoff = match$0[1];
                          return caml_cps_exact_call4
                                  (load_bytes,
                                   d,
                                   uint64_of_uint32(stroff),
                                   strsize,
                                   function(strtbl){
                                    var _auj_ = caml_mul(nsyms, size_nlist(d));
                                    return caml_cps_exact_call4
    (load_bytes,
     d,
     uint64_of_uint32(symoff),
     _auj_,
     function(buf){
      var size_nlist$0 = size_nlist(d);
      function mk(i, cont){
       var base = caml_mul(i, size_nlist$0);
       return caml_cps_exact_call5
               (get_uint,
                cst_n_name,
                d,
                buf,
                base | 0,
                function(_auk_){
                 return caml_cps_exact_call4
                         (name_at,
                          0,
                          strtbl,
                          _auk_,
                          function(n_name){
                           return caml_cps_call3
                                   (Stdlib_Bytes[59],
                                    buf,
                                    base + 4 | 0,
                                    function(n_type){
                                     return caml_cps_exact_call4
     (get_word,
      d,
      buf,
      base + 8 | 0,
      function(n_value){
       return cont([0, n_name, n_type, n_value]);
      });
                                    });
                          });
                });
      }
      return caml_cps_call3(Stdlib_Array[1], nsyms, mk, _aui_);
     });
                                   });
                         });
               });
     });
                                   });
                         });
               });
     });
                                   });
                         }
                         if(77 === match){
                          if(90 === match$0)
                           return caml_cps_call3
                                   (Stdlib[90],
                                    ic,
                                    60,
                                    function(_atM_){
                                     return caml_cps_exact_call3
     (really_input_bytes,
      ic,
      4,
      function(buf){
       return caml_cps_call3
               (Stdlib_Bytes[69],
                buf,
                0,
                function(_atN_){
                 var e_lfanew = uint64_of_uint32(_atN_);
                 return caml_cps_call3
                         (Stdlib[96][4],
                          ic,
                          e_lfanew,
                          function(_atO_){
                           return caml_cps_exact_call3
                                   (really_input_bytes,
                                    ic,
                                    header_size$0,
                                    function(buf){
                                     return caml_cps_call4
     (Stdlib_Bytes[8],
      buf,
      0,
      4,
      function(magic){
       if(! caml_string_notequal(magic, "PE\0\0"))
        return caml_cps_call3
                (Stdlib_Bytes[63],
                 buf,
                 4,
                 function(n){
                  a:
                  {
                   if(449 <= n){
                    if(34404 === n){var machine = 2; break a;}
                    if(43620 === n){var machine = 1; break a;}
                   }
                   else{
                    if(332 === n){var machine = 3; break a;}
                    if(448 <= n){var machine = 0; break a;}
                   }
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace
                             ([0, Error, [1, cst_MACHINETYPE, caml_int64_of_int32(n)]],
                              1));
                  }
                  var
                   bitness = 1 < machine - 1 >>> 0 ? 0 : 1,
                   d = [0, ic, 0, bitness];
                  return caml_cps_exact_call4
                          (get_uint16,
                           d,
                           buf,
                           6,
                           function(number_of_sections){
                            return caml_cps_exact_call4
                                    (get_uint16,
                                     d,
                                     buf,
                                     20,
                                     function(size_of_optional_header){
                                      return caml_cps_exact_call4
      (get_uint16,
       d,
       buf,
       22,
       function(characteristics){
        if(0 !== size_of_optional_header)
         return caml_cps_exact_call4
                 (load_bytes,
                  d,
                  caml_int64_add(e_lfanew, caml_int64_of_int32(24)),
                  size_of_optional_header,
                  function(buf){
                   return caml_cps_exact_call4
                           (get_uint16,
                            d,
                            buf,
                            0,
                            function(n){
                             function _atP_(image_base){
                              return caml_cps_exact_call4
                                      (load_bytes,
                                       d,
                                       caml_int64_add
(e_lfanew,
 caml_int64_of_int32(24 + size_of_optional_header | 0)),
                                       number_of_sections * 40 | 0,
                                       function(buf){
function mk(i, cont){
 var base = i * 40 | 0;
 return caml_cps_exact_call4
         (name_at,
          _l_,
          buf,
          base | 0,
          function(name){
           return caml_cps_exact_call5
                   (get_uint,
                    cst_virtual_size,
                    d,
                    buf,
                    base + 8 | 0,
                    function(virtual_size){
                     return caml_cps_exact_call4
                             (get_uint32,
                              d,
                              buf,
                              base + 12 | 0,
                              function(_atV_){
                               var virtual_address = uint64_of_uint32(_atV_);
                               return caml_cps_exact_call5
                                       (get_uint,
cst_size_of_raw_data,
d,
buf,
base + 16 | 0,
function(size_of_raw_data){
 return caml_cps_exact_call4
         (get_uint32,
          d,
          buf,
          base + 20 | 0,
          function(_atW_){
           var pointer_to_raw_data = uint64_of_uint32(_atW_);
           return cont
                   ([0,
                     name,
                     virtual_size,
                     virtual_address,
                     size_of_raw_data,
                     pointer_to_raw_data]);
          });
});
                              });
                    });
          });
}
return caml_cps_call3
        (Stdlib_Array[1],
         number_of_sections,
         mk,
         function(sections){
          var match = find_section$0(sections, cst_exptbl);
          function _atR_(symbols){
           var match = find_section$0(sections, cst_data);
           function _atU_(symbol_offset){
            function defines_symbol(symname, cont){
             return caml_cps_call3
                     (Stdlib_Array[21],
                      function(param, cont){
                       var name = param[1];
                       return cont(caml_string_equal(name, symname));
                      },
                      symbols,
                      cont);
            }
            return cont([0, defines_symbol, symbol_offset]);
           }
           if(! match) return caml_cps_call2(Stdlib_Fun[1], 0, _atU_);
           var
            match$0 = match[1],
            pointer_to_raw_data = match$0[5],
            virtual_address = match$0[3];
           return _atU_
                   (function(symname, cont){
                     var
                      match =
                        array_find
                         (function(param){
                           var name = param[1];
                           return caml_string_equal(name, symname);
                          },
                          symbols);
                     if(! match) return cont(0);
                     var address = match[1][2];
                     return cont
                             ([0,
                               caml_int64_add
                                (pointer_to_raw_data,
                                 caml_int64_sub
                                  (address, caml_int64_add(virtual_address, image_base)))]);
                    });
          }
          if(! match) return _atR_([0]);
          var
           exptbl = match[1],
           virtual_address = exptbl[3],
           pointer_to_raw_data = exptbl[5],
           size_of_raw_data = exptbl[4];
          return caml_cps_exact_call4
                  (load_bytes,
                   d,
                   pointer_to_raw_data,
                   size_of_raw_data,
                   function(buf){
                    return caml_cps_exact_call4
                            (get_word,
                             d,
                             buf,
                             0,
                             function(_atS_){
                              return caml_cps_exact_call3
                                      (uint64_to_int,
                                       cst_numexports,
                                       _atS_,
                                       function(numexports){
var word_size$0 = word_size(d);
function mk(i, cont){
 return caml_cps_exact_call4
         (get_word,
          d,
          buf,
          caml_mul(word_size$0, (2 * i | 0) + 1 | 0),
          function(address){
           return caml_cps_exact_call4
                   (get_word,
                    d,
                    buf,
                    caml_mul(word_size$0, (2 * i | 0) + 2 | 0),
                    function(nameoff){
                     var
                      off =
                        caml_int64_sub
                         (nameoff, caml_int64_add(virtual_address, image_base));
                     return caml_cps_exact_call3
                             (uint64_to_int,
                              cst_exptbl_name_offset,
                              off,
                              function(_atT_){
                               return caml_cps_exact_call4
                                       (name_at,
0,
buf,
_atT_,
function(name){return cont([0, name, address]);});
                              });
                    });
          });
}
return caml_cps_call3
        (Stdlib_Array[1], numexports, mk, _atR_);
                                       });
                             });
                   });
         });
                                       });
                             }
                             if(267 === n)
                              return caml_cps_exact_call4
                                      (get_uint32,
                                       d,
                                       buf,
                                       28,
                                       function(_atQ_){
var image_base = uint64_of_uint32(_atQ_);
return _atP_(image_base);
                                       });
                             if(523 === n)
                              return caml_cps_exact_call4(get_uint64, d, buf, 24, _atP_);
                             var raise = caml_pop_trap();
                             return raise
                                     (caml_maybe_attach_backtrace
                                       ([0,
 Error,
 [1, cst_optional_header_magic, caml_int64_of_int32(n)]],
1));
                            });
                  });
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Error, _k_], 1));
       });
                                     });
                           });
                 });
       var raise = caml_pop_trap();
       return raise
               (caml_maybe_attach_backtrace([0, Error, [0, magic]], 1));
      });
                                    });
                          });
                });
      });
                                    });
                         }
                         else if
                          (127 <= match
                           && 69 === match$0 && 76 === match$1 && 70 === match$2)
                          return caml_cps_call3
                                  (Stdlib[90],
                                   ic,
                                   0,
                                   function(_atX_){
                                    return caml_cps_exact_call3
    (really_input_bytes,
     ic,
     16,
     function(identification){
      var c = caml_bytes_get(identification, 4);
      a:
      if(3 > c){
       switch(c){
         case 1:
          var bitness = 0; break;
         case 2:
          var bitness = 1; break;
         default: break a;
       }
       var c$0 = caml_bytes_get(identification, 5);
       b:
       if(3 > c$0){
        switch(c$0){
          case 1:
           var endianness = 0; break;
          case 2:
           var endianness = 1; break;
          default: break b;
        }
        var d = [0, ic, endianness, bitness];
        return caml_cps_exact_call4
                (load_bytes,
                 d,
                 _g_,
                 40 + (3 * word_size(d) | 0) | 0,
                 function(buf){
                  var word_size$0 = word_size(d);
                  return caml_cps_exact_call4
                          (get_uint16,
                           d,
                           buf,
                           36 + (3 * word_size$0 | 0) | 0,
                           function(e_shnum){
                            return caml_cps_exact_call4
                                    (get_uint16,
                                     d,
                                     buf,
                                     34 + (3 * word_size$0 | 0) | 0,
                                     function(e_shentsize){
                                      return caml_cps_exact_call4
      (get_word,
       d,
       buf,
       24 + (2 * word_size$0 | 0) | 0,
       function(e_shoff){
        return caml_cps_exact_call4
                (get_uint16,
                 d,
                 buf,
                 38 + (3 * word_size$0 | 0) | 0,
                 function(e_shstrndx){
                  function _at0_(sections){
                   var match = find_section(sections, 1, cst_dynsym);
                   function _aub_(symbols){
                    function symbol_offset(symname, cont){
                     var match = find_symbol(symbols, symname);
                     if(! match) return cont(0);
                     var
                      match$0 = match[1],
                      st_shndx = match$0[3],
                      st_value = match$0[2],
                      _auf_ =
                        caml_int64_sub
                         (st_value,
                          caml_check_bound(sections, st_shndx)[1 + st_shndx][3]);
                     return cont
                             ([0, caml_int64_add(sections[1 + st_shndx][4], _auf_)]);
                    }
                    function defines_symbol(symname, cont){
                     var _aue_ = find_symbol(symbols, symname);
                     return caml_cps_call2(Stdlib_Option[11], _aue_, cont);
                    }
                    return cont([0, defines_symbol, symbol_offset]);
                   }
                   if(! match) return _aub_([0]);
                   var dynsym = match[1];
                   if(0 === dynsym[6]){
                    var raise = caml_pop_trap();
                    return raise
                            (caml_maybe_attach_backtrace([0, Error, _i_], 1));
                   }
                   var match$0 = find_section(sections, 0, cst_dynstr);
                   if(! match$0) return _aub_([0]);
                   var dynstr = match$0[1];
                   return caml_cps_exact_call3
                           (load_section_body,
                            d,
                            dynstr,
                            function(strtbl){
                             return caml_cps_exact_call3
                                     (load_section_body,
                                      d,
                                      dynsym,
                                      function(buf){
                                       var word_size$0 = word_size(d);
                                       function mk(i, cont){
var base = caml_mul(i, dynsym[6]);
return caml_cps_exact_call5
        (get_uint,
         cst_st_name,
         d,
         buf,
         base,
         function(_aud_){
          return caml_cps_exact_call4
                  (name_at,
                   0,
                   strtbl,
                   _aud_,
                   function(st_name){
                    return caml_cps_exact_call4
                            (get_word,
                             d,
                             buf,
                             base + word_size$0 | 0,
                             function(st_value){
                              var off = d[3] ? 6 : 14;
                              return caml_cps_exact_call4
                                      (get_uint16,
                                       d,
                                       buf,
                                       base + off | 0,
                                       function(st_shndx){
return cont([0, st_name, st_value, st_shndx]);
                                       });
                             });
                   });
         });
                                       }
                                       var _auc_ = caml_div(dynsym[5], dynsym[6]);
                                       return caml_cps_call3(Stdlib_Array[1], _auc_, mk, _aub_);
                                      });
                            });
                  }
                  if(caml_equal(e_shoff, _h_)) return _at0_([0]);
                  var
                   buf =
                     [246,
                      function(_aua_, cont){
                       return caml_cps_exact_call4
                               (load_bytes, d, e_shoff, e_shentsize, cont);
                      }],
                   word_size$0 = word_size(d);
                  function _at2_(e_shnum){
                   function _at8_(e_shstrndx){
                    return caml_cps_exact_call4
                            (load_bytes,
                             d,
                             e_shoff,
                             caml_mul(e_shnum, e_shentsize),
                             function(buf){
                              var word_size$0 = word_size(d);
                              function mk(i, cont){
                               var base = caml_mul(i, e_shentsize);
                               return caml_cps_exact_call5
                                       (get_uint,
cst_sh_name,
d,
buf,
base | 0,
function(sh_name){
 return caml_cps_exact_call4
         (get_uint32,
          d,
          buf,
          base + 4 | 0,
          function(match){
           var
            sh_type =
              caml_notequal(match, 3)
               ? caml_notequal(match, 11) ? 2 : 1
               : 0;
           return caml_cps_exact_call4
                   (get_word,
                    d,
                    buf,
                    (base + 8 | 0) + word_size$0 | 0,
                    function(sh_addr){
                     return caml_cps_exact_call4
                             (get_word,
                              d,
                              buf,
                              (base + 8 | 0) + (2 * word_size$0 | 0) | 0,
                              function(sh_offset){
                               return caml_cps_exact_call4
                                       (get_word,
d,
buf,
(base + 8 | 0) + (3 * word_size$0 | 0) | 0,
function(_at__){
 return caml_cps_exact_call3
         (uint64_to_int,
          cst_sh_size,
          _at__,
          function(sh_size){
           return caml_cps_exact_call4
                   (get_word,
                    d,
                    buf,
                    (base + 16 | 0) + (5 * word_size$0 | 0) | 0,
                    function(_at$_){
                     return caml_cps_exact_call3
                             (uint64_to_int,
                              cst_sh_entsize,
                              _at$_,
                              function(sh_entsize){
                               return cont
                                       ([0,
 sh_name,
 sh_type,
 sh_addr,
 sh_offset,
 sh_size,
 sh_entsize,
 cst$0]);
                              });
                    });
          });
});
                              });
                    });
          });
});
                              }
                              return caml_cps_call3
                                      (Stdlib_Array[1],
                                       e_shnum,
                                       mk,
                                       function(sections){
return 0 === e_shstrndx
        ? _at0_(sections)
        : caml_cps_exact_call3
          (load_section_body,
           d,
           caml_check_bound(sections, e_shstrndx)[1 + e_shstrndx],
           function(shstrtbl){
            function set_name(sec, cont){
             return caml_cps_exact_call4
                     (name_at,
                      0,
                      shstrtbl,
                      sec[1],
                      function(sh_name_str){
                       return cont
                               ([0,
                                 sec[1],
                                 sec[2],
                                 sec[3],
                                 sec[4],
                                 sec[5],
                                 sec[6],
                                 sh_name_str]);
                      });
            }
            return caml_cps_call3
                    (Stdlib_Array[13], set_name, sections, _at0_);
           });
                                       });
                             });
                   }
                   if(65535 !== e_shstrndx) return _at8_(e_shstrndx);
                   var
                    _at6_ = caml_obj_tag(buf),
                    _at5_ = 8 + (4 * word_size$0 | 0) | 0;
                   function _at7_(_at9_){
                    return caml_cps_exact_call5
                            (get_uint, cst_e_shstrndx, d, _at9_, _at5_, _at8_);
                   }
                   if(250 === _at6_) return _at7_(buf[1]);
                   if(246 !== _at6_ && 244 !== _at6_) return _at7_(buf);
                   return caml_cps_call2(CamlinternalLazy[2], buf, _at7_);
                  }
                  if(0 !== e_shnum) return _at2_(e_shnum);
                  var
                   _atZ_ = caml_obj_tag(buf),
                   _atY_ = 8 + (3 * word_size$0 | 0) | 0;
                  function _at1_(_at3_){
                   return caml_cps_exact_call4
                           (get_word,
                            d,
                            _at3_,
                            _atY_,
                            function(_at4_){
                             return caml_cps_exact_call3
                                     (uint64_to_int, cst_e_shnum, _at4_, _at2_);
                            });
                  }
                  if(250 === _atZ_) return _at1_(buf[1]);
                  if(246 !== _atZ_ && 244 !== _atZ_) return _at1_(buf);
                  return caml_cps_call2(CamlinternalLazy[2], buf, _at1_);
                 });
       });
                                     });
                           });
                 });
       }
       var raise$0 = caml_pop_trap();
       return raise$0
               (caml_maybe_attach_backtrace
                 ([0, Error, [1, cst_ELFDATA, caml_int64_of_int32(c$0)]], 1));
      }
      var raise = caml_pop_trap();
      return raise
              (caml_maybe_attach_backtrace
                ([0, Error, [1, cst_ELFCLASS, caml_int64_of_int32(c)]], 1));
     });
                                   });
                        }
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace([0, Error, [0, magic]], 1));
                       });
             });
   }
   function read(filename, cont){
    caml_push_trap
     (function(exn){
       if(exn === Stdlib[12]) return cont(_m_);
       if(exn[1] === Error){var err = exn[2]; return cont([1, err]);}
       var
        raise = caml_pop_trap(),
        exn$0 = caml_maybe_attach_backtrace(exn, 0);
       return raise(exn$0);
      });
    return caml_cps_call2
            (Stdlib[80],
             filename,
             function(ic){
              return caml_cps_call3
                      (Stdlib_Fun[4],
                       function(param, cont){
                        return caml_cps_call2(Stdlib[94], ic, cont);
                       },
                       function(param, cont){
                        return caml_cps_exact_call2(f, ic, cont);
                       },
                       function(t){caml_pop_trap(); return cont([0, t]);});
             });
   }
   function defines_symbol(param, symname, cont){
    var defines_symbol = param[1];
    return caml_cps_call2(defines_symbol, symname, cont);
   }
   function symbol_offset(param, symname, cont){
    var symbol_offset = param[2];
    return caml_cps_call2(symbol_offset, symname, cont);
   }
   var
    Dynlink_compilerlibs_Binutils =
      [0, error_to_string, read, defines_symbol, symbol_offset];
   caml_register_global
    (1383, Dynlink_compilerlibs_Binutils, "Dynlink_compilerlibs.Binutils");
   var
    _n_ = caml_callback(Stdlib[28], [cst$2, ocamlc_cppflags]),
    _o_ = caml_callback(Stdlib[28], [ocamlc_cflags, _n_]),
    _p_ = caml_callback(Stdlib[28], [cst$3, _o_]),
    bytecomp_c_compiler = caml_callback(Stdlib[28], [c_compiler, _p_]),
    _q_ = caml_callback(Stdlib[28], [cst$4, ocamlopt_cppflags]),
    _r_ = caml_callback(Stdlib[28], [ocamlopt_cflags, _q_]),
    _s_ = caml_callback(Stdlib[28], [cst$5, _r_]),
    native_c_compiler = caml_callback(Stdlib[28], [c_compiler, _s_]),
    supports_shared_libraries = 1;
   a:
   {
    var
     _aC_ = [0, [2, 0, [11, cst$119, [15, [12, 10, 0]]]], "%s: %a\n"],
     _az_ = [0, [2, 0, 0], cst_s$1],
     _aA_ = [0, [4, 0, 0, 0, 0], "%d"],
     _aB_ = [0, [9, 0, 0], "%B"],
     cst_flexlink = "flexlink",
     cst_OCAML_FLEXLINK = "OCAML_FLEXLINK",
     cst_maindll = " -maindll",
     cst_exe = " -exe",
     cst_cc_shared_undefined_dynami = cst_cc_shared_undefined_dynami$1,
     cst_cc_O2_fno_strict_aliasing_ =
       "cc -O2 -fno-strict-aliasing -fwrapv -pthread   ",
     cst_cc_shared_undefined_dynami$0 = cst_cc_shared_undefined_dynami$1,
     cst_mli = ".mli",
     cst_a_out = "a.out",
     cst_camlprog = "camlprog",
     cst_linear_magic_number = "linear_magic_number",
     cst_cmt_magic_number = "cmt_magic_number",
     cst_cmxs_magic_number = "cmxs_magic_number",
     cst_ast_intf_magic_number = "ast_intf_magic_number",
     cst_ast_impl_magic_number = "ast_impl_magic_number",
     cst_cmxa_magic_number = "cmxa_magic_number",
     cst_cmx_magic_number = "cmx_magic_number",
     cst_cma_magic_number = "cma_magic_number",
     cst_cmo_magic_number = "cmo_magic_number",
     cst_cmi_magic_number = "cmi_magic_number",
     cst_exec_magic_number = "exec_magic_number",
     cst_naked_pointers = "naked_pointers",
     cst_supports_shared_libraries = "supports_shared_libraries",
     cst_windows_unicode = "windows_unicode",
     cst_afl_instrument = "afl_instrument",
     cst_function_sections = "function_sections",
     cst_flat_float_array = "flat_float_array",
     cst_default_safe_string = "default_safe_string",
     cst_safe_string = "safe_string",
     cst_flambda = cst_flambda$1,
     cst_target = "target",
     cst_host = "host",
     cst_systhread_supported = "systhread_supported",
     cst_default_executable_name = "default_executable_name",
     cst_os_type = "os_type",
     cst_ext_dll = "ext_dll",
     cst_ext_lib = "ext_lib",
     cst_ext_asm = "ext_asm",
     cst_ext_obj = "ext_obj",
     cst_ext_exe = "ext_exe",
     cst_with_frame_pointers = "with_frame_pointers",
     cst_asm_cfi_supported = "asm_cfi_supported",
     cst_asm = "asm",
     cst_system = "system",
     cst_word_size = "word_size",
     cst_int_size = "int_size",
     cst_model = "model",
     cst_architecture = "architecture",
     cst_native_pack_linker = "native_pack_linker",
     cst_native_c_libraries = "native_c_libraries",
     cst_bytecomp_c_libraries = "bytecomp_c_libraries",
     cst_native_c_compiler = "native_c_compiler",
     cst_bytecomp_c_compiler = "bytecomp_c_compiler",
     cst_ocamlopt_cppflags = "ocamlopt_cppflags",
     cst_ocamlopt_cflags = "ocamlopt_cflags",
     cst_ocamlc_cppflags = "ocamlc_cppflags",
     cst_ocamlc_cflags = "ocamlc_cflags",
     cst_c_compiler = "c_compiler",
     cst_ccomp_type = "ccomp_type",
     cst_standard_library = "standard_library",
     cst_standard_library_default = "standard_library_default",
     cst_version = "version",
     cst_Shortcut = "Shortcut",
     _aG_ =
       [0,
        [11, "invalid key/value pair ", [3, 0, [11, ", no '=' separator", 0]]],
        "invalid key/value pair %S, no '=' separator"],
     _aF_ =
       [0,
        [11, "invalid character '", [0, [11, "' in key or value", 0]]],
        "invalid character '%c' in key or value"],
     _aD_ =
       [0,
        [11,
         "invalid encoded string ",
         [3, 0, [11, " (trailing '", [12, 37, [11, "')", 0]]]]],
        "invalid encoded string %S (trailing '%%')"],
     _aE_ =
       [0,
        [11,
         "invalid ",
         [12, 37, [11, "-escaped character '", [0, [12, 39, 0]]]]],
        "invalid %%-escaped character '%c'"],
     _aK_ = [0, cst_dynlink_compilerlibs_misc_, 92, 10],
     _bl_ = [0, 0],
     _bj_ =
       [0,
        [11,
         "We expected a ",
         [2,
          0,
          [11,
           cst$120,
           [2,
            0,
            [11,
             ") but got a ",
             [2, 0, [11, cst$120, [2, 0, [11, ") instead.", 0]]]]]]]]],
        "We expected a %s (%s) but got a %s (%s) instead."],
     cst_an_older = cst_an_older$1,
     cst_a_newer = cst_a_newer$1,
     _bk_ =
       [0,
        [11,
         "This seems to be a ",
         [2,
          0,
          [11,
           cst$120,
           [2, 0, [11, ") for ", [2, 0, [11, cst_version_of_OCaml, 0]]]]]]],
        "This seems to be a %s (%s) for %s version of OCaml."],
     _bi_ = [0, cst_dynlink_compilerlibs_misc_, 1085, 14],
     _bh_ = [0, [2, 0, [4, 0, [0, 2, 3], 0, 0]], "%s%03d"],
     cst_is_empty = "is empty",
     cst_is_truncated = "is truncated",
     cst_has_a_different_format = "has a different format",
     cst_object_file = "object file",
     _bg_ =
       [0,
        [11,
         "We expected a valid ",
         [2, 0, [11, ", but the file ", [2, 0, [12, 46, 0]]]]],
        "We expected a valid %s, but the file %s."],
     cst_executable = "executable",
     cst_compiled_interface_file = "compiled interface file",
     cst_bytecode_object_file = "bytecode object file",
     cst_bytecode_library = "bytecode library",
     cst_dynamic_native_library = "dynamic native library",
     cst_compiled_typedtree_file = "compiled typedtree file",
     cst_serialized_implementation_ = "serialized implementation AST",
     cst_serialized_interface_AST = "serialized interface AST",
     _be_ =
       [0,
        [11, "native compilation unit description (", [2, 0, [12, 41, 0]]],
        "native compilation unit description (%s)"],
     _bf_ =
       [0,
        [11, "static native library (", [2, 0, [12, 41, 0]]],
        "static native library (%s)"],
     cst_flambda$0 = cst_flambda$1,
     cst_non_flambda = "non flambda",
     cst_exec = "exec",
     cst_cmi = "cmi",
     cst_cmo = "cmo",
     cst_cma = "cma",
     cst_cmxs = "cmxs",
     cst_cmt = "cmt",
     cst_ast_impl = "ast_impl",
     cst_ast_intf = "ast_intf",
     cst_cmx = "cmx",
     cst_cmxa = "cmxa",
     cst_Caml1999X = cst_Caml1999X$0,
     cst_Caml1999I = cst_Caml1999I$0,
     cst_Caml1999O = cst_Caml1999O$0,
     cst_Caml1999A = cst_Caml1999A$0,
     cst_Caml1999D = cst_Caml1999D$0,
     cst_Caml1999T = cst_Caml1999T$0,
     cst_Caml1999M = cst_Caml1999M$0,
     cst_Caml1999N = cst_Caml1999N$0,
     cst_Caml1999y = cst_Caml1999y$0,
     cst_Caml1999Y = cst_Caml1999Y$0,
     cst_Caml1999z = cst_Caml1999z$0,
     cst_Caml1999Z = cst_Caml1999Z$0,
     _a$_ = [0, 2],
     _ba_ = [0, 7],
     _bb_ = [0, 6],
     _bc_ = [0, 1],
     _bd_ = [0, 3],
     _a6_ = [0, [1, [0, 1]]],
     _a7_ = [0, [0, [0, 1]]],
     _a8_ = [0, [1, [0, 0]]],
     _a9_ = [0, [0, [0, 0]]],
     _a__ = [0, 0],
     _a5_ = [0, 4],
     _a4_ = [0, 5],
     _aX_ = [0, [15, [17, 4, 0]], "%a@."],
     _aW_ =
       [0,
        [11, "--debug-prefix-map ", [2, 0, [12, 61, [2, 0, 0]]]],
        "--debug-prefix-map %s=%s"],
     _aV_ =
       [0,
        [11,
         "Invalid value for the environment variable BUILD_PATH_PREFIX_MAP: ",
         [2, 0, 0]],
        "Invalid value for the environment variable BUILD_PATH_PREFIX_MAP: %s"],
     _aS_ = [0, [11, "...", [17, [0, cst$121, 0, 0], 0]], "...@,"],
     _aT_ =
       [0,
        [2,
         [1, 1],
         [12, 32, [2, 0, [12, 32, [2, 0, [17, [0, cst$121, 0, 0], 0]]]]]],
        "%*s %s %s@,"],
     _aR_ = [0, [18, [1, [0, [11, cst_v, 0], cst_v]], 0], cst_v$0],
     _aU_ = [0, [17, 0, 0], cst$123],
     _aQ_ = [0, 1, 0],
     cst_m = "m",
     cst_1$0 = cst_1$1,
     cst_0$0 = cst_0$2,
     cst_3$0 = cst_3$1,
     cst_4$0 = cst_4$1,
     cst_0 = cst_0$2,
     cst_1 = cst_1$1,
     cst_2 = "2",
     cst_3 = cst_3$1,
     cst_4 = cst_4$1,
     cst_5 = "5",
     cst_6 = "6",
     cst_7 = "7",
     cst_st = "st",
     cst_nd = "nd",
     cst_rd = "rd",
     cst_th = "th",
     _aO_ = [0, [17, 2, 0], "@?"],
     cst_or = " or ",
     _aP_ =
       [0,
        [17,
         3,
         [11,
          "Hint: Did you mean ",
          [2, 0, [2, 0, [2, 0, [12, 63, [17, 2, 0]]]]]]],
        "@\nHint: Did you mean %s%s%s?@?"],
     _aN_ = [0, 7, 0],
     cst_tmp = ".tmp",
     _aM_ = [0, 438],
     cst_Misc_Stdlib_Array_exists2 = "Misc.Stdlib.Array.exists2",
     _aL_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11, "(Some", [17, [0, cst$128, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
        "@[(Some@ %a)@]"],
     cst_None = cst_None$2,
     cst_split_at = "split_at",
     cst_map2_prefix = "map2_prefix",
     _aJ_ = [0, [2, 0, 0], cst_s$1],
     _aH_ = [0, [17, 4, 0], "@."],
     _aI_ = [0, [17, 2, [11, ">> Fatal error: ", 0]], "@?>> Fatal error: "],
     cst_Dynlink_compilerlibs_Misc_ = "Dynlink_compilerlibs.Misc.Fatal_error",
     cst_Dynlink_compilerlibs_Misc_$0 =
       "Dynlink_compilerlibs.Misc.Color.Style",
     _aY_ = [0, 5, [0, 6, [0, 7, 0]]],
     _a3_ = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
     _bx_ = [0, [15, 0], cst_a],
     _bv_ = [0, [17, [0, cst$128, 1, 0], [15, 0]], "@ %a"],
     _bw_ =
       [0,
        [18,
         [1, [0, [11, cst_1$2, 0], cst_1$2]],
         [12,
          123,
          [18,
           [1, [0, 0, cst$117]],
           [15, [17, [0, cst$128, 1, 0], [17, 0, [12, 125, [17, 0, 0]]]]]]]],
        cst_1_a],
     _bt_ = [0, [15, [12, 32, 0]], "%a "],
     _bs_ = [0, [11, cst$129, 0], cst$129],
     _bu_ = [0, [12, 41, 0], cst$130],
     _bq_ =
       [0,
        [17,
         [0, cst$128, 1, 0],
         [12,
          40,
          [18,
           [1, [0, 0, cst$117]],
           [15, [17, [0, cst$128, 1, 0], [15, [17, 0, [12, 41, 0]]]]]]]],
        "@ (@[%a@ %a@])"],
     _br_ =
       [0,
        [18,
         [1, [0, [11, cst_1$2, 0], cst_1$2]],
         [12,
          123,
          [18,
           [1, [0, 0, cst$117]],
           [15, [17, [0, cst$128, 1, 0], [17, 0, [12, 125, [17, 0, 0]]]]]]]],
        cst_1_a],
     _bo_ =
       [0,
        [11,
         cst_Map_disjoint_union,
         [15, [11, " => ", [15, [11, " <> ", [15, 0]]]]]],
        "Map.disjoint_union %a => %a <> %a"],
     _bp_ =
       [0, [11, cst_Map_disjoint_union, [15, 0]], "Map.disjoint_union %a"],
     _bn_ =
       [0,
        [11,
         cst$120,
         [15, [11, cst$126, [17, [0, cst$128, 1, 0], [15, [12, 41, 0]]]]]],
        " (%a, @ %a)"],
     _bm_ =
       [0, [11, cst$120, [15, [11, cst$126, [15, [12, 41, 0]]]]], " (%a, %a)"],
     _bC_ = [0, [8, [0, 0, 0], 0, 0, 0], "%f"],
     _bB_ =
       [0,
        [11,
         "Int16.of_int64_exn: ",
         [7, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
        "Int16.of_int64_exn: %Ld is out of range"],
     _bA_ =
       [0,
        [11, "Int16.of_int_exn: ", [4, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
        "Int16.of_int_exn: %d is out of range"],
     _bz_ =
       [0,
        [11, "Int8.of_int_exn: ", [4, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
        "Int8.of_int_exn: %d is out of range"],
     _by_ = [0, [4, 3, 0, 0, 0], "%i"],
     _bE_ = [0, [2, 0, [11, cst$119, [2, 0, 0]]], "%s: %s"],
     _bD_ = [0, "dynlink_compilerlibs/arg_helper.ml", 78, 12],
     cst_Missing_key_in_argument_sp = "Missing key in argument specification",
     cst_Dynlink_compilerlibs_Arg_h =
       "Dynlink_compilerlibs.Arg_helper.Make(S).Parse_failure",
     _bI_ = [0, cst_dynlink_compilerlibs_local, 68, 2],
     _bH_ = [0, cst_dynlink_compilerlibs_local, 47, 2],
     _bG_ = [0, cst_dynlink_compilerlibs_local, 41, 2],
     _bF_ = [0, cst_dynlink_compilerlibs_local, 32, 2],
     _bP_ = [0, cst_dynlink_compilerlibs_load_, 168, 2],
     _bO_ = [0, cst_dynlink_compilerlibs_load_, 158, 2],
     _bM_ = [0, cst_dynlink_compilerlibs_load_, 129, 2],
     _bL_ = [0, cst_dynlink_compilerlibs_load_, 110, 2],
     _bK_ = [0, cst_dynlink_compilerlibs_load_, 98, 2],
     _bJ_ = [0, cst_dynlink_compilerlibs_load_, 71, 2],
     _bN_ = [0, "dynlink", [0, "str", [0, "unix", 0]]],
     _ca_ =
       [0,
        [11,
         cst_Usage,
         [2,
          0,
          [11,
           " <options> <files>\nTry '",
           [2, 0, [11, " --help' for more information.", 0]]]]],
        "Usage: %s <options> <files>\nTry '%s --help' for more information."],
     _b9_ =
       [0,
        [11,
         "Warning: compiler argument ",
         [2, 0, [11, " is already defined:\n", 0]]],
        "Warning: compiler argument %s is already defined:\n"],
     _b__ =
       [0,
        [11, "   First definition: ", [2, 0, [12, 10, 0]]],
        "   First definition: %s\n"],
     _b$_ =
       [0,
        [11, "   New definition: ", [2, 0, [12, 10, 0]]],
        "   New definition: %s\n"],
     _b8_ = [0, 3],
     cst_Not_supported = "Not supported",
     _b4_ = [0, 1],
     _b5_ = [0, 2],
     _b6_ = [0, 0],
     _b7_ = [0, 3],
     cst_parsing = cst_parsing$0,
     cst_typing = cst_typing$0,
     cst_scheduling = cst_scheduling$0,
     cst_emit = cst_emit$0,
     cst_cmir = ".cmir-",
     _b2_ = [0, 1],
     _b3_ = [0, 0],
     cst_short = cst_short$0,
     cst_contextual = cst_contextual$0,
     _bZ_ = [0, 2],
     _b0_ = [0, 0],
     _b1_ = [0, 1],
     cst_auto = cst_auto$0,
     cst_always = cst_always$0,
     cst_never = cst_never$0,
     _bY_ = [0, "dynlink_compilerlibs/clflags.ml", 359, 2],
     _bR_ = [0, 1],
     _bS_ = [0, 25.],
     _bT_ = [0, 2],
     _bU_ = [0, 50.],
     _bV_ = [0, 1],
     _bW_ = [0, 3],
     _bX_ = [0, 0.],
     cst_OCAML_COLOR = "OCAML_COLOR",
     cst_expected_auto_always_or_ne = 'expected "auto", "always" or "never"',
     cst_OCAML_ERROR_STYLE = "OCAML_ERROR_STYLE",
     cst_expected_contextual_or_sho = 'expected "contextual" or "short"',
     cst_other = cst_other$0,
     _ce_ = [0, [2, 0, [2, 0, [12, 32, [2, 0, [17, 3, 0]]]]], "%s%s %s@\n"],
     _cc_ = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
     _cd_ = [0, [2, [1, 1], 0], "%*s"],
     cst_s = cst_s$2,
     _cb_ = [0, [8, [0, 0, 0], [1, 2], [0, 3], 0], "%0*.03f"],
     cst_GB = "GB",
     cst_MB = "MB",
     cst_kB = "kB",
     cst_B = "B",
     _cg_ =
       [0,
        [11,
         " Print performance information for each pass\n    The columns are: ",
         [2, 0, [12, 46, 0]]],
        " Print performance information for each pass\n    The columns are: %s."],
     cst_Dynlink_compilerlibs_Consi =
       "Dynlink_compilerlibs.Consistbl.Make(Module_name).Inconsistency",
     cst_Dynlink_compilerlibs_Consi$0 =
       "Dynlink_compilerlibs.Consistbl.Make(Module_name).Not_available",
     cst_4m = "\x1b[4m",
     cst_0m = "\x1b[0m",
     _ci_ = [0, [11, cst$125, [4, 0, 0, 0, [12, 66, [10, 0]]]], "\x1b[%dB%!"],
     _ch_ = [0, [11, cst$125, [4, 0, 0, 0, [12, 65, [10, 0]]]], "\x1b[%dA%!"],
     _eW_ =
       [0,
        [4, 3, [0, 1, 3], 0, [2, 0, [12, 32, [2, 0, [15, [12, 10, 0]]]]]],
        "%3i%s %s%a\n"],
     cst_A_all_warnings = "  A all warnings",
     _eX_ =
       [0,
        [11, cst$132, [0, [11, " warnings ", [2, 0, [11, cst$134, 0]]]]],
        "  %c warnings %s.\n"],
     _eY_ =
       [0,
        [11,
         cst$132,
         [0, [11, " Alias for warning ", [4, 3, 0, 0, [11, cst$134, 0]]]]],
        "  %c Alias for warning %i.\n"],
     _eV_ =
       [0,
        [11,
         " (since ",
         [4, 0, 0, 0, [12, 46, [4, 0, [1, 2], 0, [12, 41, 0]]]]],
        " (since %d.%0*d)"],
     cst_Expected_signature = "Expected signature",
     cst_Definition = "Definition",
     _eU_ = [0, [4, 0, 0, 0, [11, cst$133, [2, 0, [12, 93, 0]]]], "%d [%s]"],
     cst_this_is_the_start_of_a_com =
       "this `(*' is the start of a comment.\nHint: Did you forget spaces when writing the infix operator `( * )'?",
     cst_this_is_not_the_end_of_a_c = "this is not the end of a comment.",
     cst_this_function_application_ =
       "this function application is partial,\nmaybe some arguments are missing.",
     cst_this_expression_should_hav = "this expression should have type unit.",
     cst_this_match_case_is_unused = "this match case is unused.",
     cst_this_sub_pattern_is_unused = "this sub-pattern is unused.",
     cst_illegal_backslash_escape_i = "illegal backslash escape in string.",
     cst_this_optional_argument_can =
       "this optional argument cannot be erased.",
     cst_this_argument_will_not_be_ =
       "this argument will not be used by the function.",
     cst_this_statement_never_retur =
       "this statement never returns (or has an unsound type.)",
     cst_all_the_fields_are_explici =
       "all the fields are explicitly listed in this record:\nthe 'with' clause is useless.",
     cst_this_pattern_matching_is_n =
       "this pattern-matching is not exhaustive.\nAll clauses in this pattern-matching are guarded.",
     cst_wildcard_pattern_given_as_ =
       "wildcard pattern given as argument to a constant constructor",
     cst_unescaped_end_of_line_in_a =
       "unescaped end-of-line in a string constant (non-portable code)",
     cst_unused_rec_flag = "unused rec flag.",
     _ex_ =
       [0,
        [11,
         "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. ",
         [16, 0]],
        "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. %t"],
     cst_this_match_case_is_unreach =
       "this match case is unreachable.\nConsider replacing it with a refutation case '<pat> -> .'",
     cst_A_potential_assignment_to_ =
       "A potential assignment to a non-mutable value was detected \nin this source file.  Such assignments may generate incorrect code \nwhen using Flambda.",
     cst_Type_constraints_do_not_ap =
       "Type constraints do not apply to GADT cases of variant types.",
     cst_option_unsafe_used_with_a_ =
       "option -unsafe used with a preprocessor returning a syntax tree",
     cst_This_pattern_depends_on_mu =
       "This pattern depends on mutable state.\nIt prevents the remaining arguments from being uncurried, which will cause additional closure allocations.",
     cst_Cannot_find_interface_file = "Cannot find interface file.",
     cst_This_function_is_marked_ta =
       "This function is marked @tail_mod_cons\nbut is never applied in TMC position.",
     cst_This_call_is_in_tail_modul =
       "This call\nis in tail-modulo-cons positionin a TMC function,\nbut the function called is not itself specialized for TMC,\nso the call will not be transformed into a tail call.\nPlease either mark the called function with the [@tail_mod_cons]\nattribute, or mark this call with the [@tailcall false] attribute\nto make its non-tailness explicit.",
     cst_this_pattern_matching_is_f$0 = "this pattern-matching is fragile.",
     cst_this_pattern_matching_is_f =
       "this pattern-matching is fragile.\nIt will remain exhaustive when constructors are added to type ",
     cst_were_omitted_in_the_applic =
       " were omitted in the application of this function.",
     cst_labels = "labels ",
     cst_was_omitted_in_the_applica =
       " was omitted in the application of this function.",
     cst_label = "label ",
     _ey_ = [0, cst_dynlink_compilerlibs_warni, 885, 25],
     cst_the_following_methods_are_ =
       "the following methods are overridden by the class",
     cst_is_overridden = cst_is_overridden$1,
     cst_the_method = "the method ",
     _ez_ = [0, cst_dynlink_compilerlibs_warni, 897, 26],
     cst_this_pattern_matching_is_n$1 =
       "this pattern-matching is not exhaustive.",
     cst_this_pattern_matching_is_n$0 =
       "this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\n",
     cst_Either_bind_these_labels_e =
       "\nEither bind these labels explicitly or add '; _' to the pattern.",
     cst_the_following_labels_are_n =
       "the following labels are not bound in this record pattern:\n",
     cst_the_following_instance_var =
       "the following instance variables are overridden by the class",
     cst_is_overridden$0 = cst_is_overridden$1,
     cst_the_instance_variable = "the instance variable ",
     _eA_ = [0, cst_dynlink_compilerlibs_warni, 915, 37],
     cst_the_following_private_meth =
       "the following private methods were made public implicitly:\n ",
     cst_is_not_declared = " is not declared.",
     cst_the_virtual_method = "the virtual method ",
     cst_is_not_principal = " is not principal.",
     cst_without_principality = " without principality.",
     cst_is_not_a_valid_module_name = '" is not a valid module name.',
     cst_bad_source_file_name = 'bad source file name: "',
     _eB_ =
       [0,
        [11,
         cst_the,
         [2,
          0,
          [12,
           32,
           [2,
            0,
            [11,
             " is defined in both types ",
             [2, 0, [11, cst_and, [2, 0, [12, 46, 0]]]]]]]]],
        "the %s %s is defined in both types %s and %s."],
     _eC_ =
       [0,
        [11,
         "files ",
         [2,
          0,
          [11,
           cst_and,
           [2, 0, [11, " both define a module named ", [2, 0, 0]]]]]],
        "files %s and %s both define a module named %s"],
     cst_unused_value = "unused value ",
     cst_unused_open = "unused open ",
     cst_unused_type = "unused type ",
     cst_unused_for_loop_index = "unused for-loop index ",
     cst_unused_ancestor_variable = "unused ancestor variable ",
     cst_unused_constructor = "unused constructor ",
     cst_is_never_used_to_build_val = cst_is_never_used_to_build_val$3,
     cst_constructor = cst_constructor$1,
     cst_is_never_used_to_build_val$0 =
       " is never used to build values.\nIts type is exported as a private type.",
     cst_constructor$0 = cst_constructor$1,
     cst_exception = "exception",
     cst_extension_constructor = cst_extension_constructor$2,
     cst_unused = "unused ",
     cst_is_never_used_to_build_val$1 = cst_is_never_used_to_build_val$3,
     cst_is_never_used_to_build_val$2 =
       " is never used to build values.\nIt is exported or rebound as a private extension.",
     cst_It_is_not_visible_in_the_c =
       ".\nIt is not visible in the current scope, and will not \nbe selected if the type becomes unknown.",
     cst_was_selected_from_type = " was selected from type ",
     cst_They_will_not_be_selected_ =
       ".\nThey will not be selected if the type becomes unknown.",
     cst_contains_fields_that_are_n =
       " contains fields that are \nnot visible in the current scope: ",
     cst_this_record_of_type = "this record of type ",
     _eD_ = [0, cst_dynlink_compilerlibs_warni, 984, 39],
     cst_The_first_one_was_selected$0 = cst_The_first_one_was_selected$1,
     cst_belongs_to_several_types = " belongs to several types: ",
     cst_The_first_one_was_selected = cst_The_first_one_was_selected$1,
     cst_these_field_labels_belong_ =
       "these field labels belong to several types: ",
     _eE_ = [0, cst_dynlink_compilerlibs_warni, 994, 40],
     cst_relies_on_type_directed_di =
       " relies on type-directed disambiguation,\nit will not compile with OCaml 4.00 or earlier.",
     cst_this_use_of = "this use of ",
     cst_is_not_optional = " is not optional.",
     cst_the_label = "the label ",
     _eF_ =
       [0,
        [11,
         cst_this_open_statement_shadow,
         [2,
          0,
          [11, " identifier ", [2, 0, [11, cst_which_is_later_used, 0]]]]],
        "this open statement shadows the %s identifier %s (which is later used)"],
     _eG_ =
       [0,
        [11,
         cst_this_open_statement_shadow,
         [2, 0, [12, 32, [2, 0, [11, cst_which_is_later_used, 0]]]]],
        "this open statement shadows the %s %s (which is later used)"],
     _eH_ =
       [0,
        [11, "illegal environment variable ", [2, 0, [11, " : ", [2, 0, 0]]]],
        "illegal environment variable %s : %s"],
     _eI_ =
       [0,
        [11,
         "illegal payload for attribute '",
         [2, 0, [11, "'.\n", [2, 0, 0]]]],
        "illegal payload for attribute '%s'.\n%s"],
     cst_s$0 = cst_s$2,
     _eJ_ =
       [0,
        [11,
         "implicit elimination of optional argument",
         [2, 0, [12, 32, [2, 0, 0]]]],
        "implicit elimination of optional argument%s %s"],
     _eK_ =
       [0,
        [11,
         "no valid cmi file was found in path for module ",
         [2, 0, [11, ". ", [2, 0, 0]]]],
        "no valid cmi file was found in path for module %s. %s"],
     cst_no_cmi_file_was_found_in_p =
       "no cmi file was found in path for module ",
     cst_unattached_documentation_c =
       "unattached documentation comment (ignored)",
     cst_ambiguous_documentation_co = "ambiguous documentation comment",
     cst_tailcall = "tailcall",
     cst_non_tailcall = "non-tailcall",
     _eL_ = [0, [11, "expected ", [2, 0, 0]], "expected %s"],
     _eM_ =
       [0,
        [11,
         cst_the,
         [3, 0, [11, " attribute cannot appear in this context", 0]]],
        "the %S attribute cannot appear in this context"],
     _eN_ =
       [0,
        [11,
         cst_the,
         [3,
          0,
          [11, " attribute is used more than once on this expression", 0]]],
        "the %S attribute is used more than once on this expression"],
     _eO_ = [0, [11, "Cannot inline: ", [2, 0, 0]], "Cannot inline: %s"],
     cst_appear = " appear ",
     cst_variables = "variables ",
     cst_appears = " appears ",
     cst_variable = "variable ",
     _eQ_ = [0, cst_dynlink_compilerlibs_warni, 1056, 16],
     _eP_ =
       [0,
        [11,
         "Ambiguous or-pattern variables under guard;\n",
         [2,
          0,
          [11,
           ".\nOnly the first match will be used to evaluate the guard expression.\n",
           [16, 0]]]],
        "Ambiguous or-pattern variables under guard;\n%s.\nOnly the first match will be used to evaluate the guard expression.\n%t"],
     _eR_ =
       [0,
        [11,
         "no cmx file was found in path for module ",
         [2, 0, [11, ", and its interface was not compiled with -opaque", 0]]],
        "no cmx file was found in path for module %s, and its interface was not compiled with -opaque"],
     cst_unused_module = "unused module ",
     _eS_ =
       [0,
        [11,
         "This primitive declaration uses type ",
         [2,
          0,
          [11,
           ", whose representation\nmay be either boxed or unboxed. Without an annotation to indicate\nwhich representation is intended, the boxed representation has been\nselected by default. This default choice may change in future\nversions of the compiler, breaking the primitive implementation.\nYou should explicitly annotate the declaration of ",
           [2,
            0,
            [11,
             "\nwith [",
             [17,
              5,
              [11,
               "boxed] or [",
               [17,
                5,
                [11,
                 "unboxed], so that its external interface\nremains stable in the future.",
                 0]]]]]]]]],
        "This primitive declaration uses type %s, whose representation\nmay be either boxed or unboxed. Without an annotation to indicate\nwhich representation is intended, the boxed representation has been\nselected by default. This default choice may change in future\nversions of the compiler, breaking the primitive implementation.\nYou should explicitly annotate the declaration of %s\nwith [@@boxed] or [@@unboxed], so that its external interface\nremains stable in the future."],
     cst_Beware_that_this_warning_i =
       "\nBeware that this warning is purely informational and will not catch\nall instances of erroneous printed interface.",
     cst_The_printed_interface_diff =
       "The printed interface differs from the inferred interface.\nThe inferred interface contained items which could not be printed\nproperly due to name collisions between identifiers.",
     _eT_ =
       [0,
        [11,
         "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type ",
         [2, 0, [11, " = unit'?", 0]]],
        "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type %s = unit'?"],
     cst_unused_open$0 = "unused open! ",
     cst_unused_functor_parameter = "unused functor parameter ",
     cst_unused_record_field = "unused record field ",
     cst_is_never_read_However_this =
       " is never read.\n(However, this field is used to build or mutate values.)",
     cst_record_field = "record field ",
     cst_is_never_mutated = " is never mutated.",
     cst_mutable_record_field = "mutable record field ",
     cst_unused_variable = "unused variable ",
     _ew_ =
       [0,
        [11,
         "(See manual section ",
         [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [12, 41, 0]]]]],
        "(See manual section %d.%d)"],
     cst_deprecated = cst_deprecated$5,
     cst_deprecated$0 = cst_deprecated$5,
     cst_deprecated$1 = cst_deprecated$5,
     cst_deprecated$2 = cst_deprecated$5,
     cst_Ill_formed_list_of_warning = "Ill-formed list of warnings",
     _es_ =
       [0,
        [17,
         [0, cst$128, 1, 0],
         [18,
          [1, [0, 0, cst$117]],
          [11,
           "Hint: Did you make a spelling mistake when using a mnemonic name?",
           [17, 0, 0]]]],
        "@ @[Hint: Did you make a spelling mistake when using a mnemonic name?@]"],
     _eo_ = [0, [15, [0, 0]], "%a%c"],
     _ep_ = [0, [15, [4, 0, 0, 0, 0]], "%a%d"],
     _eq_ = [0, [15, [4, 0, 0, 0, [11, "..", [4, 0, 0, 0, 0]]]], "%a%d..%d"],
     _el_ = [0, [12, 43, 0], cst$131],
     _em_ = [0, [12, 45, 0], cst$127],
     _en_ = [0, [12, 64, 0], "@"],
     _ek_ = [0, [0, [0, 0]], "%c%c"],
     _er_ = [0, 0, 0],
     cst_none = cst_none$3,
     _et_ =
       [0,
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [18,
          [1, [0, 0, cst$117]],
          [11,
           "Setting a warning with a sequence of lowercase or uppercase letters,",
           [17,
            [0, cst$128, 1, 0],
            [11,
             "like '",
             [15,
              [11,
               "',",
               [17,
                [0, cst$128, 1, 0],
                [11, "is deprecated.", [17, 0, partial$0]]]]]]]]]],
        "@[<v>@[Setting a warning with a sequence of lowercase or uppercase letters,@ like '%a',@ is deprecated.@]@ @[Use the equivalent signed form:@ %t.@]@ @[Hint: Enabling or disabling a warning by its mnemonic name requires a + or - prefix.@]%t@?@]"],
     cst_ocaml_deprecated_cli = cst_ocaml_deprecated_cli$1,
     cst_Ill_formed_list_of_alert_s = cst_Ill_formed_list_of_alert_s$2,
     cst_Ill_formed_list_of_alert_s$0 = cst_Ill_formed_list_of_alert_s$2,
     cst_Ill_formed_list_of_alert_s$1 = cst_Ill_formed_list_of_alert_s$2,
     _d6_ = [0, cst_dynlink_compilerlibs_warni, 568, 9],
     _d7_ = [0, 1, [0, 2, 0]],
     _d8_ = [0, 3, 0],
     _d9_ = [0, 4, 0],
     _d__ = [0, 5, 0],
     _d$_ =
       [0,
        32,
        [0, 33, [0, 34, [0, 35, [0, 36, [0, 37, [0, 38, [0, 39, 0]]]]]]]],
     _ea_ = [0, 6, 0],
     _eb_ = [0, 7, 0],
     _ec_ = [0, 8, 0],
     _ed_ = [0, 9, 0],
     _ee_ = [0, 10, 0],
     _ef_ = [0, 11, [0, 12, 0]],
     _eg_ = [0, 13, 0],
     _eh_ =
       caml_list_of_js_array([14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30]),
     _ei_ = [0, 26, 0],
     _ej_ = [0, 27, 0],
     cst_A_tail_call_is_turned_into =
       "A tail call is turned into a non-tail call by the @tail_mod_cons transformation.",
     _cj_ = [0, "tmc-breaks-tailcall", 0],
     cst_Unused_tail_mod_cons_attri = "Unused @tail_mod_cons attribute.",
     _cl_ = [0, "unused-tmc-attribute", 0],
     cst_Missing_interface_file = "Missing interface file.",
     _cn_ = [0, "missing-mli", 0],
     cst_Unused_record_field = "Unused record field.",
     _cp_ = [0, "unused-field", 0],
     cst_Pattern_matching_depending =
       "Pattern-matching depending on mutable state prevents the remaining \n    arguments from being uncurried.",
     _cr_ = [0, "match-on-mutable-state-prevent-uncurry", 0],
     cst_Unused_functor_parameter = "Unused functor parameter.",
     _ct_ = [0, "unused-functor-parameter", 0],
     cst_Unused_open_statement = "Unused open! statement.",
     _cv_ = [0, "unused-open-bang", 0],
     cst_Type_declaration_defining_ =
       "Type declaration defining a new '()' constructor.",
     _cx_ = [0, "redefining-unit", 0],
     cst_unsafe_used_with_a_preproc =
       "-unsafe used with a preprocessor returning a syntax tree.",
     _cz_ = [0, "unsafe-array-syntax-without-parsing", 0],
     cst_Erroneous_printed_signatur = "Erroneous printed signature.",
     _cB_ = [0, "erroneous-printed-signature", 0],
     cst_Type_constraint_on_GADT_ty =
       "Type constraint on GADT type declaration.",
     _cD_ = [0, "constraint-on-gadt", 0],
     cst_Unboxable_type_in_primitiv =
       "Unboxable type in primitive declaration.",
     _cF_ = [0, "unboxable-type-in-prim-decl", 0],
     cst_Unused_module_declaration = "Unused module declaration.",
     _cH_ = [0, "unused-module", 0],
     cst_Assignment_to_non_mutable_ = "Assignment to non-mutable value.",
     _cJ_ = [0, "flambda-assignment-to-non-mutable-value", 0],
     cst_Missing_cmx_file = "Missing cmx file.",
     _cL_ = [0, "no-cmx-file", 0],
     cst_Ambiguous_or_pattern_varia =
       "Ambiguous or-pattern variables under guard.",
     _cN_ = [0, "ambiguous-var-in-pattern-guard", 0],
     cst_Unreachable_case_in_a_patt =
       "Unreachable case in a pattern-matching (based on type information).",
     _cP_ = [0, "unreachable-case", 0],
     cst_Inlining_impossible = "Inlining impossible.",
     _cR_ = [0, "inlining-impossible", 0],
     cst_Attribute_used_more_than_o =
       "Attribute used more than once on an expression.",
     _cT_ = [0, "duplicated-attribute", 0],
     cst_Attribute_cannot_appear_in =
       "Attribute cannot appear in this context.",
     _cV_ = [0, "misplaced-attribute", 0],
     cst_Fragile_constant_pattern = "Fragile constant pattern.",
     _cX_ = [0, "fragile-literal-pattern", 0],
     cst_Function_call_annotated_wi =
       "Function call annotated with an incorrect @tailcall attribute.",
     _cZ_ = [0, "wrong-tailcall-expectation", 0],
     cst_Unexpected_documentation_c = "Unexpected documentation comment.",
     _c1_ = [0, "unexpected-docstring", 0],
     cst_Absent_cmi_file_when_looki =
       "Absent cmi file when looking up module alias.",
     _c3_ = [0, "no-cmi-file", 0],
     cst_Implicit_elimination_of_op =
       "Implicit elimination of optional arguments.",
     _c5_ = [0, "eliminated-optional-arguments", 0],
     cst_Illegal_attribute_payload = "Illegal attribute payload.",
     _c7_ = [0, "attribute-payload", 0],
     cst_Error_in_environment_varia = "Error in environment variable.",
     _c9_ = [0, "bad-env-variable", 0],
     cst_Open_statement_shadows_an_ =
       "Open statement shadows an already defined label or constructor.",
     _c$_ = [0, "open-shadow-label-constructor", 0],
     cst_Open_statement_shadows_an_$0 =
       "Open statement shadows an already defined identifier.",
     _db_ = [0, "open-shadow-identifier", 0],
     cst_Nonoptional_label_applied_ = "Nonoptional label applied as optional.",
     _dd_ = [0, "nonoptional-label", 0],
     cst_Disambiguated_constructor_ =
       "Disambiguated constructor or label name (compatibility warning).",
     _df_ = [0, "disambiguated-name", 0],
     cst_Ambiguous_constructor_or_l = "Ambiguous constructor or label name.",
     _dh_ = [0, "ambiguous-name", 0],
     cst_Constructor_or_label_name_ =
       "Constructor or label name used out of scope.",
     _dj_ = [0, "name-out-of-scope", 0],
     cst_Unused_rec_flag = "Unused rec flag.",
     _dl_ = [0, "unused-rec-flag", 0],
     cst_Unused_extension_construct = "Unused extension constructor.",
     _dn_ = [0, "unused-extension", 0],
     cst_Unused_constructor = "Unused constructor.",
     _dp_ = [0, "unused-constructor", 0],
     cst_Unused_ancestor_variable = "Unused ancestor variable.",
     _dr_ = [0, "unused-ancestor", 0],
     cst_Unused_for_loop_index = "Unused for-loop index.",
     _dt_ = [0, "unused-for-index", 0],
     cst_Unused_type_declaration = "Unused type declaration.",
     _dv_ = [0, "unused-type-declaration", 0],
     cst_Unused_open_statement$0 = "Unused open statement.",
     _dx_ = [0, "unused-open", 0],
     cst_Unused_value_declaration = "Unused value declaration.",
     _dz_ = [0, "unused-value-declaration", 0],
     cst_A_module_is_linked_twice_i =
       "A module is linked twice in the same executable.",
     _dB_ = [0, "module-linked-twice", 0],
     _dC_ =
       [0,
        30,
        [0, "duplicate-definitions", 0],
        "Two labels or constructors of the same name are defined in two\n    mutually recursive types.",
        0],
     _dD_ =
       [0,
        29,
        [0, "eol-in-string", 0],
        "Unescaped end-of-line in a string constant (non-portable code).",
        0],
     _dE_ =
       [0,
        28,
        [0, "wildcard-arg-to-constant-constr", 0],
        "Wildcard pattern given as argument to a constant constructor.",
        0],
     _dF_ =
       [0,
        27,
        [0, "unused-var-strict", 0],
        'Innocuous unused variable: unused variable that is not bound with\n    "let" nor "as", and doesn\'t start with an underscore ("_")\n    character.',
        0],
     _dG_ =
       [0,
        26,
        [0, "unused-var", 0],
        'Suspicious unused variable: unused variable that is bound\n    with "let" or "as", and doesn\'t start with an underscore ("_")\n    character.',
        0],
     _dH_ = [0, 25, 0, "Ignored: now part of warning 8.", 0],
     _dI_ =
       [0,
        24,
        [0, "bad-module-name", 0],
        "Bad module name: the source file name is not a valid OCaml module name.",
        0],
     _dJ_ =
       [0,
        23,
        [0, "useless-record-with", 0],
        'Useless record "with" clause.',
        0],
     _dK_ = [0, 22, [0, "preprocessor", 0], "Preprocessor warning.", 0],
     _dL_ =
       [0,
        21,
        [0, "nonreturning-statement", 0],
        "Non-returning statement.",
        0],
     _dM_ =
       [0,
        20,
        [0, "ignored-extra-argument", 0],
        "Unused function argument.",
        0],
     _dN_ =
       [0,
        19,
        [0, "non-principal-labels", 0],
        "Type without principality.",
        0],
     _dO_ = [0, 18, [0, "not-principal", 0], "Non-principal type.", 0],
     _dP_ =
       [0,
        17,
        [0, "undeclared-virtual-method", 0],
        "Undeclared virtual method.",
        0],
     _dQ_ =
       [0,
        16,
        [0, "unerasable-optional-argument", 0],
        "Unerasable optional argument.",
        0],
     _dR_ =
       [0,
        15,
        [0, "implicit-public-methods", 0],
        "Private method made public implicitly.",
        0],
     _dS_ =
       [0,
        14,
        [0, "illegal-backslash", 0],
        "Illegal backslash escape in a string constant.",
        0],
     _dT_ =
       [0,
        13,
        [0, "instance-variable-override", 0],
        "Instance variable overridden.",
        0],
     _dU_ =
       [0,
        12,
        [0, "redundant-subpat", 0],
        "Redundant sub-pattern in a pattern-matching.",
        0],
     _dV_ =
       [0,
        11,
        [0, "redundant-case", 0],
        "Redundant case in a pattern matching (unused match case).",
        0],
     _dW_ =
       [0,
        10,
        [0, "non-unit-statement", 0],
        'Expression on the left-hand side of a sequence that doesn\'t have type\n    "unit" (and that is not a function, see warning number 5).',
        0],
     _dX_ =
       [0,
        9,
        [0, "missing-record-field-pattern", 0],
        "Missing fields in a record pattern.",
        0],
     _dY_ =
       [0,
        8,
        [0, "partial-match", 0],
        "Partial match: missing cases in pattern-matching.",
        0],
     _dZ_ = [0, 7, [0, "method-override", 0], "Method overridden.", 0],
     _d0_ =
       [0,
        6,
        [0, "labels-omitted", 0],
        "Label omitted in function application.",
        0],
     _d1_ =
       [0,
        5,
        [0, "ignored-partial-application", 0],
        "Partially applied function: expression whose result has function\n    type and is ignored.",
        0],
     _d2_ =
       [0,
        4,
        [0, "fragile-match", 0],
        "Fragile pattern matching: matching that will remain complete even\n    if additional constructors are added to one of the variant types\n    matched.",
        0],
     _d3_ = [0, 3, 0, "Deprecated synonym for the 'deprecated' alert.", 0],
     _d4_ =
       [0,
        2,
        [0, "comment-not-end", 0],
        "Suspicious-looking end-of-comment mark.",
        0],
     _d5_ =
       [0,
        1,
        [0, "comment-start", 0],
        "Suspicious-looking start-of-comment mark.",
        0],
     cst_Dynlink_compilerlibs_Warni = "Dynlink_compilerlibs.Warnings.Errors",
     _fC_ = [0, [11, "I/O error: ", [2, 0, 0]], "I/O error: %s"],
     _fB_ = [0, 301815898],
     _fy_ =
       [0,
        [11,
         "Running ",
         [2,
          0,
          [11,
           " where the first argument is an implicit basename with no extension (e.g. ",
           [2,
            0,
            [11,
             " script-file) is deprecated. Either rename the script (",
             [2,
              0,
              [11,
               " script-file.ml) or qualify the basename (",
               [2, 0, [11, " ./script-file)", 0]]]]]]]]],
        "Running %s where the first argument is an implicit basename with no extension (e.g. %s script-file) is deprecated. Either rename the script (%s script-file.ml) or qualify the basename (%s ./script-file)"],
     _fz_ =
       [0, [18, [1, [0, 0, cst$117]], [17, 3, [15, [17, 0, 0]]]], cst_a$0],
     cst_ocaml_deprecated_cli$0 = cst_ocaml_deprecated_cli$1,
     _fw_ =
       [0,
        [11,
         "OCaml's lib directory layout changed in 5.0. The ",
         [2,
          0,
          [11,
           " subdirectory has been automatically added to the search path, but you should add -I +",
           [2,
            0,
            [11,
             " to the command-line to silence this alert (e.g. by adding ",
             [2,
              0,
              [11,
               " to the list of libraries in your dune file, or adding use_",
               [2,
                0,
                [11,
                 " to your _tags file for ocamlbuild, or using -package ",
                 [2, 0, partial$1]]]]]]]]]],
        "OCaml's lib directory layout changed in 5.0. The %s subdirectory has been automatically added to the search path, but you should add -I +%s to the command-line to silence this alert (e.g. by adding %s to the list of libraries in your dune file, or adding use_%s to your _tags file for ocamlbuild, or using -package %s for ocamlfind)."],
     _fx_ =
       [0, [18, [1, [0, 0, cst$117]], [17, 3, [15, [17, 0, 0]]]], cst_a$0],
     cst_ocaml_deprecated_auto_incl = "ocaml_deprecated_auto_include",
     cst_deprecated$3 = cst_deprecated$5,
     _fr_ = [0, [15, [12, 58, [17, [0, cst$128, 1, 0], 0]]], "%a:@ "],
     _fq_ =
       [0,
        [18, [1, [0, 0, cst$117]], [15, [11, cst$132, [15, [17, 0, 0]]]]],
        "@[%a  %a@]"],
     _fp_ = [0, [17, [0, cst$121, 0, 0], [15, 0]], "@,%a"],
     _fk_ =
       [0,
        [18,
         [0, [0, [11, cst_error$0, 0], cst_error$0]],
         [11, cst_Error, [17, 1, 0]]],
        "@{<error>Error@}"],
     _fl_ =
       [0,
        [18,
         [0, [0, [11, cst_warning$0, 0], cst_warning$0]],
         [11, "Warning", [17, 1, [12, 32, [2, 0, 0]]]]],
        "@{<warning>Warning@} %s"],
     _fm_ =
       [0,
        [18,
         [0, [0, [11, cst_error$0, 0], cst_error$0]],
         [11, cst_Error, [17, 1, [11, " (warning ", [2, 0, [12, 41, 0]]]]]],
        "@{<error>Error@} (warning %s)"],
     _fn_ =
       [0,
        [18,
         [0, [0, [11, cst_warning$0, 0], cst_warning$0]],
         [11, "Alert", [17, 1, [12, 32, [2, 0, 0]]]]],
        "@{<warning>Alert@} %s"],
     _fo_ =
       [0,
        [18,
         [0, [0, [11, cst_error$0, 0], cst_error$0]],
         [11, cst_Error, [17, 1, [11, " (alert ", [2, 0, [12, 41, 0]]]]]],
        "@{<error>Error@} (alert %s)"],
     _fj_ =
       [0,
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [15,
          [15,
           [15, [11, cst$119, [15, [15, [15, [15, [17, 0, partial$2]]]]]]]]]],
        "@[<v>%a%a%a: %a%a%a%a@]@."],
     _fi_ = [0, [18, [1, [0, 0, cst$117]], [16, [17, 0, 0]]], "@[%t@]"],
     _fh_ =
       [0,
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [15, [12, 58, [17, [0, cst$128, 1, 0], [15, [17, 0, 0]]]]]],
        "@[<v>%a:@ %a@]"],
     _fe_ =
       [0, [18, [0, [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"]], 0], "@{<%s>"],
     _ff_ = [0, [17, 1, 0], cst$137],
     _e$_ = [0, [18, [1, [0, [11, cst_v, 0], cst_v]], 0], cst_v$0],
     _fc_ =
       [0,
        [2, 0, [11, " | ", [2, 0, [17, [0, cst$121, 0, 0], 0]]]],
        "%s | %s@,"],
     _fd_ = [0, [2, [1, 1], [11, "   ", 0]], "%*s   "],
     _fg_ = [0, [17, 1, [17, [0, cst$121, 0, 0], 0]], "@}@,"],
     _fa_ = [0, cst$122],
     _fb_ = [0, [17, 0, 0], cst$123],
     _e__ = [0, 0, 0, 1],
     _e8_ = [0, cst_dynlink_compilerlibs_locat, 281, 26],
     _e7_ = [0, 867153157, 0],
     _e9_ = [0, cst_dynlink_compilerlibs_locat, 285, 4],
     _e6_ = [0, [12, 44, [17, [0, cst$128, 1, 0], 0]], ",@ "],
     _eZ_ = [0, [11, cst$126, 0], cst$126],
     _e0_ = [0, [18, [0, [0, [11, cst_loc, 0], cst_loc]], 0], "@{<loc>"],
     cst_file = "file",
     _e1_ = [0, [2, 0, [11, ' "', [15, [12, 34, 0]]]], '%s "%a"'],
     cst_line = "line",
     _e2_ = [0, [2, 0, [12, 32, [4, 3, 0, 0, 0]]], "%s %i"],
     cst_lines = "lines",
     _e5_ =
       [0,
        [2, 0, [12, 32, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
        cst_s_i_i],
     cst_characters = "characters",
     _e3_ =
       [0,
        [2, 0, [12, 32, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
        cst_s_i_i],
     _e4_ = [0, [17, 1, 0], cst$137],
     cst_none$0 = cst_none$3,
     cst_none$1 = cst_none$3,
     cst_Dynlink_compilerlibs_Locat = "Dynlink_compilerlibs.Location.Error",
     cst_Longident_flat = "Longident.flat",
     _fD_ = [0, cst$117],
     cst_Longident_last = "Longident.last",
     _fF_ = [33, 1],
     _fG_ = [33, 0],
     _fE_ = [33, 1],
     cst_ocaml_doc = cst_ocaml_doc$0,
     cst_ocaml_text = cst_ocaml_text$0,
     cst_Dynlink_compilerlibs_Synta = "Dynlink_compilerlibs.Syntaxerr.Error",
     cst_Dynlink_compilerlibs_Synta$0 =
       "Dynlink_compilerlibs.Syntaxerr.Escape_error",
     _fI_ = [0, 0],
     _fH_ = [0, 0],
     _fS_ =
       [0,
        [11,
         cst_Usage,
         [2, 0, [11, " [extra_args] <infile> <outfile>\n", [10, 0]]]],
        "Usage: %s [extra_args] <infile> <outfile>\n%!"],
     cst_Ast_mapper_OCaml_version_m =
       "Ast_mapper: OCaml version mismatch or malformed input",
     _fR_ = [0, 0],
     cst_ocaml_error$1 = cst_ocaml_error$2,
     _fL_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17,
          5,
          [17,
           [2, 111],
           [11, cst_caml_ppx_context, [2, 0, [11, " }] string syntax", 0]]]]]],
        "Internal error: invalid [@@@ocaml.ppx.context { %s }] string syntax"],
     _fM_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17,
          5,
          [17,
           [2, 111],
           [11, cst_caml_ppx_context, [2, 0, [11, " }] bool syntax", 0]]]]]],
        "Internal error: invalid [@@@ocaml.ppx.context { %s }] bool syntax"],
     _fN_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17,
          5,
          [17,
           [2, 111],
           [11, cst_caml_ppx_context, [2, 0, [11, " }] list syntax", 0]]]]]],
        "Internal error: invalid [@@@ocaml.ppx.context { %s }] list syntax"],
     _fO_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17,
          5,
          [17,
           [2, 111],
           [11, cst_caml_ppx_context, [2, 0, [11, " }] pair syntax", 0]]]]]],
        "Internal error: invalid [@@@ocaml.ppx.context { %s }] pair syntax"],
     _fP_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17,
          5,
          [17,
           [2, 111],
           [11, cst_caml_ppx_context, [2, 0, [11, " }] option syntax", 0]]]]]],
        "Internal error: invalid [@@@ocaml.ppx.context { %s }] option syntax"],
     _fQ_ =
       [0,
        [11, cst_Internal_error_vmthreads_n, 0],
        cst_Internal_error_vmthreads_n],
     _fK_ =
       [0,
        [11,
         cst_Internal_error_invalid,
         [17, 5, [17, [2, 111], [11, "caml.ppx.context] syntax", 0]]]],
        "Internal error: invalid [@@@ocaml.ppx.context] syntax"],
     cst_unsafe_string = "unsafe_string",
     cst_unboxed_types = cst_unboxed_types$0,
     cst_transparent_modules = cst_transparent_modules$0,
     cst_principal = cst_principal$0,
     cst_recursive_types = cst_recursive_types$0,
     cst_use_vmthreads = cst_use_vmthreads$0,
     cst_use_threads = cst_use_threads$0,
     cst_debug = cst_debug$0,
     cst_for_package = cst_for_package$0,
     cst_open_modules = cst_open_modules$0,
     cst_load_path = cst_load_path$0,
     cst_include_dirs = cst_include_dirs$0,
     cst_tool_name = cst_tool_name$0,
     cst_ocaml_ppx_context = cst_ocaml_ppx_context$0,
     cst_cookies = cst_cookies$0,
     cst_Some = cst_Some$1,
     cst_None$0 = cst_None$2,
     cst_true = cst_true$1,
     cst_false = cst_false$1,
     cst_ocaml_ppwarning = cst_ocaml_ppwarning$0,
     cst_ocaml_error = cst_ocaml_error$2,
     _fJ_ = [0, [16, 0], "%t"],
     cst_extension_of_error_expecte =
       "extension_of_error: expected kind Report_error",
     cst_ocaml_error$0 = cst_ocaml_error$2,
     cst_none$2 = cst_none$3,
     _fT_ =
       [0,
        [11, "Too many `", [2, 0, [11, "' attributes", 0]]],
        "Too many `%s' attributes"],
     _fU_ =
       [0,
        [11, "Attribute `", [2, 0, [11, "' does not accept a payload", 0]]],
        "Attribute `%s' does not accept a payload"],
     cst_Dynlink_compilerlibs_Attr_ = "Dynlink_compilerlibs.Attr_helper.Error",
     _f3_ = [0, "ocaml.boxed", [0, "boxed", 0]],
     _f2_ = [0, "ocaml.unboxed", [0, cst_unboxed, 0]],
     cst_The_alert_name_all_is_rese = "The alert name 'all' is reserved",
     cst_Invalid_payload = "Invalid payload",
     cst_A_single_string_literal_is = "A single string literal is expected",
     _f1_ = [0, [11, cst_mutating_field, [2, 0, 0]], cst_mutating_field_s],
     _f0_ = [0, [11, cst_mutating_field, [2, 0, 0]], cst_mutating_field_s],
     cst_deprecated$4 = cst_deprecated$5,
     _fX_ =
       [0,
        [11, cst_Invalid_syntax_for_sub_mes, [2, 0, [11, cst$141, 0]]],
        cst_Invalid_syntax_for_sub_mes$0],
     _fW_ =
       [0,
        [11, cst_Uninterpreted_extension, [2, 0, [11, cst$141, 0]]],
        cst_Uninterpreted_extension_s],
     _fV_ =
       [0,
        [11, cst_Invalid_syntax_for_sub_mes, [2, 0, [11, cst$141, 0]]],
        cst_Invalid_syntax_for_sub_mes$0],
     _fY_ =
       [0,
        [11, cst_Uninterpreted_extension, [2, 0, [11, cst$141, 0]]],
        cst_Uninterpreted_extension_s],
     _fZ_ =
       [0,
        [11, "Invalid syntax for extension '", [2, 0, [11, cst$141, 0]]],
        "Invalid syntax for extension '%s'."],
     cst_Map_remove_min_elt = "Map.remove_min_elt",
     _ge_ =
       [0,
        [11, "Ident.make_key_generator () ", [2, 0, 0]],
        "Ident.make_key_generator () %s"],
     _gc_ = [0, cst_dynlink_compilerlibs_ident, 201, 11],
     _gd_ = [0, cst_dynlink_compilerlibs_ident, 210, 11],
     _f6_ = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
     _f7_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
     _f8_ = [0, [12, 91, [4, 3, 0, 0, [12, 93, 0]]], "[%i]"],
     _f9_ = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
     _f__ = [0, [2, 0, [2, 0, [2, 0, 0]]], "%s%s%s"],
     _f$_ = [0, [2, 0, [12, 33, 0]], "%s!"],
     _ga_ = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
     _gb_ = [0, [2, 0, [2, 0, [12, 33, 0]]], "%s%s!"],
     cst_0$1 = "_0",
     _f4_ = [0, [11, "Ident.rename ", [2, 0, 0]], "Ident.rename %s"],
     _gf_ = [0, [15, [12, 46, [2, 0, 0]]], "%a.%s"],
     _gg_ = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
     _gh_ = [0, cst_dynlink_compilerlibs_path_, 77, 16],
     _gi_ = [0, cst_dynlink_compilerlibs_path_, 101, 2],
     _gk_ = [0, "dynlink_compilerlibs/primitive.ml", 152, 4],
     _gl_ =
       [0,
        [11,
         'Cannot use "float" in conjunction with [',
         [12, 64, [11, "unboxed]/[", [12, 64, [11, "untagged].", 0]]]]],
        'Cannot use "float" in conjunction with [%@unboxed]/[%@untagged].'],
     _gm_ =
       [0,
        [11,
         'Cannot use "noalloc" in conjunction with [',
         [12, 64, [12, 64, [11, "noalloc].", 0]]]],
        'Cannot use "noalloc" in conjunction with [%@%@noalloc].'],
     _gn_ =
       [0,
        [12,
         91,
         [17,
          [2, 84],
          [11,
           "he native code version of the primitive is mandatory",
           [17,
            [0, cst$128, 1, 0],
            [11,
             "when attributes [",
             [12,
              64,
              [11,
               "untagged] or [",
               [12, 64, [11, "unboxed] are present.", [17, 0, 0]]]]]]]]]],
        "[@The native code version of the primitive is mandatory@ when attributes [%@untagged] or [%@unboxed] are present.@]"],
     cst_Primitive_parse_declaratio = "Primitive.parse_declaration",
     _gj_ = [0, cst_noalloc, [0, "ocaml.noalloc", 0]],
     cst_unboxed_noalloc_should_be_ =
       '[@@unboxed] + [@@noalloc] should be used\ninstead of "float"',
     cst_noalloc_should_be_used_ins =
       '[@@noalloc] should be used instead of "noalloc"',
     cst_Dynlink_compilerlibs_Primi = "Dynlink_compilerlibs.Primitive.Error",
     _gq_ = [1, 1],
     _gp_ = [1, 0],
     _go_ = [0, 0],
     cst_shape_var = "shape-var",
     _gB_ =
       [0,
        [18,
         [1, [0, [11, cst_hv_4, 0], cst_hv_4]],
         [15,
          [11,
           " ->",
           [17,
            [0, cst$128, 1, 0],
            [15, [12, 59, [17, 0, [17, [0, cst$121, 0, 0], 0]]]]]]]],
        "@[<hv 4>%a ->@ %a;@]@,"],
     _gx_ = [0, [12, 60, [15, [12, 62, 0]]], cst_a$1],
     _gy_ = [0, [15, [15, 0]], "%a%a"],
     _gz_ =
       [0,
        [11,
         "Abs",
         [18,
          [1, [0, 0, cst$117]],
          [15,
           [17,
            [0, cst$121, 0, 0],
            [12,
             40,
             [18,
              [1, [0, 0, cst$117]],
              [15,
               [12, 44, [17, [0, cst$128, 1, 0], [18, partial$4, partial$3]]]]]]]]]],
        "Abs@[%a@,(@[%a,@ @[%a@]@])@]"],
     _gA_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [15,
          [12, 40, [17, [0, cst$121, 0, 0], [15, [12, 41, [15, [17, 0, 0]]]]]]]],
        "@[%a(@,%a)%a@]"],
     _gC_ =
       [0,
        [12,
         123,
         [18,
          [1, [0, [11, cst_v, 0], cst_v]],
          [15, [17, [0, cst$121, 0, 0], [15, [17, 0, [12, 125, 0]]]]]]],
        "{@[<v>%a@,%a@]}"],
     _gD_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [12,
          40,
          [15,
           [17,
            [0, cst$128, 1, 0],
            [12,
             46,
             [17,
              [0, cst$128, 1, 0],
              [15, [11, ")<", [15, [12, 62, partial$5]]]]]]]]]],
        "@[(%a@ .@ %a)<%a>@]"],
     _gE_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [15,
          [17,
           [0, cst$128, 1, 0],
           [12, 46, [17, [0, cst$128, 1, 0], [15, [17, 0, 0]]]]]]],
        "@[%a@ .@ %a@]"],
     _gF_ = [0, [11, "CU ", [2, 0, 0]], "CU %s"],
     _gw_ = [0, [12, 60, [15, [12, 62, 0]]], cst_a$1],
     _gG_ =
       [0,
        [18, [1, [0, 0, cst$117]], [15, [17, 0, [17, [0, "@;", 1, 0], 0]]]],
        "@[%a@]@;"],
     _gv_ = [0, [3, 0, [12, 91, [2, 0, [12, 93, 0]]]], "%S[%s]"],
     cst_value = cst_value$0,
     cst_type = cst_type$0,
     cst_module = cst_module$0,
     cst_module_type = cst_module_type$0,
     cst_extension_constructor$0 = cst_extension_constructor$2,
     cst_class = cst_class$0,
     cst_class_type = cst_class_type$0,
     _gu_ =
       [0,
        [11, "Types.Uid.of_predef_id ", [3, 0, 0]],
        "Types.Uid.of_predef_id %S"],
     _gt_ =
       [0,
        [11, "Types.Uid.of_compilation_unit_id ", [3, 0, 0]],
        "Types.Uid.of_compilation_unit_id %S"],
     cst_internal = "<internal>",
     _gr_ = [0, [2, 0, [12, 46, [4, 0, 0, 0, 0]]], "%s.%d"],
     _gs_ = [0, [11, "<predef:", [2, 0, [12, 62, 0]]], "<predef:%s>"],
     cst_Types_row_field_ext = "Types.row_field_ext ",
     cst_Types_link_row_field_ext = "Types.link_row_field_ext",
     cst_Types_link_kind = "Types.link_kind",
     cst_Types_link_commu = "Types.link_commu",
     _gQ_ = [0, cst_dynlink_compilerlibs_types, 818, 15],
     cst_Types_backtrack = "Types.backtrack",
     _gO_ = [0, 0],
     _gP_ = [0, cst_dynlink_compilerlibs_types, 550, 27],
     _gM_ = [0, [12, 44, [17, [0, cst$121, 0, 0], 0]], ",@,"],
     _gN_ =
       [0,
        [18, [1, [0, 0, cst$117]], [12, 40, [15, [12, 41, [17, 0, 0]]]]],
        "@[(%a)@]"],
     _gJ_ = [0, [11, cst_Ind, 0], cst_Ind],
     _gK_ = [0, [11, cst_Sep, 0], cst_Sep],
     _gL_ = [0, [11, cst_Deepsep, 0], cst_Deepsep],
     _g3_ = [0, 0],
     _g4_ = [0, cst_dynlink_compilerlibs_btype, 454, 27],
     _g5_ = [0, cst_dynlink_compilerlibs_btype, 448, 27],
     _g8_ = [0, cst_dynlink_compilerlibs_btype, 771, 9],
     _g7_ = [0, cst_dynlink_compilerlibs_btype, 703, 27],
     _g6_ = [0, cst_dynlink_compilerlibs_btype, 698, 27],
     _g2_ = [0, cst_dynlink_compilerlibs_btype, 281, 27],
     _g1_ = [0, cst_dynlink_compilerlibs_btype, 256, 9],
     _g0_ = [0, cst_dynlink_compilerlibs_btype, 184, 15],
     _gZ_ = [0, cst_dynlink_compilerlibs_btype, 150, 13],
     _gY_ = [0, 0],
     _gX_ = [0, cst_dynlink_compilerlibs_btype, 97, 16],
     _hb_ = [0, 0],
     _hc_ = [0, cst_dynlink_compilerlibs_subst, 195, 15],
     _hd_ = [0, cst_dynlink_compilerlibs_subst, 243, 23],
     cst_Subst_modtype = "Subst.modtype",
     _ha_ = [0, cst_dynlink_compilerlibs_subst, 154, 42],
     cst_Subst_type_path = "Subst.type_path",
     _g$_ = [0, cst_dynlink_compilerlibs_subst, 114, 23],
     cst_Subst_modtype_path = cst_Subst_modtype_path$1,
     cst_Subst_modtype_path$0 = cst_Subst_modtype_path$1,
     _hk_ = [0, 1],
     _hj_ = [0, 1],
     _hi_ = [0, 1],
     _hh_ = [0, 1],
     _hg_ = [0, 1],
     _hf_ = [0, 0],
     cst_ocaml_warn_on_literal_patt = cst_ocaml_warn_on_literal_patt$0,
     cst_int = "int",
     cst_char = "char",
     cst_bytes = "bytes",
     cst_float = cst_float$0,
     cst_bool = "bool",
     cst_unit = "unit",
     cst_exn = "exn",
     cst_array = "array",
     cst_list = "list",
     cst_option = "option",
     cst_nativeint = "nativeint",
     cst_int32 = "int32",
     cst_int64 = "int64",
     cst_lazy_t = "lazy_t",
     cst_string = "string",
     cst_extension_constructor$1 = "extension_constructor",
     cst_floatarray = "floatarray",
     cst_Match_failure = cst_Match_failure$0,
     cst_Out_of_memory = cst_Out_of_memory$0,
     cst_Invalid_argument = cst_Invalid_argument$0,
     cst_Failure = cst_Failure$0,
     cst_Not_found = cst_Not_found$0,
     cst_Sys_error = cst_Sys_error$0,
     cst_End_of_file = cst_End_of_file$0,
     cst_Division_by_zero = cst_Division_by_zero$0,
     cst_Stack_overflow = cst_Stack_overflow$0,
     cst_Sys_blocked_io = cst_Sys_blocked_io$0,
     cst_Assert_failure = cst_Assert_failure$0,
     cst_Undefined_recursive_module = cst_Undefined_recursive_module$0,
     cst_false$0 = cst_false$1,
     cst_true$0 = cst_true$1,
     cst_None$1 = cst_None$2,
     cst_Some$0 = cst_Some$1,
     _ho_ = [0, "dynlink_compilerlibs/datarepr.ml", 112, 12],
     _hn_ = [0, 1],
     _hm_ = [0, 0],
     _hl_ = [0, 1],
     _hp_ = [2, 0],
     cst_Dynlink_compilerlibs_Datar =
       "Dynlink_compilerlibs.Datarepr.Constr_not_found",
     _hq_ =
       [0,
        [15, [17, [0, cst$128, 1, 0], [11, "is not a compiled interface", 0]]],
        "%a@ is not a compiled interface"],
     _hr_ =
       [0,
        [15,
         [17,
          [0, cst$128, 1, 0],
          [11,
           "is not a compiled interface for this version of OCaml.",
           [17,
            4,
            [11, "It seems to be for ", [2, 0, [11, cst_version_of_OCaml, 0]]]]]]],
        "%a@ is not a compiled interface for this version of OCaml.@.It seems to be for %s version of OCaml."],
     _hs_ =
       [0,
        [11,
         "Corrupted compiled interface",
         [17, [0, cst$128, 1, 0], [15, 0]]],
        "Corrupted compiled interface@ %a"],
     cst_an_older$0 = cst_an_older$1,
     cst_a_newer$0 = cst_a_newer$1,
     cst_Dynlink_compilerlibs_Cmi_f = "Dynlink_compilerlibs.Cmi_format.Error",
     _hF_ =
       [0,
        [11,
         "Wrong file naming: ",
         [15,
          [17,
           [0, cst$128, 1, 0],
           [11,
            "contains the compiled interface for",
            [17,
             [0, cst$128, 1, 0],
             [2, 0, [11, cst_when, [2, 0, [11, cst_was_expected, 0]]]]]]]]],
        "Wrong file naming: %a@ contains the compiled interface for@ %s when %s was expected"],
     _hG_ =
       [0,
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "The files ",
          [15,
           [17,
            [0, cst$128, 1, 0],
            [11,
             "and ",
             [15,
              [17,
               [0, cst$128, 1, 0],
               [11,
                "make inconsistent assumptions",
                [17, [0, cst$128, 1, 0], [11, "over interface ", partial$6]]]]]]]]]],
        "@[<hov>The files %a@ and %a@ make inconsistent assumptions@ over interface %s@]"],
     cst_The_compilation_flag_recty =
       "The compilation flag -rectypes is required",
     _hH_ =
       [0,
        [18,
         [1, [0, [11, cst_hov, 0], cst_hov]],
         [11,
          "Invalid import of ",
          [2,
           0,
           [11,
            ", which uses recursive types.",
            [17, [0, cst$128, 1, 0], [2, 0, [17, 0, 0]]]]]]],
        "@[<hov>Invalid import of %s, which uses recursive types.@ %s@]"],
     _hE_ = [0, [0, 6, 0]],
     _hC_ = [0, 1, 0],
     _hD_ = [0, 0, 0],
     _hA_ = [0, cst_dynlink_compilerlibs_persi, 278, 6],
     _hB_ = [0, cst_dynlink_compilerlibs_persi, 281, 14],
     _hz_ = [32, cst$117, 0],
     _hv_ = [0, [15, 0], cst_a],
     _hw_ =
       [0,
        [12,
         32,
         [15,
          [17,
           [0, cst$128, 1, 0],
           [11,
            "contains the compiled interface for ",
            [17,
             [0, cst$128, 1, 0],
             [2, 0, [11, cst_when, [2, 0, [11, cst_was_expected, 0]]]]]]]]],
        " %a@ contains the compiled interface for @ %s when %s was expected"],
     _hx_ = [0, cst_dynlink_compilerlibs_persi, 245, 35],
     _hy_ =
       [0,
        [2, 0, [11, " uses recursive types", 0]],
        "%s uses recursive types"],
     cst_cmi$0 = cst_cmi$1,
     _hu_ = [0, cst_dynlink_compilerlibs_persi, 24, 46],
     cst_Dynlink_compilerlibs_Persi =
       "Dynlink_compilerlibs.Persistent_env.Error",
     _h9_ = [0, [2, 0, 0], cst_s$1],
     _h__ = [0, [15, [11, ".[", [4, 3, 0, 0, [12, 93, 0]]]], "%a.[%i]"],
     _is_ = [0, cst_dynlink_compilerlibs_env_m, 1806, 25],
     _it_ = [0, 0],
     _iu_ = [0, 0],
     _ir_ = [1, 0],
     _iv_ = [21, cst$117, 0],
     _iw_ = [46, cst$117, 0],
     _ix_ = [22, cst$117, 0, 0],
     cst_Env_lookup_apply_empty_arg = "Env.lookup_apply: empty argument list",
     _jv_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
        "@[@[<hov>"],
     _jw_ =
       [0,
        [11,
         cst_Internal_path,
         [17,
          [0, cst$128, 1, 0],
          [2, 0, [17, [0, cst$128, 1, 0], [11, "is dangling.", 0]]]]],
        "Internal path@ %s@ is dangling."],
     _jy_ =
       [0,
        [11,
         cst_Internal_path,
         [17,
          [0, cst$128, 1, 0],
          [2,
           0,
           [17,
            [0, cst$128, 1, 0],
            [11,
             "expands to",
             [17,
              [0, cst$128, 1, 0],
              [2, 0, [17, [0, cst$128, 1, 0], [11, "which is dangling.", 0]]]]]]]]],
        "Internal path@ %s@ expands to@ %s@ which is dangling."],
     cst_was_not_found = "was not found",
     cst_The_compiled_interface_for = "The compiled interface for module",
     _jx_ =
       [0,
        [17,
         0,
         [17,
          [0, cst$128, 1, 0],
          [18,
           [1, [0, 0, cst$117]],
           [2,
            0,
            [17,
             [0, cst$128, 1, 0],
             [2,
              0,
              [17, [0, cst$128, 1, 0], [2, 0, [12, 46, [17, 0, partial$7]]]]]]]]]],
        "@]@ @[%s@ %s@ %s.@]@]"],
     _jz_ =
       [0,
        [12, 39, [2, 0, [11, "' is not a valid value identifier.", 0]]],
        "'%s' is not a valid value identifier."],
     _i9_ =
       [0,
        [11, cst_Illegal_recursive_module_r, 0],
        cst_Illegal_recursive_module_r],
     _i__ = [0, [11, "Unbound value ", [15, 0]], "Unbound value %a"],
     cst_you_should_add_the_rec_key =
       "you should add the 'rec' keyword on line",
     cst_Hint_If_this_is_a_recursiv =
       "Hint: If this is a recursive definition,",
     _i$_ =
       [0,
        [17,
         4,
         [18,
          [1, [0, 0, cst$117]],
          [2,
           0,
           [17,
            [0, cst$128, 1, 0],
            [2, 0, [12, 32, [4, 3, 0, 0, [17, 0, 0]]]]]]]],
        "@.@[%s@ %s %i@]"],
     _ja_ =
       [0,
        [11, "Unbound type constructor ", [15, 0]],
        "Unbound type constructor %a"],
     _jb_ =
       [0, [11, "Unbound constructor ", [15, 0]], "Unbound constructor %a"],
     _jc_ =
       [0, [11, "Unbound record field ", [15, 0]], "Unbound record field %a"],
     _jd_ = [0, [11, "Unbound module ", [15, 0]], "Unbound module %a"],
     cst_but_module_types_are_not_m = "but module types are not modules",
     cst_Hint_There_is_a_module_typ = "Hint: There is a module type named",
     _je_ =
       [0,
        [17,
         4,
         [18,
          [1, [0, 0, cst$117]],
          [2, 0, [12, 32, [15, [11, cst$126, [2, 0, [17, 0, 0]]]]]]]],
        cst_s_a_s],
     _jf_ = [0, [11, "Unbound class ", [15, 0]], "Unbound class %a"],
     cst_but_classes_are_not_class_ = "but classes are not class types",
     cst_Hint_There_is_a_class_type = "Hint: There is a class type named",
     _jg_ =
       [0,
        [17,
         4,
         [18,
          [1, [0, 0, cst$117]],
          [2, 0, [12, 32, [15, [11, cst$126, [2, 0, [17, 0, 0]]]]]]]],
        cst_s_a_s],
     _jh_ =
       [0, [11, "Unbound module type ", [15, 0]], "Unbound module type %a"],
     cst_but_modules_are_not_module = "but modules are not module types",
     cst_Hint_There_is_a_module_nam = "Hint: There is a module named",
     _ji_ =
       [0,
        [17,
         4,
         [18,
          [1, [0, 0, cst$117]],
          [2, 0, [12, 32, [15, [11, cst$126, [2, 0, [17, 0, 0]]]]]]]],
        cst_s_a_s],
     _jj_ = [0, [11, "Unbound class type ", [15, 0]], "Unbound class type %a"],
     _jk_ =
       [0,
        [11, "Unbound instance variable ", [2, 0, 0]],
        "Unbound instance variable %s"],
     _jl_ =
       [0,
        [11, "The value ", [2, 0, [11, " is not an instance variable", 0]]],
        "The value %s is not an instance variable"],
     _jm_ =
       [0,
        [11,
         "The instance variable ",
         [15,
          [17,
           [0, cst$128, 1, 0],
           [11,
            "cannot be accessed from the definition of another instance variable",
            0]]]],
        "The instance variable %a@ cannot be accessed from the definition of another instance variable"],
     _jn_ =
       [0,
        [11,
         "The self variable ",
         [15,
          [17, [0, cst$128, 1, 0], [11, cst_cannot_be_accessed_from_th, 0]]]],
        "The self variable %a@ cannot be accessed from the definition of an instance variable"],
     _jo_ =
       [0,
        [11,
         "The ancestor variable ",
         [15,
          [17, [0, cst$128, 1, 0], [11, cst_cannot_be_accessed_from_th, 0]]]],
        "The ancestor variable %a@ cannot be accessed from the definition of an instance variable"],
     _jp_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11,
          cst_The_module,
          [15, [11, " is a structure, it cannot be applied", [17, 0, 0]]]]],
        "@[The module %a is a structure, it cannot be applied@]"],
     _jq_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11,
          cst_The_module,
          [15, [11, " is abstract, it cannot be applied", [17, 0, 0]]]]],
        "@[The module %a is abstract, it cannot be applied@]"],
     _jr_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11,
          cst_The_module,
          [15,
           [11, " is a functor, it cannot have any components", [17, 0, 0]]]]],
        "@[The module %a is a functor, it cannot have any components@]"],
     _js_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11,
          cst_The_module,
          [15,
           [11, " is abstract, it cannot have any components", [17, 0, 0]]]]],
        "@[The module %a is abstract, it cannot have any components@]"],
     _jt_ =
       [0,
        [18,
         [1, [0, 0, cst$117]],
         [11,
          "The functor ",
          [15,
           [11,
            " is generative,",
            [17,
             [0, cst$128, 1, 0],
             [11,
              "it",
              [17,
               [0, cst$128, 1, 0],
               [11, "cannot", [17, [0, cst$128, 1, 0], [11, "be", partial$8]]]]]]]]]],
        "@[The functor %a is generative,@ it@ cannot@ be@ applied@ in@ type@ expressions@]"],
     cst_is_the_current_compilation = "is the current compilation unit",
     cst_is_missing = "is missing",
     _ju_ =
       [0,
        [11,
         cst_The_module,
         [15,
          [11, " is an alias for module ", [15, [11, ", which ", [2, 0, 0]]]]]],
        "The module %a is an alias for module %a, which %s"],
     _i8_ = [0, cst_dynlink_compilerlibs_env_m, 3502, 19],
     _i7_ = [0, cst_dynlink_compilerlibs_env_m, 3499, 19],
     _i6_ = [0, cst_dynlink_compilerlibs_env_m, 3134, 10],
     _i4_ = [0, cst_dynlink_compilerlibs_env_m, 3130, 16],
     _i2_ = [0, cst_dynlink_compilerlibs_env_m, 3112, 10],
     _i0_ = [0, cst_dynlink_compilerlibs_env_m, 3108, 16],
     _iY_ = [0, cst_dynlink_compilerlibs_env_m, 3102, 16],
     _iW_ = [0, cst_dynlink_compilerlibs_env_m, 3096, 16],
     _iT_ = [0, cst_dynlink_compilerlibs_env_m, 3086, 16],
     _iR_ = [0, cst_dynlink_compilerlibs_env_m, 3076, 16],
     _iQ_ = [0, cst_dynlink_compilerlibs_env_m, 3070, 16],
     _iN_ = [0, [11, "module ", [2, 0, [2, 0, 0]]], "module %s%s"],
     _iM_ = [0, cst_dynlink_compilerlibs_env_m, 2623, 11],
     _iJ_ = [0, cst_dynlink_compilerlibs_env_m, 2517, 49],
     _iH_ = [27, cst$117, cst$117],
     _iI_ = [28, cst$117, cst$117],
     _iG_ = [0, cst_dynlink_compilerlibs_env_m, 2459, 22],
     _iD_ = [1, -358247754],
     _iE_ = [1, 1048315315],
     _iF_ = [1, -358247754],
     cst_the_signature_of = "the signature of ",
     _iq_ = [0, cst_dynlink_compilerlibs_env_m, 1682, 13],
     _io_ = [0, cst_dynlink_compilerlibs_env_m, 1370, 6],
     _in_ = [0, cst_dynlink_compilerlibs_env_m, 1349, 6],
     _im_ = [0, cst_dynlink_compilerlibs_env_m, 1336, 28],
     _ik_ = [0, cst_dynlink_compilerlibs_env_m, 1277, 10],
     _id_ = [0, cst_dynlink_compilerlibs_env_m, 1183, 26],
     _ie_ = [0, cst_dynlink_compilerlibs_env_m, 1187, 26],
     _if_ = [0, cst_dynlink_compilerlibs_env_m, 1192, 13],
     _ig_ = [0, cst_dynlink_compilerlibs_env_m, 1177, 26],
     _ih_ = [0, cst_dynlink_compilerlibs_env_m, 1161, 26],
     _ij_ = [0, cst_dynlink_compilerlibs_env_m, 1168, 30],
     _ii_ = [0, cst_dynlink_compilerlibs_env_m, 1170, 55],
     _ib_ = [0, cst_dynlink_compilerlibs_env_m, 1141, 13],
     _ic_ = [0, cst_dynlink_compilerlibs_env_m, 1143, 9],
     cst_Env_add_persistent_structu = "Env.add_persistent_structure",
     _h8_ = [0, cst_dynlink_compilerlibs_env_m, 763, 44],
     _h7_ = [0, cst_dynlink_compilerlibs_env_m, 755, 12],
     _h6_ = [0, cst_dynlink_compilerlibs_env_m, 746, 54],
     _h5_ = [0, cst_dynlink_compilerlibs_env_m, 741, 17],
     _hY_ = [0, cst_type$0],
     _h0_ = [0, cst_class_type$0],
     _h1_ = [0, cst_label$0],
     _hX_ = [0, cst_module_type$0],
     _h2_ = [0, cst_constructor$2],
     _h3_ = [0, cst_class$0],
     _h4_ = [0, cst_value$0],
     _hZ_ = [0, cst_module$0],
     _hW_ = [0, cst_dynlink_compilerlibs_env_m, 662, 45],
     _hV_ = [0, cst_dynlink_compilerlibs_env_m, 660, 36],
     _hU_ = [0, cst_dynlink_compilerlibs_env_m, 375, 10],
     _hT_ = [0, cst_dynlink_compilerlibs_env_m, 241, 10],
     _hN_ = [0, 2],
     _hP_ = [0, 0],
     _hQ_ = [0, 1],
     _hR_ = [0, 0],
     _hS_ = [0, 0],
     _hK_ = [0, 1],
     _hL_ = [0, 2],
     _hM_ = [0, 0],
     _hJ_ = [0, 0],
     _hI_ = [0, cst_dynlink_compilerlibs_env_m, 29, 46],
     cst_Dynlink_compilerlibs_Env_E = "Dynlink_compilerlibs.Env.Error",
     _jD_ = [0, [15, [12, 58, [4, 3, 0, 0, 0]]], "%a:%i"],
     _jE_ =
       [0, [12, 44, [4, 3, 0, 0, [11, "--", [4, 3, 0, 0, 0]]]], ",%i--%i"],
     _jF_ = [0, [12, 59, 0], cst$124],
     _jC_ = [0, "dynlink_compilerlibs/debuginfo.ml", 160, 4],
     _jB_ =
       [0,
        [2,
         0,
         [12,
          58,
          [4, 0, 0, 0, [12, 44, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]]]]],
        "%s:%d,%d-%d"],
     cst_unknown = "<unknown>",
     _jA_ = [0, cst$144],
     cst_fun$0 = ".(fun)",
     cst_fun = "(fun)",
     cst_Lambda_patch_guarded = "Lambda.patch_guarded",
     cst_raise = "raise",
     cst_reraise = "reraise",
     cst_raise_notrace = "raise_notrace",
     _jI_ = [0, 1],
     _jH_ = [0, cst_dynlink_compilerlibs_lambd, 798, 8],
     cst_not_found = " not found.",
     cst_Primitive = "Primitive ",
     cst_Cannot_find_address_for = "Cannot find address for: ",
     cst_let$0 = cst_let$1,
     cst_let = cst_let$1,
     cst_Not_simple = "Not_simple",
     _jG_ = [0, cst_dynlink_compilerlibs_lambd, 369, 2],
     _jJ_ =
       [0,
        cst_Out_of_memory$0,
        cst_Sys_error$0,
        cst_Failure$0,
        cst_Invalid_argument$0,
        cst_End_of_file$0,
        cst_Division_by_zero$0,
        cst_Not_found$0,
        cst_Match_failure$0,
        cst_Stack_overflow$0,
        cst_Sys_blocked_io$0,
        cst_Assert_failure$0,
        cst_Undefined_recursive_module$0],
     _jK_ =
       [0,
        "caml_abs_float",
        "caml_acos_float",
        "caml_acosh_float",
        "caml_add_float",
        "caml_alloc_dummy",
        "caml_alloc_dummy_float",
        "caml_alloc_dummy_function",
        "caml_alloc_dummy_infix",
        "caml_alloc_stack",
        "caml_array_append",
        "caml_array_blit",
        "caml_array_concat",
        "caml_array_fill",
        "caml_array_get",
        "caml_array_get_addr",
        "caml_array_set",
        "caml_array_set_addr",
        "caml_array_sub",
        "caml_array_unsafe_get",
        "caml_array_unsafe_set",
        "caml_asin_float",
        "caml_asinh_float",
        "caml_atan2_float",
        "caml_atan_float",
        "caml_atanh_float",
        "caml_atomic_cas",
        "caml_atomic_exchange",
        "caml_atomic_fetch_add",
        "caml_atomic_load",
        "caml_ba_blit",
        "caml_ba_change_layout",
        "caml_ba_create",
        "caml_ba_dim",
        "caml_ba_dim_1",
        "caml_ba_dim_2",
        "caml_ba_dim_3",
        "caml_ba_fill",
        "caml_ba_get_1",
        "caml_ba_get_2",
        "caml_ba_get_3",
        "caml_ba_get_generic",
        "caml_ba_kind",
        "caml_ba_layout",
        "caml_ba_num_dims",
        "caml_ba_reshape",
        "caml_ba_set_1",
        "caml_ba_set_2",
        "caml_ba_set_3",
        "caml_ba_set_generic",
        "caml_ba_slice",
        "caml_ba_sub",
        "caml_ba_uint8_get16",
        "caml_ba_uint8_get32",
        "caml_ba_uint8_get64",
        "caml_ba_uint8_set16",
        "caml_ba_uint8_set32",
        "caml_ba_uint8_set64",
        "caml_backtrace_status",
        "caml_blit_bytes",
        "caml_blit_string",
        "caml_bswap16",
        "caml_bytes_compare",
        "caml_bytes_equal",
        "caml_bytes_get",
        "caml_bytes_get16",
        "caml_bytes_get32",
        "caml_bytes_get64",
        "caml_bytes_greaterequal",
        "caml_bytes_greaterthan",
        "caml_bytes_lessequal",
        "caml_bytes_lessthan",
        "caml_bytes_notequal",
        "caml_bytes_of_string",
        "caml_bytes_set",
        "caml_bytes_set16",
        "caml_bytes_set32",
        "caml_bytes_set64",
        "caml_cbrt_float",
        "caml_ceil_float",
        "caml_channel_descriptor",
        "caml_classify_float",
        "caml_compare",
        "caml_continuation_use",
        "caml_continuation_use_and_update_handler_noexc",
        "caml_continuation_use_noexc",
        "caml_convert_raw_backtrace",
        "caml_convert_raw_backtrace_slot",
        "caml_copysign_float",
        "caml_cos_float",
        "caml_cosh_float",
        "caml_create_bytes",
        "caml_create_string",
        "caml_div_float",
        "caml_domain_dls_get",
        "caml_domain_dls_set",
        "caml_domain_spawn",
        "caml_drop_continuation",
        "caml_dynlink_add_primitive",
        "caml_dynlink_close_lib",
        "caml_dynlink_get_current_libs",
        "caml_dynlink_lookup_symbol",
        "caml_dynlink_open_lib",
        "caml_ensure_stack_capacity",
        "caml_ephe_blit_data",
        "caml_ephe_blit_key",
        "caml_ephe_check_data",
        "caml_ephe_check_key",
        "caml_ephe_create",
        "caml_ephe_get_data",
        "caml_ephe_get_data_copy",
        "caml_ephe_get_key",
        "caml_ephe_get_key_copy",
        "caml_ephe_set_data",
        "caml_ephe_set_key",
        "caml_ephe_unset_data",
        "caml_ephe_unset_key",
        "caml_eq_float",
        "caml_equal",
        "caml_erf_float",
        "caml_erfc_float",
        "caml_exp2_float",
        "caml_exp_float",
        "caml_expm1_float",
        "caml_fill_bytes",
        "caml_fill_string",
        "caml_final_register",
        "caml_final_register_called_without_value",
        "caml_final_release",
        "caml_float_compare",
        "caml_float_of_int",
        "caml_float_of_string",
        "caml_floatarray_blit",
        "caml_floatarray_create",
        "caml_floatarray_get",
        "caml_floatarray_set",
        "caml_floatarray_unsafe_get",
        "caml_floatarray_unsafe_set",
        "caml_floor_float",
        "caml_fma_float",
        "caml_fmod_float",
        "caml_format_float",
        "caml_format_int",
        "caml_fresh_oo_id",
        "caml_frexp_float",
        "caml_gc_compaction",
        "caml_gc_counters",
        "caml_gc_full_major",
        "caml_gc_get",
        "caml_gc_major",
        "caml_gc_major_slice",
        "caml_gc_minor",
        "caml_gc_minor_words",
        "caml_gc_quick_stat",
        "caml_gc_set",
        "caml_gc_stat",
        "caml_ge_float",
        "caml_get_continuation_callstack",
        "caml_get_current_callstack",
        "caml_get_current_environment",
        "caml_get_exception_backtrace",
        "caml_get_exception_raw_backtrace",
        "caml_get_global_data",
        "caml_get_minor_free",
        "caml_get_public_method",
        "caml_get_section_table",
        "caml_greaterequal",
        "caml_greaterthan",
        "caml_gt_float",
        "caml_hash",
        "caml_hexstring_of_float",
        "caml_hypot_float",
        "caml_input_value",
        "caml_input_value_from_bytes",
        "caml_input_value_to_outside_heap",
        "caml_install_signal_handler",
        "caml_int32_add",
        "caml_int32_and",
        "caml_int32_bits_of_float",
        "caml_int32_bswap",
        "caml_int32_compare",
        "caml_int32_div",
        "caml_int32_float_of_bits",
        "caml_int32_format",
        "caml_int32_mod",
        "caml_int32_mul",
        "caml_int32_neg",
        "caml_int32_of_float",
        "caml_int32_of_int",
        "caml_int32_of_string",
        "caml_int32_or",
        "caml_int32_shift_left",
        "caml_int32_shift_right",
        "caml_int32_shift_right_unsigned",
        "caml_int32_sub",
        "caml_int32_to_float",
        "caml_int32_to_int",
        "caml_int32_xor",
        "caml_int64_add",
        "caml_int64_add_native",
        "caml_int64_and",
        "caml_int64_and_native",
        "caml_int64_bits_of_float",
        "caml_int64_bswap",
        "caml_int64_compare",
        "caml_int64_div",
        "caml_int64_div_native",
        "caml_int64_float_of_bits",
        "caml_int64_format",
        "caml_int64_mod",
        "caml_int64_mod_native",
        "caml_int64_mul",
        "caml_int64_mul_native",
        "caml_int64_neg",
        "caml_int64_neg_native",
        "caml_int64_of_float",
        "caml_int64_of_int",
        "caml_int64_of_int32",
        "caml_int64_of_nativeint",
        "caml_int64_of_string",
        "caml_int64_or",
        "caml_int64_or_native",
        "caml_int64_shift_left",
        "caml_int64_shift_right",
        "caml_int64_shift_right_unsigned",
        "caml_int64_sub",
        "caml_int64_sub_native",
        "caml_int64_to_float",
        "caml_int64_to_int",
        "caml_int64_to_int32",
        "caml_int64_to_nativeint",
        "caml_int64_xor",
        "caml_int64_xor_native",
        "caml_int_as_pointer",
        "caml_int_compare",
        "caml_int_of_float",
        "caml_int_of_string",
        "caml_invoke_traced_function",
        "caml_lazy_make_forward",
        "caml_lazy_read_result",
        "caml_lazy_reset_to_lazy",
        "caml_lazy_update_to_forcing",
        "caml_lazy_update_to_forward",
        "caml_ldexp_float",
        "caml_le_float",
        "caml_lessequal",
        "caml_lessthan",
        "caml_lex_engine",
        "caml_log10_float",
        "caml_log1p_float",
        "caml_log2_float",
        "caml_log_float",
        "caml_lt_float",
        "caml_lxm_next",
        "caml_make_array",
        "caml_make_float_vect",
        "caml_make_vect",
        "caml_marshal_data_size",
        "caml_md5_chan",
        "caml_md5_string",
        "caml_memprof_start",
        "caml_memprof_stop",
        "caml_ml_bytes_length",
        "caml_ml_channel_size",
        "caml_ml_channel_size_64",
        "caml_ml_close_channel",
        "caml_ml_condition_broadcast",
        "caml_ml_condition_new",
        "caml_ml_condition_signal",
        "caml_ml_condition_wait",
        "caml_ml_debug_info_status",
        "caml_ml_domain_cpu_relax",
        "caml_ml_domain_id",
        "caml_ml_domain_unique_token",
        "caml_ml_enable_runtime_warnings",
        "caml_ml_flush",
        "caml_ml_input",
        "caml_ml_input_char",
        "caml_ml_input_int",
        "caml_ml_input_scan_line",
        "caml_ml_is_buffered",
        "caml_ml_mutex_lock",
        "caml_ml_mutex_new",
        "caml_ml_mutex_try_lock",
        "caml_ml_mutex_unlock",
        "caml_ml_open_descriptor_in",
        "caml_ml_open_descriptor_out",
        "caml_ml_out_channels_list",
        "caml_ml_output",
        "caml_ml_output_bytes",
        "caml_ml_output_char",
        "caml_ml_output_int",
        "caml_ml_pos_in",
        "caml_ml_pos_in_64",
        "caml_ml_pos_out",
        "caml_ml_pos_out_64",
        "caml_ml_runtime_warnings_enabled",
        "caml_ml_seek_in",
        "caml_ml_seek_in_64",
        "caml_ml_seek_out",
        "caml_ml_seek_out_64",
        "caml_ml_set_binary_mode",
        "caml_ml_set_buffered",
        "caml_ml_set_channel_name",
        "caml_ml_string_length",
        "caml_modf_float",
        "caml_mul_float",
        "caml_nativeint_add",
        "caml_nativeint_and",
        "caml_nativeint_bswap",
        "caml_nativeint_compare",
        "caml_nativeint_div",
        "caml_nativeint_format",
        "caml_nativeint_mod",
        "caml_nativeint_mul",
        "caml_nativeint_neg",
        "caml_nativeint_of_float",
        "caml_nativeint_of_int",
        "caml_nativeint_of_int32",
        "caml_nativeint_of_string",
        "caml_nativeint_or",
        "caml_nativeint_shift_left",
        "caml_nativeint_shift_right",
        "caml_nativeint_shift_right_unsigned",
        "caml_nativeint_sub",
        "caml_nativeint_to_float",
        "caml_nativeint_to_int",
        "caml_nativeint_to_int32",
        "caml_nativeint_xor",
        "caml_neg_float",
        "caml_neq_float",
        "caml_new_lex_engine",
        "caml_nextafter_float",
        "caml_notequal",
        "caml_obj_add_offset",
        "caml_obj_block",
        "caml_obj_compare_and_swap",
        "caml_obj_dup",
        "caml_obj_is_shared",
        "caml_obj_raw_field",
        "caml_obj_reachable_words",
        "caml_obj_set_raw_field",
        "caml_obj_tag",
        "caml_obj_with_tag",
        "caml_output_value",
        "caml_output_value_to_buffer",
        "caml_output_value_to_bytes",
        "caml_output_value_to_string",
        "caml_parse_engine",
        "caml_power_float",
        "caml_raw_backtrace_length",
        "caml_raw_backtrace_next_slot",
        "caml_raw_backtrace_slot",
        "caml_realloc_global",
        "caml_recommended_domain_count",
        "caml_record_backtrace",
        "caml_register_named_value",
        "caml_reify_bytecode",
        "caml_reset_afl_instrumentation",
        "caml_restore_raw_backtrace",
        "caml_round_float",
        "caml_runtime_events_pause",
        "caml_runtime_events_resume",
        "caml_runtime_events_start",
        "caml_runtime_parameters",
        "caml_runtime_variant",
        "caml_set_oo_id",
        "caml_set_parser_trace",
        "caml_signbit",
        "caml_signbit_float",
        "caml_sin_float",
        "caml_sinh_float",
        "caml_sqrt_float",
        "caml_static_release_bytecode",
        "caml_string_compare",
        "caml_string_equal",
        "caml_string_get",
        "caml_string_get16",
        "caml_string_get32",
        "caml_string_get64",
        "caml_string_greaterequal",
        "caml_string_greaterthan",
        "caml_string_hash",
        "caml_string_lessequal",
        "caml_string_lessthan",
        "caml_string_notequal",
        "caml_string_of_bytes",
        "caml_string_set",
        "caml_sub_float",
        "caml_sys_argv",
        "caml_sys_chdir",
        "caml_sys_close",
        "caml_sys_const_backend_type",
        "caml_sys_const_big_endian",
        "caml_sys_const_int_size",
        "caml_sys_const_max_wosize",
        "caml_sys_const_ostype_cygwin",
        "caml_sys_const_ostype_unix",
        "caml_sys_const_ostype_win32",
        "caml_sys_const_word_size",
        "caml_sys_executable_name",
        "caml_sys_exit",
        "caml_sys_file_exists",
        "caml_sys_get_argv",
        "caml_sys_get_config",
        "caml_sys_getcwd",
        "caml_sys_getenv",
        "caml_sys_is_directory",
        "caml_sys_isatty",
        "caml_sys_mkdir",
        "caml_sys_modify_argv",
        "caml_sys_open",
        "caml_sys_random_seed",
        "caml_sys_read_directory",
        "caml_sys_remove",
        "caml_sys_rename",
        "caml_sys_rmdir",
        "caml_sys_system_command",
        "caml_sys_time",
        "caml_sys_time_include_children",
        "caml_sys_unsafe_getenv",
        "caml_tan_float",
        "caml_tanh_float",
        "caml_terminfo_rows",
        "caml_trunc_float",
        "caml_update_dummy",
        "caml_weak_blit",
        "caml_weak_check",
        "caml_weak_create",
        "caml_weak_get",
        "caml_weak_get_copy",
        "caml_weak_set"],
     cst_Dynlink_compilerlibs_Bytes =
       "Dynlink_compilerlibs.Bytesections.Bad_magic_number",
     _jN_ = [0, 0],
     cst_ld_conf = "ld.conf",
     _jM_ = [0, "dynlink_compilerlibs/dll.ml", 142, 4],
     _jL_ = [0, 0],
     cst_dll = "dll",
     _jY_ =
       [0,
        [11, "Reference to undefined global `", [2, 0, [12, 39, 0]]],
        "Reference to undefined global `%s'"],
     _jZ_ =
       [0,
        [11, "The external function `", [2, 0, [11, "' is not available", 0]]],
        "The external function `%s' is not available"],
     _j0_ =
       [0,
        [11, "Cannot find or execute the runtime system ", [2, 0, 0]],
        "Cannot find or execute the runtime system %s"],
     _j1_ =
       [0,
        [11,
         "The value of the global `",
         [2, 0, [11, "' is not yet computed", 0]]],
        "The value of the global `%s' is not yet computed"],
     cst_Symtable_hide_additions = "Symtable.hide_additions",
     cst_SYMB = "SYMB",
     cst_PRIM = "PRIM",
     cst_DLPT = "DLPT",
     cst_CRCS = "CRCS",
     cst_Toplevel_bytecode_executab =
       "Toplevel bytecode executable is corrupted",
     _jX_ = [0, "-p", 0],
     cst_Symtable_init = "Symtable.init",
     cst_camlprims = "camlprims",
     _jW_ =
       [0,
        [11, "extern value ", [2, 0, [11, "();\n", 0]]],
        "extern value %s();\n"],
     _jP_ =
       [0, [11, cst_typedef_value_primitive, 0], cst_typedef_value_primitive],
     _jQ_ =
       [0,
        [11, cst_primitive_caml_builtin_cpr, 0],
        cst_primitive_caml_builtin_cpr],
     _jV_ = [0, [11, cst$132, [2, 0, [11, ",\n", 0]]], "  %s,\n"],
     _jR_ = [0, [11, cst_primitive_0, 0], cst_primitive_0],
     _jS_ =
       [0,
        [11, cst_const_char_caml_names_of_b, 0],
        cst_const_char_caml_names_of_b],
     _jU_ = [0, [11, '  "', [2, 0, [11, '",\n', 0]]], '  "%s",\n'],
     _jT_ = [0, [11, cst_char_0, 0], cst_char_0],
     cst_Dynlink_compilerlibs_Symta = "Dynlink_compilerlibs.Symtable.Error",
     c_has_debug_prefix_map = 1,
     as_has_debug_prefix_map = 0;
    if(! Stdlib_Sys[7] && ! Stdlib_Sys[8]){
     var
      mkmaindll$0 = cst_cc_shared_undefined_dynami,
      mkexe$0 = cst_cc_O2_fno_strict_aliasing_,
      mkdll = cst_cc_shared_undefined_dynami$0;
     break a;
    }
    var
     _t_ = caml_callback(Stdlib_Sys[2], [cst_OCAML_FLEXLINK]),
     flexlink = caml_callback(Stdlib_Option[3], [_t_, cst_flexlink]),
     f$0 =
       function(i, cont){
        var c = caml_string_get(flexlink, i);
        if(47 === c && Stdlib_Sys[7]) return cont(92);
        return cont(c);
       },
     flexlink$0 =
       caml_callback(Stdlib_String[2], [caml_ml_string_length(flexlink), f$0]),
     _u_ = caml_callback(Stdlib[28], [flags, cst$6]),
     _v_ = caml_callback(Stdlib[28], [cst_maindll, _u_]),
     mkmaindll = caml_callback(Stdlib[28], [flexlink$0, _v_]),
     _w_ = caml_callback(Stdlib[28], [flags, cst$7]),
     _x_ = caml_callback(Stdlib[28], [cst_exe, _w_]),
     mkexe = caml_callback(Stdlib[28], [flexlink$0, _x_]),
     _y_ = caml_callback(Stdlib[28], [flags, cst$8]),
     mkmaindll$0 = mkmaindll,
     mkexe$0 = mkexe,
     mkdll = caml_callback(Stdlib[28], [flexlink$0, _y_]);
   }
   var
    flambda = 0,
    windows_unicode = 0,
    flat_float_array = 1,
    function_sections = 0,
    afl_instrument = 0,
    asm_cfi_supported = 1,
    with_frame_pointers = 0,
    systhread_supported = 1,
    version = Stdlib_Sys[46],
    with_flambda_invariants = 0,
    with_cmm_invariants = 0,
    profinfo = 0,
    profinfo_width = 0,
    flexdll_dirs = 0;
   try{
    var _j3_ = caml_sys_getenv("OCAMLLIB"), standard_library_default$0 = _j3_;
   }
   catch(_atJ_){
    var _z_ = caml_wrap_exception(_atJ_);
    if(_z_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_z_, 0);
    try{
     var _j2_ = caml_sys_getenv("CAMLLIB"), standard_library_default$0 = _j2_;
    }
    catch(_atK_){
     var _A_ = caml_wrap_exception(_atK_);
     if(_A_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_A_, 0);
     var standard_library_default$0 = standard_library_default;
    }
   }
   var
    naked_pointers = 0,
    interface_suffix = [0, cst_mli],
    _B_ = Stdlib_Sys[4],
    safe_string = 1,
    default_safe_string = 1,
    max_tag = 243,
    lazy_tag = 246,
    max_young_wosize = 256,
    stack_threshold = 32,
    stack_safety_margin = 6,
    default_executable_name =
      caml_string_notequal(_B_, "Cygwin")
       ? caml_string_notequal
          (_B_, "Unix")
         ? caml_string_notequal
            (_B_, cst_Win32)
           ? cst_camlprog
           : cst_camlprog_exe
         : cst_a_out
       : cst_camlprog_exe;
   function p(x, v){return [0, x, [0, v]];}
   function p_int(x, v){return [0, x, [1, v]];}
   function p_bool(x, v){return [0, x, [2, v]];}
   var
    _C_ = [0, p(cst_linear_magic_number, linear_magic_number), 0],
    _D_ = [0, p(cst_cmt_magic_number, cmt_magic_number), _C_],
    _E_ = [0, p(cst_cmxs_magic_number, cmxs_magic_number), _D_],
    _F_ = [0, p(cst_ast_intf_magic_number, ast_intf_magic_number), _E_],
    _G_ = [0, p(cst_ast_impl_magic_number, ast_impl_magic_number), _F_],
    _H_ = [0, p(cst_cmxa_magic_number, cmxa_magic_number), _G_],
    _I_ = [0, p(cst_cmx_magic_number, cmx_magic_number), _H_],
    _J_ = [0, p(cst_cma_magic_number, cma_magic_number), _I_],
    _K_ = [0, p(cst_cmo_magic_number, cmo_magic_number), _J_],
    _L_ = [0, p(cst_cmi_magic_number, cmi_magic_number), _K_],
    _M_ = [0, p(cst_exec_magic_number, exec_magic_number), _L_],
    _N_ = [0, p_bool(cst_naked_pointers, naked_pointers), _M_],
    _O_ =
      [0,
       p_bool(cst_supports_shared_libraries, supports_shared_libraries),
       _N_],
    _P_ = [0, p_bool(cst_windows_unicode, windows_unicode), _O_],
    _Q_ = [0, p_bool(cst_afl_instrument, afl_instrument), _P_],
    _R_ = [0, p_bool(cst_function_sections, function_sections), _Q_],
    _S_ = [0, p_bool(cst_flat_float_array, flat_float_array), _R_],
    _T_ = [0, p_bool(cst_default_safe_string, default_safe_string), _S_],
    _U_ = [0, p_bool(cst_safe_string, safe_string), _T_],
    _V_ = [0, p_bool(cst_flambda, flambda), _U_],
    _W_ = [0, p(cst_target, target), _V_],
    _X_ = [0, p(cst_host, host), _W_],
    _Y_ = [0, p_bool(cst_systhread_supported, systhread_supported), _X_],
    _Z_ = [0, p(cst_default_executable_name, default_executable_name), _Y_],
    ___ = [0, p(cst_os_type, Stdlib_Sys[4]), _Z_],
    _$_ = [0, p(cst_ext_dll, ext_dll), ___],
    _aa_ = [0, p(cst_ext_lib, ext_lib), _$_],
    _ab_ = [0, p(cst_ext_asm, ext_asm), _aa_],
    _ac_ = [0, p(cst_ext_obj, ext_obj), _ab_],
    _ad_ = [0, p(cst_ext_exe, ext_exe), _ac_],
    _ae_ = [0, p_bool(cst_with_frame_pointers, with_frame_pointers), _ad_],
    _af_ = [0, p_bool(cst_asm_cfi_supported, asm_cfi_supported), _ae_],
    _ag_ = [0, p(cst_asm, asm), _af_],
    _ah_ = [0, p(cst_system, system), _ag_],
    _ai_ = [0, p_int(cst_word_size, Stdlib_Sys[9]), _ah_],
    _aj_ = [0, p_int(cst_int_size, Stdlib_Sys[10]), _ai_],
    _ak_ = [0, p(cst_model, model), _aj_],
    _al_ = [0, p(cst_architecture, architecture), _ak_],
    _am_ = [0, p(cst_native_pack_linker, native_pack_linker), _al_],
    _an_ = [0, p(cst_native_c_libraries, native_c_libraries), _am_],
    _ao_ = [0, p(cst_bytecomp_c_libraries, bytecomp_c_libraries), _an_],
    _ap_ = [0, p(cst_native_c_compiler, native_c_compiler), _ao_],
    _aq_ = [0, p(cst_bytecomp_c_compiler, bytecomp_c_compiler), _ap_],
    _ar_ = [0, p(cst_ocamlopt_cppflags, ocamlopt_cppflags), _aq_],
    _as_ = [0, p(cst_ocamlopt_cflags, ocamlopt_cflags), _ar_],
    _at_ = [0, p(cst_ocamlc_cppflags, ocamlc_cppflags), _as_],
    _au_ = [0, p(cst_ocamlc_cflags, ocamlc_cflags), _at_],
    _av_ = [0, p(cst_c_compiler, c_compiler), _au_],
    _aw_ = [0, p(cst_ccomp_type, ccomp_type), _av_],
    _ax_ = [0, p(cst_standard_library, standard_library_default$0), _aw_],
    _ay_ =
      [0, p(cst_standard_library_default, standard_library_default), _ax_],
    configuration_variables = [0, p(cst_version, version), _ay_];
   function print_config_value(oc, param, cont){
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_cps_call4(Stdlib_Printf[1], oc, _az_, s, cont);
      case 1:
       var n = param[1];
       return caml_cps_call4(Stdlib_Printf[1], oc, _aA_, n, cont);
      default:
       var p = param[1];
       return caml_cps_call4(Stdlib_Printf[1], oc, _aB_, p, cont);
    }
   }
   function print_config(oc, cont){
    function print(param, cont){
     var v = param[2], x = param[1];
     return caml_cps_call6
             (Stdlib_Printf[1], oc, _aC_, x, print_config_value, v, cont);
    }
    return caml_cps_call3
            (Stdlib_List[17],
             print,
             configuration_variables,
             function(_atI_){return caml_cps_call2(Stdlib[63], oc, cont);});
   }
   function config_var(x, cont){
    return caml_cps_call3
            (Stdlib_List[47],
             x,
             configuration_variables,
             function(match){
              if(! match) return cont(0);
              var v = match[1];
              function _atH_(s){return cont([0, s]);}
              switch(v[0]){
                case 0:
                 var s = v[1]; return _atH_(s);
                case 1:
                 var n = v[1];
                 return caml_cps_call2(Stdlib_Int[12], n, _atH_);
                default:
                 var b = v[1]; return caml_cps_call2(Stdlib[30], b, _atH_);
              }
             });
   }
   var
    Dynlink_compilerlibs_Config =
      [0,
       version,
       bindir,
       standard_library_default$0,
       ccomp_type,
       c_compiler,
       c_output_obj,
       c_has_debug_prefix_map,
       as_has_debug_prefix_map,
       ocamlc_cflags,
       ocamlc_cppflags,
       ocamlopt_cflags,
       ocamlopt_cppflags,
       bytecomp_c_libraries,
       native_c_libraries,
       native_pack_linker,
       mkdll,
       mkexe$0,
       mkmaindll$0,
       default_rpath,
       mksharedlibrpath,
       ar,
       interface_suffix,
       exec_magic_number,
       cmi_magic_number,
       cmo_magic_number,
       cma_magic_number,
       cmx_magic_number,
       cmxa_magic_number,
       ast_intf_magic_number,
       ast_impl_magic_number,
       cmxs_magic_number,
       cmt_magic_number,
       linear_magic_number,
       max_tag,
       lazy_tag,
       max_young_wosize,
       stack_threshold,
       stack_safety_margin,
       architecture,
       model,
       system,
       asm,
       asm_cfi_supported,
       with_frame_pointers,
       ext_obj,
       ext_asm,
       ext_lib,
       ext_dll,
       ext_exe,
       default_executable_name,
       systhread_supported,
       flexdll_dirs,
       host,
       target,
       flambda,
       with_flambda_invariants,
       with_cmm_invariants,
       profinfo,
       profinfo_width,
       flat_float_array,
       function_sections,
       windows_unicode,
       naked_pointers,
       supports_shared_libraries,
       afl_instrument,
       print_config,
       config_var,
       0];
   caml_register_global
    (1384, Dynlink_compilerlibs_Config, "Dynlink_compilerlibs.Config");
   function errorf(fmt, cont){
    return caml_cps_call3
            (Stdlib_Printf[10],
             function(err, cont){return cont([1, err]);},
             fmt,
             cont);
   }
   function encode_prefix(str, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             caml_ml_string_length(str),
             function(buf){
              function push_char(c, cont){
               return 37 === c
                       ? caml_cps_call3(Stdlib_Buffer[16], buf, cst$9, cont)
                       : 58
                         === c
                         ? caml_cps_call3(Stdlib_Buffer[16], buf, cst$10, cont)
                         : 61
                           === c
                           ? caml_cps_call3(Stdlib_Buffer[16], buf, cst$11, cont)
                           : caml_cps_call3(Stdlib_Buffer[12], buf, c, cont);
              }
              return caml_cps_call3
                      (Stdlib_String[29],
                       push_char,
                       str,
                       function(_atG_){
                        return caml_cps_call2(Stdlib_Buffer[2], buf, cont);
                       });
             });
   }
   function decode_prefix(str, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             caml_ml_string_length(str),
             function(buf){
              function loop(i, cont){
               function _atz_(i){
                if(caml_ml_string_length(str) <= i)
                 return caml_cps_call2
                         (Stdlib_Buffer[2],
                          buf,
                          function(_atF_){return cont([0, _atF_]);});
                var c = caml_string_get(str, i), switcher = c - 58 | 0;
                if(3 < switcher >>> 0){
                 if(-21 === switcher){
                  var
                   push =
                     function(c, cont){
                      return caml_cps_call3
                              (Stdlib_Buffer[12],
                               buf,
                               c,
                               function(_atD_){
                                return caml_cps_exact_call2(loop, i + 2 | 0, cont);
                               });
                     };
                  if((i + 1 | 0) === caml_ml_string_length(str))
                   return caml_cps_exact_call2
                           (errorf,
                            _aD_,
                            function(_atC_){return caml_cps_call2(_atC_, str, cont);});
                  var
                   c$0 = caml_string_get(str, i + 1 | 0),
                   switcher$0 = c$0 - 35 | 0;
                  if(11 >= switcher$0 >>> 0)
                   switch(switcher$0){
                     case 0:
                      return caml_cps_exact_call2(push, 37, cont);
                     case 8:
                      return caml_cps_exact_call2(push, 61, cont);
                     case 11:
                      return caml_cps_exact_call2(push, 58, cont);
                   }
                  return caml_cps_exact_call2
                          (errorf,
                           _aE_,
                           function(_atB_){return caml_cps_call2(_atB_, c$0, cont);});
                 }
                }
                else if(1 < switcher - 1 >>> 0)
                 return caml_cps_exact_call2
                         (errorf,
                          _aF_,
                          function(_atE_){return caml_cps_call2(_atE_, c, cont);});
                return caml_cps_call3
                        (Stdlib_Buffer[12],
                         buf,
                         c,
                         function(_atA_){
                          var i$0 = i + 1 | 0;
                          return caml_cps_exact_call1(_atz_, i$0);
                         });
               }
               return _atz_(i);
              }
              return caml_cps_exact_call2(loop, 0, cont);
             });
   }
   function encode_pair(param, cont){
    var source = param[2], target = param[1], _atv_ = 0;
    return caml_cps_exact_call2
            (encode_prefix,
             source,
             function(_atw_){
              var _atx_ = [0, _atw_, _atv_];
              return caml_cps_exact_call2
                      (encode_prefix,
                       target,
                       function(_aty_){
                        return caml_cps_call3
                                (Stdlib_String[6], cst$12, [0, _aty_, _atx_], cont);
                       });
             });
   }
   function decode_pair(str, cont){
    caml_push_trap
     (function(_att_){
       if(_att_ === Stdlib[8])
        return caml_cps_exact_call2
                (errorf,
                 _aG_,
                 function(_atu_){return caml_cps_call2(_atu_, str, cont);});
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_att_, 0));
      });
    return caml_cps_call3
            (Stdlib_String[35],
             str,
             61,
             function(equal_pos){
              caml_pop_trap();
              return caml_cps_call4
                      (Stdlib_String[15],
                       str,
                       0,
                       equal_pos,
                       function(encoded_target){
                        return caml_cps_call4
                                (Stdlib_String[15],
                                 str,
                                 equal_pos + 1 | 0,
                                 (caml_ml_string_length(str) - equal_pos | 0) - 1 | 0,
                                 function(encoded_source){
                                  return caml_cps_exact_call2
  (decode_prefix,
   encoded_target,
   function(match){
    return caml_cps_exact_call2
            (decode_prefix,
             encoded_source,
             function(match$0){
              if(0 === match[0]){
               var target = match[1];
               if(0 === match$0[0]){
                var source = match$0[1];
                return cont([0, [0, target, source]]);
               }
               var err = match$0;
              }
              else
               var err = match;
              return cont(err);
             });
   });
                                 });
                       });
             });
   }
   function encode_map(map, cont){
    function encode_elem(param, cont){
     if(! param) return cont(cst$13);
     var pair = param[1];
     return caml_cps_exact_call2(encode_pair, pair, cont);
    }
    return caml_cps_call3
            (Stdlib_List[19],
             encode_elem,
             map,
             function(_atr_){
              return caml_cps_call2
                      (Stdlib_String[6],
                       cst$14,
                       function(_ats_){return caml_cps_call2(_ats_, _atr_, cont);});
             });
   }
   function decode_map(str, cont){
    var Shortcut = [248, cst_Shortcut, caml_fresh_oo_id(0)];
    function decode_or_empty(pair, cont){
     return caml_string_notequal(pair, cst$117)
             ? caml_cps_exact_call2
               (decode_pair,
                pair,
                function(match){
                 if(0 === match[0]){
                  var str = match[1];
                  return cont([0, str]);
                 }
                 var err = match[1], raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace([0, Shortcut, err], 1));
                })
             : cont(0);
    }
    return caml_cps_call3
            (Stdlib_String[16],
             58,
             str,
             function(pairs){
              caml_push_trap
               (function(exn){
                 if(exn[1] === Shortcut){
                  var err = exn[2];
                  return cont([1, err]);
                 }
                 var
                  raise = caml_pop_trap(),
                  exn$0 = caml_maybe_attach_backtrace(exn, 0);
                 return raise(exn$0);
                });
              return caml_cps_call3
                      (Stdlib_List[19],
                       decode_or_empty,
                       pairs,
                       function(map){caml_pop_trap(); return cont([0, map]);});
             });
   }
   function rewrite_opt(prefix_map, path, cont){
    function is_prefix(param, cont){
     if(! param) return cont(0);
     var
      source = param[1][2],
      _atp_ =
        caml_ml_string_length(source) <= caml_ml_string_length(path) ? 1 : 0;
     return _atp_
             ? caml_cps_call4
               (Stdlib_String[15],
                path,
                0,
                caml_ml_string_length(source),
                function(_atq_){
                 return caml_cps_call3(Stdlib_String[8], source, _atq_, cont);
                })
             : cont(_atp_);
    }
    caml_push_trap
     (function(_ato_){
       if(_ato_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_ato_, 0));
      });
    return caml_cps_call2
            (Stdlib_List[9],
             prefix_map,
             function(_atl_){
              return caml_cps_call3
                      (Stdlib_List[38],
                       is_prefix,
                       _atl_,
                       function(val){
                        caml_pop_trap();
                        if(! val) return cont(0);
                        var match = val[1], source = match[2], target = match[1];
                        return caml_cps_call4
                                (Stdlib_String[15],
                                 path,
                                 caml_ml_string_length(source),
                                 caml_ml_string_length(path) - caml_ml_string_length(source)
                                 | 0,
                                 function(_atm_){
                                  return caml_cps_call3
  (Stdlib[28],
   target,
   _atm_,
   function(_atn_){return cont([0, _atn_]);});
                                 });
                       });
             });
   }
   function rewrite(prefix_map, path, cont){
    return caml_cps_exact_call3
            (rewrite_opt,
             prefix_map,
             path,
             function(match){
              if(! match) return cont(path);
              var path$0 = match[1];
              return cont(path$0);
             });
   }
   var
    Dynlink_compilerlibs_Build_pat =
      [0,
       encode_prefix,
       decode_prefix,
       encode_pair,
       decode_pair,
       encode_map,
       decode_map,
       rewrite_opt,
       rewrite];
   caml_register_global
    (1386,
     Dynlink_compilerlibs_Build_pat,
     "Dynlink_compilerlibs.Build_path_prefix_map");
   var
    Fatal_error = [248, cst_Dynlink_compilerlibs_Misc_, caml_fresh_oo_id(0)];
   function fatal_errorf(fmt, cont){
    return caml_cps_call3
            (Stdlib[98],
             fmt,
             _aH_,
             function(_atj_){
              return caml_cps_call3
                      (Stdlib[98],
                       _aI_,
                       _atj_,
                       function(_atk_){
                        return caml_cps_call4
                                (Stdlib_Format[142],
                                 function(param, cont){
                                  var
                                   raise = caml_pop_trap(),
                                   Fatal_error$0 = caml_maybe_attach_backtrace(Fatal_error, 1);
                                  return raise(Fatal_error$0);
                                 },
                                 Stdlib_Format[112],
                                 _atk_,
                                 cont);
                       });
             });
   }
   function fatal_error(msg, cont){
    return caml_cps_exact_call2
            (fatal_errorf,
             _aJ_,
             function(_ati_){return caml_cps_call2(_ati_, msg, cont);});
   }
   function try_finally(opt, _ate_, work, cont){
    if(opt)
     var sth = opt[1], always = sth;
    else
     var always = function(param, cont){return cont(undef);};
    if(_ate_)
     var sth$0 = _ate_[1], exceptionally = sth$0;
    else
     var exceptionally = function(param, cont){return cont(undef);};
    caml_push_trap
     (function(work_exn){
       return caml_cps_call2
               (Stdlib_Printexc[12],
                0,
                function(work_bt){
                 caml_push_trap
                  (function(always_exn){
                    return caml_cps_call2
                            (Stdlib_Printexc[12],
                             0,
                             function(always_bt){
                              return caml_cps_call2
                                      (exceptionally,
                                       0,
                                       function(_ath_){
caml_restore_raw_backtrace(always_exn, always_bt);
var
 raise = caml_pop_trap(),
 always_exn$0 = caml_maybe_attach_backtrace(always_exn, 0);
return raise(always_exn$0);
                                       });
                             });
                   });
                 return caml_cps_call2
                         (always,
                          0,
                          function(val){
                           caml_pop_trap();
                           return caml_cps_call2
                                   (exceptionally,
                                    0,
                                    function(_atg_){
                                     caml_restore_raw_backtrace(work_exn, work_bt);
                                     var
                                      raise = caml_pop_trap(),
                                      work_exn$0 = caml_maybe_attach_backtrace(work_exn, 0);
                                     return raise(work_exn$0);
                                    });
                          });
                });
      });
    return caml_cps_call2
            (work,
             0,
             function(result){
              caml_pop_trap();
              caml_push_trap
               (function(always_exn){
                 return caml_cps_call2
                         (Stdlib_Printexc[12],
                          0,
                          function(always_bt){
                           return caml_cps_call2
                                   (exceptionally,
                                    0,
                                    function(_atf_){
                                     caml_restore_raw_backtrace(always_exn, always_bt);
                                     var
                                      raise = caml_pop_trap(),
                                      always_exn$0 = caml_maybe_attach_backtrace(always_exn, 0);
                                     return raise(always_exn$0);
                                    });
                          });
                });
              return caml_cps_call2
                      (always,
                       0,
                       function(val){caml_pop_trap(); return cont(result);});
             });
   }
   function reraise_preserving_backtrace(e, f, cont){
    return caml_cps_call2
            (Stdlib_Printexc[12],
             0,
             function(bt){
              return caml_cps_call2
                      (f,
                       0,
                       function(_atd_){
                        caml_restore_raw_backtrace(e, bt);
                        var
                         raise = caml_pop_trap(),
                         e$0 = caml_maybe_attach_backtrace(e, 0);
                        return raise(e$0);
                       });
             });
   }
   function set_refs(l, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var v = param[2], r = param[1];
              r[1] = v;
              return cont(0);
             },
             l,
             cont);
   }
   function protect_refs(refs, f, cont){
    return caml_cps_call3
            (Stdlib_List[19],
             function(param, cont){
              var r = param[1];
              return cont([0, r, r[1]]);
             },
             refs,
             function(backup){
              return caml_cps_exact_call2
                      (set_refs,
                       refs,
                       function(_atc_){
                        return caml_cps_call3
                                (Stdlib_Fun[4],
                                 function(param, cont){
                                  return caml_cps_exact_call2(set_refs, backup, cont);
                                 },
                                 f,
                                 cont);
                       });
             });
   }
   function map_end(f, l1, l2, cont){
    if(! l1) return cont(l2);
    var tl = l1[2], hd = l1[1];
    return caml_cps_exact_call4
            (map_end,
             f,
             tl,
             l2,
             function(_ata_){
              return caml_cps_call2
                      (f, hd, function(_atb_){return cont([0, _atb_, _ata_]);});
             });
   }
   function map_left_right(f, param, cont){
    if(! param) return cont(0);
    var tl = param[2], hd = param[1];
    return caml_cps_call2
            (f,
             hd,
             function(res){
              return caml_cps_exact_call3
                      (map_left_right,
                       f,
                       tl,
                       function(_as$_){return cont([0, res, _as$_]);});
             });
   }
   function for_all2(pred, l1, l2, cont){
    function _as9_(l2, l1){
     if(l1){
      if(l2){
       var tl2 = l2[2], hd2 = l2[1], tl1 = l1[2], hd1 = l1[1];
       return caml_cps_call3
               (pred,
                hd1,
                hd2,
                function(_as__){
                 return _as__
                         ? caml_cps_exact_call2(_as9_, tl2, tl1)
                         : cont(_as__);
                });
      }
     }
     else if(! l2) return cont(1);
     return cont(0);
    }
    return _as9_(l2, l1);
   }
   function replicate_list(elem, n, cont){
    return 0 < n
            ? caml_cps_exact_call3
              (replicate_list,
               elem,
               n - 1 | 0,
               function(_as8_){return cont([0, elem, _as8_]);})
            : cont(0);
   }
   function list_remove(x, param, cont){
    if(! param) return cont(0);
    var tl = param[2], hd = param[1];
    return caml_equal(hd, x)
            ? cont(tl)
            : caml_cps_exact_call3
              (list_remove,
               x,
               tl,
               function(_as7_){return cont([0, hd, _as7_]);});
   }
   function split_last(param, cont){
    if(! param){
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1));
    }
    var x = param[1];
    if(! param[2]) return cont([0, 0, x]);
    var tl = param[2];
    return caml_cps_exact_call2
            (split_last,
             tl,
             function(match){
              var last = match[2], lst = match[1];
              return cont([0, [0, x, lst], last]);
             });
   }
   function compare(cmp, l1, l2, cont){
    function _as6_(l2, l1){
     if(! l1) return l2 ? cont(-1) : cont(0);
     var t1 = l1[2], h1 = l1[1];
     if(! l2) return cont(1);
     var t2 = l2[2], h2 = l2[1];
     return caml_cps_call3
             (cmp,
              h1,
              h2,
              function(c){
               return 0 === c ? caml_cps_exact_call2(_as6_, t2, t1) : cont(c);
              });
    }
    return _as6_(l2, l1);
   }
   function equal(eq, l1, l2, cont){
    function _as4_(l2, l1){
     if(l1){
      if(l2){
       var tl2 = l2[2], hd2 = l2[1], tl1 = l1[2], hd1 = l1[1];
       return caml_cps_call3
               (eq,
                hd1,
                hd2,
                function(_as5_){
                 return _as5_
                         ? caml_cps_exact_call2(_as4_, tl2, tl1)
                         : cont(_as5_);
                });
      }
     }
     else if(! l2) return cont(1);
     return cont(0);
    }
    return _as4_(l2, l1);
   }
   function map2_prefix(f, l1, l2, cont){
    function _as1_(l2, l1, acc){
     if(! l1)
      return caml_cps_call2
              (Stdlib_List[9],
               acc,
               function(_as3_){return cont([0, _as3_, l2]);});
     var t1 = l1[2], h1 = l1[1];
     if(l2){
      var t2 = l2[2], h2 = l2[1];
      return caml_cps_call3
              (f,
               h1,
               h2,
               function(h){
                var acc$0 = [0, h, acc];
                return caml_cps_exact_call3(_as1_, t2, t1, acc$0);
               });
     }
     var _as2_ = [0, Stdlib[6], cst_map2_prefix], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_as2_, 1));
    }
    return _as1_(l2, l1, 0);
   }
   function some_if_all_elements_are_some(l, cont){
    var acc = 0, l$0 = l;
    for(;;){
     if(! l$0) break;
     var match = l$0[1];
     if(! match) return cont(0);
     var t = l$0[2], h = match[1], acc$0 = [0, h, acc], acc = acc$0, l$0 = t;
    }
    return caml_cps_call2
            (Stdlib_List[9], acc, function(_as0_){return cont([0, _as0_]);});
   }
   function split_at(n, l, cont){
    var n$0 = n, acc = 0, l$0 = l;
    for(;;){
     if(0 === n$0) break;
     if(! l$0){
      var _asY_ = [0, Stdlib[6], cst_split_at], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_asY_, 1));
     }
     var
      q = l$0[2],
      t = l$0[1],
      acc$0 = [0, t, acc],
      n$1 = n$0 - 1 | 0,
      n$0 = n$1,
      acc = acc$0,
      l$0 = q;
    }
    return caml_cps_call2
            (Stdlib_List[9],
             acc,
             function(_asZ_){return cont([0, _asZ_, l$0]);});
   }
   function is_prefix(equal, t, of, cont){
    function _asW_(of, t){
     if(! t) return of ? cont(1) : cont(1);
     var t$0 = t[2], x1 = t[1];
     if(! of) return cont(0);
     var of$0 = of[2], x2 = of[1];
     return caml_cps_call3
             (equal,
              x1,
              x2,
              function(_asX_){
               return _asX_
                       ? caml_cps_exact_call2(_asW_, of$0, t$0)
                       : cont(_asX_);
              });
    }
    return _asW_(of, t);
   }
   function find_and_chop_longest_common_p(equal, first, second, cont){
    function _asS_(l2, l1, longest_common_prefix_rev){
     function _asT_(){
      return caml_cps_call2
              (Stdlib_List[9],
               longest_common_prefix_rev,
               function(_asV_){return cont([0, _asV_, l1, l2]);});
     }
     if(! l1) return _asT_();
     if(! l2) return _asT_();
     var l2$0 = l2[2], elt2 = l2[1], l1$0 = l1[2], elt1 = l1[1];
     return caml_cps_call3
             (equal,
              elt1,
              elt2,
              function(_asU_){
               if(! _asU_) return _asT_();
               var
                longest_common_prefix_rev$0 =
                  [0, elt1, longest_common_prefix_rev];
               return caml_cps_exact_call3
                       (_asS_, l2$0, l1$0, longest_common_prefix_rev$0);
              });
    }
    return _asS_(second, first, 0);
   }
   function print(print_contents, ppf, t, cont){
    if(! t) return caml_cps_call3(Stdlib_Format[13], ppf, cst_None, cont);
    var contents = t[1];
    return caml_cps_call5
            (Stdlib_Format[135], ppf, _aL_, print_contents, contents, cont);
   }
   var Option = [0, print];
   function exists2(p, a1, a2, cont){
    var n = a1.length - 1;
    function _asO_(_asP_){
     function _asQ_(i){
      return i === n
              ? cont(0)
              : caml_cps_call3
                (p,
                 a1[1 + i],
                 a2[1 + i],
                 function(_asR_){
                  if(_asR_) return cont(1);
                  var i$0 = i + 1 | 0;
                  return caml_cps_exact_call1(_asQ_, i$0);
                 });
     }
     return _asQ_(0);
    }
    return a2.length - 1 !== n
            ? caml_cps_call2(Stdlib[1], cst_Misc_Stdlib_Array_exists2, _asO_)
            : _asO_(0);
   }
   function for_alli(p, a, cont){
    var n = a.length - 1;
    function _asM_(i){
     return i === n
             ? cont(1)
             : caml_cps_call3
               (p,
                i,
                a[1 + i],
                function(_asN_){
                 if(! _asN_) return cont(0);
                 var i$0 = i + 1 | 0;
                 return caml_cps_exact_call1(_asM_, i$0);
                });
    }
    return _asM_(0);
   }
   function all_somes(a, cont){
    caml_push_trap
     (function(_asL_){
       if(_asL_ === Stdlib[3]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_asL_, 0));
      });
    return caml_cps_call3
            (Stdlib_Array[13],
             function(param, cont){
              if(param){var x = param[1]; return cont(x);}
              var _asK_ = Stdlib[3], raise = caml_pop_trap();
              return raise(_asK_);
             },
             a,
             function(_asJ_){caml_pop_trap(); return cont([0, _asJ_]);});
   }
   var
    Array = [0, exists2, for_alli, all_somes],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    concat = Stdlib_String[6],
    cat = Stdlib_String[7],
    equal$0 = Stdlib_String[8],
    compare$0 = Stdlib_String[9],
    starts_with = Stdlib_String[10],
    ends_with = Stdlib_String[11],
    contains_from = Stdlib_String[12],
    rcontains_from = Stdlib_String[13],
    contains = Stdlib_String[14],
    sub = Stdlib_String[15],
    split_on_char = Stdlib_String[16],
    map = Stdlib_String[17],
    mapi = Stdlib_String[18],
    fold_left = Stdlib_String[19],
    fold_right = Stdlib_String[20],
    exists = Stdlib_String[22],
    trim = Stdlib_String[23],
    escaped = Stdlib_String[24],
    uppercase_ascii = Stdlib_String[25],
    lowercase_ascii = Stdlib_String[26],
    capitalize_ascii = Stdlib_String[27],
    uncapitalize_ascii = Stdlib_String[28],
    iter = Stdlib_String[29],
    iteri = Stdlib_String[30],
    index_from = Stdlib_String[31],
    index_from_opt = Stdlib_String[32],
    rindex_from = Stdlib_String[33],
    rindex_from_opt = Stdlib_String[34],
    index = Stdlib_String[35],
    index_opt = Stdlib_String[36],
    rindex = Stdlib_String[37],
    rindex_opt = Stdlib_String[38],
    to_seq = Stdlib_String[39],
    to_seqi = Stdlib_String[40],
    of_seq = Stdlib_String[41],
    get_utf_8_uchar = Stdlib_String[42],
    is_valid_utf_8 = Stdlib_String[43],
    get_utf_16be_uchar = Stdlib_String[44],
    is_valid_utf_16be = Stdlib_String[45],
    get_utf_16le_uchar = Stdlib_String[46],
    is_valid_utf_16le = Stdlib_String[47],
    blit = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    Set = caml_callback(Stdlib_Set[1], [[0, Stdlib_String[9]]]),
    Map = caml_callback(Stdlib_Map[1], [[0, Stdlib_String[9]]]),
    equal$1 = Stdlib_String[8],
    hash$0 = Stdlib_Hashtbl[28],
    Tbl = caml_callback(Stdlib_Hashtbl[26], [[0, equal$1, hash$0]]);
   function for_all(f, t, cont){
    var len = caml_ml_string_length(t);
    function _asE_(i){
     var _asF_ = i === len ? 1 : 0;
     function _asG_(_asI_){return cont(_asI_);}
     return _asF_
             ? _asG_(_asF_)
             : caml_cps_call2
               (f,
                caml_string_get(t, i),
                function(_asH_){
                 if(! _asH_) return _asG_(_asH_);
                 var i$0 = i + 1 | 0;
                 return caml_cps_exact_call1(_asE_, i$0);
                });
    }
    return _asE_(0);
   }
   function print$0(ppf, t, cont){
    return caml_cps_call3(Stdlib_Format[13], ppf, t, cont);
   }
   function find_in_path(path, name, cont){
    return caml_cps_call2
            (Stdlib_Filename[6],
             name,
             function(_asA_){
              function _asC_(param){
               if(param){
                var rem = param[2], dir = param[1];
                return caml_cps_call3
                        (Stdlib_Filename[4],
                         dir,
                         name,
                         function(fullname){
                          return caml_sys_file_exists(fullname)
                                  ? cont(fullname)
                                  : caml_cps_exact_call1(_asC_, rem);
                         });
               }
               var _asD_ = Stdlib[8], raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_asD_, 1));
              }
              if(_asA_) return _asC_(path);
              if(caml_sys_file_exists(name)) return cont(name);
              var _asB_ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_asB_, 1));
             });
   }
   function find_in_path_rel(path, name, cont){
    function simplify(s, cont){
     function _asy_(s){
      return caml_cps_call2
              (Stdlib_Filename[13],
               s,
               function(base){
                return caml_cps_call2
                        (Stdlib_Filename[14],
                         s,
                         function(dir){
                          return caml_string_equal(dir, s)
                                  ? cont(dir)
                                  : caml_string_equal
                                     (base, Stdlib_Filename[1])
                                    ? caml_cps_exact_call1(_asy_, dir)
                                    : caml_cps_exact_call2
                                      (simplify,
                                       dir,
                                       function(_asz_){
return caml_cps_call3(Stdlib_Filename[4], _asz_, base, cont);
                                       });
                         });
               });
     }
     return _asy_(s);
    }
    function _asv_(param){
     if(param){
      var rem = param[2], dir = param[1];
      return caml_cps_call3
              (Stdlib_Filename[4],
               dir,
               name,
               function(_asx_){
                return caml_cps_exact_call2
                        (simplify,
                         _asx_,
                         function(fullname){
                          return caml_sys_file_exists(fullname)
                                  ? cont(fullname)
                                  : caml_cps_exact_call1(_asv_, rem);
                         });
               });
     }
     var _asw_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_asw_, 1));
    }
    return _asv_(path);
   }
   function find_in_path_uncap(path, name, cont){
    return caml_cps_call2
            (Stdlib_String[28],
             name,
             function(uname){
              function _ast_(param){
               if(param){
                var rem = param[2], dir = param[1];
                return caml_cps_call3
                        (Stdlib_Filename[4],
                         dir,
                         name,
                         function(fullname){
                          return caml_cps_call3
                                  (Stdlib_Filename[4],
                                   dir,
                                   uname,
                                   function(ufullname){
                                    return caml_sys_file_exists(ufullname)
    ? cont(ufullname)
    : caml_sys_file_exists
       (fullname)
      ? cont(fullname)
      : caml_cps_exact_call1(_ast_, rem);
                                   });
                         });
               }
               var _asu_ = Stdlib[8], raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_asu_, 1));
              }
              return _ast_(path);
             });
   }
   function remove_file(filename, cont){
    try{
     var
      _asq_ = caml_sys_file_exists(filename),
      _asr_ = _asq_ ? runtime.caml_sys_remove(filename) : _asq_;
    }
    catch(_ass_){
     var _asp_ = caml_wrap_exception(_ass_);
     if(_asp_[1] === Stdlib[11]) return cont(0);
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_asp_, 0));
    }
    return cont(_asr_);
   }
   function expand_directory(alt, s, cont){
    if(0 < caml_ml_string_length(s) && 43 === caml_string_get(s, 0))
     return caml_cps_call4
             (Stdlib_String[15],
              s,
              1,
              caml_ml_string_length(s) - 1 | 0,
              function(_aso_){
               return caml_cps_call3(Stdlib_Filename[4], alt, _aso_, cont);
              });
    return cont(s);
   }
   var
    path_separator = caml_string_notequal(Stdlib_Sys[4], cst_Win32) ? 58 : 59;
   function split_path_contents(opt, s, cont){
    if(opt) var sth = opt[1], sep = sth; else var sep = path_separator;
    return caml_string_notequal(s, cst$117)
            ? caml_cps_call3(Stdlib_String[16], sep, s, cont)
            : cont(0);
   }
   function create_hashtable(size, init, cont){
    return caml_cps_call3
            (Stdlib_Hashtbl[1],
             0,
             size,
             function(tbl){
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(param, cont){
                        var data = param[2], key = param[1];
                        return caml_cps_call4
                                (Stdlib_Hashtbl[5], tbl, key, data, cont);
                       },
                       init,
                       function(_asn_){return cont(tbl);});
             });
   }
   function copy_file(ic, oc, cont){
    var buff = caml_create_bytes(4096);
    function _asl_(_asm_){
     return caml_cps_call5
             (Stdlib[84],
              ic,
              buff,
              0,
              4096,
              function(n){
               return 0 === n
                       ? cont(0)
                       : caml_cps_call5(Stdlib[68], oc, buff, 0, n, _asl_);
              });
    }
    return _asl_(0);
   }
   function copy_file_chunk(ic, oc, len, cont){
    var buff = caml_create_bytes(4096);
    function _ash_(n){
     return 0 < n
             ? caml_cps_call3
               (Stdlib_Int[10],
                n,
                4096,
                function(_asi_){
                 return caml_cps_call5
                         (Stdlib[84],
                          ic,
                          buff,
                          0,
                          _asi_,
                          function(r){
                           if(0 !== r)
                            return caml_cps_call5
                                    (Stdlib[68],
                                     oc,
                                     buff,
                                     0,
                                     r,
                                     function(_ask_){
                                      var n$0 = n - r | 0;
                                      return caml_cps_exact_call1(_ash_, n$0);
                                     });
                           var _asj_ = Stdlib[12], raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_asj_, 1));
                          });
                })
             : cont(0);
    }
    return _ash_(len);
   }
   function string_of_file(ic, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             65536,
             function(b){
              var buff = caml_create_bytes(4096);
              function _asf_(_asg_){
               return caml_cps_call5
                       (Stdlib[84],
                        ic,
                        buff,
                        0,
                        4096,
                        function(n){
                         return 0 === n
                                 ? caml_cps_call2(Stdlib_Buffer[2], b, cont)
                                 : caml_cps_call5(Stdlib_Buffer[19], b, buff, 0, n, _asf_);
                        });
              }
              return _asf_(0);
             });
   }
   function output_to_file_via_temporary(opt, filename, fn, cont){
    if(opt) var sth = opt[1], mode = sth; else var mode = _aN_;
    return caml_cps_call2
            (Stdlib_Filename[13],
             filename,
             function(_ar$_){
              return caml_cps_call2
                      (Stdlib_Filename[14],
                       filename,
                       function(_asa_){
                        return caml_cps_call6
                                (Stdlib_Filename[17],
                                 [0, mode],
                                 _aM_,
                                 [0, _asa_],
                                 _ar$_,
                                 cst_tmp,
                                 function(match){
                                  var oc = match[2], temp_filename = match[1];
                                  caml_push_trap
                                   (function(exn){
                                     return caml_cps_call2
     (Stdlib[76],
      oc,
      function(_asd_){
       return caml_cps_exact_call2
               (remove_file,
                temp_filename,
                function(_ase_){
                 var
                  raise = caml_pop_trap(),
                  exn$0 = caml_maybe_attach_backtrace(exn, 0);
                 return raise(exn$0);
                });
      });
                                    });
                                  return caml_cps_call3
  (fn,
   temp_filename,
   oc,
   function(res){
    caml_pop_trap();
    return caml_cps_call2
            (Stdlib[76],
             oc,
             function(_asb_){
              try{runtime.caml_sys_rename(temp_filename, filename);}
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               return caml_cps_exact_call2
                       (remove_file,
                        temp_filename,
                        function(_asc_){
                         var
                          raise = caml_pop_trap(),
                          exn$0 = caml_maybe_attach_backtrace(exn, 0);
                         return raise(exn$0);
                        });
              }
              return cont(res);
             });
   });
                                 });
                       });
             });
   }
   function protect_writing_to_file(filename, f, cont){
    return caml_cps_call2
            (Stdlib[61],
             filename,
             function(outchan){
              return caml_cps_exact_call4
                      (try_finally,
                       [0,
                        function(param, cont){
                         return caml_cps_call2(Stdlib[76], outchan, cont);
                        }],
                       [0,
                        function(param, cont){
                         return caml_cps_exact_call2(remove_file, filename, cont);
                        }],
                       function(param, cont){
                        return caml_cps_call2(f, outchan, cont);
                       },
                       cont);
             });
   }
   function log2(n, cont){
    return 1 < n
            ? caml_cps_exact_call2
              (log2, n >> 1, function(_ar__){return cont(1 + _ar__ | 0);})
            : cont(0);
   }
   function align(n, a, cont){
    return 0 <= n
            ? cont(((n + a | 0) - 1 | 0) & (- a | 0))
            : cont(n & (- a | 0));
   }
   function no_overflow_add(a, b, cont){
    return caml_cps_call2
            (Stdlib[21],
             a + b | 0,
             function(_ar9_){return cont((a ^ b | a ^ _ar9_) < 0 ? 1 : 0);});
   }
   function no_overflow_sub(a, b, cont){
    var _ar7_ = b ^ (a - b | 0);
    return caml_cps_call2
            (Stdlib[21],
             b,
             function(_ar8_){return cont((a ^ _ar8_ | _ar7_) < 0 ? 1 : 0);});
   }
   function no_overflow_mul(a, b, cont){
    var
     _ar3_ = a === Stdlib[20] ? 1 : 0,
     _ar4_ = _ar3_ ? b < 0 ? 1 : 0 : _ar3_;
    if(_ar4_)
     var _ar5_ = _ar4_;
    else
     var
      _ar6_ = 0 !== b ? 1 : 0,
      _ar5_ = _ar6_ ? caml_div(caml_mul(a, b), b) !== a ? 1 : 0 : _ar6_;
    return cont(1 - _ar5_);
   }
   function no_overflow_lsl(a, k, cont){
    var _arZ_ = 0 <= k ? 1 : 0;
    if(_arZ_){
     var _ar0_ = k < (Stdlib_Sys[9] - 1 | 0) ? 1 : 0;
     if(_ar0_)
      var
       _ar1_ = Stdlib[20] >> k <= a ? 1 : 0,
       _ar2_ = _ar1_ ? a <= Stdlib[19] >> k ? 1 : 0 : _ar1_;
     else
      var _ar2_ = _ar0_;
    }
    else
     var _ar2_ = _arZ_;
    return cont(_ar2_);
   }
   function cvt_int_aux(str, neg, of_string, cont){
    if(0 !== caml_ml_string_length(str) && 45 !== caml_string_get(str, 0))
     return caml_cps_call3
             (Stdlib[28],
              cst$15,
              str,
              function(_arY_){return cont(neg(of_string(_arY_)));});
    return cont(of_string(str));
   }
   function int$0(s, cont){
    return caml_cps_exact_call4
            (cvt_int_aux,
             s,
             function(_arX_){return - _arX_ | 0;},
             function(_arW_){return caml_int_of_string(_arW_);},
             cont);
   }
   function int32(s, cont){
    return caml_cps_exact_call4
            (cvt_int_aux,
             s,
             function(_arV_){return - _arV_ | 0;},
             function(_arU_){return caml_int_of_string(_arU_);},
             cont);
   }
   function int64(s, cont){
    return caml_cps_exact_call4
            (cvt_int_aux,
             s,
             function(_arT_){return caml_int64_neg(_arT_);},
             function(_arS_){return runtime.caml_int64_of_string(_arS_);},
             cont);
   }
   function nativeint(s, cont){
    return caml_cps_exact_call4
            (cvt_int_aux,
             s,
             function(_arR_){return - _arR_ | 0;},
             function(_arQ_){return caml_int_of_string(_arQ_);},
             cont);
   }
   function chop_extensions(file, cont){
    return caml_cps_call2
            (Stdlib_Filename[14],
             file,
             function(dirname){
              return caml_cps_call2
                      (Stdlib_Filename[13],
                       file,
                       function(basename){
                        caml_push_trap
                         (function(_arP_){
                           if(_arP_ === Stdlib[8]) return cont(file);
                           var raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_arP_, 0));
                          });
                        return caml_cps_call3
                                (Stdlib_String[35],
                                 basename,
                                 46,
                                 function(pos){
                                  return caml_cps_call4
  (Stdlib_String[15],
   basename,
   0,
   pos,
   function(basename){
    return caml_cps_call2
            (Stdlib_Filename[6],
             file,
             function(_arN_){
              function _arO_(basename){
               caml_pop_trap();
               return cont(basename);
              }
              if(_arN_ && caml_string_equal(dirname, Stdlib_Filename[1]))
               return _arO_(basename);
              return caml_cps_call3
                      (Stdlib_Filename[4], dirname, basename, _arO_);
             });
   });
                                 });
                       });
             });
   }
   function search_substring(pat, str, start, cont){
    var i = start, j = 0;
    for(;;){
     if(caml_ml_string_length(pat) <= j) return cont(i);
     if(caml_ml_string_length(str) <= (i + j | 0)){
      var _arL_ = Stdlib[8], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_arL_, 1));
     }
     var _arM_ = caml_string_get(pat, j);
     if(caml_string_get(str, i + j | 0) === _arM_)
      var j$0 = j + 1 | 0, j = j$0;
     else
      var i$0 = i + 1 | 0, i = i$0, j = 0;
    }
   }
   function replace_substring(before, after, str, cont){
    function _arI_(curr, acc){
     caml_push_trap
      (function(_arJ_){
        if(_arJ_ === Stdlib[8])
         return caml_cps_call4
                 (Stdlib_String[15],
                  str,
                  curr,
                  caml_ml_string_length(str) - curr | 0,
                  function(suffix){
                   return caml_cps_call2
                           (Stdlib_List[9],
                            [0, suffix, acc],
                            function(_arK_){
                             return caml_cps_call3(Stdlib_String[6], after, _arK_, cont);
                            });
                  });
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_arJ_, 0));
       });
     return caml_cps_exact_call4
             (search_substring,
              before,
              str,
              curr,
              function(next){
               caml_pop_trap();
               return caml_cps_call4
                       (Stdlib_String[15],
                        str,
                        curr,
                        next - curr | 0,
                        function(prefix){
                         var
                          curr = next + caml_ml_string_length(before) | 0,
                          acc$0 = [0, prefix, acc];
                         return caml_cps_exact_call2(_arI_, curr, acc$0);
                        });
              });
    }
    return _arI_(0, 0);
   }
   function rev_split_words(s, cont){
    function _arD_(i, res){
     if(caml_ml_string_length(s) <= i) return cont(res);
     var _arE_ = caml_string_get(s, i) - 9 | 0;
     a:
     {
      if(4 < _arE_ >>> 0){
       if(23 !== _arE_) break a;
      }
      else if(1 >= _arE_ - 2 >>> 0) break a;
      var i$0 = i + 1 | 0;
      return caml_cps_exact_call2(_arD_, i$0, res);
     }
     var j = i + 1 | 0;
     a:
     {
      var j$0 = j;
      for(;;){
       if(caml_ml_string_length(s) <= j$0) break a;
       var _arF_ = caml_string_get(s, j$0) - 9 | 0;
       if(4 < _arF_ >>> 0){
        if(23 === _arF_) break;
       }
       else if(1 < _arF_ - 2 >>> 0) break;
       var j$1 = j$0 + 1 | 0, j$0 = j$1;
      }
      var i$1 = j$0 + 1 | 0;
      return caml_cps_call4
              (Stdlib_String[15],
               s,
               i,
               j$0 - i | 0,
               function(_arH_){
                var res$0 = [0, _arH_, res];
                return caml_cps_exact_call2(_arD_, i$1, res$0);
               });
     }
     return caml_cps_call4
             (Stdlib_String[15],
              s,
              i,
              j$0 - i | 0,
              function(_arG_){return cont([0, _arG_, res]);});
    }
    return _arD_(0, 0);
   }
   function get_ref(r, cont){var v = r[1]; r[1] = 0; return cont(v);}
   function set_or_ignore(f, opt, x, cont){
    return caml_cps_call2
            (f,
             x,
             function(match){
              if(! match) return cont(0);
              var y = match[1];
              opt[1] = [0, y];
              return cont(0);
             });
   }
   function fst3(param, cont){var x = param[1]; return cont(x);}
   function snd3(param, cont){var x = param[2]; return cont(x);}
   function thd3(param, cont){var x = param[3]; return cont(x);}
   function fst4(param, cont){var x = param[1]; return cont(x);}
   function snd4(param, cont){var x = param[2]; return cont(x);}
   function thd4(param, cont){var x = param[3]; return cont(x);}
   function for4(param, cont){var x = param[4]; return cont(x);}
   function create(str_size, cont){
    var
     tbl_size = caml_div(str_size, Stdlib_Sys[12]) + 1 | 0,
     tbl = caml_make_vect(tbl_size, Stdlib_Bytes[3]),
     _ary_ = tbl_size - 2 | 0,
     _arx_ = 0;
    if(_ary_ >= 0){
     var i = _arx_;
     for(;;){
      var _arB_ = caml_create_bytes(Stdlib_Sys[12]);
      caml_check_bound(tbl, i)[1 + i] = _arB_;
      var _arC_ = i + 1 | 0;
      if(_ary_ === i) break;
      var i = _arC_;
     }
    }
    var
     _arA_ = tbl_size - 1 | 0,
     _arz_ = caml_create_bytes(caml_mod(str_size, Stdlib_Sys[12]));
    caml_check_bound(tbl, _arA_)[1 + _arA_] = _arz_;
    return cont(tbl);
   }
   function length(tbl, cont){
    var
     tbl_size = tbl.length - 1,
     _arv_ = tbl_size - 1 | 0,
     _arw_ = caml_ml_bytes_length(caml_check_bound(tbl, _arv_)[1 + _arv_]);
    return cont(caml_mul(Stdlib_Sys[12], tbl_size - 1 | 0) + _arw_ | 0);
   }
   function get(tbl, ind, cont){
    var
     _art_ = caml_mod(ind, Stdlib_Sys[12]),
     _aru_ = caml_div(ind, Stdlib_Sys[12]);
    return cont
            (caml_bytes_get(caml_check_bound(tbl, _aru_)[1 + _aru_], _art_));
   }
   function set(tbl, ind, c, cont){
    var
     _arr_ = caml_mod(ind, Stdlib_Sys[12]),
     _ars_ = caml_div(ind, Stdlib_Sys[12]);
    return cont
            (caml_bytes_set(caml_check_bound(tbl, _ars_)[1 + _ars_], _arr_, c));
   }
   function blit$0(src, srcoff, dst, dstoff, len, cont){
    var _arl_ = len - 1 | 0;
    function _arn_(){return cont(0);}
    function _arm_(i){
     return caml_cps_exact_call3
             (get,
              src,
              srcoff + i | 0,
              function(_aro_){
               return caml_cps_exact_call4
                       (set,
                        dst,
                        dstoff + i | 0,
                        _aro_,
                        function(_arp_){
                         var _arq_ = i + 1 | 0;
                         return _arl_ !== i
                                 ? caml_cps_exact_call1(_arm_, _arq_)
                                 : _arn_();
                        });
              });
    }
    var _ark_ = 0;
    return _arl_ < 0 ? _arn_() : _arm_(_ark_);
   }
   function blit_string(src, srcoff, dst, dstoff, len, cont){
    var _arf_ = len - 1 | 0;
    function _arh_(i){
     return caml_cps_exact_call4
             (set,
              dst,
              dstoff + i | 0,
              caml_string_get(src, srcoff + i | 0),
              function(_ari_){
               var _arj_ = i + 1 | 0;
               return _arf_ !== i
                       ? caml_cps_exact_call1(_arh_, _arj_)
                       : _arg_();
              });
    }
    function _arg_(){return cont(0);}
    var _are_ = 0;
    return _arf_ < 0 ? _arg_() : _arh_(_are_);
   }
   function output(oc, tbl, pos, len, cont){
    var _aq__ = (pos + len | 0) - 1 | 0;
    function _ara_(i){
     return caml_cps_exact_call3
             (get,
              tbl,
              i,
              function(_arb_){
               return caml_cps_call3
                       (Stdlib[65],
                        oc,
                        _arb_,
                        function(_arc_){
                         var _ard_ = i + 1 | 0;
                         return _aq__ !== i
                                 ? caml_cps_exact_call1(_ara_, _ard_)
                                 : _aq$_();
                        });
              });
    }
    function _aq$_(){return cont(0);}
    return _aq__ < pos ? _aq$_() : _ara_(pos);
   }
   function input_bytes_into(tbl, ic, len, cont){
    var count = [0, len];
    return caml_cps_call3
            (Stdlib_Array[11],
             function(str, cont){
              return caml_cps_call3
                      (Stdlib_Int[10],
                       count[1],
                       caml_ml_bytes_length(str),
                       function(chunk){
                        return caml_cps_call5
                                (Stdlib[85],
                                 ic,
                                 str,
                                 0,
                                 chunk,
                                 function(_aq9_){
                                  count[1] = count[1] - chunk | 0;
                                  return cont(0);
                                 });
                       });
             },
             tbl,
             cont);
   }
   function input_bytes(ic, len, cont){
    return caml_cps_exact_call2
            (create,
             len,
             function(tbl){
              return caml_cps_exact_call4
                      (input_bytes_into,
                       tbl,
                       ic,
                       len,
                       function(_aq8_){return cont(tbl);});
             });
   }
   var
    LongString =
      [0,
       create,
       length,
       get,
       set,
       blit$0,
       blit_string,
       output,
       input_bytes_into,
       input_bytes];
   function edit_distance(a, b, cutoff, cont){
    var lb = caml_ml_string_length(b), la = caml_ml_string_length(a);
    return caml_cps_call3
            (Stdlib_Int[11],
             la,
             lb,
             function(_aqE_){
              return caml_cps_call3
                      (Stdlib_Int[10],
                       _aqE_,
                       cutoff,
                       function(cutoff){
                        return caml_cps_call2
                                (Stdlib[18],
                                 la - lb | 0,
                                 function(_aqF_){
                                  return cutoff < _aqF_
  ? cont(0)
  : caml_cps_call4
    (Stdlib_Array[2],
     la + 1 | 0,
     lb + 1 | 0,
     cutoff + 1 | 0,
     function(m){
      caml_check_bound(caml_check_bound(m, 0)[1], 0)[1] = 0;
      var _aqG_ = 1;
      if(la >= 1){
       var i = _aqG_;
       for(;;){
        caml_check_bound(caml_check_bound(m, i)[1 + i], 0)[1] = i;
        var _aqK_ = i + 1 | 0;
        if(la === i) break;
        var i = _aqK_;
       }
      }
      var _aqH_ = 1;
      if(lb >= 1){
       var j = _aqH_;
       for(;;){
        caml_check_bound(caml_check_bound(m, 0)[1], j)[1 + j] = j;
        var _aqJ_ = j + 1 | 0;
        if(lb === j) break;
        var j = _aqJ_;
       }
      }
      function _aqM_(i){
       return caml_cps_call3
               (Stdlib_Int[11],
                1,
                (i - cutoff | 0) - 1 | 0,
                function(_aqN_){
                 return caml_cps_call3
                         (Stdlib_Int[10],
                          lb,
                          (i + cutoff | 0) + 1 | 0,
                          function(_aqO_){
                           function _aqQ_(j){
                            var
                             _aqS_ = caml_string_get(b, j - 1 | 0),
                             cost = caml_string_get(a, i - 1 | 0) === _aqS_ ? 0 : 1,
                             _aqT_ = j - 1 | 0,
                             _aqU_ = i - 1 | 0,
                             _aqW_ = j - 1 | 0,
                             _aqV_ =
                               caml_check_bound
                                 (caml_check_bound(m, _aqU_)[1 + _aqU_], _aqT_)
                                [1 + _aqT_]
                               + cost
                               | 0,
                             _aqY_ = i - 1 | 0,
                             _aqX_ =
                               caml_check_bound(caml_check_bound(m, i)[1 + i], _aqW_)
                                [1 + _aqW_],
                             _aqZ_ =
                               caml_check_bound(caml_check_bound(m, _aqY_)[1 + _aqY_], j)
                                [1 + j];
                            return caml_cps_call3
                                    (Stdlib_Int[10],
                                     _aqZ_,
                                     _aqX_,
                                     function(_aq0_){
                                      return caml_cps_call3
      (Stdlib_Int[10],
       1 + _aq0_ | 0,
       _aqV_,
       function(best){
        function _aq6_(best){
         caml_check_bound(caml_check_bound(m, i)[1 + i], j)[1 + j] = best;
         var _aq7_ = j + 1 | 0;
         return _aqO_ !== j
                 ? caml_cps_exact_call1(_aqQ_, _aq7_)
                 : _aqP_();
        }
        if(1 >= i) return _aq6_(best);
        if(1 >= j) return _aq6_(best);
        var _aq1_ = caml_string_get(b, j - 2 | 0);
        if(caml_string_get(a, i - 1 | 0) !== _aq1_)
         return _aq6_(best);
        var _aq2_ = caml_string_get(b, j - 1 | 0);
        if(caml_string_get(a, i - 2 | 0) !== _aq2_)
         return _aq6_(best);
        var
         _aq3_ = j - 2 | 0,
         _aq4_ = i - 2 | 0,
         _aq5_ =
           caml_check_bound
             (caml_check_bound(m, _aq4_)[1 + _aq4_], _aq3_)
            [1 + _aq3_]
           + cost
           | 0;
        return caml_cps_call3(Stdlib_Int[10], best, _aq5_, _aq6_);
       });
                                     });
                           }
                           function _aqP_(){
                            var _aqR_ = i + 1 | 0;
                            return la !== i
                                    ? caml_cps_exact_call1(_aqM_, _aqR_)
                                    : _aqL_();
                           }
                           return _aqO_ < _aqN_ ? _aqP_() : _aqQ_(_aqN_);
                          });
                });
      }
      function _aqL_(){
       var
        result =
          caml_check_bound(caml_check_bound(m, la)[1 + la], lb)
           [1 + lb];
       return cutoff < result ? cont(0) : cont([0, result]);
      }
      var _aqI_ = 1;
      return la < 1 ? _aqL_() : _aqM_(_aqI_);
     });
                                 });
                       });
             });
   }
   function spellcheck(env, target, cont){
    var
     switcher = caml_ml_string_length(target) - 1 | 0,
     cutoff =
       3 < switcher >>> 0
        ? 1 < switcher - 4 >>> 0 ? 3 : 2
        : 2 <= switcher ? 1 : 0;
    return caml_cps_call3
            (Stdlib_List[59],
             function(s1, s2, cont){
              return caml_cps_call3(Stdlib_String[9], s2, s1, cont);
             },
             env,
             function(env){
              return caml_cps_call4
                      (Stdlib_List[25],
                       function(acc, head, cont){
                        return caml_cps_exact_call4
                                (edit_distance,
                                 target,
                                 head,
                                 cutoff,
                                 function(match){
                                  if(! match) return cont(acc);
                                  var
                                   dist = match[1],
                                   best_dist = acc[2],
                                   best_choice = acc[1];
                                  return dist < best_dist
  ? cont([0, [0, head, 0], dist])
  : dist
    === best_dist
    ? cont([0, [0, head, best_choice], dist])
    : cont(acc);
                                 });
                       },
                       [0, 0, Stdlib[19]],
                       env,
                       function(_aqD_){return cont(_aqD_[1]);});
             });
   }
   function did_you_mean(ppf, get_choices, cont){
    return caml_cps_call3
            (Stdlib_Format[135],
             ppf,
             _aO_,
             function(_aqA_){
              return caml_cps_call2
                      (get_choices,
                       0,
                       function(choices){
                        return choices
                                ? caml_cps_exact_call2
                                  (split_last,
                                   choices,
                                   function(match){
                                    var
                                     last = match[2],
                                     rest = match[1],
                                     _aqB_ = 0 === rest ? cst$16 : cst_or;
                                    return caml_cps_call3
    (Stdlib_String[6],
     cst$17,
     rest,
     function(_aqC_){
      return caml_cps_call6
              (Stdlib_Format[135], ppf, _aP_, _aqC_, _aqB_, last, cont);
     });
                                   })
                                : cont(0);
                       });
             });
   }
   function cut_at(s, c, cont){
    return caml_cps_call3
            (Stdlib_String[35],
             s,
             c,
             function(pos){
              return caml_cps_call4
                      (Stdlib_String[15],
                       s,
                       pos + 1 | 0,
                       (caml_ml_string_length(s) - pos | 0) - 1 | 0,
                       function(_aqy_){
                        return caml_cps_call4
                                (Stdlib_String[15],
                                 s,
                                 0,
                                 pos,
                                 function(_aqz_){return cont([0, _aqz_, _aqy_]);});
                       });
             });
   }
   function ordinal_suffix(n, cont){
    var
     teen = 1 === ((n % 100 | 0) / 10 | 0) ? 1 : 0,
     switcher = (n % 10 | 0) - 1 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        if(! teen) return cont(cst_st); break;
       case 1:
        if(! teen) return cont(cst_nd); break;
       default: if(! teen) return cont(cst_rd);
     }
    return cont(cst_th);
   }
   function ansi_of_color(param){
    switch(param){
      case 0:
       return cst_0;
      case 1:
       return cst_1;
      case 2:
       return cst_2;
      case 3:
       return cst_3;
      case 4:
       return cst_4;
      case 5:
       return cst_5;
      case 6:
       return cst_6;
      default: return cst_7;
    }
   }
   function code_of_style(param, cont){
    if(typeof param === "number")
     return 0 === param ? cont(cst_1$0) : cont(cst_0$0);
    if(0 === param[0]){
     var c = param[1], _aqw_ = ansi_of_color(c);
     return caml_cps_call3(Stdlib[28], cst_3$0, _aqw_, cont);
    }
    var c$0 = param[1], _aqx_ = ansi_of_color(c$0);
    return caml_cps_call3(Stdlib[28], cst_4$0, _aqx_, cont);
   }
   function ansi_of_style_l(l, cont){
    function _aqt_(s){
     return caml_cps_call3
             (Stdlib[28],
              s,
              cst_m,
              function(_aqv_){
               return caml_cps_call3(Stdlib[28], cst$19, _aqv_, cont);
              });
    }
    if(! l) return caml_cps_exact_call2(code_of_style, 1, _aqt_);
    if(l[2])
     return caml_cps_call3
             (Stdlib_List[19],
              code_of_style,
              l,
              function(_aqu_){
               return caml_cps_call3(Stdlib_String[6], cst$18, _aqu_, _aqt_);
              });
    var s = l[1];
    return caml_cps_exact_call2(code_of_style, s, _aqt_);
   }
   var
    Style = [248, cst_Dynlink_compilerlibs_Misc_$0, caml_fresh_oo_id(0)],
    cur_styles = [0, default_styles];
   function get_styles(param, cont){return cont(cur_styles[1]);}
   function set_styles(s, cont){cur_styles[1] = s; return cont(0);}
   function style_of_tag(s){
    if(s[1] === Stdlib_Format[79]){
     var _aqs_ = s[2];
     if(! caml_string_notequal(_aqs_, cst_error$1)) return cur_styles[1][1];
     if(! caml_string_notequal(_aqs_, "loc")) return cur_styles[1][3];
     if(! caml_string_notequal(_aqs_, cst_warning$1)) return cur_styles[1][2];
    }
    if(s[1] !== Style) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var s$0 = s[2];
    return s$0;
   }
   var color_enabled = [0, 1];
   function set_color_tag_handling(ppf, cont){
    return caml_cps_call3
            (Stdlib_Format[106],
             ppf,
             0,
             function(functions){
              var
               or_else = functions[2],
               or_else$0 = functions[1],
               functions$0 =
                 [0,
                  function(s, cont){
                   caml_push_trap
                    (function(_aqr_){
                      if(_aqr_ === Stdlib[8])
                       return caml_cps_call2(or_else$0, s, cont);
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_aqr_, 0));
                     });
                   var style = style_of_tag(s);
                   function _aqp_(_aqq_){caml_pop_trap(); return cont(_aqq_);}
                   return color_enabled[1]
                           ? caml_cps_exact_call2(ansi_of_style_l, style, _aqp_)
                           : _aqp_(cst$20);
                  },
                  function(s, cont){
                   caml_push_trap
                    (function(_aqo_){
                      if(_aqo_ === Stdlib[8])
                       return caml_cps_call2(or_else, s, cont);
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_aqo_, 0));
                     });
                   style_of_tag(s);
                   function _aqm_(_aqn_){caml_pop_trap(); return cont(_aqn_);}
                   return color_enabled[1]
                           ? caml_cps_exact_call2(ansi_of_style_l, _aQ_, _aqm_)
                           : _aqm_(cst$21);
                  },
                  functions[3],
                  functions[4]];
              return caml_cps_call3
                      (Stdlib_Format[88],
                       ppf,
                       1,
                       function(_aqk_){
                        return caml_cps_call3
                                (Stdlib_Format[104],
                                 ppf,
                                 functions$0,
                                 function(_aql_){return cont(0);});
                       });
             });
   }
   var
    default_setting = 0,
    first = [0, 1],
    formatter_l =
      [0,
       Stdlib_Format[110],
       [0, Stdlib_Format[112], [0, Stdlib_Format[117], 0]]];
   function enable_color(param){
    switch(param){
      case 1:
       return 1;
      case 2:
       return 0;
      default:
       try{var _aqi_ = caml_sys_getenv(cst_TERM), term = _aqi_;}
       catch(_aqj_){
        var _aqe_ = caml_wrap_exception(_aqj_);
        if(_aqe_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_aqe_, 0);
        var term = cst$22;
       }
       var _aqf_ = caml_string_notequal(term, cst_dumb);
       if(_aqf_)
        var
         _aqg_ = caml_string_notequal(term, cst$117),
         _aqh_ = _aqg_ ? caml_sys_isatty(Stdlib[40]) : _aqg_;
       else
        var _aqh_ = _aqf_;
       return _aqh_;
    }
   }
   function setup(o, cont){
    function _aqa_(){return cont(0);}
    return first[1]
            ? (first
               [1]
              = 0,
              caml_cps_call2
               (Stdlib_Format[89],
                1,
                function(_aqb_){
                 return caml_cps_call3
                         (Stdlib_List[17],
                          set_color_tag_handling,
                          formatter_l,
                          function(_aqc_){
                           if(o)
                            var s = o[1], _aqd_ = enable_color(s);
                           else
                            var _aqd_ = enable_color(default_setting);
                           color_enabled[1] = _aqd_;
                           return _aqa_();
                          });
                }))
            : _aqa_();
   }
   var Error_style = [0, 0];
   function normalise_eol(s, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             80,
             function(b){
              var _ap5_ = caml_ml_string_length(s) - 1 | 0;
              function _ap7_(i){
               function _ap9_(_ap__){
                var _ap$_ = i + 1 | 0;
                return _ap5_ !== i
                        ? caml_cps_exact_call1(_ap7_, _ap$_)
                        : _ap6_();
               }
               if(13 === caml_string_get(s, i)) return _ap9_(0);
               var _ap8_ = caml_string_get(s, i);
               return caml_cps_call3(Stdlib_Buffer[12], b, _ap8_, _ap9_);
              }
              function _ap6_(){
               return caml_cps_call2(Stdlib_Buffer[2], b, cont);
              }
              var _ap4_ = 0;
              return _ap5_ < 0 ? _ap6_() : _ap7_(_ap4_);
             });
   }
   function delete_eol_spaces(src, cont){
    var
     len_src = caml_ml_string_length(src),
     dst = caml_create_bytes(len_src),
     i_src = 0,
     i_dst = 0;
    for(;;){
     a:
     if(i_src !== len_src){
      var c = caml_string_get(src, i_src);
      if(9 !== c && 32 !== c){
       caml_bytes_set(dst, i_dst, c);
       var
        i_dst$0 = i_dst + 1 | 0,
        i_src$1 = i_src + 1 | 0,
        i_src = i_src$1,
        i_dst = i_dst$0;
       continue;
      }
      var i_src$0 = i_src + 1 | 0;
      b:
      {
       var spaces = 1, i_src$2 = i_src$0;
       for(;;){
        if(i_src$2 === len_src) break a;
        var switcher = caml_string_get(src, i_src$2) - 9 | 0;
        if(1 < switcher >>> 0){
         if(23 !== switcher) break b;
        }
        else if(switcher) break;
        var
         i_src$3 = i_src$2 + 1 | 0,
         spaces$0 = spaces + 1 | 0,
         spaces = spaces$0,
         i_src$2 = i_src$3;
       }
       caml_bytes_set(dst, i_dst, 10);
       var
        i_dst$2 = i_dst + 1 | 0,
        i_src$5 = i_src$2 + 1 | 0,
        i_src = i_src$5,
        i_dst = i_dst$2;
       continue;
      }
      var _ap2_ = 0;
      if(spaces >= 0){
       var n = _ap2_;
       for(;;){
        caml_bytes_set
         (dst,
          i_dst + n | 0,
          caml_string_get(src, (i_src$2 - spaces | 0) + n | 0));
        var _ap3_ = n + 1 | 0;
        if(spaces === n) break;
        var n = _ap3_;
       }
      }
      var
       i_dst$1 = (i_dst + spaces | 0) + 1 | 0,
       i_src$4 = i_src$2 + 1 | 0,
       i_src = i_src$4,
       i_dst = i_dst$1;
      continue;
     }
     return caml_cps_call4(Stdlib_Bytes[8], dst, 0, i_dst, cont);
    }
   }
   function pp_two_columns(opt, max_lines, ppf, lines, cont){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$23;
    return caml_cps_call4
            (Stdlib_List[25],
             function(acc, param, cont){
              var s = param[1];
              return caml_cps_call3
                      (Stdlib_Int[11], acc, caml_ml_string_length(s), cont);
             },
             0,
             lines,
             function(left_column_size){
              return caml_cps_call2
                      (Stdlib_List[1],
                       lines,
                       function(lines_nb){
                        a:
                        {
                         if(max_lines){
                          var max_lines$0 = max_lines[1];
                          if(max_lines$0 < lines_nb){
                           var
                            printed_lines = max_lines$0 - 1 | 0,
                            lines_before =
                              (printed_lines / 2 | 0) + (printed_lines % 2 | 0) | 0,
                            lines_after = printed_lines / 2 | 0,
                            ellipsed_last = (lines_nb - lines_after | 0) - 1 | 0,
                            ellipsed_first = lines_before;
                           break a;
                          }
                         }
                         var ellipsed_last = -1, ellipsed_first = -1;
                        }
                        return caml_cps_call3
                                (Stdlib_Format[135],
                                 ppf,
                                 _aR_,
                                 function(_apY_){
                                  return caml_cps_call3
  (Stdlib_List[18],
   function(k, param, cont){
    var line_r = param[2], line_l = param[1];
    function _ap0_(_ap1_){
     if(ellipsed_first <= k && k <= ellipsed_last)
      return cont(0);
     return caml_cps_call7
             (Stdlib_Format[135],
              ppf,
              _aT_,
              left_column_size,
              line_l,
              sep,
              line_r,
              cont);
    }
    return k === ellipsed_first
            ? caml_cps_call3(Stdlib_Format[135], ppf, _aS_, _ap0_)
            : _ap0_(0);
   },
   lines,
   function(_apZ_){
    return caml_cps_call3(Stdlib_Format[135], ppf, _aU_, cont);
   });
                                 });
                       });
             });
   }
   function show_config_and_exit(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Config[66],
             Stdlib[39],
             function(_apX_){return caml_cps_call2(Stdlib[99], 0, cont);});
   }
   function show_config_variable_and_exit(x, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Config[67],
             x,
             function(match){
              if(! match) return caml_cps_call2(Stdlib[99], 2, cont);
              var v = match[1];
              return caml_cps_call2
                      (Stdlib[42],
                       v,
                       function(_apW_){return caml_cps_call2(Stdlib[99], 0, cont);});
             });
   }
   var init$0 = [0, 0], map_cache = [0, 0];
   function get_build_path_prefix_map(param, cont){
    function _apS_(_apV_){return cont(map_cache[1]);}
    if(! (1 - init$0[1])) return _apS_(0);
    init$0[1] = 1;
    try{var encoded_map = caml_sys_getenv("BUILD_PATH_PREFIX_MAP");}
    catch(_apU_){
     var _apR_ = caml_wrap_exception(_apU_);
     if(_apR_ === Stdlib[8]) return _apS_(0);
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_apR_, 0));
    }
    return caml_cps_call2
            (Dynlink_compilerlibs_Build_pat[6],
             encoded_map,
             function(match){
              if(0 === match[0]){
               var map = match[1];
               map_cache[1] = [0, map];
               return _apS_(0);
              }
              var err = match[1];
              return caml_cps_exact_call2
                      (fatal_errorf,
                       _aV_,
                       function(_apT_){return caml_cps_call2(_apT_, err, _apS_);});
             });
   }
   function debug_prefix_map_flags(param, cont){
    return Dynlink_compilerlibs_Config[8]
            ? caml_cps_exact_call2
              (get_build_path_prefix_map,
               undef,
               function(match){
                if(! match) return cont(0);
                var map = match[1];
                return caml_cps_call4
                        (Stdlib_List[26],
                         function(map_elem, acc, cont){
                          if(! map_elem) return cont(acc);
                          var
                           match = map_elem[1],
                           source = match[2],
                           target = match[1];
                          return caml_cps_call2
                                  (Stdlib_Filename[20],
                                   target,
                                   function(_apO_){
                                    return caml_cps_call2
    (Stdlib_Filename[20],
     source,
     function(_apP_){
      return caml_cps_call4
              (Stdlib_Printf[4],
               _aW_,
               _apP_,
               _apO_,
               function(_apQ_){return cont([0, _apQ_, acc]);});
     });
                                   });
                         },
                         map,
                         0,
                         cont);
               })
            : cont(0);
   }
   function print_if(ppf, flag, printer, arg, cont){
    function _apM_(_apN_){return cont(arg);}
    return flag[1]
            ? caml_cps_call5
              (Stdlib_Format[135], ppf, _aX_, printer, arg, _apM_)
            : _apM_(0);
   }
   var
    native_obj_config = [0, Dynlink_compilerlibs_Config[55]],
    _aZ_ =
      caml_callback
       (Stdlib_List[19],
        [function(conf, cont){return cont([1, conf]);},
         all_native_obj_configs]),
    _a0_ = caml_callback(Stdlib[37], [_aZ_, _aY_]),
    _a1_ =
      caml_callback
       (Stdlib_List[19],
        [function(conf, cont){return cont([0, conf]);},
         all_native_obj_configs]),
    _a2_ = caml_callback(Stdlib[37], [_a1_, _a0_]),
    all_kinds = caml_callback(Stdlib[37], [_a3_, _a2_]);
   function parse_kind(param, cont){
    var switch$0 = caml_string_compare(param, cst_Caml1999X$0);
    a:
    {
     b:
     {
      if(0 <= switch$0){
       if(0 >= switch$0) return cont(_a__);
       if(! caml_string_notequal(param, cst_Caml1999Y$0)) return cont(_a9_);
       if(! caml_string_notequal(param, cst_Caml1999Z$0)) return cont(_a8_);
       if(! caml_string_notequal(param, cst_Caml1999y$0)) return cont(_a7_);
       if(! caml_string_notequal(param, cst_Caml1999z$0)) return cont(_a6_);
       if(caml_string_notequal(param, "Caml2007D")){
        if(caml_string_notequal(param, "Caml2012T")) break a;
        break b;
       }
      }
      else{
       if(! caml_string_notequal(param, cst_Caml1999A$0)) return cont(_bd_);
       if(caml_string_notequal(param, cst_Caml1999D$0)){
        if(! caml_string_notequal(param, cst_Caml1999I$0)) return cont(_bc_);
        if(! caml_string_notequal(param, cst_Caml1999M$0)) return cont(_bb_);
        if(! caml_string_notequal(param, cst_Caml1999N$0)) return cont(_ba_);
        if(! caml_string_notequal(param, cst_Caml1999O$0)) return cont(_a$_);
        if(caml_string_notequal(param, cst_Caml1999T$0)) break a;
        break b;
       }
      }
      return cont(_a5_);
     }
     return cont(_a4_);
    }
    return cont(0);
   }
   function raw_kind(param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cont(cst_Caml1999X);
       case 1:
        return cont(cst_Caml1999I);
       case 2:
        return cont(cst_Caml1999O);
       case 3:
        return cont(cst_Caml1999A);
       case 4:
        return cont(cst_Caml1999D);
       case 5:
        return cont(cst_Caml1999T);
       case 6:
        return cont(cst_Caml1999M);
       default: return cont(cst_Caml1999N);
     }
    if(0 === param[0]){
     var config = param[1];
     return config[1] ? cont(cst_Caml1999y) : cont(cst_Caml1999Y);
    }
    var config$0 = param[1];
    return config$0[1] ? cont(cst_Caml1999z) : cont(cst_Caml1999Z);
   }
   function string_of_kind(param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cont(cst_exec);
       case 1:
        return cont(cst_cmi);
       case 2:
        return cont(cst_cmo);
       case 3:
        return cont(cst_cma);
       case 4:
        return cont(cst_cmxs);
       case 5:
        return cont(cst_cmt);
       case 6:
        return cont(cst_ast_impl);
       default: return cont(cst_ast_intf);
     }
    return 0 === param[0] ? cont(cst_cmx) : cont(cst_cmxa);
   }
   function human_description_of_native_ob(param){
    var flambda = param[1];
    return flambda ? cst_flambda$0 : cst_non_flambda;
   }
   function human_name_of_kind(param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cont(cst_executable);
       case 1:
        return cont(cst_compiled_interface_file);
       case 2:
        return cont(cst_bytecode_object_file);
       case 3:
        return cont(cst_bytecode_library);
       case 4:
        return cont(cst_dynamic_native_library);
       case 5:
        return cont(cst_compiled_typedtree_file);
       case 6:
        return cont(cst_serialized_implementation_);
       default: return cont(cst_serialized_interface_AST);
     }
    if(0 === param[0]){
     var config = param[1], _apK_ = human_description_of_native_ob(config);
     return caml_cps_call3(Stdlib_Printf[4], _be_, _apK_, cont);
    }
    var config$0 = param[1], _apL_ = human_description_of_native_ob(config$0);
    return caml_cps_call3(Stdlib_Printf[4], _bf_, _apL_, cont);
   }
   var kind_length = 9, version_length = 3, magic_length = 12;
   function explain_parse_error(kind_opt, error, cont){
    var
     _apI_ =
       0 === error[0]
        ? caml_string_notequal
           (error[1], cst$117)
          ? cst_is_truncated
          : cst_is_empty
        : cst_has_a_different_format;
    return caml_cps_call4
            (Stdlib_Option[8],
             cst_object_file,
             human_name_of_kind,
             kind_opt,
             function(_apJ_){
              return caml_cps_call4
                      (Stdlib_Printf[4], _bg_, _apJ_, _apI_, cont);
             });
   }
   function parse(s, cont){
    return caml_ml_string_length(s) === 12
            ? caml_cps_call4
              (Stdlib_String[15],
               s,
               0,
               kind_length,
               function(raw_kind){
                return caml_cps_call4
                        (Stdlib_String[15],
                         s,
                         kind_length,
                         version_length,
                         function(raw_version){
                          return caml_cps_exact_call2
                                  (parse_kind,
                                   raw_kind,
                                   function(match){
                                    if(! match) return cont([1, [1, s]]);
                                    var kind = match[1];
                                    try{var version = caml_int_of_string(raw_version);}
                                    catch(_apC_){return cont([1, [0, s]]);}
                                    return cont([0, [0, kind, version]]);
                                   });
                         });
               })
            : caml_cps_call3
              (Stdlib_Int[10],
               kind_length,
               caml_ml_string_length(s),
               function(sub_length){
                function starts_as(kind, cont){
                 var _apE_ = 0;
                 return caml_cps_exact_call2
                         (raw_kind,
                          kind,
                          function(_apF_){
                           return caml_cps_call4
                                   (Stdlib_String[15],
                                    _apF_,
                                    _apE_,
                                    sub_length,
                                    function(_apG_){
                                     return caml_cps_call4
     (Stdlib_String[15],
      s,
      0,
      sub_length,
      function(_apH_){
       return cont(caml_string_equal(_apH_, _apG_));
      });
                                    });
                          });
                }
                return caml_cps_call3
                        (Stdlib_List[33],
                         starts_as,
                         all_kinds,
                         function(_apD_){
                          return _apD_ ? cont([1, [0, s]]) : cont([1, [1, s]]);
                         });
               });
   }
   function read_info(ic, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             magic_length,
             function(header){
              function _apy_(){
               return caml_cps_call2
                       (Stdlib_Buffer[2],
                        header,
                        function(_apB_){
                         return caml_cps_exact_call2(parse, _apB_, cont);
                        });
              }
              caml_push_trap
               (function(_apA_){
                 if(_apA_ === Stdlib[12]) return _apy_();
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_apA_, 0));
                });
              return caml_cps_call4
                      (Stdlib_Buffer[22],
                       header,
                       ic,
                       magic_length,
                       function(_apz_){caml_pop_trap(); return _apy_();});
             });
   }
   function raw(param, cont){
    var version = param[2], kind = param[1];
    return caml_cps_exact_call2
            (raw_kind,
             kind,
             function(_apx_){
              return caml_cps_call4
                      (Stdlib_Printf[4], _bh_, _apx_, version, cont);
             });
   }
   function current_raw(kind, cont){
    if(typeof kind === "number")
     switch(kind){
       case 0:
        return cont(Dynlink_compilerlibs_Config[23]);
       case 1:
        return cont(Dynlink_compilerlibs_Config[24]);
       case 2:
        return cont(Dynlink_compilerlibs_Config[25]);
       case 3:
        return cont(Dynlink_compilerlibs_Config[26]);
       case 4:
        return cont(Dynlink_compilerlibs_Config[31]);
       case 5:
        return cont(Dynlink_compilerlibs_Config[32]);
       case 6:
        return cont(Dynlink_compilerlibs_Config[30]);
       default: return cont(Dynlink_compilerlibs_Config[29]);
     }
    if(0 === kind[0]){
     var config = kind[1], reference = Dynlink_compilerlibs_Config[27];
     return caml_equal(config, native_obj_config)
             ? cont(reference)
             : caml_cps_exact_call2
               (raw_kind,
                kind,
                function(raw_kind){
                 var len = caml_ml_string_length(raw_kind);
                 return caml_cps_call4
                         (Stdlib_String[15],
                          reference,
                          len,
                          caml_ml_string_length(reference) - len | 0,
                          function(_apw_){
                           return caml_cps_call3(Stdlib[28], raw_kind, _apw_, cont);
                          });
                });
    }
    var config$0 = kind[1], reference$0 = Dynlink_compilerlibs_Config[28];
    return caml_equal(config$0, native_obj_config)
            ? cont(reference$0)
            : caml_cps_exact_call2
              (raw_kind,
               kind,
               function(raw_kind){
                var len = caml_ml_string_length(raw_kind);
                return caml_cps_call4
                        (Stdlib_String[15],
                         reference$0,
                         len,
                         caml_ml_string_length(reference$0) - len | 0,
                         function(_apv_){
                          return caml_cps_call3(Stdlib[28], raw_kind, _apv_, cont);
                         });
               });
   }
   function current_version(kind, cont){
    return caml_cps_exact_call2
            (current_raw,
             kind,
             function(raw){
              caml_push_trap
               (function(_apu_){
                 var raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1));
                });
              return caml_cps_call4
                      (Stdlib_String[15],
                       raw,
                       kind_length,
                       version_length,
                       function(_aps_){
                        var _apt_ = caml_int_of_string(_aps_);
                        caml_pop_trap();
                        return cont(_apt_);
                       });
             });
   }
   function explain_unexpected_error(param, cont){
    if(0 === param[0]){
     var match = param[1], actual = match[2], expected = match[1];
     return caml_cps_exact_call2
             (string_of_kind,
              actual,
              function(_apo_){
               return caml_cps_exact_call2
                       (human_name_of_kind,
                        actual,
                        function(_app_){
                         return caml_cps_exact_call2
                                 (string_of_kind,
                                  expected,
                                  function(_apq_){
                                   return caml_cps_exact_call2
   (human_name_of_kind,
    expected,
    function(_apr_){
     return caml_cps_call6
             (Stdlib_Printf[4], _bj_, _apr_, _apq_, _app_, _apo_, cont);
    });
                                  });
                        });
              });
    }
    var
     match$0 = param[2],
     actual$0 = match$0[2],
     expected$0 = match$0[1],
     kind = param[1],
     _apl_ = actual$0 < expected$0 ? cst_an_older : cst_a_newer;
    return caml_cps_exact_call2
            (string_of_kind,
             kind,
             function(_apm_){
              return caml_cps_exact_call2
                      (human_name_of_kind,
                       kind,
                       function(_apn_){
                        return caml_cps_call5
                                (Stdlib_Printf[4], _bk_, _apn_, _apm_, _apl_, cont);
                       });
             });
   }
   function check_current(expected_kind, param, cont){
    var version = param[2], kind = param[1];
    return caml_notequal(kind, expected_kind)
            ? cont([1, [0, [0, expected_kind, kind]]])
            : caml_cps_exact_call2
              (current_version,
               kind,
               function(expected){
                return version !== expected
                        ? cont([1, [1, kind, [0, expected, version]]])
                        : cont(_bl_);
               });
   }
   function read_current_info(expected_kind, ic, cont){
    return caml_cps_exact_call2
            (read_info,
             ic,
             function(match){
              if(0 === match[0]){
               var info = match[1];
               return caml_cps_call3
                       (Stdlib_Option[3],
                        expected_kind,
                        info[1],
                        function(kind){
                         return caml_cps_exact_call3
                                 (check_current,
                                  kind,
                                  info,
                                  function(match){
                                   if(0 === match[0]) return cont([0, info]);
                                   var err = match[1];
                                   return cont([1, [1, err]]);
                                  });
                        });
              }
              var err = match[1];
              return cont([1, [0, err]]);
             });
   }
   var
    Dynlink_compilerlibs_Misc =
      [0,
       fatal_error,
       fatal_errorf,
       Fatal_error,
       try_finally,
       reraise_preserving_backtrace,
       map_end,
       map_left_right,
       for_all2,
       replicate_list,
       list_remove,
       split_last,
       protect_refs,
       [0,
        [0,
         compare,
         equal,
         some_if_all_elements_are_some,
         map2_prefix,
         split_at,
         is_prefix,
         find_and_chop_longest_common_p],
        Option,
        Array,
        [0,
         make,
         init,
         empty,
         of_bytes,
         to_bytes,
         concat,
         cat,
         equal$0,
         compare$0,
         starts_with,
         ends_with,
         contains_from,
         rcontains_from,
         contains,
         sub,
         split_on_char,
         map,
         mapi,
         fold_left,
         fold_right,
         exists,
         trim,
         escaped,
         uppercase_ascii,
         lowercase_ascii,
         capitalize_ascii,
         uncapitalize_ascii,
         iter,
         iteri,
         index_from,
         index_from_opt,
         rindex_from,
         rindex_from_opt,
         index,
         index_opt,
         rindex,
         rindex_opt,
         to_seq,
         to_seqi,
         of_seq,
         get_utf_8_uchar,
         is_valid_utf_8,
         get_utf_16be_uchar,
         is_valid_utf_16be,
         get_utf_16le_uchar,
         is_valid_utf_16le,
         blit,
         get_uint8,
         get_int8,
         get_uint16_ne,
         get_uint16_be,
         get_uint16_le,
         get_int16_ne,
         get_int16_be,
         get_int16_le,
         get_int32_ne,
         hash,
         seeded_hash,
         get_int32_be,
         get_int32_le,
         get_int64_ne,
         get_int64_be,
         get_int64_le,
         Set,
         Map,
         Tbl,
         print$0,
         for_all]],
       find_in_path,
       find_in_path_rel,
       find_in_path_uncap,
       remove_file,
       expand_directory,
       split_path_contents,
       create_hashtable,
       copy_file,
       copy_file_chunk,
       string_of_file,
       output_to_file_via_temporary,
       protect_writing_to_file,
       log2,
       align,
       no_overflow_add,
       no_overflow_sub,
       no_overflow_mul,
       no_overflow_lsl,
       [0, int$0, int32, int64, nativeint],
       chop_extensions,
       search_substring,
       replace_substring,
       rev_split_words,
       get_ref,
       set_or_ignore,
       fst3,
       snd3,
       thd3,
       fst4,
       snd4,
       thd4,
       for4,
       LongString,
       edit_distance,
       spellcheck,
       did_you_mean,
       cut_at,
       ordinal_suffix,
       [0,
        Style,
        ansi_of_style_l,
        default_styles,
        get_styles,
        set_styles,
        default_setting,
        setup,
        set_color_tag_handling],
       Error_style,
       normalise_eol,
       delete_eol_spaces,
       pp_two_columns,
       show_config_and_exit,
       show_config_variable_and_exit,
       get_build_path_prefix_map,
       debug_prefix_map_flags,
       print_if,
       [0,
        native_obj_config,
        explain_parse_error,
        parse,
        read_info,
        magic_length,
        check_current,
        explain_unexpected_error,
        read_current_info,
        string_of_kind,
        human_name_of_kind,
        current_raw,
        current_version,
        parse_kind,
        raw_kind,
        raw,
        all_kinds]];
   caml_register_global
    (1394, Dynlink_compilerlibs_Misc, "Dynlink_compilerlibs.Misc");
   function Pair(A, B, cont){
    function compare(param, _apk_, cont){
     var b2 = _apk_[2], a2 = _apk_[1], b1 = param[2], a1 = param[1];
     return caml_cps_call3
             (A[3],
              a1,
              a2,
              function(c){
               return 0 === c ? caml_cps_call3(B[3], b1, b2, cont) : cont(c);
              });
    }
    function output(oc, param, cont){
     var b = param[2], a = param[1];
     return caml_cps_call7(Stdlib_Printf[1], oc, _bm_, A[4], a, B[4], b, cont);
    }
    function hash(param, cont){
     var b = param[2], a = param[1];
     return caml_cps_call2
             (B[2],
              b,
              function(_api_){
               return caml_cps_call2
                       (A[2],
                        a,
                        function(_apj_){
                         return caml_cps_call2
                                 (Stdlib_Hashtbl[28], [0, _apj_, _api_], cont);
                        });
              });
    }
    function equal(param, _apg_, cont){
     var b2 = _apg_[2], a2 = _apg_[1], b1 = param[2], a1 = param[1];
     return caml_cps_call3
             (A[1],
              a1,
              a2,
              function(_aph_){
               return _aph_ ? caml_cps_call3(B[1], b1, b2, cont) : cont(_aph_);
              });
    }
    function print(ppf, param, cont){
     var b = param[2], a = param[1];
     return caml_cps_call7
             (Stdlib_Format[135], ppf, _bn_, A[5], a, B[5], b, cont);
    }
    return cont([0, equal, hash, compare, output, print]);
   }
   function Make_map(T, cont){
    return caml_cps_call2
            (Stdlib_Map[1],
             [0, T[3]],
             function(include){
              var
               empty = include[1],
               is_empty = include[2],
               mem = include[3],
               add = include[4],
               update = include[5],
               singleton = include[6],
               remove = include[7],
               merge = include[8],
               union = include[9],
               compare = include[10],
               equal = include[11],
               iter = include[12],
               fold = include[13],
               for_all = include[14],
               exists = include[15],
               filter = include[16],
               filter_map = include[17],
               partition = include[18],
               cardinal = include[19],
               bindings = include[20],
               min_binding = include[21],
               min_binding_opt = include[22],
               max_binding = include[23],
               max_binding_opt = include[24],
               choose = include[25],
               choose_opt = include[26],
               split = include[27],
               find = include[28],
               find_opt = include[29],
               find_first = include[30],
               find_first_opt = include[31],
               find_last = include[32],
               find_last_opt = include[33],
               map = include[34],
               mapi = include[35],
               to_seq = include[36],
               to_rev_seq = include[37],
               to_seq_from = include[38],
               add_seq = include[39],
               of_seq = include[40];
              function of_list(l, cont){
               return caml_cps_call4
                       (Stdlib_List[25],
                        function(map, param, cont){
                         var v = param[2], id = param[1];
                         return caml_cps_call4(add, id, v, map, cont);
                        },
                        empty,
                        l,
                        cont);
              }
              function disjoint_union(eq, print, m1, m2, cont){
               return caml_cps_call4
                       (union,
                        function(id, v1, v2, cont){
                         function _ape_(ok){
                          if(ok) return cont([0, v1]);
                          function _apf_(err){
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Misc[1], err, cont);
                          }
                          if(! print)
                           return caml_cps_call4
                                   (Stdlib_Format[139], _bp_, T[5], id, _apf_);
                          var print$0 = print[1];
                          return caml_cps_call8
                                  (Stdlib_Format[139],
                                   _bo_,
                                   T[5],
                                   id,
                                   print$0,
                                   v1,
                                   print$0,
                                   v2,
                                   _apf_);
                         }
                         if(! eq) return _ape_(0);
                         var eq$0 = eq[1];
                         return caml_cps_call3(eq$0, v1, v2, _ape_);
                        },
                        m1,
                        m2,
                        cont);
              }
              function union_right(m1, m2, cont){
               return caml_cps_call4
                       (merge,
                        function(id, x, y, cont){
                         if(x)
                          var v = y ? y[1] : x[1];
                         else{if(! y) return cont(0); var v = y[1];}
                         return cont([0, v]);
                        },
                        m1,
                        m2,
                        cont);
              }
              function union_left(m1, m2, cont){
               return caml_cps_exact_call3(union_right, m2, m1, cont);
              }
              function union_merge(f, m1, m2, cont){
               function aux(param, m1, m2, cont){
                if(m1){
                 if(m2){
                  var m2$0 = m2[1], m1$0 = m1[1];
                  return caml_cps_call3
                          (f, m1$0, m2$0, function(_apd_){return cont([0, _apd_]);});
                 }
                 var m = m1;
                }
                else
                 var m = m2;
                return cont(m);
               }
               return caml_cps_call4(merge, aux, m1, m2, cont);
              }
              function rename(m, v, cont){
               caml_push_trap
                (function(_apc_){
                  if(_apc_ === Stdlib[8]) return cont(v);
                  var raise = caml_pop_trap();
                  return raise(caml_maybe_attach_backtrace(_apc_, 0));
                 });
               return caml_cps_call3
                       (find,
                        v,
                        m,
                        function(_apb_){caml_pop_trap(); return cont(_apb_);});
              }
              function map_keys(f, m, cont){
               return caml_cps_call2
                       (bindings,
                        m,
                        function(_ao__){
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  function(param, cont){
                                   var v = param[2], k = param[1];
                                   return caml_cps_call2
   (f, k, function(_apa_){return cont([0, _apa_, v]);});
                                  },
                                  _ao__,
                                  function(_ao$_){
                                   return caml_cps_exact_call2(of_list, _ao$_, cont);
                                  });
                        });
              }
              function print(f, ppf, s, cont){
               function elts(ppf, s, cont){
                return caml_cps_call3
                        (iter,
                         function(id, v, cont){
                          return caml_cps_call7
                                  (Stdlib_Format[135], ppf, _bq_, T[5], id, f, v, cont);
                         },
                         s,
                         cont);
               }
               return caml_cps_call5
                       (Stdlib_Format[135], ppf, _br_, elts, s, cont);
              }
              return caml_cps_call2
                      (Stdlib_Set[1],
                       [0, T[3]],
                       function(T_set){
                        function keys(map, cont){
                         return caml_cps_call4
                                 (fold,
                                  function(k, param, set, cont){
                                   return caml_cps_call3(T_set[4], k, set, cont);
                                  },
                                  map,
                                  T_set[1],
                                  cont);
                        }
                        function data(t, cont){
                         return caml_cps_call2
                                 (bindings,
                                  t,
                                  function(_ao8_){
                                   return caml_cps_call3
   (Stdlib_List[19],
    function(_ao9_, cont){return cont(_ao9_[2]);},
    _ao8_,
    cont);
                                  });
                        }
                        function of_set(f, set, cont){
                         return caml_cps_call4
                                 (T_set[16],
                                  function(e, map, cont){
                                   return caml_cps_call2
   (f,
    e,
    function(_ao7_){
     return caml_cps_call4(add, e, _ao7_, map, cont);
    });
                                  },
                                  set,
                                  empty,
                                  cont);
                        }
                        function transpose_keys_and_data(map, cont){
                         return caml_cps_call4
                                 (fold,
                                  function(k, v, m, cont){
                                   return caml_cps_call4(add, v, k, m, cont);
                                  },
                                  map,
                                  empty,
                                  cont);
                        }
                        function transpose_keys_and_data_set(map, cont){
                         return caml_cps_call4
                                 (fold,
                                  function(k, v, m, cont){
                                   function _ao5_(set){
                                    return caml_cps_call4(add, v, set, m, cont);
                                   }
                                   caml_push_trap
                                    (function(_ao6_){
                                      if(_ao6_ === Stdlib[8])
                                       return caml_cps_call2(T_set[5], k, _ao5_);
                                      var raise = caml_pop_trap();
                                      return raise(caml_maybe_attach_backtrace(_ao6_, 0));
                                     });
                                   return caml_cps_call3
   (find,
    v,
    m,
    function(set){
     caml_pop_trap();
     return caml_cps_call3(T_set[4], k, set, _ao5_);
    });
                                  },
                                  map,
                                  empty,
                                  cont);
                        }
                        return cont
                                ([0,
                                  empty,
                                  is_empty,
                                  mem,
                                  add,
                                  update,
                                  singleton,
                                  remove,
                                  merge,
                                  union,
                                  compare,
                                  equal,
                                  iter,
                                  fold,
                                  for_all,
                                  exists,
                                  filter,
                                  filter_map,
                                  partition,
                                  cardinal,
                                  bindings,
                                  min_binding,
                                  min_binding_opt,
                                  max_binding,
                                  max_binding_opt,
                                  choose,
                                  choose_opt,
                                  split,
                                  find,
                                  find_opt,
                                  find_first,
                                  find_first_opt,
                                  find_last,
                                  find_last_opt,
                                  map,
                                  mapi,
                                  to_seq,
                                  to_rev_seq,
                                  to_seq_from,
                                  add_seq,
                                  of_seq,
                                  of_list,
                                  disjoint_union,
                                  union_right,
                                  union_left,
                                  union_merge,
                                  rename,
                                  map_keys,
                                  print,
                                  ,
                                  keys,
                                  data,
                                  of_set,
                                  transpose_keys_and_data,
                                  transpose_keys_and_data_set]);
                       });
             });
   }
   var
    Dynlink_compilerlibs_Identifia =
      [0,
       Pair,
       function(T, cont){
        var
         equal = T[1],
         hash = T[2],
         compare = T[3],
         output = T[4],
         print = T[5];
        return caml_cps_call2
                (Stdlib_Set[1],
                 [0, T[3]],
                 function(include){
                  var
                   empty = include[1],
                   is_empty = include[2],
                   mem = include[3],
                   add = include[4],
                   singleton = include[5],
                   remove = include[6],
                   union = include[7],
                   inter = include[8],
                   disjoint = include[9],
                   diff = include[10],
                   compare$0 = include[11],
                   equal$0 = include[12],
                   subset = include[13],
                   iter = include[14],
                   fold = include[16],
                   for_all = include[17],
                   exists = include[18],
                   filter = include[19],
                   filter_map = include[20],
                   partition = include[21],
                   cardinal = include[22],
                   elements = include[23],
                   min_elt = include[24],
                   min_elt_opt = include[25],
                   max_elt = include[26],
                   max_elt_opt = include[27],
                   choose = include[28],
                   choose_opt = include[29],
                   split = include[30],
                   find = include[31],
                   find_opt = include[32],
                   find_first = include[33],
                   find_first_opt = include[34],
                   find_last = include[35],
                   find_last_opt = include[36],
                   to_seq_from = include[38],
                   to_seq = include[39],
                   to_rev_seq = include[40],
                   add_seq = include[41],
                   of_seq = include[42];
                  function output$0(oc, s, cont){
                   return caml_cps_call3
                           (Stdlib_Printf[1],
                            oc,
                            _bs_,
                            function(_ao3_){
                             return caml_cps_call3
                                     (iter,
                                      function(v, cont){
                                       return caml_cps_call5
       (Stdlib_Printf[1], oc, _bt_, T[4], v, cont);
                                      },
                                      s,
                                      function(_ao4_){
                                       return caml_cps_call3(Stdlib_Printf[1], oc, _bu_, cont);
                                      });
                            });
                  }
                  function print$0(ppf, s, cont){
                   function elts(ppf, s, cont){
                    return caml_cps_call3
                            (iter,
                             function(e, cont){
                              return caml_cps_call5
                                      (Stdlib_Format[135], ppf, _bv_, T[5], e, cont);
                             },
                             s,
                             cont);
                   }
                   return caml_cps_call5
                           (Stdlib_Format[135], ppf, _bw_, elts, s, cont);
                  }
                  function to_string(s, cont){
                   return caml_cps_call4
                           (Stdlib_Format[139], _bx_, print$0, s, cont);
                  }
                  function of_list(l, cont){
                   if(! l) return cont(empty);
                   var t = l[1];
                   if(! l[2]) return caml_cps_call2(singleton, t, cont);
                   var q = l[2];
                   return caml_cps_call2
                           (singleton,
                            t,
                            function(_ao2_){
                             return caml_cps_call4
                                     (Stdlib_List[25],
                                      function(acc, e, cont){
                                       return caml_cps_call3(add, e, acc, cont);
                                      },
                                      _ao2_,
                                      q,
                                      cont);
                            });
                  }
                  function map(f, s, cont){
                   return caml_cps_call2
                           (elements,
                            s,
                            function(_ao0_){
                             return caml_cps_call3
                                     (Stdlib_List[19],
                                      f,
                                      _ao0_,
                                      function(_ao1_){
                                       return caml_cps_exact_call2(of_list, _ao1_, cont);
                                      });
                            });
                  }
                  var
                   Set =
                     [0,
                      empty,
                      is_empty,
                      mem,
                      add,
                      singleton,
                      remove,
                      union,
                      inter,
                      disjoint,
                      diff,
                      compare$0,
                      equal$0,
                      subset,
                      iter,
                      fold,
                      for_all,
                      exists,
                      filter,
                      filter_map,
                      partition,
                      cardinal,
                      elements,
                      min_elt,
                      min_elt_opt,
                      max_elt,
                      max_elt_opt,
                      choose,
                      choose_opt,
                      split,
                      find,
                      find_opt,
                      find_first,
                      find_first_opt,
                      find_last,
                      find_last_opt,
                      to_seq_from,
                      to_seq,
                      to_rev_seq,
                      add_seq,
                      of_seq,
                      output$0,
                      print$0,
                      to_string,
                      of_list,
                      map];
                  return caml_cps_exact_call2
                          (Make_map,
                           T,
                           function(Map){
                            return caml_cps_call2
                                    (Stdlib_Hashtbl[26],
                                     [0, T[1], T[2]],
                                     function(include){
                                      var
                                       create = include[1],
                                       clear = include[2],
                                       reset = include[3],
                                       copy = include[4],
                                       add = include[5],
                                       remove = include[6],
                                       find = include[7],
                                       find_opt = include[8],
                                       find_all = include[9],
                                       replace = include[10],
                                       mem = include[11],
                                       iter = include[12],
                                       filter_map_inplace = include[13],
                                       fold = include[14],
                                       length = include[15],
                                       stats = include[16],
                                       to_seq = include[17],
                                       to_seq_keys = include[18],
                                       to_seq_values = include[19],
                                       add_seq = include[20],
                                       replace_seq = include[21],
                                       of_seq = include[22];
                                      return caml_cps_exact_call2
      (Make_map,
       T,
       function(T_map){
        function to_list(t, cont){
         return caml_cps_call4
                 (fold,
                  function(key, datum, elts, cont){
                   return cont([0, [0, key, datum], elts]);
                  },
                  t,
                  0,
                  cont);
        }
        function of_list(elts, cont){
         return caml_cps_call2
                 (create,
                  42,
                  function(t){
                   return caml_cps_call3
                           (Stdlib_List[17],
                            function(param, cont){
                             var datum = param[2], key = param[1];
                             return caml_cps_call4(add, t, key, datum, cont);
                            },
                            elts,
                            function(_aoZ_){return cont(t);});
                  });
        }
        function to_map(v, cont){
         return caml_cps_call4(fold, T_map[4], v, T_map[1], cont);
        }
        function of_map(m, cont){
         return caml_cps_call2
                 (T_map[19],
                  m,
                  function(_aoX_){
                   return caml_cps_call2
                           (create,
                            _aoX_,
                            function(t){
                             return caml_cps_call3
                                     (T_map[12],
                                      function(k, v, cont){
                                       return caml_cps_call4(add, t, k, v, cont);
                                      },
                                      m,
                                      function(_aoY_){return cont(t);});
                            });
                  });
        }
        function memoize(t, f, key, cont){
         caml_push_trap
          (function(_aoV_){
            if(_aoV_ === Stdlib[8])
             return caml_cps_call2
                     (f,
                      key,
                      function(r){
                       return caml_cps_call4
                               (add, t, key, r, function(_aoW_){return cont(r);});
                      });
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_aoV_, 0));
           });
         return caml_cps_call3
                 (find,
                  t,
                  key,
                  function(_aoU_){caml_pop_trap(); return cont(_aoU_);});
        }
        function map(t, f, cont){
         return caml_cps_exact_call2
                 (to_map,
                  t,
                  function(_aoS_){
                   return caml_cps_call3
                           (T_map[34],
                            f,
                            _aoS_,
                            function(_aoT_){
                             return caml_cps_exact_call2(of_map, _aoT_, cont);
                            });
                  });
        }
        return cont
                ([0,
                  T,
                  equal,
                  hash,
                  compare,
                  output,
                  print,
                  Set,
                  [0,
                   Map[1],
                   Map[2],
                   Map[3],
                   Map[4],
                   Map[5],
                   Map[6],
                   Map[7],
                   Map[8],
                   Map[9],
                   Map[10],
                   Map[11],
                   Map[12],
                   Map[13],
                   Map[14],
                   Map[15],
                   Map[16],
                   Map[17],
                   Map[18],
                   Map[19],
                   Map[20],
                   Map[21],
                   Map[22],
                   Map[23],
                   Map[24],
                   Map[25],
                   Map[26],
                   Map[27],
                   Map[28],
                   Map[29],
                   Map[30],
                   Map[31],
                   Map[32],
                   Map[33],
                   Map[34],
                   Map[35],
                   Map[36],
                   Map[37],
                   Map[38],
                   Map[39],
                   Map[40],
                   Map[41],
                   Map[42],
                   Map[43],
                   Map[44],
                   Map[45],
                   Map[46],
                   Map[47],
                   Map[50],
                   Map[51],
                   Map[52],
                   Map[53],
                   Map[54],
                   Map[48]],
                  [0,
                   create,
                   clear,
                   reset,
                   copy,
                   add,
                   remove,
                   find,
                   find_opt,
                   find_all,
                   replace,
                   mem,
                   iter,
                   filter_map_inplace,
                   fold,
                   length,
                   stats,
                   to_seq,
                   to_seq_keys,
                   to_seq_values,
                   add_seq,
                   replace_seq,
                   of_seq,
                   to_list,
                   of_list,
                   to_map,
                   of_map,
                   memoize,
                   map]]);
       });
                                     });
                           });
                 });
       }];
   caml_register_global
    (1395,
     Dynlink_compilerlibs_Identifia,
     "Dynlink_compilerlibs.Identifiable");
   function compare$1(x, y, cont){return cont(x - y | 0);}
   function output$0(oc, x, cont){
    return caml_cps_call4(Stdlib_Printf[1], oc, _by_, x, cont);
   }
   function hash$1(i, cont){return cont(i);}
   function equal$2(i, j, cont){return cont(i === j ? 1 : 0);}
   var
    print$1 = Stdlib_Format[19],
    Int_base =
      caml_callback
       (Dynlink_compilerlibs_Identifia[2],
        [[0, equal$2, hash$1, compare$1, output$0, print$1]]),
    T = Int_base[1],
    equal$3 = Int_base[2],
    hash$2 = Int_base[3],
    compare$2 = Int_base[4],
    output$1 = Int_base[5],
    print$2 = Int_base[6],
    Set$0 = Int_base[7],
    Map$0 = Int_base[8],
    Tbl$0 = Int_base[9];
   function zero_to_n(n, cont){
    return 0 <= n
            ? caml_cps_exact_call2
              (zero_to_n,
               n - 1 | 0,
               function(_aoR_){
                return caml_cps_call3(Set$0[4], n, _aoR_, cont);
               })
            : cont(Set$0[1]);
   }
   function to_string(n, cont){
    return caml_cps_call2(Stdlib_Int[12], n, cont);
   }
   var
    Int =
      [0,
       T,
       equal$3,
       hash$2,
       compare$2,
       output$1,
       print$2,
       Set$0,
       Map$0,
       Tbl$0,
       zero_to_n,
       to_string];
   function of_int_exn(i, cont){
    if(i >= -128 && 127 >= i) return cont(i);
    return caml_cps_call3(Dynlink_compilerlibs_Misc[2], _bz_, i, cont);
   }
   function to_int(i, cont){return cont(i);}
   var Int8 = [0, 0, 1, of_int_exn, to_int];
   function of_int_exn$0(i, cont){
    if(i >= -32768 && 32767 >= i) return cont(i);
    return caml_cps_call3(Dynlink_compilerlibs_Misc[2], _bA_, i, cont);
   }
   var
    lower_int64 = caml_int64_neg(caml_int64_shift_left(Stdlib_Int64[2], 15)),
    upper_int64 =
      caml_int64_sub
       (caml_int64_shift_left(Stdlib_Int64[2], 15), Stdlib_Int64[2]);
   function of_int64_exn(i, cont){
    return caml_cps_call3
            (Stdlib_Int64[15],
             i,
             lower_int64,
             function(_aoO_){
              function _aoP_(){
               return caml_cps_call3
                       (Dynlink_compilerlibs_Misc[2], _bB_, i, cont);
              }
              return 0 <= _aoO_
                      ? caml_cps_call3
                        (Stdlib_Int64[15],
                         i,
                         upper_int64,
                         function(_aoQ_){
                          return 0 < _aoQ_
                                  ? _aoP_()
                                  : cont(runtime.caml_int64_to_int32(i));
                         })
                      : _aoP_();
             });
   }
   function to_int$0(t, cont){return cont(t);}
   function compare$3(x, y, cont){return cont(caml_compare(x, y));}
   function output$2(oc, x, cont){
    return caml_cps_call4(Stdlib_Printf[1], oc, _bC_, x, cont);
   }
   function hash$3(f, cont){
    return caml_cps_call2(Stdlib_Hashtbl[28], f, cont);
   }
   function equal$4(i, j, cont){return cont(i == j ? 1 : 0);}
   var
    print$3 = Stdlib_Format[21],
    include =
      caml_callback
       (Dynlink_compilerlibs_Identifia[2],
        [[0, equal$4, hash$3, compare$3, output$2, print$3]]),
    T$0 = include[1],
    equal$5 = include[2],
    hash$4 = include[3],
    compare$4 = include[4],
    output$3 = include[5],
    print$4 = include[6],
    Set$1 = include[7],
    Map$1 = include[8],
    Tbl$1 = include[9],
    Float =
      [0,
       T$0,
       equal$5,
       hash$4,
       compare$4,
       output$3,
       print$4,
       Set$1,
       Map$1,
       Tbl$1],
    Dynlink_compilerlibs_Numbers =
      [0, Int, Int8, [0, of_int_exn$0, of_int64_exn, to_int$0], Float];
   caml_register_global
    (1396, Dynlink_compilerlibs_Numbers, "Dynlink_compilerlibs.Numbers");
   var
    Dynlink_compilerlibs_Arg_helpe =
      [0,
       function(S, cont){
        function default$0(v, cont){
         return cont([0, v, S[1][2][1], 0, S[1][2][1]]);
        }
        function set_base_default(value, t, cont){
         return cont([0, value, t[2], t[3], t[4]]);
        }
        function add_base_override(key, value, t, cont){
         var _aoL_ = t[4], _aoM_ = t[3];
         return caml_cps_call4
                 (S[1][2][4],
                  key,
                  value,
                  t[2],
                  function(_aoN_){
                   return cont([0, t[1], _aoN_, _aoM_, _aoL_]);
                  });
        }
        function reset_base_overrides(t, cont){
         return cont([0, t[1], S[1][2][1], t[3], t[4]]);
        }
        function set_user_default(value, t, cont){
         return cont([0, t[1], t[2], [0, value], t[4]]);
        }
        function add_user_override(key, value, t, cont){
         return caml_cps_call4
                 (S[1][2][4],
                  key,
                  value,
                  t[4],
                  function(_aoK_){return cont([0, t[1], t[2], t[3], _aoK_]);});
        }
        var
         Parse_failure =
           [248, cst_Dynlink_compilerlibs_Arg_h, caml_fresh_oo_id(0)];
        function parse_exn(str, update, cont){
         return caml_cps_call3
                 (Stdlib_String[16],
                  44,
                  str,
                  function(_aoF_){
                   return caml_cps_call2
                           (Stdlib_List[41],
                            function(_aoJ_, cont){
                             return cont(caml_string_notequal(cst$117, _aoJ_));
                            },
                            function(_aoG_){
                             return caml_cps_call2
                                     (_aoG_,
                                      _aoF_,
                                      function(values){
                                       return caml_cps_call4
       (Stdlib_List[25],
        function(acc, key_value_pair, cont){
         caml_push_trap
          (function(_aoI_){
            if(_aoI_ === Stdlib[8]){
             caml_push_trap
              (function(exn){
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Parse_failure, exn], 1));
               });
             return caml_cps_call2
                     (S[2][1],
                      key_value_pair,
                      function(value){
                       caml_pop_trap();
                       return caml_cps_exact_call3
                               (set_user_default, value, acc, cont);
                      });
            }
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_aoI_, 0));
           });
         return caml_cps_call3
                 (Stdlib_String[35],
                  key_value_pair,
                  61,
                  function(equals){
                   caml_pop_trap();
                   var length = caml_ml_string_length(key_value_pair);
                   if(0 <= equals && equals < length){
                    if(0 !== equals)
                     return caml_cps_call4
                             (Stdlib_String[15],
                              key_value_pair,
                              0,
                              equals,
                              function(key){
                               caml_push_trap
                                (function(exn){
                                  var raise = caml_pop_trap();
                                  return raise
  (caml_maybe_attach_backtrace([0, Parse_failure, exn], 1));
                                 });
                               return caml_cps_call2
                                       (S[1][1],
key,
function(key){
 caml_pop_trap();
 return caml_cps_call4
         (Stdlib_String[15],
          key_value_pair,
          equals + 1 | 0,
          (length - equals | 0) - 1 | 0,
          function(value){
           caml_push_trap
            (function(exn){
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Parse_failure, exn], 1));
             });
           return caml_cps_call2
                   (S[2][1],
                    value,
                    function(value){
                     caml_pop_trap();
                     return caml_cps_exact_call4
                             (add_user_override, key, value, acc, cont);
                    });
          });
});
                              });
                    var
                     _aoH_ =
                       [0,
                        Parse_failure,
                        [0, Stdlib[7], cst_Missing_key_in_argument_sp]],
                     raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_aoH_, 1));
                   }
                   var raise$0 = caml_pop_trap();
                   return raise$0
                           (caml_maybe_attach_backtrace([0, Assert_failure, _bD_], 1));
                  });
        },
        update[1],
        values,
        function(parsed){update[1] = parsed; return cont(undef);});
                                      });
                            });
                  });
        }
        function parse(str, help_text, update, cont){
         caml_push_trap
          (function(_aoC_){
            if(_aoC_[1] === Parse_failure){
             var exn = _aoC_[2];
             return caml_cps_call2
                     (Stdlib_Printexc[1],
                      exn,
                      function(_aoD_){
                       return caml_cps_call4
                               (Stdlib_Printf[4],
                                _bE_,
                                _aoD_,
                                help_text,
                                function(err){
                                 return caml_cps_call2
 (Stdlib[53],
  err,
  function(_aoE_){return caml_cps_call2(Stdlib[99], 2, cont);});
                                });
                      });
            }
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_aoC_, 0));
           });
         return caml_cps_exact_call3
                 (parse_exn,
                  str,
                  update,
                  function(val){caml_pop_trap(); return cont(0);});
        }
        function parse_no_error(str, update, cont){
         caml_push_trap
          (function(_aoB_){
            if(_aoB_[1] === Parse_failure){
             var exn = _aoB_[2];
             return cont([0, exn]);
            }
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_aoB_, 0));
           });
         return caml_cps_exact_call3
                 (parse_exn,
                  str,
                  update,
                  function(val){caml_pop_trap(); return cont(0);});
        }
        function get(key, parsed, cont){
         caml_push_trap
          (function(_aoz_){
            if(_aoz_ !== Stdlib[8]){
             var raise = caml_pop_trap();
             return raise(caml_maybe_attach_backtrace(_aoz_, 0));
            }
            var match = parsed[3];
            if(match){var value = match[1]; return cont(value);}
            caml_push_trap
             (function(_aoA_){
               if(_aoA_ === Stdlib[8]) return cont(parsed[1]);
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_aoA_, 0));
              });
            return caml_cps_call3
                    (S[1][2][28],
                     key,
                     parsed[2],
                     function(value){caml_pop_trap(); return cont(value);});
           });
         return caml_cps_call3
                 (S[1][2][28],
                  key,
                  parsed[4],
                  function(value){caml_pop_trap(); return cont(value);});
        }
        return cont
                ([0,
                  default$0,
                  set_base_default,
                  add_base_override,
                  reset_base_overrides,
                  set_user_default,
                  add_user_override,
                  parse,
                  parse_no_error,
                  get]);
       }];
   caml_register_global
    (1397, Dynlink_compilerlibs_Arg_helpe, "Dynlink_compilerlibs.Arg_helper");
   var global_bindings = [0, 0, 0, 0];
   function is_bound(param, cont){return cont(global_bindings[3]);}
   function reset(param, cont){
    return caml_cps_exact_call2
            (is_bound,
             undef,
             function(_aox_){
              if(_aox_)
               return caml_cps_call3
                       (Stdlib_List[17],
                        function(param, cont){
                         if(0 === param[0]){
                          var init = param[2], ref = param[1];
                          return caml_cps_call2
                                  (init, 0, function(_aoy_){ref[1] = _aoy_; return cont(0);});
                         }
                         var ref$0 = param[1], snapshot = param[2];
                         ref$0[1] = snapshot;
                         return cont(0);
                        },
                        global_bindings[1],
                        cont);
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _bF_], 1));
             });
   }
   function s_table(create, size, cont){
    function init(param, cont){return caml_cps_call2(create, size, cont);}
    return caml_cps_exact_call2
            (init,
             undef,
             function(_aow_){
              var ref = [0, _aow_];
              if(global_bindings[2]){
               var raise = caml_pop_trap();
               return raise
                       (caml_maybe_attach_backtrace([0, Assert_failure, _bG_], 1));
              }
              global_bindings[1] = [0, [0, ref, init], global_bindings[1]];
              return cont(ref);
             });
   }
   function s_ref(k, cont){
    var ref = [0, k];
    if(global_bindings[2]){
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace([0, Assert_failure, _bH_], 1));
    }
    global_bindings[1] = [0, [1, ref, k], global_bindings[1]];
    return cont(ref);
   }
   function fresh(param, cont){
    return caml_cps_call3
            (Stdlib_List[19],
             function(r, cont){
              if(0 === r[0]){
               var init = r[2], ref = r[1];
               return caml_cps_call2
                       (init, 0, function(_aov_){return cont([0, ref, _aov_]);});
              }
              if(1 - global_bindings[2]) r[2] = r[1][1];
              return cont([0, r[1], r[2]]);
             },
             global_bindings[1],
             function(slots){global_bindings[2] = 1; return cont(slots);});
   }
   function with_store(slots, f, cont){
    if(global_bindings[3]){
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace([0, Assert_failure, _bI_], 1));
    }
    global_bindings[3] = 1;
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var ref = param[1], value = param[2];
              ref[1] = value;
              return cont(0);
             },
             slots,
             function(_aot_){
              return caml_cps_call3
                      (Stdlib_Fun[4],
                       function(param, cont){
                        return caml_cps_call3
                                (Stdlib_List[17],
                                 function(param, cont){
                                  param[2] = param[1][1];
                                  return cont(0);
                                 },
                                 slots,
                                 function(_aou_){global_bindings[3] = 0; return cont(0);});
                       },
                       f,
                       cont);
             });
   }
   var
    Dynlink_compilerlibs_Local_sto =
      [0, s_ref, s_table, fresh, with_store, reset, is_bound];
   caml_register_global
    (1398, Dynlink_compilerlibs_Local_sto, "Dynlink_compilerlibs.Local_store");
   var
    files =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Misc[13][4][66][1], 42]),
    files_uncap =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Misc[13][4][66][1], 42]);
   function path(t, cont){return cont(t[1]);}
   function files$0(t, cont){return cont(t[2]);}
   function find(t, fn, cont){
    return caml_cps_call3
            (Stdlib_List[36],
             fn,
             t[2],
             function(_aor_){
              return _aor_
                      ? caml_cps_call3
                        (Stdlib_Filename[4],
                         t[1],
                         fn,
                         function(_aos_){return cont([0, _aos_]);})
                      : cont(0);
             });
   }
   function find_uncap(t, fn, cont){
    return caml_cps_call2
            (Stdlib_String[28],
             fn,
             function(fn){
              function search(base, cont){
               return caml_cps_call2
                       (Stdlib_String[28],
                        base,
                        function(_aop_){
                         return caml_string_equal(_aop_, fn)
                                 ? caml_cps_call3
                                   (Stdlib_Filename[4],
                                    t[1],
                                    base,
                                    function(_aoq_){return cont([0, _aoq_]);})
                                 : cont(0);
                        });
              }
              return caml_cps_call3(Stdlib_List[40], search, t[2], cont);
             });
   }
   function create$0(path, cont){
    try{
     var
      _aok_ = caml_string_equal(path, cst$117) ? Stdlib_Filename[1] : path,
      _aol_ = runtime.caml_sys_read_directory(_aok_),
      _aom_ = _aol_;
    }
    catch(_aoo_){
     var _aoj_ = caml_wrap_exception(_aoo_);
     if(_aoj_[1] !== Stdlib[11]){
      var raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_aoj_, 0));
     }
     var _aom_ = [0];
    }
    return caml_cps_call2
            (Stdlib_Array[9],
             _aom_,
             function(_aon_){return cont([0, path, _aon_]);});
   }
   var dirs = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]);
   function no_auto_include(param, _aoh_, cont){
    var _aoi_ = Stdlib[8], raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace(_aoi_, 1));
   }
   var auto_include_callback = [0, no_auto_include];
   function reset$0(param, cont){
    function _aod_(){
     return caml_cps_call2
             (Dynlink_compilerlibs_Misc[13][4][66][2],
              files[1],
              function(_aof_){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Misc[13][4][66][2],
                        files_uncap[1],
                        function(_aog_){
                         dirs[1] = 0;
                         auto_include_callback[1] = no_auto_include;
                         return cont(0);
                        });
              });
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_aoe_){
                if(_aoe_) return _aod_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bJ_], 1));
               })
            : _aod_();
   }
   function get$0(param, cont){
    return caml_cps_call2(Stdlib_List[9], dirs[1], cont);
   }
   function get_paths(param, cont){
    return caml_cps_call3(Stdlib_List[21], path, dirs[1], cont);
   }
   function prepend_add(dir, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(base, cont){
              return caml_cps_call3
                      (Stdlib_Filename[4],
                       dir[1],
                       base,
                       function(fn){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[13][4][66][10],
                                 files[1],
                                 base,
                                 fn,
                                 function(_aob_){
                                  return caml_cps_call2
  (Stdlib_String[28],
   base,
   function(_aoc_){
    return caml_cps_call4
            (Dynlink_compilerlibs_Misc[13][4][66][10],
             files_uncap[1],
             _aoc_,
             fn,
             cont);
   });
                                 });
                       });
             },
             dir[2],
             cont);
   }
   function init$1(auto_include, l, cont){
    return caml_cps_exact_call2
            (reset$0,
             undef,
             function(_an__){
              return caml_cps_call3
                      (Stdlib_List[21],
                       create$0,
                       l,
                       function(_an$_){
                        dirs[1] = _an$_;
                        return caml_cps_call3
                                (Stdlib_List[17],
                                 prepend_add,
                                 dirs[1],
                                 function(_aoa_){
                                  auto_include_callback[1] = auto_include;
                                  return cont(0);
                                 });
                       });
             });
   }
   function remove_dir(dir, cont){
    function _an2_(){
     return caml_cps_call3
             (Stdlib_List[41],
              function(d, cont){return cont(caml_string_notequal(d[1], dir));},
              dirs[1],
              function(new_dirs){
               return caml_cps_call3
                       (Stdlib_List[2],
                        new_dirs,
                        dirs[1],
                        function(_an4_){
                         var _an5_ = 0 !== _an4_ ? 1 : 0;
                         function _an6_(_an9_){return cont(_an9_);}
                         return _an5_
                                 ? caml_cps_exact_call2
                                   (reset$0,
                                    undef,
                                    function(_an7_){
                                     return caml_cps_call3
     (Stdlib_List[17],
      prepend_add,
      new_dirs,
      function(_an8_){dirs[1] = new_dirs; return _an6_(0);});
                                    })
                                 : _an6_(_an5_);
                        });
              });
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_an3_){
                if(_an3_) return _an2_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bK_], 1));
               })
            : _an2_();
   }
   function add(dir, cont){
    function _anU_(){
     return caml_cps_call3
             (Stdlib_List[17],
              function(base, cont){
               return caml_cps_call3
                       (Stdlib_Filename[4],
                        dir[1],
                        base,
                        function(fn){
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Misc[13][4][66][11],
                                  files[1],
                                  base,
                                  function(_anX_){
                                   function _anY_(_anZ_){
                                    return caml_cps_call2
    (Stdlib_String[28],
     base,
     function(ubase){
      return caml_cps_call3
              (Dynlink_compilerlibs_Misc[13][4][66][11],
               files_uncap[1],
               ubase,
               function(_an0_){
                var _an1_ = 1 - _an0_;
                return _an1_
                        ? caml_cps_call4
                          (Dynlink_compilerlibs_Misc[13][4][66][10],
                           files_uncap[1],
                           ubase,
                           fn,
                           cont)
                        : cont(_an1_);
               });
     });
                                   }
                                   return 1 - _anX_
   ? caml_cps_call4
     (Dynlink_compilerlibs_Misc[13][4][66][10],
      files[1],
      base,
      fn,
      _anY_)
   : _anY_(0);
                                  });
                        });
              },
              dir[2],
              function(_anW_){dirs[1] = [0, dir, dirs[1]]; return cont(0);});
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_anV_){
                if(_anV_) return _anU_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bL_], 1));
               })
            : _anU_();
   }
   function add_dir(dir, cont){
    return caml_cps_exact_call2
            (create$0,
             dir,
             function(_anT_){return caml_cps_exact_call2(add, _anT_, cont);});
   }
   function prepend_dir(dir, cont){
    function _anP_(){
     return caml_cps_exact_call2
             (prepend_add,
              dir,
              function(_anR_){
               return caml_cps_call3
                       (Stdlib[37],
                        dirs[1],
                        [0, dir, 0],
                        function(_anS_){dirs[1] = _anS_; return cont(0);});
              });
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_anQ_){
                if(_anQ_) return _anP_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bM_], 1));
               })
            : _anP_();
   }
   function is_basename(fn, cont){
    return caml_cps_call2
            (Stdlib_Filename[13],
             fn,
             function(_anO_){return cont(caml_string_equal(_anO_, fn));});
   }
   var
    expand =
      caml_callback
       (Dynlink_compilerlibs_Misc[18], [Dynlink_compilerlibs_Config[3]]),
    otherlibs =
      caml_callback
       (Stdlib_List[19],
        [function(lib, cont){
          return cont
                  ([0,
                    lib,
                    [246,
                     function(param, cont){
                      return caml_cps_call3
                              (Stdlib[28],
                               cst$24,
                               lib,
                               function(_anM_){
                                return caml_cps_call2
(expand,
 _anM_,
 function(_anN_){
  return caml_cps_exact_call2(create$0, _anN_, cont);
 });
                               });
                     }]]);
         },
         _bN_]);
   function auto_include_otherlibs(alert, find_in_dir, fn, cont){
    function scan(param, cont){
     var _anH_ = param[2], lib = param[1], _anI_ = caml_obj_tag(_anH_);
     function _anJ_(dir){
      return caml_cps_call3
              (find_in_dir,
               dir,
               fn,
               function(file){
                function alert_and_add_dir(param, cont){
                 return caml_cps_call2
                         (alert,
                          lib,
                          function(_anL_){
                           return caml_cps_exact_call2(add, dir, cont);
                          });
                }
                return caml_cps_call3
                        (Stdlib_Option[9],
                         alert_and_add_dir,
                         file,
                         function(_anK_){return cont(file);});
               });
     }
     if(250 === _anI_) return _anJ_(_anH_[1]);
     if(246 !== _anI_ && 244 !== _anI_) return _anJ_(_anH_);
     return caml_cps_call2(CamlinternalLazy[2], _anH_, _anJ_);
    }
    return caml_cps_call3
            (Stdlib_List[40],
             scan,
             otherlibs,
             function(match){
              if(match){var base = match[1]; return cont(base);}
              var _anG_ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_anG_, 1));
             });
   }
   function find$0(fn, cont){
    function _anz_(){
     caml_push_trap
      (function(_anF_){
        if(_anF_ === Stdlib[8])
         return caml_cps_call3(auto_include_callback[1], find, fn, cont);
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_anF_, 0));
       });
     return caml_cps_exact_call2
             (is_basename,
              fn,
              function(_anB_){
               function _anC_(_anE_){caml_pop_trap(); return cont(_anE_);}
               if(_anB_ && ! Stdlib_Sys[3][1])
                return caml_cps_call3
                        (Dynlink_compilerlibs_Misc[13][4][66][7],
                         files[1],
                         fn,
                         _anC_);
               return caml_cps_exact_call2
                       (get_paths,
                        undef,
                        function(_anD_){
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Misc[14], _anD_, fn, _anC_);
                        });
              });
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_anA_){
                if(_anA_) return _anz_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bO_], 1));
               })
            : _anz_();
   }
   function find_uncap$0(fn, cont){
    function _anr_(){
     caml_push_trap
      (function(_any_){
        if(_any_ === Stdlib[8])
         return caml_cps_call2
                 (Stdlib_String[28],
                  fn,
                  function(fn_uncap){
                   return caml_cps_call3
                           (auto_include_callback[1], find_uncap, fn_uncap, cont);
                  });
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_any_, 0));
       });
     return caml_cps_exact_call2
             (is_basename,
              fn,
              function(_ant_){
               function _anu_(_anx_){caml_pop_trap(); return cont(_anx_);}
               if(_ant_ && ! Stdlib_Sys[3][1])
                return caml_cps_call2
                        (Stdlib_String[28],
                         fn,
                         function(_anw_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Misc[13][4][66][7],
                                   files_uncap[1],
                                   _anw_,
                                   _anu_);
                         });
               return caml_cps_exact_call2
                       (get_paths,
                        undef,
                        function(_anv_){
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Misc[16], _anv_, fn, _anu_);
                        });
              });
    }
    return Dynlink_compilerlibs_Config[68]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Local_sto[6],
               0,
               function(_ans_){
                if(_ans_) return _anr_();
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _bP_], 1));
               })
            : _anr_();
   }
   var
    Dynlink_compilerlibs_Load_path =
      [0,
       add_dir,
       remove_dir,
       reset$0,
       [0, create$0, path, files$0, find, find_uncap],
       no_auto_include,
       init$1,
       auto_include_otherlibs,
       get_paths,
       find$0,
       find_uncap$0,
       add,
       add,
       prepend_dir,
       get$0];
   caml_register_global
    (1399, Dynlink_compilerlibs_Load_path, "Dynlink_compilerlibs.Load_path");
   var include$0 = Dynlink_compilerlibs_Numbers[1], Map$2 = include$0[8];
   function of_string(_anq_, cont){return cont(caml_int_of_string(_anq_));}
   function of_string$0(_anp_, cont){return cont(caml_int_of_string(_anp_));}
   var
    Int_arg_helper =
      caml_callback
       (Dynlink_compilerlibs_Arg_helpe[1],
        [[0,
          [0,
           of_string,
           [0,
            Map$2[1],
            Map$2[2],
            Map$2[3],
            Map$2[4],
            Map$2[5],
            Map$2[6],
            Map$2[7],
            Map$2[8],
            Map$2[9],
            Map$2[10],
            Map$2[11],
            Map$2[12],
            Map$2[13],
            Map$2[14],
            Map$2[15],
            Map$2[16],
            Map$2[17],
            Map$2[18],
            Map$2[19],
            Map$2[20],
            Map$2[21],
            Map$2[22],
            Map$2[23],
            Map$2[24],
            Map$2[25],
            Map$2[26],
            Map$2[27],
            Map$2[28],
            Map$2[29],
            Map$2[30],
            Map$2[31],
            Map$2[32],
            Map$2[33],
            Map$2[34],
            Map$2[35],
            Map$2[36],
            Map$2[37],
            Map$2[38],
            Map$2[39],
            Map$2[40]]],
          [0, of_string$0]]]),
    include$1 = Dynlink_compilerlibs_Numbers[1],
    Map$3 = include$1[8];
   function of_string$1(_ano_, cont){return cont(caml_int_of_string(_ano_));}
   function of_string$2(_ann_, cont){
    return cont(caml_float_of_string(_ann_));
   }
   var
    Float_arg_helper =
      caml_callback
       (Dynlink_compilerlibs_Arg_helpe[1],
        [[0,
          [0,
           of_string$1,
           [0,
            Map$3[1],
            Map$3[2],
            Map$3[3],
            Map$3[4],
            Map$3[5],
            Map$3[6],
            Map$3[7],
            Map$3[8],
            Map$3[9],
            Map$3[10],
            Map$3[11],
            Map$3[12],
            Map$3[13],
            Map$3[14],
            Map$3[15],
            Map$3[16],
            Map$3[17],
            Map$3[18],
            Map$3[19],
            Map$3[20],
            Map$3[21],
            Map$3[22],
            Map$3[23],
            Map$3[24],
            Map$3[25],
            Map$3[26],
            Map$3[27],
            Map$3[28],
            Map$3[29],
            Map$3[30],
            Map$3[31],
            Map$3[32],
            Map$3[33],
            Map$3[34],
            Map$3[35],
            Map$3[36],
            Map$3[37],
            Map$3[38],
            Map$3[39],
            Map$3[40]]],
          [0, of_string$2]]]),
    objfiles = [0, 0],
    ccobjs = [0, 0],
    dllibs = [0, 0],
    cmi_file = [0, 0],
    compile_only = [0, 0],
    output_name = [0, 0],
    include_dirs = [0, 0],
    no_std_include = [0, 0],
    no_cwd = [0, 0],
    print_types = [0, 0],
    make_archive = [0, 0],
    debug = [0, 0],
    debug_full = [0, 0],
    unsafe = [0, 0],
    use_linscan = [0, 0],
    link_everything = [0, 0],
    custom_runtime = [0, 0],
    no_check_prims = [0, 0],
    bytecode_compatible_32 = [0, 0],
    output_c_object = [0, 0],
    output_complete_object = [0, 0],
    output_complete_executable = [0, 0],
    all_ccopts = [0, 0],
    classic = [0, 0],
    nopervasives = [0, 0],
    match_context_rows = [0, 32],
    preprocessor = [0, 0],
    all_ppx = [0, 0],
    absname = [0, 0],
    annotations = [0, 0],
    binary_annotations = [0, 0],
    use_threads = [0, 0],
    noassert = [0, 0],
    verbose = [0, 0],
    noversion = [0, 0],
    noprompt = [0, 0],
    nopromptcont = [0, 0],
    init_file = [0, 0],
    noinit = [0, 0],
    open_modules = [0, 0],
    use_prims = [0, cst$25],
    use_runtime = [0, cst$26],
    plugin = [0, 0],
    principal = [0, 0],
    real_paths = [0, 1],
    recursive_types = [0, 0],
    strict_sequence = [0, 0],
    strict_formats = [0, 0],
    applicative_functors = [0, 1],
    make_runtime = [0, 0],
    c_compiler$0 = [0, 0],
    no_auto_link = [0, 0],
    dllpaths = [0, 0],
    make_package = [0, 0],
    for_package = [0, 0],
    error_size = [0, 500],
    float_const_prop = [0, 1],
    transparent_modules = [0, 0],
    unique_ids = [0, 1],
    locations = [0, 1],
    dump_source = [0, 0],
    dump_parsetree = [0, 0],
    dump_typedtree = [0, 0],
    dump_shape = [0, 0],
    dump_rawlambda = [0, 0],
    dump_lambda = [0, 0],
    dump_rawclambda = [0, 0],
    dump_clambda = [0, 0],
    dump_rawflambda = [0, 0],
    dump_flambda = [0, 0],
    dump_flambda_let = [0, 0],
    dump_flambda_verbose = [0, 0],
    dump_instr = [0, 0],
    keep_camlprimc_file = [0, 0],
    keep_asm_file = [0, 0],
    optimize_for_speed = [0, 1],
    opaque = [0, 0],
    dump_cmm = [0, 0],
    dump_selection = [0, 0],
    dump_cse = [0, 0],
    dump_live = [0, 0],
    dump_spill = [0, 0],
    dump_split = [0, 0],
    dump_interf = [0, 0],
    dump_prefer = [0, 0],
    dump_regalloc = [0, 0],
    dump_reload = [0, 0],
    dump_scheduling = [0, 0],
    dump_linear = [0, 0],
    dump_interval = [0, 0],
    keep_startup_file = [0, 0],
    dump_combine = [0, 0],
    profile_columns = [0, 0],
    native_code = [0, 0],
    force_slash = [0, 0],
    clambda_checks = [0, 0],
    cmm_invariants = [0, Dynlink_compilerlibs_Config[57]],
    flambda_invariant_checks = [0, Dynlink_compilerlibs_Config[56]],
    dont_write_files = [0, 0],
    insn_sched_default = 1,
    insn_sched = [0, insn_sched_default];
   function std_include_flag(prefix, cont){
    return no_std_include[1]
            ? cont(cst$27)
            : caml_cps_call2
              (Stdlib_Filename[20],
               Dynlink_compilerlibs_Config[3],
               function(_anm_){
                return caml_cps_call3(Stdlib[28], prefix, _anm_, cont);
               });
   }
   function std_include_dir(param, cont){
    return no_std_include[1]
            ? cont(0)
            : cont([0, Dynlink_compilerlibs_Config[3], 0]);
   }
   var
    shared = [0, 0],
    dlcode = [0, 1],
    _bQ_ =
      caml_string_notequal(Dynlink_compilerlibs_Config[39], "amd64") ? 0 : 1,
    pic_code = [0, _bQ_],
    runtime_variant = [0, cst$28],
    with_runtime = [0, 1],
    keep_docs = [0, 0],
    keep_locs = [0, 1],
    classic_inlining = [0, 0],
    inlining_report = [0, 0],
    afl_instrument$0 = [0, Dynlink_compilerlibs_Config[65]],
    afl_inst_ratio = [0, 100],
    function_sections$0 = [0, 0],
    simplify_rounds = [0, 0],
    default_simplify_rounds = [0, 1];
   function rounds(param, cont){
    var match = simplify_rounds[1];
    if(! match) return cont(default_simplify_rounds[1]);
    var r = match[1];
    return cont(r);
   }
   var
    default_inline_threshold = Dynlink_compilerlibs_Config[55] ? 10. : 1.25,
    default_inline_toplevel_thresh = 16 * default_inline_threshold | 0,
    default_inline_call_cost = 5,
    default_inline_alloc_cost = 7,
    default_inline_prim_cost = 3,
    default_inline_branch_cost = 5,
    default_inline_indirect_cost = 4,
    default_inline_branch_factor = 0.1,
    default_inline_lifting_benefit = 1300,
    default_inline_max_unroll = 0,
    default_inline_max_depth = 1,
    inline_threshold =
      [0, caml_callback(Float_arg_helper[1], [default_inline_threshold])],
    inline_toplevel_threshold =
      [0, caml_callback(Int_arg_helper[1], [default_inline_toplevel_thresh])],
    inline_call_cost =
      [0, caml_callback(Int_arg_helper[1], [default_inline_call_cost])],
    inline_alloc_cost =
      [0, caml_callback(Int_arg_helper[1], [default_inline_alloc_cost])],
    inline_prim_cost =
      [0, caml_callback(Int_arg_helper[1], [default_inline_prim_cost])],
    inline_branch_cost =
      [0, caml_callback(Int_arg_helper[1], [default_inline_branch_cost])],
    inline_indirect_cost =
      [0, caml_callback(Int_arg_helper[1], [default_inline_indirect_cost])],
    inline_branch_factor =
      [0, caml_callback(Float_arg_helper[1], [default_inline_branch_factor])],
    inline_lifting_benefit =
      [0, caml_callback(Int_arg_helper[1], [default_inline_lifting_benefit])],
    inline_max_unroll =
      [0, caml_callback(Int_arg_helper[1], [default_inline_max_unroll])],
    inline_max_depth =
      [0, caml_callback(Int_arg_helper[1], [default_inline_max_depth])],
    unbox_specialised_args = [0, 1],
    unbox_free_vars_of_closures = [0, 1],
    unbox_closures = [0, 0],
    default_unbox_closures_factor = 10,
    unbox_closures_factor = [0, default_unbox_closures_factor],
    remove_unused_arguments = [0, 0];
   function use_inlining_arguments_set(round, arg, cont){
    function set_int(arg, default$0, value$1, cont){
     if(value$1)
      var value = value$1[1], value$0 = value;
     else
      var value$0 = default$0;
     if(! round)
      return caml_cps_call2
              (Int_arg_helper[4],
               arg[1],
               function(_ank_){
                return caml_cps_call3
                        (Int_arg_helper[2],
                         value$0,
                         _ank_,
                         function(_anl_){arg[1] = _anl_; return cont(0);});
               });
     var round$0 = round[1];
     return caml_cps_call4
             (Int_arg_helper[3],
              round$0,
              value$0,
              arg[1],
              function(_anj_){arg[1] = _anj_; return cont(0);});
    }
    function set_float(arg, default$0, value$1, cont){
     if(value$1)
      var value = value$1[1], value$0 = value;
     else
      var value$0 = default$0;
     if(! round)
      return caml_cps_call2
              (Float_arg_helper[4],
               arg[1],
               function(_anh_){
                return caml_cps_call3
                        (Float_arg_helper[2],
                         value$0,
                         _anh_,
                         function(_ani_){arg[1] = _ani_; return cont(undef);});
               });
     var round$0 = round[1];
     return caml_cps_call4
             (Float_arg_helper[3],
              round$0,
              value$0,
              arg[1],
              function(_ang_){arg[1] = _ang_; return cont(undef);});
    }
    return caml_cps_exact_call4
            (set_int,
             inline_call_cost,
             default_inline_call_cost,
             arg[1],
             function(_am8_){
              return caml_cps_exact_call4
                      (set_int,
                       inline_alloc_cost,
                       default_inline_alloc_cost,
                       arg[2],
                       function(_am9_){
                        return caml_cps_exact_call4
                                (set_int,
                                 inline_prim_cost,
                                 default_inline_prim_cost,
                                 arg[3],
                                 function(_am__){
                                  return caml_cps_exact_call4
  (set_int,
   inline_branch_cost,
   default_inline_branch_cost,
   arg[4],
   function(_am$_){
    return caml_cps_exact_call4
            (set_int,
             inline_indirect_cost,
             default_inline_indirect_cost,
             arg[5],
             function(_ana_){
              return caml_cps_exact_call4
                      (set_int,
                       inline_lifting_benefit,
                       default_inline_lifting_benefit,
                       arg[6],
                       function(_anb_){
                        return caml_cps_exact_call4
                                (set_float,
                                 inline_branch_factor,
                                 default_inline_branch_factor,
                                 arg[7],
                                 function(_anc_){
                                  return caml_cps_exact_call4
  (set_int,
   inline_max_depth,
   default_inline_max_depth,
   arg[8],
   function(_and_){
    return caml_cps_exact_call4
            (set_int,
             inline_max_unroll,
             default_inline_max_unroll,
             arg[9],
             function(_ane_){
              return caml_cps_exact_call4
                      (set_float,
                       inline_threshold,
                       default_inline_threshold,
                       arg[10],
                       function(_anf_){
                        return caml_cps_exact_call4
                                (set_int,
                                 inline_toplevel_threshold,
                                 default_inline_toplevel_thresh,
                                 arg[11],
                                 cont);
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   var
    classic_arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0, 1.25], _bR_],
    o2_arguments =
      [0,
       [0, 10],
       [0, 14],
       [0, 6],
       [0, 10],
       [0, 8],
       0,
       0,
       _bT_,
       0,
       _bS_,
       [0, 400]],
    o3_arguments =
      [0,
       [0, 15],
       [0, 21],
       [0, 9],
       [0, 15],
       [0, 12],
       0,
       _bX_,
       _bW_,
       _bV_,
       _bU_,
       [0, 800]],
    all_passes = [0, 0],
    dumped_passes_list = [0, 0];
   function dumped_pass(s, cont){
    return caml_cps_call3
            (Stdlib_List[36],
             s,
             all_passes[1],
             function(_am7_){
              if(_am7_)
               return caml_cps_call3
                       (Stdlib_List[36], s, dumped_passes_list[1], cont);
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _bY_], 1));
             });
   }
   function set_dumped_pass(s, enabled, cont){
    return caml_cps_call3
            (Stdlib_List[36],
             s,
             all_passes[1],
             function(_am3_){
              function _am4_(_am6_){return cont(_am6_);}
              return _am3_
                      ? caml_cps_call3
                        (Stdlib_List[41],
                         function(_am5_, cont){
                          return cont(caml_string_notequal(s, _am5_));
                         },
                         dumped_passes_list[1],
                         function(passes_without_s){
                          var
                           dumped_passes =
                             enabled ? [0, s, passes_without_s] : passes_without_s;
                          dumped_passes_list[1] = dumped_passes;
                          return _am4_(0);
                         })
                      : _am4_(_am3_);
             });
   }
   var
    dump_into_file = [0, 0],
    dump_dir = [0, 0],
    color = [0, 0],
    color_reader =
      [0,
       function(param, cont){
        return caml_string_notequal(param, cst_always$0)
                ? caml_string_notequal
                   (param, cst_auto$0)
                  ? caml_string_notequal
                     (param, cst_never$0)
                    ? cont(0)
                    : cont(_bZ_)
                  : cont(_b0_)
                : cont(_b1_);
       },
       function(param, cont){
        switch(param){
          case 0:
           return cont(cst_auto);
          case 1:
           return cont(cst_always);
          default: return cont(cst_never);
        }
       },
       cst_expected_auto_always_or_ne,
       cst_OCAML_COLOR],
    error_style = [0, 0],
    error_style_reader =
      [0,
       function(param, cont){
        return caml_string_notequal(param, cst_contextual$0)
                ? caml_string_notequal
                   (param, cst_short$0)
                  ? cont(0)
                  : cont(_b2_)
                : cont(_b3_);
       },
       function(param, cont){
        return param ? cont(cst_short) : cont(cst_contextual);
       },
       cst_expected_contextual_or_sho,
       cst_OCAML_ERROR_STYLE],
    unboxed_types = [0, 0];
   function extension(t, cont){
    return caml_cps_call3(Stdlib[28], cst_cmir, ext, cont);
   }
   function to_string$0(param, cont){
    switch(param){
      case 0:
       return cont(cst_parsing);
      case 1:
       return cont(cst_typing);
      case 2:
       return cont(cst_scheduling);
      default: return cont(cst_emit);
    }
   }
   function of_string$3(param, cont){
    return caml_string_notequal(param, cst_emit$0)
            ? caml_string_notequal
               (param, cst_parsing$0)
              ? caml_string_notequal
                 (param, cst_scheduling$0)
                ? caml_string_notequal
                   (param, cst_typing$0)
                  ? cont(0)
                  : cont(_b4_)
                : cont(_b5_)
              : cont(_b6_)
            : cont(_b7_);
   }
   function rank(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 50;
      default: return 60;
    }
   }
   function is_compilation_pass(param, cont){return cont(1);}
   function can_save_ir_after(param, cont){
    return 2 === param ? cont(1) : cont(0);
   }
   function available_pass_names(filter, is_native, cont){
    return caml_cps_call2
            (Stdlib_List[41],
             function(t, cont){
              var
               _am0_ = 2 === t ? 1 : 3 <= t ? 1 : 0,
               _am1_ = 1 - _am0_,
               _am2_ = _am1_ || is_native;
              return cont(_am2_);
             },
             function(_amV_){
              return caml_cps_call2
                      (_amV_,
                       passes,
                       function(_amW_){
                        return caml_cps_call2
                                (Stdlib_List[41],
                                 filter,
                                 function(_amX_){
                                  return caml_cps_call2
  (_amX_,
   _amW_,
   function(_amY_){
    return caml_cps_call2
            (Stdlib_List[19],
             to_string$0,
             function(_amZ_){return caml_cps_call2(_amZ_, _amY_, cont);});
   });
                                 });
                       });
             });
   }
   function compare$5(a, b, cont){
    var _amU_ = rank(b);
    return cont(caml_int_compare(rank(a), _amU_));
   }
   function to_output_filename(t, prefix, cont){
    return 2 === t
            ? caml_cps_exact_call2
              (extension,
               undef,
               function(_amT_){
                return caml_cps_call3(Stdlib[28], prefix, _amT_, cont);
               })
            : caml_cps_call2
              (Dynlink_compilerlibs_Misc[1], cst_Not_supported, cont);
   }
   function of_input_filename(filename, cont){
    return caml_cps_call2
            (Stdlib_Filename[10],
             filename,
             function(ext){
              var ext_len = caml_ml_string_length(ext);
              function _amN_(match){return match ? cont(_b8_) : cont(0);}
              if(0 >= ext_len) return _amN_(0);
              function is_prefix(ir, cont){
               return caml_cps_exact_call2
                       (extension,
                        undef,
                        function(s){
                         var
                          s_len = caml_ml_string_length(s),
                          _amP_ = s_len <= ext_len ? 1 : 0;
                         function _amQ_(_amS_){return cont(_amS_);}
                         return _amP_
                                 ? caml_cps_call4
                                   (Stdlib_String[15],
                                    ext,
                                    0,
                                    s_len,
                                    function(_amR_){return _amQ_(caml_string_equal(s, _amR_));})
                                 : _amQ_(_amP_);
                        });
              }
              return caml_cps_call3
                      (Stdlib_List[39],
                       is_prefix,
                       all,
                       function(ir){
                        if(! ir) return _amN_(0);
                        var ir$0 = ir[1];
                        return caml_cps_exact_call2
                                (extension,
                                 ir$0,
                                 function(s){
                                  var s_len = caml_ml_string_length(s);
                                  return caml_cps_call4
  (Stdlib_String[15],
   ext,
   s_len,
   ext_len - s_len | 0,
   function(_amO_){return _amN_([0, [0, ir$0, _amO_]]);});
                                 });
                       });
             });
   }
   var stop_after = [0, 0];
   function should_stop_after(pass, cont){
    var _amL_ = rank(pass);
    if(rank(1) <= _amL_ && print_types[1]) return cont(1);
    var match = stop_after[1];
    if(! match) return cont(0);
    var stop = match[1], _amM_ = rank(pass);
    return cont(rank(stop) <= _amM_ ? 1 : 0);
   }
   var save_ir_after = [0, 0];
   function should_save_ir_after(pass, cont){
    return caml_cps_call3(Stdlib_List[36], pass, save_ir_after[1], cont);
   }
   function set_save_ir_after(pass, enabled, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(_amK_, cont){return cont(pass !== _amK_ ? 1 : 0);},
             save_ir_after[1],
             function(other_passes){
              var
               new_passes = enabled ? [0, pass, other_passes] : other_passes;
              save_ir_after[1] = new_passes;
              return cont(0);
             });
   }
   var
    arg_spec = [0, 0],
    arg_names = [0, Dynlink_compilerlibs_Misc[13][4][65][1]];
   function reset_arguments(param, cont){
    arg_spec[1] = 0;
    arg_names[1] = Dynlink_compilerlibs_Misc[13][4][65][1];
    return cont(0);
   }
   function add_arguments(loc, args, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(arg, cont){
              var arg_name = arg[1];
              caml_push_trap
               (function(_amH_){
                 if(_amH_ === Stdlib[8])
                  return caml_cps_call3
                          (Stdlib[37],
                           arg_spec[1],
                           [0, arg, 0],
                           function(_amI_){
                            arg_spec[1] = _amI_;
                            return caml_cps_call4
                                    (Dynlink_compilerlibs_Misc[13][4][65][4],
                                     arg_name,
                                     loc,
                                     arg_names[1],
                                     function(_amJ_){arg_names[1] = _amJ_; return cont(0);});
                           });
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_amH_, 0));
                });
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][28],
                       arg_name,
                       arg_names[1],
                       function(loc2){
                        return caml_cps_call3
                                (Stdlib_Printf[3],
                                 _b9_,
                                 arg_name,
                                 function(_amE_){
                                  return caml_cps_call3
  (Stdlib_Printf[3],
   _b__,
   loc2,
   function(_amF_){
    return caml_cps_call3
            (Stdlib_Printf[3],
             _b$_,
             loc,
             function(_amG_){caml_pop_trap(); return cont(_amG_);});
   });
                                 });
                       });
             },
             args,
             cont);
   }
   function create_usage_msg(program, cont){
    return caml_cps_call4(Stdlib_Printf[4], _ca_, program, program, cont);
   }
   function print_arguments(program, cont){
    return caml_cps_exact_call2
            (create_usage_msg,
             program,
             function(_amD_){
              return caml_cps_call3(Stdlib_Arg[9], arg_spec[1], _amD_, cont);
             });
   }
   var
    Dynlink_compilerlibs_Clflags =
      [0,
       [0, Int_arg_helper[7], Int_arg_helper[8], Int_arg_helper[9]],
       [0, Float_arg_helper[7], Float_arg_helper[8], Float_arg_helper[9]],
       classic_arguments,
       o1_arguments,
       o2_arguments,
       o3_arguments,
       use_inlining_arguments_set,
       objfiles,
       ccobjs,
       dllibs,
       cmi_file,
       compile_only,
       output_name,
       include_dirs,
       no_std_include,
       no_cwd,
       print_types,
       make_archive,
       debug,
       debug_full,
       unsafe,
       use_linscan,
       link_everything,
       custom_runtime,
       no_check_prims,
       bytecode_compatible_32,
       output_c_object,
       output_complete_object,
       output_complete_executable,
       all_ccopts,
       classic,
       nopervasives,
       match_context_rows,
       open_modules,
       preprocessor,
       all_ppx,
       absname,
       annotations,
       binary_annotations,
       use_threads,
       noassert,
       verbose,
       noprompt,
       nopromptcont,
       init_file,
       noinit,
       noversion,
       use_prims,
       use_runtime,
       plugin,
       principal,
       real_paths,
       recursive_types,
       strict_sequence,
       strict_formats,
       applicative_functors,
       make_runtime,
       c_compiler$0,
       no_auto_link,
       dllpaths,
       make_package,
       for_package,
       error_size,
       float_const_prop,
       transparent_modules,
       unique_ids,
       locations,
       dump_source,
       dump_parsetree,
       dump_typedtree,
       dump_shape,
       dump_rawlambda,
       dump_lambda,
       dump_rawclambda,
       dump_clambda,
       dump_rawflambda,
       dump_flambda,
       dump_flambda_let,
       dump_instr,
       keep_camlprimc_file,
       keep_asm_file,
       optimize_for_speed,
       dump_cmm,
       dump_selection,
       dump_cse,
       dump_live,
       dump_spill,
       dump_split,
       dump_interf,
       dump_prefer,
       dump_regalloc,
       dump_reload,
       dump_scheduling,
       dump_linear,
       dump_interval,
       keep_startup_file,
       dump_combine,
       native_code,
       default_inline_threshold,
       inline_threshold,
       inlining_report,
       simplify_rounds,
       default_simplify_rounds,
       rounds,
       default_inline_max_unroll,
       inline_max_unroll,
       default_inline_toplevel_thresh,
       inline_toplevel_threshold,
       default_inline_call_cost,
       default_inline_alloc_cost,
       default_inline_prim_cost,
       default_inline_branch_cost,
       default_inline_indirect_cost,
       default_inline_lifting_benefit,
       inline_call_cost,
       inline_alloc_cost,
       inline_prim_cost,
       inline_branch_cost,
       inline_indirect_cost,
       inline_lifting_benefit,
       default_inline_branch_factor,
       inline_branch_factor,
       dont_write_files,
       std_include_flag,
       std_include_dir,
       shared,
       dlcode,
       pic_code,
       runtime_variant,
       with_runtime,
       force_slash,
       keep_docs,
       keep_locs,
       opaque,
       profile_columns,
       flambda_invariant_checks,
       unbox_closures,
       unbox_closures_factor,
       default_unbox_closures_factor,
       unbox_free_vars_of_closures,
       unbox_specialised_args,
       clambda_checks,
       cmm_invariants,
       default_inline_max_depth,
       inline_max_depth,
       remove_unused_arguments,
       dump_flambda_verbose,
       classic_inlining,
       afl_instrument$0,
       afl_inst_ratio,
       function_sections$0,
       all_passes,
       dumped_pass,
       set_dumped_pass,
       dump_into_file,
       dump_dir,
       color,
       color_reader,
       error_style,
       error_style_reader,
       unboxed_types,
       insn_sched,
       insn_sched_default,
       [0,
        of_string$3,
        to_string$0,
        is_compilation_pass,
        available_pass_names,
        can_save_ir_after,
        compare$5,
        to_output_filename,
        of_input_filename],
       stop_after,
       should_stop_after,
       set_save_ir_after,
       should_save_ir_after,
       arg_spec,
       add_arguments,
       create_usage_msg,
       print_arguments,
       reset_arguments];
   caml_register_global
    (1401, Dynlink_compilerlibs_Clflags, "Dynlink_compilerlibs.Clflags");
   function create$1(param){
    var
     stat = runtime.caml_gc_quick_stat(0),
     _amB_ = stat[15],
     _amC_ = stat[1] + stat[3];
    return [0, runtime.caml_sys_time_include_children(1), _amC_, _amB_];
   }
   var r = [0, -1];
   function zero$0(param){r[1]++; return [0, r[1], 0., 0., 0];}
   function accumulate(t, m1, m2){
    return [0,
            t[1],
            t[2] + (m2[1] - m1[1]),
            t[3] + (m2[2] - m1[2]),
            t[4] + (m2[3] - m1[3] | 0) | 0];
   }
   function create$2(param, cont){
    return caml_cps_call3(Stdlib_Hashtbl[1], 0, 2, cont);
   }
   var
    hierarchy = [0, caml_callback(create$2, [undef])],
    initial_measure = [0, 0];
   function reset$1(param, cont){
    return caml_cps_exact_call2
            (create$2,
             undef,
             function(_amA_){
              hierarchy[1] = _amA_;
              initial_measure[1] = 0;
              return cont(0);
             });
   }
   function record_call(opt, name, f, cont){
    if(opt) var sth = opt[1], accumulate$0 = sth; else var accumulate$0 = 0;
    var prev_hierarchy = hierarchy[1], start_measure = create$1(undef);
    if(0 === initial_measure[1]) initial_measure[1] = [0, start_measure];
    function _amx_(this_measure_diff, this_table){
     hierarchy[1] = this_table;
     return caml_cps_call4
             (Dynlink_compilerlibs_Misc[4],
              [0,
               function(param, cont){
                hierarchy[1] = prev_hierarchy;
                var
                 end_measure = create$1(undef),
                 measure_diff =
                   accumulate(this_measure_diff, start_measure, end_measure);
                return caml_cps_call4
                        (Stdlib_Hashtbl[5],
                         prev_hierarchy,
                         name,
                         [0, measure_diff, this_table],
                         cont);
               }],
              0,
              f,
              cont);
    }
    return accumulate$0
            ? (caml_push_trap
               (function(_amy_){
                 if(_amy_ === Stdlib[8])
                  return caml_cps_call3
                          (Stdlib_Hashtbl[1],
                           0,
                           2,
                           function(this_table){
                            return _amx_(zero$0(undef), this_table);
                           });
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_amy_, 0));
                }),
              caml_cps_call3
               (Stdlib_Hashtbl[6],
                prev_hierarchy,
                name,
                function(val){
                 caml_pop_trap();
                 var measure_diff = val[1], match = val[2];
                 return caml_cps_call3
                         (Stdlib_Hashtbl[10],
                          prev_hierarchy,
                          name,
                          function(_amz_){return _amx_(measure_diff, match);});
                }))
            : caml_cps_call3
              (Stdlib_Hashtbl[1],
               0,
               2,
               function(this_table){
                var this_measure_diff = zero$0(undef);
                return _amx_(this_measure_diff, this_table);
               });
   }
   function record(accumulate, pass, f, x, cont){
    return caml_cps_exact_call4
            (record_call,
             accumulate,
             pass,
             function(param, cont){return caml_cps_call2(f, x, cont);},
             cont);
   }
   function time_display(v){
    function to_string_without_unit(v, width, cont){
     return caml_cps_call4(Stdlib_Printf[4], _cb_, width, v, cont);
    }
    function to_string(param, width, cont){
     return caml_cps_exact_call3
             (to_string_without_unit,
              v,
              width - 1 | 0,
              function(_amw_){
               return caml_cps_call3(Stdlib[28], _amw_, cst_s, cont);
              });
    }
    function worth_displaying(param, cont){
     return caml_cps_exact_call3
             (to_string_without_unit,
              v,
              0,
              function(_amv_){
               return cont(caml_float_of_string(_amv_) != 0. ? 1 : 0);
              });
    }
    return [0, to_string, worth_displaying];
   }
   function bytes_of_words(words){return words * (Stdlib_Sys[9] / 8 | 0);}
   function to_string_without_unit(v, width, scale, cont){
    var
     v_rescaled = bytes_of_words(v) / scale,
     v_rounded = Math.floor(v_rescaled * 1000. + 0.5) / 1000.;
    return caml_cps_call4
            (Stdlib_Printf[4],
             _cc_,
             3,
             v_rounded,
             function(v_str){
              return caml_cps_call3
                      (Stdlib_String[35],
                       v_str,
                       46,
                       function(index_of_dot){
                        var index_of_dot$0 = 3 <= index_of_dot ? index_of_dot : 4;
                        return caml_cps_call4
                                (Stdlib_String[15],
                                 v_str,
                                 0,
                                 index_of_dot$0,
                                 function(v_str_truncated){
                                  return caml_cps_call4
  (Stdlib_Printf[4], _cd_, width, v_str_truncated, cont);
                                 });
                       });
             });
   }
   var units = [0, cst_B, cst_kB, cst_MB, cst_GB];
   function choose_memory_scale(words){
    var bytes = bytes_of_words(words), scale = [0, units.length - 1 - 1 | 0];
    for(;;){
     if(0 < scale[1] && bytes < Math.pow(1024., scale[1])){scale[1] += -1; continue;}
     var _amt_ = scale[1], _amu_ = caml_check_bound(units, _amt_)[1 + _amt_];
     return [0, Math.pow(1024., scale[1]), _amu_];
    }
   }
   function memory_word_display(previous, v){
    function to_string(max, width, cont){
     var
      match = choose_memory_scale(max),
      scale_str = match[2],
      scale = match[1],
      width$0 = width - caml_ml_string_length(scale_str) | 0;
     return caml_cps_exact_call4
             (to_string_without_unit,
              v,
              width$0,
              scale,
              function(_ams_){
               return caml_cps_call3(Stdlib[28], _ams_, scale_str, cont);
              });
    }
    function worth_displaying(max, cont){
     var scale = choose_memory_scale(max)[1];
     return caml_cps_exact_call4
             (to_string_without_unit,
              v,
              0,
              scale,
              function(_amn_){
               var _amo_ = caml_float_of_string(_amn_) != 0. ? 1 : 0;
               if(_amo_){
                if(previous){
                 var p = previous[1];
                 return caml_cps_exact_call4
                         (to_string_without_unit,
                          v,
                          0,
                          scale,
                          function(_amq_){
                           return caml_cps_exact_call4
                                   (to_string_without_unit,
                                    p,
                                    0,
                                    scale,
                                    function(_amr_){
                                     return cont(caml_string_notequal(_amr_, _amq_));
                                    });
                          });
                }
                var _amp_ = 1;
               }
               else
                var _amp_ = _amo_;
               return cont(_amp_);
              });
    }
    return [0, to_string, worth_displaying];
   }
   function rows_of_hierarchy_list
   (nesting, make_row, hierarchy, total, env, cont){
    return caml_cps_call4
            (Stdlib_Hashtbl[14],
             function(k, d, l, cont){return cont([0, [0, k, d], l]);},
             hierarchy,
             0,
             function(l){
              return caml_cps_call3
                      (Stdlib_List[56],
                       function(param, _amm_, cont){
                        var p2 = _amm_[2][1], p1 = param[2][1];
                        return cont(caml_int_compare(p1[1], p2[1]));
                       },
                       l,
                       function(list){
                        function _amh_(list){
                         var env$0 = [0, env];
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  function(param, cont){
                                   var
                                    match = param[2],
                                    hierarchy = match[2],
                                    measure_diff = match[1],
                                    name = param[1],
                                    env = env$0[1];
                                   return caml_cps_exact_call6
   (rows_of_hierarchy_list,
    nesting + 1 | 0,
    make_row,
    hierarchy,
    measure_diff,
    env,
    function(rows){
     var
      _amk_ = 0 === nesting ? 1 : 0,
      _aml_ = _amk_ ? caml_string_equal(name, cst_other$0) : _amk_;
     return caml_cps_exact_call4
             (make_row,
              env,
              measure_diff,
              _aml_,
              function(match){
               var
                env = match[2],
                values = match[1],
                a = [0, name, values, rows];
               env$0[1] = env;
               return cont(a);
              });
    });
                                  },
                                  list,
                                  cont);
                        }
                        if(0 === list && 0 !== nesting) return _amh_(0);
                        var _amg_ = 0;
                        return caml_cps_exact_call2
                                (create$2,
                                 undef,
                                 function(_ami_){
                                  var r = [0, total];
                                  return caml_cps_call3
  (Stdlib_Hashtbl[12],
   function(pass, param, cont){
    var p2 = param[1], p1 = r[1];
    r[1] =
     [0, p1[1], p1[2] - p2[2], p1[3] - p2[3], p1[4] - p2[4] | 0];
    return cont(0);
   },
   hierarchy,
   function(_amj_){
    return caml_cps_call3
            (Stdlib[37],
             list,
             [0, [0, cst_other, [0, r[1], _ami_]], _amg_],
             _amh_);
   });
                                 });
                       });
             });
   }
   function print$5(ppf, columns, cont){
    if(! columns) return cont(0);
    var match = initial_measure[1];
    if(match)
     var v = match[1], initial_measure$0 = v;
    else
     var initial_measure$0 = zero;
    var
     m2 = create$1(undef),
     measure_diff = accumulate(zero$0(undef), zero, m2),
     hierarchy$0 = hierarchy[1];
    function make_row(prev_top_heap_words, p, toplevel_other, cont){
     var
      _amc_ = toplevel_other ? initial_measure$0[3] : 0,
      top_heap_words = (prev_top_heap_words + p[4] | 0) - _amc_ | 0;
     function make(value, f){return [0, value, f(value)];}
     return caml_cps_call3
             (Stdlib_List[19],
              function(param, cont){
               if(885068885 <= param)
                return 936769581 <= param
                        ? cont(make(p[2], time_display))
                        : cont
                          (make
                            (p[3], function(eta){return memory_word_display(0, eta);}));
               if(208707190 <= param)
                return cont
                        (make
                          (p[4], function(eta){return memory_word_display(0, eta);}));
               var _ame_ = [0, prev_top_heap_words];
               return cont
                       (make
                         (top_heap_words,
                          function(_amf_){return memory_word_display(_ame_, _amf_);}));
              },
              columns,
              function(_amd_){return cont([0, _amd_, top_heap_words]);});
    }
    return caml_cps_exact_call6
            (rows_of_hierarchy_list,
             0,
             make_row,
             hierarchy$0,
             measure_diff,
             initial_measure$0[3],
             function(rows){
              function _alV_(n_columns){
               var maxs = caml_make_vect(n_columns, 0.);
               function loop(param, cont){
                var rows = param[3], values = param[2];
                return caml_cps_call3
                        (Stdlib_List[18],
                         function(i, param, cont){
                          var v = param[1];
                          return caml_cps_call3
                                  (Stdlib_Float[22],
                                   caml_array_get(maxs, i),
                                   v,
                                   function(_amb_){
                                    return cont(caml_array_set(maxs, i, _amb_));
                                   });
                         },
                         values,
                         function(_ama_){
                          return caml_cps_call3(Stdlib_List[17], loop, rows, cont);
                         });
               }
               return caml_cps_call3
                       (Stdlib_List[17],
                        loop,
                        rows,
                        function(_alW_){
                         function display_cell(i, param, width, cont){
                          var c = param[2];
                          return caml_cps_call2
                                  (c[2],
                                   caml_array_get(maxs, i),
                                   function(display_cell){
                                    function _al__(_al$_){
                                     return cont([0, display_cell, _al$_]);
                                    }
                                    return display_cell
    ? caml_cps_call3
      (c[1], caml_array_get(maxs, i), width, _al__)
    : caml_cps_call3(Stdlib_String[1], width, 45, _al__);
                                   });
                         }
                         var widths = caml_make_vect(n_columns, 1);
                         function loop(param, cont){
                          var rows = param[3], values = param[2];
                          return caml_cps_call3
                                  (Stdlib_List[18],
                                   function(i, cell, cont){
                                    return caml_cps_exact_call4
    (display_cell,
     i,
     cell,
     0,
     function(match){
      var
       str = match[2],
       _al8_ = caml_check_bound(widths, i)[1 + i];
      return caml_cps_call3
              (Stdlib_Int[11],
               _al8_,
               caml_ml_string_length(str),
               function(_al9_){widths[1 + i] = _al9_; return cont(0);});
     });
                                   },
                                   values,
                                   function(_al7_){
                                    return caml_cps_call3(Stdlib_List[17], loop, rows, cont);
                                   });
                         }
                         return caml_cps_call3
                                 (Stdlib_List[17],
                                  loop,
                                  rows,
                                  function(_alX_){
                                   function loop(param, indentation, cont){
                                    var rows = param[3], values = param[2], name = param[1];
                                    return caml_cps_call2
    (Stdlib_List[20],
     function(i, cell, cont){
      return caml_cps_exact_call4
              (display_cell,
               i,
               cell,
               caml_check_bound(widths, i)[1 + i],
               cont);
     },
     function(_alZ_){
      return caml_cps_call2
              (_alZ_,
               values,
               function(_al0_){
                return caml_cps_call2
                        (Stdlib_List[54],
                         _al0_,
                         function(match){
                          var cell_strings = match[2], worth_displaying = match[1];
                          return caml_cps_call3
                                  (Stdlib_List[33],
                                   function(b, cont){return cont(b);},
                                   worth_displaying,
                                   function(_al1_){
                                    function _al2_(_al4_){
                                     return caml_cps_call3
     (Stdlib[28],
      cst$30,
      indentation,
      function(_al5_){
       return caml_cps_call3
               (Stdlib_List[17],
                function(_al6_, cont){
                 return caml_cps_exact_call3(loop, _al6_, _al5_, cont);
                },
                rows,
                cont);
      });
                                    }
                                    return _al1_
    ? caml_cps_call3
      (Stdlib_String[6],
       cst$29,
       cell_strings,
       function(_al3_){
        return caml_cps_call6
                (Stdlib_Format[135],
                 ppf,
                 _ce_,
                 indentation,
                 _al3_,
                 name,
                 _al2_);
       })
    : _al2_(0);
                                   });
                         });
               });
     });
                                   }
                                   return caml_cps_call3
   (Stdlib_List[17],
    function(_alY_, cont){
     return caml_cps_exact_call3(loop, _alY_, cst$31, cont);
    },
    rows,
    cont);
                                  });
                        });
              }
              if(! rows) return _alV_(0);
              var values = rows[1][2];
              return caml_cps_call2(Stdlib_List[1], values, _alV_);
             });
   }
   var
    column_names =
      caml_callback
       (Stdlib_List[19],
        [function(_alU_, cont){return cont(_alU_[1]);}, column_mapping]),
    _cf_ = caml_callback(Stdlib_String[6], [cst$32, column_names]),
    options_doc = caml_callback(Stdlib_Printf[4], [_cg_, _cf_]),
    all_columns =
      caml_callback
       (Stdlib_List[19],
        [function(_alT_, cont){return cont(_alT_[2]);}, column_mapping]),
    Dynlink_compilerlibs_Profile =
      [0,
       reset$1,
       record_call,
       record,
       print$5,
       options_doc,
       all_columns,
       generate,
       transl,
       typing];
   caml_register_global
    (1403, Dynlink_compilerlibs_Profile, "Dynlink_compilerlibs.Profile");
   var
    Dynlink_compilerlibs_Consistbl =
      [0,
       function(Module_name, cont){
        function create(param, cont){
         return caml_cps_call2(Module_name[3][1], 13, cont);
        }
        var
         clear = Module_name[3][2],
         Inconsistency =
           [248, cst_Dynlink_compilerlibs_Consi, caml_fresh_oo_id(0)],
         Not_available =
           [248, cst_Dynlink_compilerlibs_Consi$0, caml_fresh_oo_id(0)];
        function check(tbl, name, crc, source, cont){
         return caml_cps_call3
                 (Module_name[3][7],
                  tbl,
                  name,
                  function(match){
                   var
                    old_source = match[2],
                    old_crc = match[1],
                    _alS_ = caml_notequal(crc, old_crc);
                   if(! _alS_) return cont(_alS_);
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace
                             ([0, Inconsistency, name, source, old_source], 1));
                  });
        }
        function check$0(tbl, name, crc, source, cont){
         caml_push_trap
          (function(_alR_){
            if(_alR_ === Stdlib[8])
             return caml_cps_call4
                     (Module_name[3][5], tbl, name, [0, crc, source], cont);
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_alR_, 0));
           });
         return caml_cps_exact_call5
                 (check,
                  tbl,
                  name,
                  crc,
                  source,
                  function(_alQ_){caml_pop_trap(); return cont(_alQ_);});
        }
        function check_noadd(tbl, name, crc, source, cont){
         caml_push_trap
          (function(_alP_){
            if(_alP_ === Stdlib[8]){
             var raise = caml_pop_trap();
             return raise
                     (caml_maybe_attach_backtrace([0, Not_available, name], 1));
            }
            var raise$0 = caml_pop_trap();
            return raise$0(caml_maybe_attach_backtrace(_alP_, 0));
           });
         return caml_cps_exact_call5
                 (check,
                  tbl,
                  name,
                  crc,
                  source,
                  function(_alO_){caml_pop_trap(); return cont(_alO_);});
        }
        function set(tbl, name, crc, source, cont){
         return caml_cps_call4
                 (Module_name[3][5], tbl, name, [0, crc, source], cont);
        }
        function source(tbl, name, cont){
         return caml_cps_call3
                 (Module_name[3][7],
                  tbl,
                  name,
                  function(_alN_){return cont(_alN_[2]);});
        }
        function extract(l, tbl, cont){
         return caml_cps_call3
                 (Stdlib_List[59],
                  Module_name[4],
                  l,
                  function(l){
                   return caml_cps_call4
                           (Stdlib_List[25],
                            function(assc, name, cont){
                             caml_push_trap
                              (function(_alM_){
                                if(_alM_ === Stdlib[8])
                                 return cont([0, [0, name, 0], assc]);
                                var raise = caml_pop_trap();
                                return raise(caml_maybe_attach_backtrace(_alM_, 0));
                               });
                             return caml_cps_call3
                                     (Module_name[3][7],
                                      tbl,
                                      name,
                                      function(match){
                                       var crc = match[1];
                                       caml_pop_trap();
                                       return cont([0, [0, name, [0, crc]], assc]);
                                      });
                            },
                            0,
                            l,
                            cont);
                  });
        }
        function extract_map(mod_names, tbl, cont){
         return caml_cps_call4
                 (Module_name[1][16],
                  function(name, result, cont){
                   caml_push_trap
                    (function(_alL_){
                      if(_alL_ === Stdlib[8])
                       return caml_cps_call4
                               (Module_name[2][4], name, 0, result, cont);
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_alL_, 0));
                     });
                   return caml_cps_call3
                           (Module_name[3][7],
                            tbl,
                            name,
                            function(match){
                             var crc = match[1];
                             return caml_cps_call4
                                     (Module_name[2][4],
                                      name,
                                      [0, crc],
                                      result,
                                      function(_alK_){caml_pop_trap(); return cont(_alK_);});
                            });
                  },
                  mod_names,
                  Module_name[2][1],
                  cont);
        }
        function filter(p, tbl, cont){
         var to_remove = [0, 0];
         return caml_cps_call3
                 (Module_name[3][12],
                  function(name, param, cont){
                   return caml_cps_call2
                           (p,
                            name,
                            function(_alH_){
                             var
                              _alI_ = 1 - _alH_,
                              _alJ_ =
                                _alI_ ? (to_remove[1] = [0, name, to_remove[1]], 0) : _alI_;
                             return cont(_alJ_);
                            });
                  },
                  tbl,
                  function(_alD_){
                   return caml_cps_call3
                           (Stdlib_List[17],
                            function(name, cont){
                             function _alE_(_alF_){
                              return caml_cps_call3
                                      (Module_name[3][11],
                                       tbl,
                                       name,
                                       function(_alG_){
return _alG_
        ? caml_cps_call3(Module_name[3][6], tbl, name, _alE_)
        : cont(0);
                                       });
                             }
                             return _alE_(0);
                            },
                            to_remove[1],
                            cont);
                  });
        }
        return cont
                ([0,
                  create,
                  clear,
                  check$0,
                  check_noadd,
                  set,
                  source,
                  extract,
                  extract_map,
                  filter,
                  Inconsistency,
                  Not_available]);
       }];
   caml_register_global
    (1404, Dynlink_compilerlibs_Consistbl, "Dynlink_compilerlibs.Consistbl");
   function setup$0(oc, cont){
    try{var _alB_ = caml_sys_getenv(cst_TERM), term = _alB_;}
    catch(_alC_){
     var _alA_ = caml_wrap_exception(_alC_);
     if(_alA_ !== Stdlib[8]){
      var raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_alA_, 0));
     }
     var term = cst$33;
    }
    if
     (caml_string_notequal(term, cst$117)
      && caml_string_notequal(term, cst_dumb) && caml_sys_isatty(oc))
     return cont(2);
    return cont(1);
   }
   function num_lines(oc, cont){
    var rows = runtime.caml_terminfo_rows(oc);
    return 0 < rows ? cont(rows) : cont(24);
   }
   function backup(oc, n, cont){
    var _alz_ = 1 <= n ? 1 : 0;
    return _alz_
            ? caml_cps_call4(Stdlib_Printf[1], oc, _ch_, n, cont)
            : cont(_alz_);
   }
   function resume(oc, n, cont){
    var _aly_ = 1 <= n ? 1 : 0;
    return _aly_
            ? caml_cps_call4(Stdlib_Printf[1], oc, _ci_, n, cont)
            : cont(_aly_);
   }
   function standout(oc, b, cont){
    var _alw_ = b ? cst_4m : cst_0m;
    return caml_cps_call3
            (Stdlib[66],
             oc,
             _alw_,
             function(_alx_){return caml_cps_call2(Stdlib[63], oc, cont);});
   }
   var
    Dynlink_compilerlibs_Terminfo =
      [0, setup$0, num_lines, backup, standout, resume];
   caml_register_global
    (1405, Dynlink_compilerlibs_Terminfo, "Dynlink_compilerlibs.Terminfo");
   function number(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return 1;
       case 1:
        return 2;
       case 2:
        return 5;
       case 3:
        return 10;
       case 4:
        return 11;
       case 5:
        return 12;
       case 6:
        return 14;
       case 7:
        return 16;
       case 8:
        return 20;
       case 9:
        return 21;
       case 10:
        return 23;
       case 11:
        return 8;
       case 12:
        return 28;
       case 13:
        return 29;
       case 14:
        return 39;
       case 15:
        return 52;
       case 16:
        return 56;
       case 17:
        return 59;
       case 18:
        return 62;
       case 19:
        return 64;
       case 20:
        return 68;
       case 21:
        return 70;
       case 22:
        return 71;
       default: return 72;
     }
    switch(param[0]){
      case 0:
       return 4;
      case 1:
       return 6;
      case 2:
       return 7;
      case 3:
       return 8;
      case 4:
       return 9;
      case 5:
       return 13;
      case 6:
       return 15;
      case 7:
       return 17;
      case 8:
       return 18;
      case 9:
       return 19;
      case 10:
       return 22;
      case 11:
       return 24;
      case 12:
       return 26;
      case 13:
       return 27;
      case 14:
       return 30;
      case 15:
       return 31;
      case 16:
       return 32;
      case 17:
       return 33;
      case 18:
       return 34;
      case 19:
       return 35;
      case 20:
       return 36;
      case 21:
       return 37;
      case 22:
       return 38;
      case 23:
       return 40;
      case 24:
       return 41;
      case 25:
       return 42;
      case 26:
       return 43;
      case 27:
       return 44;
      case 28:
       return 45;
      case 29:
       return 46;
      case 30:
       return 47;
      case 31:
       return 48;
      case 32:
       return 49;
      case 33:
       return 50;
      case 34:
       return 51;
      case 35:
       return 53;
      case 36:
       return 54;
      case 37:
       return 55;
      case 38:
       return 57;
      case 39:
       return 58;
      case 40:
       return 60;
      case 41:
       return 61;
      case 42:
       return 63;
      case 43:
       return 65;
      case 44:
       return 66;
      case 45:
       return 67;
      default: return 69;
    }
   }
   var last_warning_number = 72;
   function since(major, minor){return [0, [0, major, minor, 0, 0]];}
   var
    _ck_ = [0, [0, 72, _cj_, cst_A_tail_call_is_turned_into, since(4, 14)], 0],
    _cm_ =
      [0, [0, 71, _cl_, cst_Unused_tail_mod_cons_attri, since(4, 14)], _ck_],
    _co_ = [0, [0, 70, _cn_, cst_Missing_interface_file, since(4, 13)], _cm_],
    _cq_ = [0, [0, 69, _cp_, cst_Unused_record_field, since(4, 13)], _co_],
    _cs_ =
      [0, [0, 68, _cr_, cst_Pattern_matching_depending, since(4, 12)], _cq_],
    _cu_ =
      [0, [0, 67, _ct_, cst_Unused_functor_parameter, since(4, 10)], _cs_],
    _cw_ = [0, [0, 66, _cv_, cst_Unused_open_statement, since(4, 8)], _cu_],
    _cy_ =
      [0, [0, 65, _cx_, cst_Type_declaration_defining_, since(4, 8)], _cw_],
    _cA_ =
      [0, [0, 64, _cz_, cst_unsafe_used_with_a_preproc, since(4, 8)], _cy_],
    _cC_ =
      [0, [0, 63, _cB_, cst_Erroneous_printed_signatur, since(4, 8)], _cA_],
    _cE_ =
      [0, [0, 62, _cD_, cst_Type_constraint_on_GADT_ty, since(4, 6)], _cC_],
    _cG_ =
      [0, [0, 61, _cF_, cst_Unboxable_type_in_primitiv, since(4, 4)], _cE_],
    _cI_ =
      [0, [0, 60, _cH_, cst_Unused_module_declaration, since(4, 4)], _cG_],
    _cK_ =
      [0, [0, 59, _cJ_, cst_Assignment_to_non_mutable_, since(4, 3)], _cI_],
    _cM_ = [0, [0, 58, _cL_, cst_Missing_cmx_file, since(4, 3)], _cK_],
    _cO_ =
      [0, [0, 57, _cN_, cst_Ambiguous_or_pattern_varia, since(4, 3)], _cM_],
    _cQ_ =
      [0, [0, 56, _cP_, cst_Unreachable_case_in_a_patt, since(4, 3)], _cO_],
    _cS_ = [0, [0, 55, _cR_, cst_Inlining_impossible, since(4, 3)], _cQ_],
    _cU_ =
      [0, [0, 54, _cT_, cst_Attribute_used_more_than_o, since(4, 3)], _cS_],
    _cW_ =
      [0, [0, 53, _cV_, cst_Attribute_cannot_appear_in, since(4, 3)], _cU_],
    _cY_ = [0, [0, 52, _cX_, cst_Fragile_constant_pattern, since(4, 3)], _cW_],
    _c0_ =
      [0, [0, 51, _cZ_, cst_Function_call_annotated_wi, since(4, 3)], _cY_],
    _c2_ =
      [0, [0, 50, _c1_, cst_Unexpected_documentation_c, since(4, 3)], _c0_],
    _c4_ =
      [0, [0, 49, _c3_, cst_Absent_cmi_file_when_looki, since(4, 2)], _c2_],
    _c6_ =
      [0, [0, 48, _c5_, cst_Implicit_elimination_of_op, since(4, 2)], _c4_],
    _c8_ =
      [0, [0, 47, _c7_, cst_Illegal_attribute_payload, since(4, 2)], _c6_],
    _c__ =
      [0, [0, 46, _c9_, cst_Error_in_environment_varia, since(4, 1)], _c8_],
    _da_ =
      [0, [0, 45, _c$_, cst_Open_statement_shadows_an_, since(4, 1)], _c__],
    _dc_ =
      [0, [0, 44, _db_, cst_Open_statement_shadows_an_$0, since(4, 1)], _da_],
    _de_ =
      [0, [0, 43, _dd_, cst_Nonoptional_label_applied_, since(4, 1)], _dc_],
    _dg_ =
      [0, [0, 42, _df_, cst_Disambiguated_constructor_, since(4, 1)], _de_],
    _di_ =
      [0, [0, 41, _dh_, cst_Ambiguous_constructor_or_l, since(4, 1)], _dg_],
    _dk_ =
      [0, [0, 40, _dj_, cst_Constructor_or_label_name_, since(4, 1)], _di_],
    _dm_ = [0, [0, 39, _dl_, cst_Unused_rec_flag, since(4, 0)], _dk_],
    _do_ =
      [0, [0, 38, _dn_, cst_Unused_extension_construct, since(4, 0)], _dm_],
    _dq_ = [0, [0, 37, _dp_, cst_Unused_constructor, since(4, 0)], _do_],
    _ds_ = [0, [0, 36, _dr_, cst_Unused_ancestor_variable, since(4, 0)], _dq_],
    _du_ = [0, [0, 35, _dt_, cst_Unused_for_loop_index, since(4, 0)], _ds_],
    _dw_ = [0, [0, 34, _dv_, cst_Unused_type_declaration, since(4, 0)], _du_],
    _dy_ = [0, [0, 33, _dx_, cst_Unused_open_statement$0, since(4, 0)], _dw_],
    _dA_ = [0, [0, 32, _dz_, cst_Unused_value_declaration, since(4, 0)], _dy_],
    descriptions =
      [0,
       _d5_,
       [0,
        _d4_,
        [0,
         _d3_,
         [0,
          _d2_,
          [0,
           _d1_,
           [0,
            _d0_,
            [0,
             _dZ_,
             [0,
              _dY_,
              [0,
               _dX_,
               [0,
                _dW_,
                [0,
                 _dV_,
                 [0,
                  _dU_,
                  [0,
                   _dT_,
                   [0,
                    _dS_,
                    [0,
                     _dR_,
                     [0,
                      _dQ_,
                      [0,
                       _dP_,
                       [0,
                        _dO_,
                        [0,
                         _dN_,
                         [0,
                          _dM_,
                          [0,
                           _dL_,
                           [0,
                            _dK_,
                            [0,
                             _dJ_,
                             [0,
                              _dI_,
                              [0,
                               _dH_,
                               [0,
                                _dG_,
                                [0,
                                 _dF_,
                                 [0,
                                  _dE_,
                                  [0,
                                   _dD_,
                                   [0,
                                    _dC_,
                                    [0,
                                     [0, 31, _dB_, cst_A_module_is_linked_twice_i, since(4, 0)],
                                     _dA_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
    h = caml_callback(Stdlib_Hashtbl[1], [0, last_warning_number]);
   caml_callback
    (Stdlib_List[17],
     [function(param, cont){
       var names = param[2], number = param[1];
       return caml_cps_call3
               (Stdlib_List[17],
                function(name, cont){
                 return caml_cps_call4
                         (Stdlib_Hashtbl[5], h, name, number, cont);
                },
                names,
                cont);
      },
      descriptions]);
   function name_to_number(s, cont){
    return caml_cps_call3(Stdlib_Hashtbl[7], h, s, cont);
   }
   function letter(param){
    var switcher = param - 97 | 0;
    if(25 < switcher >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _d6_], 1);
    switch(switcher){
      case 0:
       var loop = function(i){return 0 === i ? 0 : [0, i, loop(i - 1 | 0)];};
       return loop(last_warning_number);
      case 1:
       return 0;
      case 2:
       return _d7_;
      case 3:
       return _d8_;
      case 4:
       return _d9_;
      case 5:
       return _d__;
      case 6:
       return 0;
      case 7:
       return 0;
      case 8:
       return 0;
      case 9:
       return 0;
      case 10:
       return _d$_;
      case 11:
       return _ea_;
      case 12:
       return _eb_;
      case 13:
       return 0;
      case 14:
       return 0;
      case 15:
       return _ec_;
      case 16:
       return 0;
      case 17:
       return _ed_;
      case 18:
       return _ee_;
      case 19:
       return 0;
      case 20:
       return _ef_;
      case 21:
       return _eg_;
      case 22:
       return 0;
      case 23:
       return _eh_;
      case 24:
       return _ei_;
      default: return _ej_;
    }
   }
   var
    current =
      [0,
       [0,
        caml_make_vect(73, 1),
        caml_make_vect(73, 0),
        [0, Dynlink_compilerlibs_Misc[13][4][64][1], 0],
        [0, Dynlink_compilerlibs_Misc[13][4][64][1], 1]]],
    disabled = [0, 0];
   function without_warnings(f, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[12], [0, [0, disabled, 1], 0], f, cont);
   }
   function backup$0(param, cont){return cont(current[1]);}
   function restore(x, cont){current[1] = x; return cont(0);}
   function is_active(x, cont){
    var _alt_ = 1 - disabled[1];
    if(_alt_)
     var
      _alu_ = number(x),
      _alv_ = caml_check_bound(current[1][1], _alu_)[1 + _alu_];
    else
     var _alv_ = _alt_;
    return cont(_alv_);
   }
   function is_error(x, cont){
    var _alq_ = 1 - disabled[1];
    if(_alq_)
     var
      _alr_ = number(x),
      _als_ = caml_check_bound(current[1][2], _alr_)[1 + _alr_];
    else
     var _als_ = _alq_;
    return cont(_als_);
   }
   function with_state(state, f, cont){
    return caml_cps_exact_call2
            (backup$0,
             undef,
             function(prev){
              return caml_cps_exact_call2
                      (restore,
                       state,
                       function(_aln_){
                        caml_push_trap
                         (function(exn){
                           return caml_cps_exact_call2
                                   (restore,
                                    prev,
                                    function(_alp_){
                                     var
                                      raise = caml_pop_trap(),
                                      exn$0 = caml_maybe_attach_backtrace(exn, 0);
                                     return raise(exn$0);
                                    });
                          });
                        return caml_cps_call2
                                (f,
                                 0,
                                 function(r){
                                  return caml_cps_exact_call2
  (restore,
   prev,
   function(_alo_){caml_pop_trap(); return cont(r);});
                                 });
                       });
             });
   }
   function mk_lazy(f, cont){
    return caml_cps_exact_call2
            (backup$0,
             undef,
             function(state){
              return cont
                      ([246,
                        function(_alm_, cont){
                         return caml_cps_exact_call3(with_state, state, f, cont);
                        }]);
             });
   }
   function set_alert(error, enable, s, cont){
    function _ali_(upd){
     if(error){
      var _alk_ = current[1];
      current[1] = [0, _alk_[1], _alk_[2], _alk_[3], upd];
      return cont(0);
     }
     var _all_ = current[1];
     current[1] = [0, _all_[1], _all_[2], upd, _all_[4]];
     return cont(0);
    }
    if(! caml_string_notequal(s, cst_all))
     return _ali_([0, Dynlink_compilerlibs_Misc[13][4][64][1], 1 - enable]);
    var
     match = error ? current[1][4] : current[1][3],
     pos = match[2],
     set = match[1],
     f =
       enable === pos
        ? Dynlink_compilerlibs_Misc[13][4][64][4]
        : Dynlink_compilerlibs_Misc[13][4][64][6];
    return caml_cps_call3
            (f, s, set, function(_alj_){return _ali_([0, _alj_, pos]);});
   }
   function parse_alert_option(s, cont){
    var n = caml_ml_string_length(s);
    function scan(i, cont){
     if(i === n) return cont(0);
     if((i + 1 | 0) === n){
      var
       _ak5_ = [0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s],
       raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_ak5_, 1));
     }
     var
      match = caml_string_get(s, i),
      match$0 = caml_string_get(s, i + 1 | 0);
     if(46 <= match){
      if(64 === match)
       return caml_cps_exact_call3
               (id,
                function(s, cont){
                 return caml_cps_exact_call4
                         (set_alert,
                          1,
                          1,
                          s,
                          function(_ald_){
                           return caml_cps_exact_call4(set_alert, 0, 1, s, cont);
                          });
                },
                i + 1 | 0,
                cont);
     }
     else if(43 <= match)
      switch(match - 43 | 0){
        case 0:
         if(43 === match$0){
          var _ak7_ = 1, _ak8_ = 1;
          return caml_cps_exact_call3
                  (id,
                   function(_alh_, cont){
                    return caml_cps_exact_call4
                            (set_alert, _ak8_, _ak7_, _alh_, cont);
                   },
                   i + 2 | 0,
                   cont);
         }
         var _ak9_ = 1, _ak__ = 0;
         return caml_cps_exact_call3
                 (id,
                  function(_alg_, cont){
                   return caml_cps_exact_call4
                           (set_alert, _ak__, _ak9_, _alg_, cont);
                  },
                  i + 1 | 0,
                  cont);
        case 2:
         if(45 === match$0){
          var _ak$_ = 0, _ala_ = 1;
          return caml_cps_exact_call3
                  (id,
                   function(_alf_, cont){
                    return caml_cps_exact_call4
                            (set_alert, _ala_, _ak$_, _alf_, cont);
                   },
                   i + 2 | 0,
                   cont);
         }
         var _alb_ = 0, _alc_ = 0;
         return caml_cps_exact_call3
                 (id,
                  function(_ale_, cont){
                   return caml_cps_exact_call4
                           (set_alert, _alc_, _alb_, _ale_, cont);
                  },
                  i + 1 | 0,
                  cont);
      }
     var
      _ak6_ = [0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s$0],
      raise$0 = caml_pop_trap();
     return raise$0(caml_maybe_attach_backtrace(_ak6_, 1));
    }
    function id(f, i$1, cont){
     var i = i$1;
     for(;;){
      if(i >= n) break;
      var param = caml_string_get(s, i);
      a:
      {
       b:
       {
        if(65 <= param){
         var _ak1_ = param - 91 | 0;
         if(5 < _ak1_ >>> 0){
          if(32 <= _ak1_) break b;
         }
         else if(4 !== _ak1_) break b;
        }
        else
         if(48 <= param){
          if(58 <= param) break b;
         }
         else if(39 !== param) break b;
        var _ak2_ = 1;
        break a;
       }
       var _ak2_ = 0;
      }
      if(! _ak2_) break;
      var i$0 = i + 1 | 0, i = i$0;
     }
     if(i !== i$1)
      return caml_cps_call4
              (Stdlib_String[15],
               s,
               i$1,
               i - i$1 | 0,
               function(id){
                return caml_cps_exact_call2
                        (f,
                         id,
                         function(_ak4_){return caml_cps_exact_call2(scan, i, cont);});
               });
     var
      _ak3_ = [0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s$1],
      raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_ak3_, 1));
    }
    return caml_cps_exact_call2(scan, 0, cont);
   }
   function ghost_loc_in_file(name, cont){
    var
     _ak0_ = Stdlib_Lexing[1],
     pos = [0, name, _ak0_[2], _ak0_[3], _ak0_[4]];
    return cont([0, pos, pos, 1]);
   }
   function parse_options(errflag, s, cont){
    return caml_cps_call2
            (Stdlib_Array[6],
             current[1][2],
             function(error){
              return caml_cps_call2
                      (Stdlib_Array[6],
                       current[1][1],
                       function(active){
                        var flags = errflag ? error : active;
                        function action(modifier, i, cont){
                         switch(modifier){
                           case 0:
                            return 3 === i
                                    ? caml_cps_exact_call4
                                      (set_alert, errflag, 1, cst_deprecated, cont)
                                    : (caml_check_bound(flags, i)[1 + i] = 1, cont(0));
                           case 1:
                            return 3 === i
                                    ? caml_cps_exact_call4
                                      (set_alert, errflag, 0, cst_deprecated$0, cont)
                                    : (caml_check_bound(flags, i)[1 + i] = 0, cont(0));
                           default:
                            return 3 === i
                                    ? caml_cps_exact_call4
                                      (set_alert,
                                       0,
                                       1,
                                       cst_deprecated$1,
                                       function(_akZ_){
return caml_cps_exact_call4
        (set_alert, 1, 1, cst_deprecated$2, cont);
                                       })
                                    : (caml_check_bound
(active, i)
                                       [1 + i]
                                      = 1,
                                      caml_check_bound(error, i)[1 + i] = 1,
                                      cont(0));
                         }
                        }
                        function eval$0(param, cont){
                         if(0 === param[0]){
                          var m = param[2], c = param[1];
                          return caml_cps_call2
                                  (Stdlib_Char[3],
                                   c,
                                   function(lc){
                                    if(m)
                                     var m$0 = m[1], modifier = m$0;
                                    else
                                     var modifier = c === lc ? 1 : 0;
                                    var _akX_ = letter(lc);
                                    return caml_cps_call3
    (Stdlib_List[17],
     function(_akY_, cont){
      return caml_cps_exact_call3(action, modifier, _akY_, cont);
     },
     _akX_,
     cont);
                                   });
                         }
                         var modifier = param[3], n2 = param[2], n1 = param[1];
                         return caml_cps_call3
                                 (Stdlib_Int[10],
                                  n2,
                                  last_warning_number,
                                  function(_akS_){
                                   function _akU_(){return cont(0);}
                                   function _akT_(n){
                                    return caml_cps_exact_call3
    (action,
     modifier,
     n,
     function(_akV_){
      var _akW_ = n + 1 | 0;
      return _akS_ !== n
              ? caml_cps_exact_call1(_akT_, _akW_)
              : _akU_();
     });
                                   }
                                   return _akS_ < n1 ? _akU_() : _akT_(n1);
                                  });
                        }
                        function parse_and_eval(s, cont){
                         function error(param){
                          throw caml_maybe_attach_backtrace
                                 ([0, Stdlib_Arg[8], cst_Ill_formed_list_of_warning], 1);
                         }
                         function get_num(n, i){
                          var n$0 = n, i$0 = i;
                          for(;;){
                           if(caml_ml_string_length(s) <= i$0) return [0, i$0, n$0];
                           if(9 < caml_string_get(s, i$0) - 48 >>> 0)
                            return [0, i$0, n$0];
                           var
                            i$1 = i$0 + 1 | 0,
                            n$1 =
                              ((10 * n$0 | 0) + caml_string_get(s, i$0) | 0) - 48 | 0,
                            n$0 = n$1,
                            i$0 = i$1;
                          }
                         }
                         function loop(tokens, i, cont){
                          var tokens$0 = tokens, i$0 = i;
                          for(;;){
                           if(caml_ml_string_length(s) <= i$0)
                            return caml_cps_call2(Stdlib_List[9], tokens$0, cont);
                           var match = caml_string_get(s, i$0);
                           a:
                           {
                            if(65 <= match){
                             if(97 <= match){
                              if(123 <= match) break a;
                             }
                             else if(91 <= match) break a;
                             var
                              i$1 = i$0 + 1 | 0,
                              tokens$1 = [0, [0, caml_string_get(s, i$0), 0], tokens$0],
                              tokens$0 = tokens$1,
                              i$0 = i$1;
                             continue;
                            }
                            if(46 <= match){
                             if(64 <= match)
                              return caml_cps_exact_call4
                                      (loop_letter_num, tokens$0, 2, i$0 + 1 | 0, cont);
                            }
                            else if(43 <= match)
                             switch(match - 43 | 0){
                               case 0:
                                return caml_cps_exact_call4
(loop_letter_num, tokens$0, 0, i$0 + 1 | 0, cont);
                               case 2:
                                return caml_cps_exact_call4
(loop_letter_num, tokens$0, 1, i$0 + 1 | 0, cont);
                             }
                           }
                           return cont(error(undef));
                          }
                         }
                         function loop_letter_num(tokens, modifier, i$1, cont){
                          if(caml_ml_string_length(s) <= i$1)
                           return cont(error(undef));
                          var _akR_ = caml_string_get(s, i$1) - 65 | 0;
                          if(57 < _akR_ >>> 0){
                           if(9 >= _akR_ + 17 >>> 0){
                            var match = get_num(0, i$1), n1 = match[2], i = match[1];
                            a:
                            {
                             if
                              ((i + 2 | 0) < caml_ml_string_length(s)
                               &&
                                46 === caml_string_get(s, i)
                                && 46 === caml_string_get(s, i + 1 | 0)){
                              var
                               match$0 = get_num(0, i + 2 | 0),
                               n2 = match$0[2],
                               i$0 = match$0[1];
                              if(n2 < n1) error(undef);
                              var match$1 = [0, i$0, , n2];
                              break a;
                             }
                             var match$1 = [0, i, , n1];
                            }
                            var n2$0 = match$1[3], i$2 = match$1[1];
                            return caml_cps_exact_call3
                                    (loop, [0, [1, n1, n2$0, modifier], tokens], i$2, cont);
                           }
                          }
                          else if(5 < _akR_ - 26 >>> 0)
                           return caml_cps_exact_call3
                                   (loop,
                                    [0, [0, caml_string_get(s, i$1), [0, modifier]], tokens],
                                    i$1 + 1 | 0,
                                    cont);
                          return cont(error(undef));
                         }
                         return caml_cps_exact_call3
                                 (loop,
                                  0,
                                  0,
                                  function(tokens){
                                   return caml_cps_call3
   (Stdlib_List[17],
    eval$0,
    tokens,
    function(_akG_){
     function print_modifier(ppf, param, cont){
      switch(param){
        case 0:
         return caml_cps_call3(Stdlib_Format[135], ppf, _el_, cont);
        case 1:
         return caml_cps_call3(Stdlib_Format[135], ppf, _em_, cont);
        default:
         return caml_cps_call3(Stdlib_Format[135], ppf, _en_, cont);
      }
     }
     function commit_chunk(l, chunk, cont){
      if(chunk && chunk[2])
       return caml_cps_call2
               (Stdlib_List[9],
                chunk,
                function(_akQ_){return cont([0, _akQ_, l]);});
      return cont(l);
     }
     function group_consecutive_letters(param, _akN_, cont){
      var current = param[2], l = param[1];
      if(0 === _akN_[0] && ! _akN_[2]){
       var x = _akN_[1];
       return cont([0, l, [0, x, current]]);
      }
      var _akO_ = 0;
      return caml_cps_exact_call3
              (commit_chunk,
               l,
               current,
               function(_akP_){return cont([0, _akP_, _akO_]);});
     }
     return caml_cps_call4
             (Stdlib_List[25],
              group_consecutive_letters,
              _er_,
              tokens,
              function(match){
               var on_going = match[2], l = match[1];
               return caml_cps_exact_call3
                       (commit_chunk,
                        l,
                        on_going,
                        function(consecutive_letters){
                         if(! consecutive_letters) return cont(0);
                         var example = consecutive_letters[1];
                         return caml_cps_exact_call2
                                 (ghost_loc_in_file,
                                  cst_none,
                                  function(nowhere){
                                   function spelling_hint(ppf, cont){
                                    return caml_cps_call4
    (Stdlib_List[25],
     function(l, x, cont){
      return caml_cps_call2
              (Stdlib_List[1],
               x,
               function(_akM_){
                return caml_cps_call3(Stdlib_Int[11], l, _akM_, cont);
               });
     },
     0,
     consecutive_letters,
     function(max_seq_len){
      return 5 <= max_seq_len
              ? caml_cps_call3(Stdlib_Format[135], ppf, _es_, cont)
              : cont(0);
     });
                                   }
                                   function _akH_(ppf, cont){
                                    return caml_cps_call3
    (Stdlib_List[17],
     function(param, cont){
      if(0 !== param[0]){
       var m$0 = param[3], b = param[2], a = param[1];
       return a === b
               ? caml_cps_call6
                 (Stdlib_Format[135],
                  ppf,
                  _ep_,
                  print_modifier,
                  m$0,
                  a,
                  cont)
               : caml_cps_call7
                 (Stdlib_Format[135],
                  ppf,
                  _eq_,
                  print_modifier,
                  m$0,
                  a,
                  b,
                  cont);
      }
      var match = param[2], c = param[1];
      if(! match)
       return caml_cps_call2
               (Stdlib_Char[3],
                c,
                function(_akK_){
                 var
                  lowercase = _akK_ === c ? 1 : 0,
                  _akL_ = lowercase ? 45 : 43;
                 return caml_cps_call5
                         (Stdlib_Format[135], ppf, _ek_, _akL_, c, cont);
                });
      var m = match[1];
      return caml_cps_call6
              (Stdlib_Format[135], ppf, _eo_, print_modifier, m, c, cont);
     },
     tokens,
     cont);
                                   }
                                   return caml_cps_call3
   (Stdlib_Format[129],
    [0,
     function(param, cont){
      return cont(function(_akJ_, cont){return cont(0);});
     }],
    Stdlib_Format[23],
    function(_akI_){
     return caml_cps_call6
             (Stdlib_Format[139],
              _et_,
              _akI_,
              example,
              _akH_,
              spelling_hint,
              function(message){
               return cont
                       ([0,
                         [0, cst_ocaml_deprecated_cli, message, nowhere, nowhere]]);
              });
    });
                                  });
                        });
              });
    });
                                  });
                        }
                        return caml_cps_exact_call2
                                (name_to_number,
                                 s,
                                 function(match){
                                  function _akA_(alerts){
                                   var _akF_ = current[1];
                                   current[1] = [0, active, error, _akF_[3], _akF_[4]];
                                   return cont(alerts);
                                  }
                                  if(! match)
                                   return caml_string_equal(s, cst$117)
   ? caml_cps_exact_call2(parse_and_eval, s, _akA_)
   : caml_cps_call4
     (Stdlib_String[15],
      s,
      1,
      caml_ml_string_length(s) - 1 | 0,
      function(rest){
       var match = caml_string_get(s, 0);
       return caml_cps_exact_call2
               (name_to_number,
                rest,
                function(match$0){
                 if(46 <= match){
                  if(64 === match && match$0){
                   var n = match$0[1];
                   return caml_cps_exact_call3
                           (action, 2, n, function(_akC_){return _akA_(0);});
                  }
                 }
                 else if(43 <= match)
                  switch(match - 43 | 0){
                    case 0:
                     if(match$0){
                      var n$0 = match$0[1];
                      return caml_cps_exact_call3
                              (action, 0, n$0, function(_akE_){return _akA_(0);});
                     }
                     break;
                    case 2:
                     if(match$0){
                      var n$1 = match$0[1];
                      return caml_cps_exact_call3
                              (action, 1, n$1, function(_akD_){return _akA_(0);});
                     }
                     break;
                  }
                 return caml_cps_exact_call2(parse_and_eval, s, _akA_);
                });
      });
                                  var n = match[1];
                                  return caml_cps_exact_call3
  (action, 0, n, function(_akB_){return _akA_(0);});
                                 });
                       });
             });
   }
   caml_callback(parse_options, [0, defaults_w]);
   caml_callback(parse_options, [1, defaults_warn_error]);
   var _eu_ = 0, _ev_ = 0;
   caml_callback
    (Stdlib_List[17],
     [function(_akz_, cont){
       return caml_cps_exact_call4(set_alert, _ev_, _eu_, _akz_, cont);
      },
      default_disabled_alerts]);
   function ref_manual_explanation(param, cont){
    return caml_cps_call4(Stdlib_Printf[4], _ew_, 13, 5, cont);
   }
   function message(param, cont){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cont(cst_this_is_the_start_of_a_com);
       case 1:
        return cont(cst_this_is_not_the_end_of_a_c);
       case 2:
        return cont(cst_this_function_application_);
       case 3:
        return cont(cst_this_expression_should_hav);
       case 4:
        return cont(cst_this_match_case_is_unused);
       case 5:
        return cont(cst_this_sub_pattern_is_unused);
       case 6:
        return cont(cst_illegal_backslash_escape_i);
       case 7:
        return cont(cst_this_optional_argument_can);
       case 8:
        return cont(cst_this_argument_will_not_be_);
       case 9:
        return cont(cst_this_statement_never_retur);
       case 10:
        return cont(cst_all_the_fields_are_explici);
       case 11:
        return cont(cst_this_pattern_matching_is_n);
       case 12:
        return cont(cst_wildcard_pattern_given_as_);
       case 13:
        return cont(cst_unescaped_end_of_line_in_a);
       case 14:
        return cont(cst_unused_rec_flag);
       case 15:
        return caml_cps_call3
                (Stdlib_Printf[4], _ex_, ref_manual_explanation, cont);
       case 16:
        return cont(cst_this_match_case_is_unreach);
       case 17:
        return cont(cst_A_potential_assignment_to_);
       case 18:
        return cont(cst_Type_constraints_do_not_ap);
       case 19:
        return cont(cst_option_unsafe_used_with_a_);
       case 20:
        return cont(cst_This_pattern_depends_on_mu);
       case 21:
        return cont(cst_Cannot_find_interface_file);
       case 22:
        return cont(cst_This_function_is_marked_ta);
       default: return cont(cst_This_call_is_in_tail_modul);
     }
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_string_notequal(s, cst$117)
               ? caml_cps_call3
                 (Stdlib[28],
                  s,
                  cst$34,
                  function(_aky_){
                   return caml_cps_call3
                           (Stdlib[28], cst_this_pattern_matching_is_f, _aky_, cont);
                  })
               : cont(cst_this_pattern_matching_is_f$0);
      case 1:
       var ls = param[1];
       if(! ls){
        var raise$3 = caml_pop_trap();
        return raise$3
                (caml_maybe_attach_backtrace([0, Assert_failure, _ey_], 1));
       }
       if(ls[2])
        return caml_cps_call3
                (Stdlib_String[6],
                 cst$35,
                 ls,
                 function(_akw_){
                  return caml_cps_call3
                          (Stdlib[28],
                           _akw_,
                           cst_were_omitted_in_the_applic,
                           function(_akx_){
                            return caml_cps_call3(Stdlib[28], cst_labels, _akx_, cont);
                           });
                 });
       var l = ls[1];
       return caml_cps_call3
               (Stdlib[28],
                l,
                cst_was_omitted_in_the_applica,
                function(_akv_){
                 return caml_cps_call3(Stdlib[28], cst_label, _akv_, cont);
                });
      case 2:
       var _ajJ_ = param[1];
       if(! _ajJ_){
        var raise$2 = caml_pop_trap();
        return raise$2
                (caml_maybe_attach_backtrace([0, Assert_failure, _ez_], 1));
       }
       var lab = _ajJ_[1];
       if(! _ajJ_[2])
        return caml_cps_call3
                (Stdlib[28],
                 lab,
                 cst_is_overridden,
                 function(_aku_){
                  return caml_cps_call3
                          (Stdlib[28], cst_the_method, _aku_, cont);
                 });
       var slist = _ajJ_[2];
       return caml_cps_call3
               (Stdlib_String[6],
                cst$37,
                [0,
                 cst_the_following_methods_are_,
                 [0, lab, [0, cst$36, slist]]],
                cont);
      case 3:
       var s$0 = param[1];
       return caml_string_notequal(s$0, cst$117)
               ? caml_cps_call3
                 (Stdlib[28], cst_this_pattern_matching_is_n$0, s$0, cont)
               : cont(cst_this_pattern_matching_is_n$1);
      case 4:
       var s$1 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$1,
                cst_Either_bind_these_labels_e,
                function(_akt_){
                 return caml_cps_call3
                         (Stdlib[28], cst_the_following_labels_are_n, _akt_, cont);
                });
      case 5:
       var _ajK_ = param[1];
       if(! _ajK_){
        var raise$1 = caml_pop_trap();
        return raise$1
                (caml_maybe_attach_backtrace([0, Assert_failure, _eA_], 1));
       }
       var lab$0 = _ajK_[1];
       if(! _ajK_[2])
        return caml_cps_call3
                (Stdlib[28],
                 lab$0,
                 cst_is_overridden$0,
                 function(_aks_){
                  return caml_cps_call3
                          (Stdlib[28], cst_the_instance_variable, _aks_, cont);
                 });
       var slist$0 = _ajK_[2];
       return caml_cps_call3
               (Stdlib_String[6],
                cst$39,
                [0,
                 cst_the_following_instance_var,
                 [0, lab$0, [0, cst$38, slist$0]]],
                cont);
      case 6:
       var l$0 = param[1];
       return caml_cps_call3
               (Stdlib_String[6],
                cst$41,
                l$0,
                function(_akq_){
                 return caml_cps_call3
                         (Stdlib[28],
                          _akq_,
                          cst$40,
                          function(_akr_){
                           return caml_cps_call3
                                   (Stdlib[28], cst_the_following_private_meth, _akr_, cont);
                          });
                });
      case 7:
       var m = param[1];
       return caml_cps_call3
               (Stdlib[28],
                m,
                cst_is_not_declared,
                function(_akp_){
                 return caml_cps_call3
                         (Stdlib[28], cst_the_virtual_method, _akp_, cont);
                });
      case 8:
       var s$2 = param[1];
       return caml_cps_call3(Stdlib[28], s$2, cst_is_not_principal, cont);
      case 9:
       var s$3 = param[1];
       return caml_cps_call3(Stdlib[28], s$3, cst_without_principality, cont);
      case 10:
       var s$4 = param[1]; return cont(s$4);
      case 11:
       var modname = param[1];
       return caml_cps_call3
               (Stdlib[28],
                modname,
                cst_is_not_a_valid_module_name,
                function(_ako_){
                 return caml_cps_call3
                         (Stdlib[28], cst_bad_source_file_name, _ako_, cont);
                });
      case 14:
       var tc2 = param[4], tc1 = param[3], cname = param[2], kind = param[1];
       return caml_cps_call6
               (Stdlib_Printf[4], _eB_, kind, cname, tc1, tc2, cont);
      case 15:
       var file2 = param[3], file1 = param[2], modname$0 = param[1];
       return caml_cps_call5
               (Stdlib_Printf[4], _eC_, file1, file2, modname$0, cont);
      case 16:
       var v$0 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                v$0,
                cst$43,
                function(_akn_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_value, _akn_, cont);
                });
      case 17:
       var s$5 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$5,
                cst$44,
                function(_akm_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_open, _akm_, cont);
                });
      case 18:
       var s$6 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$6,
                cst$45,
                function(_akl_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_type, _akl_, cont);
                });
      case 19:
       var s$7 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$7,
                cst$46,
                function(_akk_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_for_loop_index, _akk_, cont);
                });
      case 20:
       var s$8 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$8,
                cst$47,
                function(_akj_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_ancestor_variable, _akj_, cont);
                });
      case 21:
       var s$9 = param[1];
       switch(param[2]){
         case 0:
          return caml_cps_call3
                  (Stdlib[28],
                   s$9,
                   cst$48,
                   function(_aki_){
                    return caml_cps_call3
                            (Stdlib[28], cst_unused_constructor, _aki_, cont);
                   });
         case 1:
          return caml_cps_call3
                  (Stdlib[28],
                   s$9,
                   cst_is_never_used_to_build_val,
                   function(_akh_){
                    return caml_cps_call3
                            (Stdlib[28], cst_constructor, _akh_, cont);
                   });
         default:
          return caml_cps_call3
                  (Stdlib[28],
                   s$9,
                   cst_is_never_used_to_build_val$0,
                   function(_akg_){
                    return caml_cps_call3
                            (Stdlib[28], cst_constructor$0, _akg_, cont);
                   });
       }
      case 22:
       var
        complaint = param[3],
        is_exception = param[2],
        s$10 = param[1],
        kind$0 = is_exception ? cst_exception : cst_extension_constructor;
       return caml_cps_call3
               (Stdlib[28],
                cst$49,
                s$10,
                function(_akf_){
                 return caml_cps_call3
                         (Stdlib[28],
                          kind$0,
                          _akf_,
                          function(name){
                           switch(complaint){
                             case 0:
                              return caml_cps_call3(Stdlib[28], cst_unused, name, cont);
                             case 1:
                              return caml_cps_call3
                                      (Stdlib[28], name, cst_is_never_used_to_build_val$1, cont);
                             default:
                              return caml_cps_call3
                                      (Stdlib[28], name, cst_is_never_used_to_build_val$2, cont);
                           }
                          });
                });
      case 23:
       var slist$1 = param[2], ty = param[1];
       if(slist$1 && ! slist$1[2] && ! param[3]){
        var nm = slist$1[1];
        return caml_cps_call3
                (Stdlib[28],
                 ty,
                 cst_It_is_not_visible_in_the_c,
                 function(_akd_){
                  return caml_cps_call3
                          (Stdlib[28],
                           cst_was_selected_from_type,
                           _akd_,
                           function(_ake_){
                            return caml_cps_call3(Stdlib[28], nm, _ake_, cont);
                           });
                 });
       }
       if(param[3])
        return caml_cps_call3
                (Stdlib_String[6],
                 cst$50,
                 slist$1,
                 function(_aj$_){
                  return caml_cps_call3
                          (Stdlib[28],
                           _aj$_,
                           cst_They_will_not_be_selected_,
                           function(_aka_){
                            return caml_cps_call3
                                    (Stdlib[28],
                                     cst_contains_fields_that_are_n,
                                     _aka_,
                                     function(_akb_){
                                      return caml_cps_call3
      (Stdlib[28],
       ty,
       _akb_,
       function(_akc_){
        return caml_cps_call3
                (Stdlib[28], cst_this_record_of_type, _akc_, cont);
       });
                                     });
                           });
                 });
       var raise$0 = caml_pop_trap();
       return raise$0
               (caml_maybe_attach_backtrace([0, Assert_failure, _eD_], 1));
      case 24:
       var slist$2 = param[1];
       if(slist$2 && ! slist$2[2] && ! param[3]){
        var expansion$0 = param[4], tl$0 = param[2], s$11 = slist$2[1];
        return caml_cps_call3
                (Stdlib[28],
                 cst_The_first_one_was_selected$0,
                 expansion$0,
                 function(_aj7_){
                  return caml_cps_call3
                          (Stdlib_String[6],
                           cst$52,
                           tl$0,
                           function(_aj8_){
                            return caml_cps_call3
                                    (Stdlib[28],
                                     _aj8_,
                                     _aj7_,
                                     function(_aj9_){
                                      return caml_cps_call3
      (Stdlib[28],
       cst_belongs_to_several_types,
       _aj9_,
       function(_aj__){
        return caml_cps_call3(Stdlib[28], s$11, _aj__, cont);
       });
                                     });
                           });
                 });
       }
       var tl = param[2];
       if(param[3]){
        var expansion = param[4];
        return caml_cps_call3
                (Stdlib[28],
                 cst_The_first_one_was_selected,
                 expansion,
                 function(_aj4_){
                  return caml_cps_call3
                          (Stdlib_String[6],
                           cst$51,
                           tl,
                           function(_aj5_){
                            return caml_cps_call3
                                    (Stdlib[28],
                                     _aj5_,
                                     _aj4_,
                                     function(_aj6_){
                                      return caml_cps_call3
      (Stdlib[28], cst_these_field_labels_belong_, _aj6_, cont);
                                     });
                           });
                 });
       }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _eE_], 1));
      case 25:
       var s$12 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$12,
                cst_relies_on_type_directed_di,
                function(_aj3_){
                 return caml_cps_call3
                         (Stdlib[28], cst_this_use_of, _aj3_, cont);
                });
      case 26:
       var s$13 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$13,
                cst_is_not_optional,
                function(_aj2_){
                 return caml_cps_call3(Stdlib[28], cst_the_label, _aj2_, cont);
                });
      case 27:
       var s$14 = param[2], kind$1 = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _eF_, kind$1, s$14, cont);
      case 28:
       var s$15 = param[2], kind$2 = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _eG_, kind$2, s$15, cont);
      case 29:
       var s$16 = param[2], var$0 = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _eH_, var$0, s$16, cont);
      case 30:
       var s$17 = param[2], a = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _eI_, a, s$17, cont);
      case 31:
       var sl = param[1];
       return caml_cps_call3
               (Stdlib_String[6],
                cst$53,
                sl,
                function(_ajZ_){
                 return caml_cps_call2
                         (Stdlib_List[1],
                          sl,
                          function(_aj0_){
                           var _aj1_ = 1 === _aj0_ ? cst$54 : cst_s$0;
                           return caml_cps_call4
                                   (Stdlib_Printf[4], _eJ_, _aj1_, _ajZ_, cont);
                          });
                });
      case 32:
       var match = param[2], name = param[1];
       if(! match)
        return caml_cps_call3
                (Stdlib[28], cst_no_cmi_file_was_found_in_p, name, cont);
       var msg = match[1];
       return caml_cps_call4(Stdlib_Printf[4], _eK_, name, msg, cont);
      case 33:
       var unattached = param[1];
       return unattached
               ? cont(cst_unattached_documentation_c)
               : cont(cst_ambiguous_documentation_co);
      case 34:
       var b = param[1], _ajL_ = b ? cst_tailcall : cst_non_tailcall;
       return caml_cps_call3(Stdlib_Printf[4], _eL_, _ajL_, cont);
      case 35:
       var attr_name = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _eM_, attr_name, cont);
      case 36:
       var attr_name$0 = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _eN_, attr_name$0, cont);
      case 37:
       var reason = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _eO_, reason, cont);
      case 38:
       var vars = param[1];
       return caml_cps_call3
               (Stdlib_List[56],
                Stdlib_String[9],
                vars,
                function(vars){
                 if(vars){
                  var
                   x = vars[1],
                   _ajU_ =
                     function(vars_explanation){
                      return caml_cps_call4
                              (Stdlib_Printf[4],
                               _eP_,
                               vars_explanation,
                               ref_manual_explanation,
                               cont);
                     };
                  return vars[2]
                          ? caml_cps_call3
                            (Stdlib_String[6],
                             cst$55,
                             vars,
                             function(vars){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       cst_appear,
                                       in_different_places,
                                       function(_ajV_){
return caml_cps_call3
        (Stdlib[28],
         vars,
         _ajV_,
         function(_ajW_){
          return caml_cps_call3
                  (Stdlib[28], cst_variables, _ajW_, _ajU_);
         });
                                       });
                             })
                          : caml_cps_call3
                            (Stdlib[28],
                             cst_appears,
                             in_different_places,
                             function(_ajX_){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       x,
                                       _ajX_,
                                       function(_ajY_){
return caml_cps_call3
        (Stdlib[28], cst_variable, _ajY_, _ajU_);
                                       });
                             });
                 }
                 var raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace([0, Assert_failure, _eQ_], 1));
                });
      case 39:
       var name$0 = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _eR_, name$0, cont);
      case 40:
       var s$18 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$18,
                cst$56,
                function(_ajT_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_module, _ajT_, cont);
                });
      case 41:
       var t = param[1];
       return caml_cps_call4(Stdlib_Printf[4], _eS_, t, t, cont);
      case 42:
       var s$19 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$19,
                cst_Beware_that_this_warning_i,
                function(_ajS_){
                 return caml_cps_call3
                         (Stdlib[28], cst_The_printed_interface_diff, _ajS_, cont);
                });
      case 43:
       var name$1 = param[1];
       return caml_cps_call3(Stdlib_Printf[4], _eT_, name$1, cont);
      case 44:
       var s$20 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$20,
                cst$57,
                function(_ajR_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_open$0, _ajR_, cont);
                });
      case 45:
       var s$21 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                s$21,
                cst$58,
                function(_ajQ_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_functor_parameter, _ajQ_, cont);
                });
      case 46:
       var s$22 = param[1];
       switch(param[2]){
         case 0:
          return caml_cps_call3
                  (Stdlib[28],
                   s$22,
                   cst$59,
                   function(_ajP_){
                    return caml_cps_call3
                            (Stdlib[28], cst_unused_record_field, _ajP_, cont);
                   });
         case 1:
          return caml_cps_call3
                  (Stdlib[28],
                   s$22,
                   cst_is_never_read_However_this,
                   function(_ajO_){
                    return caml_cps_call3
                            (Stdlib[28], cst_record_field, _ajO_, cont);
                   });
         default:
          return caml_cps_call3
                  (Stdlib[28],
                   s$22,
                   cst_is_never_mutated,
                   function(_ajN_){
                    return caml_cps_call3
                            (Stdlib[28], cst_mutable_record_field, _ajN_, cont);
                   });
       }
      default:
       var v = param[1];
       return caml_cps_call3
               (Stdlib[28],
                v,
                cst$42,
                function(_ajM_){
                 return caml_cps_call3
                         (Stdlib[28], cst_unused_variable, _ajM_, cont);
                });
    }
   }
   var nerrors = [0, 0];
   function report(w, cont){
    return caml_cps_exact_call2
            (is_active,
             w,
             function(match){
              return match
                      ? caml_cps_exact_call2
                        (is_error,
                         w,
                         function(_ajD_){
                          if(_ajD_) nerrors[1]++;
                          var _ajE_ = 0;
                          return caml_cps_exact_call2
                                  (is_error,
                                   w,
                                   function(_ajF_){
                                    return caml_cps_exact_call2
    (message,
     w,
     function(_ajG_){
      var n = number(w);
      return caml_cps_call3
              (Stdlib_List[39],
               function(param, cont){
                var number = param[1];
                return cont(number === n ? 1 : 0);
               },
               descriptions,
               function(match){
                function _ajH_(_ajI_){
                 return cont
                         ([0, -891636250, [0, _ajI_, _ajG_, _ajF_, _ajE_]]);
                }
                if(match){
                 var match$0 = match[1][2];
                 if(match$0){
                  var s = match$0[1];
                  return caml_cps_call4(Stdlib_Printf[4], _eU_, n, s, _ajH_);
                 }
                }
                return caml_cps_call2(Stdlib[33], n, _ajH_);
               });
     });
                                   });
                         })
                      : cont(-1008610421);
             });
   }
   function report_alert(alert, cont){
    var kind = alert[1], _ajx_ = 1 - disabled[1];
    function _ajy_(match){
     if(! match) return cont(-1008610421);
     var kind = alert[1], _ajA_ = 1 - disabled[1];
     function _ajB_(is_error){
      if(is_error) nerrors[1]++;
      return caml_cps_call2
              (Dynlink_compilerlibs_Misc[54],
               alert[2],
               function(message){
                a:
                {
                 if(! alert[3][3] && ! alert[4][3]){
                  var
                   sub_locs =
                     [0,
                      [0, alert[3], cst_Definition],
                      [0, [0, alert[4], cst_Expected_signature], 0]];
                  break a;
                 }
                 var sub_locs = 0;
                }
                return cont
                        ([0, -891636250, [0, alert[1], message, is_error, sub_locs]]);
               });
     }
     if(! _ajA_) return _ajB_(_ajA_);
     var match$0 = current[1][4], pos = match$0[2], set = match$0[1];
     return caml_cps_call3
             (Dynlink_compilerlibs_Misc[13][4][64][3],
              kind,
              set,
              function(_ajC_){return _ajB_(_ajC_ === pos ? 1 : 0);});
    }
    if(! _ajx_) return _ajy_(_ajx_);
    var match = current[1][3], pos = match[2], set = match[1];
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][64][3],
             kind,
             set,
             function(_ajz_){return _ajy_(_ajz_ === pos ? 1 : 0);});
   }
   var Errors = [248, cst_Dynlink_compilerlibs_Warni, caml_fresh_oo_id(0)];
   function reset_fatal(param, cont){nerrors[1] = 0; return cont(0);}
   function check_fatal(param, cont){
    var _ajw_ = 0 < nerrors[1] ? 1 : 0;
    if(! _ajw_) return cont(_ajw_);
    nerrors[1] = 0;
    var
     raise = caml_pop_trap(),
     Errors$0 = caml_maybe_attach_backtrace(Errors, 1);
    return raise(Errors$0);
   }
   function help_warnings(param, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var
               since = param[4],
               description = param[3],
               names = param[2],
               number = param[1];
              function _ajs_(name){
               return caml_cps_call7
                       (Stdlib_Printf[2],
                        _eW_,
                        number,
                        name,
                        description,
                        function(out, cont){
                         return caml_cps_call2
                                 (Stdlib_Option[9],
                                  function(release_info, cont){
                                   var
                                    _aju_ = release_info[2],
                                    _ajv_ = 5 <= release_info[1] ? 0 : 2;
                                   return caml_cps_call6
   (Stdlib_Printf[1],
    out,
    _eV_,
    release_info[1],
    _ajv_,
    _aju_,
    cont);
                                  },
                                  cont);
                        },
                        since,
                        cont);
              }
              if(! names) return _ajs_(cst$62);
              var s = names[1];
              return caml_cps_call3
                      (Stdlib[28],
                       s,
                       cst$60,
                       function(_ajt_){
                        return caml_cps_call3(Stdlib[28], cst$61, _ajt_, _ajs_);
                       });
             },
             descriptions,
             function(_aji_){
              return caml_cps_call2
                      (Stdlib[46],
                       cst_A_all_warnings,
                       function(_ajj_){
                        function _ajk_(i){
                         return caml_cps_call2
                                 (Stdlib_Char[1],
                                  i,
                                  function(c){
                                   var l = letter(c);
                                   function _ajl_(_ajq_){
                                    var _ajr_ = i + 1 | 0;
                                    return 122 !== i
    ? caml_cps_exact_call1(_ajk_, _ajr_)
    : caml_cps_call2(Stdlib[99], 0, cont);
                                   }
                                   if(! l) return _ajl_(0);
                                   if(l[2])
                                    return caml_cps_call3
    (Stdlib_List[19],
     Stdlib_Int[12],
     l,
     function(_ajn_){
      return caml_cps_call3
              (Stdlib_String[6],
               cst$63,
               _ajn_,
               function(_ajo_){
                return caml_cps_call2
                        (Stdlib_Char[4],
                         c,
                         function(_ajp_){
                          return caml_cps_call4
                                  (Stdlib_Printf[2], _eX_, _ajp_, _ajo_, _ajl_);
                         });
               });
     });
                                   var n = l[1];
                                   return caml_cps_call2
   (Stdlib_Char[4],
    c,
    function(_ajm_){
     return caml_cps_call4
             (Stdlib_Printf[2], _eY_, _ajm_, n, _ajl_);
    });
                                  });
                        }
                        return _ajk_(98);
                       });
             });
   }
   var
    Dynlink_compilerlibs_Warnings =
      [0,
       ghost_loc_in_file,
       parse_options,
       parse_alert_option,
       without_warnings,
       is_active,
       is_error,
       defaults_w,
       defaults_warn_error,
       report,
       report_alert,
       Errors,
       check_fatal,
       reset_fatal,
       help_warnings,
       backup$0,
       restore,
       with_state,
       mk_lazy,
       descriptions];
   caml_register_global
    (1408, Dynlink_compilerlibs_Warnings, "Dynlink_compilerlibs.Warnings");
   function symbol(_ajh_, _ajg_, cont){return cont(_ajh_ === _ajg_ ? 1 : 0);}
   function symbol$0(_ajf_, _aje_, cont){
    return cont(_ajf_ !== _aje_ ? 1 : 0);
   }
   function symbol$1(_ajd_, _ajc_, cont){return cont(_ajd_ < _ajc_ ? 1 : 0);}
   function symbol$2(_ajb_, _aja_, cont){return cont(_aja_ < _ajb_ ? 1 : 0);}
   function symbol$3(_ai$_, _ai__, cont){return cont(_ai$_ <= _ai__ ? 1 : 0);}
   function symbol$4(_ai9_, _ai8_, cont){return cont(_ai8_ <= _ai9_ ? 1 : 0);}
   function compare$6(_ai7_, _ai6_, cont){
    return cont(caml_int_compare(_ai7_, _ai6_));
   }
   var
    Dynlink_compilerlibs_Int_repla =
      [0, symbol, symbol$0, symbol$1, symbol$2, symbol$3, symbol$4, compare$6];
   caml_register_global
    (1409,
     Dynlink_compilerlibs_Int_repla,
     "Dynlink_compilerlibs.Int_replace_polymorphic_compare");
   function force(f, x, cont){
    var match = x[1];
    switch(match[0]){
      case 0:
       var x$0 = match[1]; return cont(x$0);
      case 1:
       var
        e = match[1],
        raise = caml_pop_trap(),
        e$1 = caml_maybe_attach_backtrace(e, 1);
       return raise(e$1);
      default:
       var e$0 = match[1];
       caml_push_trap
        (function(e){
          x[1] = [1, e];
          var
           raise = caml_pop_trap(),
           e$0 = caml_maybe_attach_backtrace(e, 0);
          return raise(e$0);
         });
       return caml_cps_call2
               (f,
                e$0,
                function(y){caml_pop_trap(); x[1] = [0, y]; return cont(y);});
    }
   }
   function get_arg(x, cont){
    var match = x[1];
    if(2 !== match[0]) return cont(0);
    var a = match[1];
    return cont([0, a]);
   }
   function get_contents(x, cont){
    var match = x[1];
    switch(match[0]){
      case 0:
       var b = match[1]; return cont([1, b]);
      case 1:
       var
        e = match[1],
        raise = caml_pop_trap(),
        e$0 = caml_maybe_attach_backtrace(e, 1);
       return raise(e$0);
      default: var a = match[1]; return cont([0, a]);
    }
   }
   function create$3(x, cont){return cont([0, [2, x]]);}
   function create_forced(y, cont){return cont([0, [0, y]]);}
   function create_failed(e, cont){return cont([0, [1, e]]);}
   function log(param, cont){return cont([0, 0]);}
   function force_logged(log, f, x, cont){
    var match = x[1];
    switch(match[0]){
      case 0:
       var x$0 = match[1]; return cont(x$0);
      case 1:
       var
        e = match[1],
        raise = caml_pop_trap(),
        e$1 = caml_maybe_attach_backtrace(e, 1);
       return raise(e$1);
      default:
       var e$0 = match[1];
       caml_push_trap
        (function(e){
          x[1] = [1, e];
          var
           raise = caml_pop_trap(),
           e$0 = caml_maybe_attach_backtrace(e, 0);
          return raise(e$0);
         });
       return caml_cps_call2
               (f,
                e$0,
                function(err){
                 caml_pop_trap();
                 return 0 === err[0]
                         ? (x[1] = [0, err], cont(err))
                         : (x[1] = [0, err], log[1] = [0, x, e$0, log[1]], cont(err));
                });
    }
   }
   function backtrack(log, cont){
    var param = log[1];
    for(;;){
     if(! param) return cont(0);
     var rest = param[3], e = param[2], x = param[1];
     x[1] = [2, e];
     var param = rest;
    }
   }
   var
    Dynlink_compilerlibs_Lazy_back =
      [0,
       force,
       create$3,
       get_arg,
       get_contents,
       create_forced,
       create_failed,
       log,
       force_logged,
       backtrack];
   caml_register_global
    (1410,
     Dynlink_compilerlibs_Lazy_back,
     "Dynlink_compilerlibs.Lazy_backtrack");
   var
    in_file = Dynlink_compilerlibs_Warnings[1],
    none = caml_callback(in_file, [cst_none$0]);
   function is_none(l, cont){return cont(caml_equal(l, none));}
   function curr(lexbuf, cont){return cont([0, lexbuf[11], lexbuf[12], 0]);}
   function init$2(lexbuf, fname, cont){
    lexbuf[12] = [0, fname, 1, 0, 0];
    return cont(0);
   }
   function symbol_rloc(param, cont){
    var _ai3_ = 0;
    return caml_cps_call2
            (Stdlib_Parsing[6],
             0,
             function(_ai4_){
              return caml_cps_call2
                      (Stdlib_Parsing[5],
                       0,
                       function(_ai5_){return cont([0, _ai5_, _ai4_, _ai3_]);});
             });
   }
   function symbol_gloc(param, cont){
    var _ai0_ = 1;
    return caml_cps_call2
            (Stdlib_Parsing[6],
             0,
             function(_ai1_){
              return caml_cps_call2
                      (Stdlib_Parsing[5],
                       0,
                       function(_ai2_){return cont([0, _ai2_, _ai1_, _ai0_]);});
             });
   }
   function rhs_loc(n, cont){
    var _aiX_ = 0;
    return caml_cps_call2
            (Stdlib_Parsing[8],
             n,
             function(_aiY_){
              return caml_cps_call2
                      (Stdlib_Parsing[7],
                       n,
                       function(_aiZ_){return cont([0, _aiZ_, _aiY_, _aiX_]);});
             });
   }
   function rhs_interval(m, n, cont){
    var _aiU_ = 0;
    return caml_cps_call2
            (Stdlib_Parsing[8],
             n,
             function(_aiV_){
              return caml_cps_call2
                      (Stdlib_Parsing[7],
                       m,
                       function(_aiW_){return cont([0, _aiW_, _aiV_, _aiU_]);});
             });
   }
   function get_pos_info(pos, cont){
    return cont([0, pos[1], pos[2], pos[4] - pos[3] | 0]);
   }
   function mkloc(txt, loc, cont){return cont([0, txt, loc]);}
   function mknoloc(txt, cont){return cont([0, txt, none]);}
   var
    input_name = [0, cst_none$1],
    input_lexbuf = [0, 0],
    input_phrase_buffer = [0, 0],
    status = [0, 0],
    num_loc_lines = [0, 0];
   function reset$2(param, cont){num_loc_lines[1] = 0; return cont(0);}
   function echo_eof(param, cont){
    return caml_cps_call2
            (Stdlib[47],
             0,
             function(_aiT_){num_loc_lines[1]++; return cont(0);});
   }
   function setup_colors(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[52][7],
             Dynlink_compilerlibs_Clflags[157][1],
             cont);
   }
   function rewrite_absolute_path(path, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[59],
             0,
             function(match){
              if(! match) return cont(path);
              var map = match[1];
              return caml_cps_call3
                      (Dynlink_compilerlibs_Build_pat[8], map, path, cont);
             });
   }
   function absolute_path(s, cont){
    return caml_cps_call2
            (Stdlib_Filename[5],
             s,
             function(_aiM_){
              function _aiO_(s){
               function aux(s, cont){
                function _aiQ_(s){
                 return caml_cps_call2
                         (Stdlib_Filename[13],
                          s,
                          function(base){
                           return caml_cps_call2
                                   (Stdlib_Filename[14],
                                    s,
                                    function(dir){
                                     return caml_string_equal(dir, s)
     ? cont(dir)
     : caml_string_equal
        (base, Stdlib_Filename[1])
       ? caml_cps_exact_call1(_aiQ_, dir)
       : caml_string_equal
          (base, Stdlib_Filename[2])
         ? caml_cps_exact_call2
           (aux,
            dir,
            function(_aiR_){
             return caml_cps_call2(Stdlib_Filename[14], _aiR_, cont);
            })
         : caml_cps_exact_call2
           (aux,
            dir,
            function(_aiS_){
             return caml_cps_call3(Stdlib_Filename[4], _aiS_, base, cont);
            });
                                    });
                          });
                }
                return _aiQ_(s);
               }
               return caml_cps_exact_call2(aux, s, cont);
              }
              if(! _aiM_) return _aiO_(s);
              var _aiN_ = runtime.caml_sys_getcwd(0);
              return caml_cps_call3
                      (Stdlib_Filename[4],
                       _aiN_,
                       s,
                       function(_aiP_){
                        return caml_cps_exact_call2
                                (rewrite_absolute_path, _aiP_, _aiO_);
                       });
             });
   }
   function show_filename(file, cont){
    return Dynlink_compilerlibs_Clflags[37][1]
            ? caml_cps_exact_call2(absolute_path, file, cont)
            : cont(file);
   }
   function print_filename(ppf, file, cont){
    return caml_cps_exact_call2
            (show_filename,
             file,
             function(_aiL_){
              return caml_cps_call3(Stdlib_Format[13], ppf, _aiL_, cont);
             });
   }
   function print_loc(ppf, loc, cont){
    return caml_cps_exact_call2
            (setup_colors,
             undef,
             function(_aiu_){
              var
               file =
                 caml_string_equal(loc[1][1], cst$117)
                  ? input_name[1]
                  : loc[1][1],
               startline = loc[1][2],
               endline = loc[2][2],
               startchar = loc[1][4] - loc[1][3] | 0,
               endchar = loc[2][4] - loc[2][3] | 0,
               first = [0, 1];
              function capitalize(s, cont){
               return first[1]
                       ? (first[1] = 0, caml_cps_call2(Stdlib_String[27], s, cont))
                       : cont(s);
              }
              function comma(param, cont){
               return first[1]
                       ? cont(undef)
                       : caml_cps_call3(Stdlib_Format[135], ppf, _eZ_, cont);
              }
              return caml_cps_call3
                      (Stdlib_Format[135],
                       ppf,
                       _e0_,
                       function(_aiv_){
                        a:
                        {
                         if
                          (caml_string_notequal(file, cst$117)
                           && caml_string_notequal(file, cst_toplevel)){
                          if(caml_string_notequal(file, cst_none$3)){var _aiw_ = 1; break a;}
                          var _aiw_ = 1;
                          break a;
                         }
                         var _aiw_ = 0;
                        }
                        function _aix_(_aiz_){
                         return caml_cps_exact_call2
                                 (comma,
                                  undef,
                                  function(_aiA_){
                                   var
                                    startline$0 = 0 < startline ? startline : 1,
                                    endline$0 = 0 < endline ? endline : startline$0;
                                   function _aiB_(_aiG_){
                                    var
                                     _aiE_ = -1 !== startchar ? 1 : 0,
                                     _aiF_ = _aiE_ ? -1 !== endchar ? 1 : 0 : _aiE_;
                                    function _aiH_(_aiK_){
                                     return caml_cps_call3(Stdlib_Format[135], ppf, _e4_, cont);
                                    }
                                    return _aiF_
    ? caml_cps_exact_call2
      (comma,
       undef,
       function(_aiI_){
        return caml_cps_exact_call2
                (capitalize,
                 cst_characters,
                 function(_aiJ_){
                  return caml_cps_call6
                          (Stdlib_Format[135],
                           ppf,
                           _e3_,
                           _aiJ_,
                           startchar,
                           endchar,
                           _aiH_);
                 });
       })
    : _aiH_(0);
                                   }
                                   return startline$0 === endline$0
   ? caml_cps_exact_call2
     (capitalize,
      cst_line,
      function(_aiC_){
       return caml_cps_call5
               (Stdlib_Format[135], ppf, _e2_, _aiC_, startline$0, _aiB_);
      })
   : caml_cps_exact_call2
     (capitalize,
      cst_lines,
      function(_aiD_){
       return caml_cps_call6
               (Stdlib_Format[135],
                ppf,
                _e5_,
                _aiD_,
                startline$0,
                endline$0,
                _aiB_);
      });
                                  });
                        }
                        return _aiw_
                                ? caml_cps_exact_call2
                                  (capitalize,
                                   cst_file,
                                   function(_aiy_){
                                    return caml_cps_call6
    (Stdlib_Format[135],
     ppf,
     _e1_,
     _aiy_,
     print_filename,
     file,
     _aix_);
                                   })
                                : _aix_(0);
                       });
             });
   }
   function print_locs(ppf, locs, cont){
    return caml_cps_call5
            (Stdlib_Format[129],
             [0,
              function(ppf, param, cont){
               return caml_cps_call3(Stdlib_Format[135], ppf, _e6_, cont);
              }],
             print_loc,
             ppf,
             locs,
             cont);
   }
   function mem(iset, pos, cont){
    return caml_cps_call3
            (Stdlib_List[33],
             function(param, cont){
              var
               e = param[2][2],
               s = param[1][2],
               _ais_ = caml_lessequal(s, pos),
               _ait_ = _ais_ ? caml_lessequal(pos, e) : _ais_;
              return cont(_ait_);
             },
             iset,
             cont);
   }
   function highlight_terminfo(lb, ppf, locs, cont){
    caml_push_trap
     (function(_air_){
       if(_air_ === Stdlib[3]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_air_, 0));
      });
    return caml_cps_call3
            (Stdlib_Format[38],
             ppf,
             0,
             function(_ah3_){
              var pos0 = - lb[4] | 0;
              if(pos0 < 0){
               var _ah4_ = Stdlib[3], raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_ah4_, 1));
              }
              var lines = [0, num_loc_lines[1]], _ah5_ = lb[3] - 1 | 0;
              if(_ah5_ >= pos0){
               var i = pos0;
               for(;;){
                if(10 === caml_bytes_get(lb[2], i)) lines[1]++;
                var _ah6_ = i + 1 | 0;
                if(_ah5_ === i) break;
                var i = _ah6_;
               }
              }
              return caml_cps_call2
                      (Dynlink_compilerlibs_Terminfo[2],
                       Stdlib[39],
                       function(_ah7_){
                        if((_ah7_ - 2 | 0) > lines[1])
                         return caml_cps_call2
                                 (Stdlib[63],
                                  Stdlib[39],
                                  function(_ah9_){
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Terminfo[3],
    Stdlib[39],
    lines[1],
    function(_ah__){
     var bol = [0, 0];
     return caml_cps_call2
             (Stdlib[42],
              cst$64,
              function(_ah$_){
               var _aib_ = (lb[3] - pos0 | 0) - 1 | 0;
               function _aid_(pos){
                function _aih_(){
                 return caml_cps_call3
                         (Stdlib_List[33],
                          function(loc, cont){return cont(pos === loc[1][4] ? 1 : 0);},
                          locs,
                          function(_aij_){
                           function _aik_(_ail_){
                            return caml_cps_call3
                                    (Stdlib_List[33],
                                     function(loc, cont){return cont(pos === loc[2][4] ? 1 : 0);},
                                     locs,
                                     function(_aim_){
                                      function _ain_(_aio_){
                                       var c = caml_bytes_get(lb[2], pos + pos0 | 0);
                                       return caml_cps_call2
       (Stdlib[41],
        c,
        function(_aip_){
         bol[1] = 10 === c ? 1 : 0;
         var _aiq_ = pos + 1 | 0;
         return _aib_ !== pos
                 ? caml_cps_exact_call1(_aid_, _aiq_)
                 : _aic_();
        });
                                      }
                                      return _aim_
      ? caml_cps_call3
        (Dynlink_compilerlibs_Terminfo[4], Stdlib[39], 0, _ain_)
      : _ain_(0);
                                     });
                           }
                           return _aij_
                                   ? caml_cps_call3
                                     (Dynlink_compilerlibs_Terminfo[4], Stdlib[39], 1, _aik_)
                                   : _aik_(0);
                          });
                }
                return bol[1]
                        ? caml_cps_call2
                          (Stdlib[42],
                           cst$65,
                           function(_aii_){bol[1] = 0; return _aih_();})
                        : _aih_();
               }
               function _aic_(){
                return caml_cps_call3
                        (Dynlink_compilerlibs_Terminfo[4],
                         Stdlib[39],
                         0,
                         function(_aie_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Terminfo[5],
                                   Stdlib[39],
                                   num_loc_lines[1],
                                   function(_aif_){
                                    return caml_cps_call2
    (Stdlib[63],
     Stdlib[39],
     function(_aig_){caml_pop_trap(); return cont(_aig_);});
                                   });
                         });
               }
               var _aia_ = 0;
               return _aib_ < 0 ? _aic_() : _aid_(_aia_);
              });
    });
                                  });
                        var _ah8_ = Stdlib[3], raise = caml_pop_trap();
                        return raise(caml_maybe_attach_backtrace(_ah8_, 1));
                       });
             });
   }
   function lines_around(start_pos, end_pos, seek, read_char, cont){
    return caml_cps_call2
            (seek,
             start_pos[3],
             function(_ahW_){
              var
               lines = [0, 0],
               bol = [0, start_pos[3]],
               cur = [0, start_pos[3]];
              return caml_cps_call2
                      (Stdlib_Buffer[1],
                       80,
                       function(b){
                        function add_line(param, cont){
                         function _ah1_(){return cont(undef);}
                         return bol[1] < cur[1]
                                 ? caml_cps_call2
                                   (Stdlib_Buffer[2],
                                    b,
                                    function(text){
                                     return caml_cps_call2
     (Stdlib_Buffer[8],
      b,
      function(_ah2_){
       lines[1] = [0, [0, text, bol[1]], lines[1]];
       bol[1] = cur[1];
       return _ah1_();
      });
                                    })
                                 : _ah1_();
                        }
                        function _ahX_(_ahZ_){
                         function _ahY_(_ah0_){
                          return caml_cps_call2(Stdlib_List[9], lines[1], cont);
                         }
                         return end_pos[4] <= bol[1]
                                 ? _ahY_(0)
                                 : caml_cps_exact_call2
                                   (read_char,
                                    undef,
                                    function(match){
                                     if(! match)
                                      return caml_cps_exact_call2(add_line, undef, _ahY_);
                                     var c = match[1];
                                     cur[1]++;
                                     return 10 === c
     ? caml_cps_exact_call2(add_line, undef, _ahX_)
     : 13
       === c
       ? caml_cps_exact_call1(_ahX_, 0)
       : caml_cps_call3(Stdlib_Buffer[12], b, c, _ahX_);
                                    });
                        }
                        return _ahX_(0);
                       });
             });
   }
   function msg(opt, fmt, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    return caml_cps_call3
            (Stdlib_Format[143],
             function(txt, cont){return cont([0, txt, loc]);},
             fmt,
             cont);
   }
   function is_quotable_loc(loc, cont){
    var
     _ahR_ = -1 === loc[1][4] ? 1 : 0,
     _ahS_ = _ahR_ || (-1 === loc[2][4] ? 1 : 0),
     _ahT_ = 1 - _ahS_;
    if(_ahT_)
     var
      _ahU_ = caml_string_equal(loc[1][1], input_name[1]),
      _ahV_ = _ahU_ ? caml_string_equal(loc[2][1], input_name[1]) : _ahU_;
    else
     var _ahV_ = _ahT_;
    return cont(_ahV_);
   }
   function pp_loc(self, report, ppf, loc, cont){
    var _ag0_ = report[1];
    if(typeof _ag0_ === "number")
     var highlight_tag = cst_error;
    else
     switch(_ag0_[0]){
       case 1:
       case 3:
        var highlight_tag = cst_error; break;
       default: var highlight_tag = cst_warning;
     }
    function highlight(ppf, loc, cont){
     var match = Dynlink_compilerlibs_Clflags[159][1];
     if(match)
      var setting = match[1], match$0 = setting;
     else
      var match$0 = Dynlink_compilerlibs_Misc[53][1];
     return match$0
             ? cont(0)
             : caml_cps_exact_call2
               (is_quotable_loc,
                loc,
                function(_ag1_){
                 if(! _ag1_) return cont(_ag1_);
                 var locs = [0, loc, 0], max_lines = 10;
                 return caml_cps_call3
                         (Stdlib_List[22],
                          function(loc, cont){
                           var e = loc[2], s = loc[1];
                           if(-1 !== s[4] && -1 !== e[4])
                            return cont([0, [0, [0, s, s[4]], [0, e, e[4] - 1 | 0]]]);
                           return cont(0);
                          },
                          locs,
                          function(intervals){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    function(param, cont){
                                     var
                                      _ahQ_ = param[2],
                                      y = _ahQ_[2],
                                      b = _ahQ_[1],
                                      match = param[1],
                                      x = match[2],
                                      a = match[1];
                                     return runtime.caml_greaterthan(x, y)
     ? cont(0)
     : cont([0, [0, [0, a, x], 83], [0, [0, [0, b, y], 69], 0]]);
                                    },
                                    intervals,
                                    function(_ag2_){
                                     return caml_cps_call2
     (Stdlib_List[14],
      _ag2_,
      function(_ag3_){
       return caml_cps_call2
               (Stdlib_List[56],
                function(param, _ahO_, cont){
                 var
                  k = _ahO_[2],
                  y = _ahO_[1][2],
                  k$0 = param[2],
                  x = param[1][2];
                 function kn(param){return 83 <= param ? 0 : 1;}
                 var _ahP_ = [0, y, kn(k)];
                 return cont(caml_compare([0, x, kn(k$0)], _ahP_));
                },
                function(_ag4_){
                 return caml_cps_call2
                         (_ag4_,
                          _ag3_,
                          function(pos){
                           return caml_cps_call4
                                   (Stdlib_List[25],
                                    function(param, _ahM_, cont){
                                     var
                                      kind = _ahM_[2],
                                      a = _ahM_[1],
                                      acc = param[2],
                                      nesting = param[1];
                                     if(83 <= kind){
                                      if(typeof nesting === "number")
                                       return cont([0, [0, -764103652, [0, a, 0]], acc]);
                                      var match = nesting[2], n = match[2], s = match[1];
                                      return cont([0, [0, -764103652, [0, s, n + 1 | 0]], acc]);
                                     }
                                     if(typeof nesting === "number"){
                                      var raise = caml_pop_trap();
                                      return raise
      (caml_maybe_attach_backtrace([0, Assert_failure, _e8_], 1));
                                     }
                                     var _ahN_ = nesting[2], s$0 = _ahN_[1];
                                     if(0 === _ahN_[2])
                                      return cont([0, 867153157, [0, [0, s$0, a], acc]]);
                                     var n$0 = _ahN_[2];
                                     return cont
     ([0, [0, -764103652, [0, s$0, n$0 - 1 | 0]], acc]);
                                    },
                                    _e7_,
                                    pos,
                                    function(match){
                                     var acc = match[2], nesting = match[1];
                                     if(867153157 === nesting)
                                      return caml_cps_call2
      (Stdlib_List[9],
       acc,
       function(iset){
        function _ag5_(match){
         if(! match) return cont(0);
         var
          _ag__ = match[1],
          rightmost = _ag__[2][1],
          start_pos = _ag__[1][1];
         function from_file(param, cont){
          var param$0 = input_name[1];
          a:
          {
           if
            (caml_string_notequal(param$0, cst$117)
             &&
              caml_string_notequal(param$0, cst_toplevel)
              && caml_string_notequal(param$0, cst_none$3)){var _ahG_ = 1; break a;}
           var _ahG_ = 0;
          }
          if(! _ahG_) return cont(0);
          var filename = input_name[1];
          caml_push_trap
           (function(_ahL_){
             if(_ahL_[1] === Stdlib[11]) return cont(0);
             var raise = caml_pop_trap();
             return raise(caml_maybe_attach_backtrace(_ahL_, 0));
            });
          return caml_cps_call2
                  (Stdlib[80],
                   filename,
                   function(cin){
                    function read_char(param, cont){
                     caml_push_trap
                      (function(_ahK_){
                        if(_ahK_ === Stdlib[12]) return cont(0);
                        var raise = caml_pop_trap();
                        return raise(caml_maybe_attach_backtrace(_ahK_, 0));
                       });
                     return caml_cps_call2
                             (Stdlib[82],
                              cin,
                              function(_ahJ_){caml_pop_trap(); return cont([0, _ahJ_]);});
                    }
                    return caml_cps_call2
                            (Stdlib[90],
                             cin,
                             function(_ahH_){
                              return caml_cps_exact_call5
                                      (lines_around,
                                       start_pos,
                                       rightmost,
                                       _ahH_,
                                       read_char,
                                       function(lines){
return caml_cps_call2
        (Stdlib[93],
         cin,
         function(_ahI_){caml_pop_trap(); return cont(lines);});
                                       });
                             });
                   });
         }
         var _ag$_ = input_lexbuf[1], _aha_ = input_phrase_buffer[1];
         function _ahc_(_ahf_){
          return caml_cps_call2
                  (Stdlib_List[19],
                   function(line, cont){
                    var
                     start_pos = line[2],
                     text = line[1],
                     end_pos =
                       (start_pos + caml_ml_string_length(text) | 0) - 1 | 0;
                    return caml_cps_call3
                            (Stdlib_List[40],
                             function(param, cont){
                              var
                               _ahF_ = param[2],
                               y = _ahF_[2],
                               b = _ahF_[1],
                               match = param[1],
                               x = match[2],
                               a = match[1];
                              if
                               (caml_lessequal(start_pos, x) && caml_lessequal(x, end_pos))
                               return cont([0, [0, a, x]]);
                              if
                               (caml_lessequal(start_pos, y) && caml_lessequal(y, end_pos))
                               return cont([0, [0, b, y]]);
                              return cont(0);
                             },
                             iset,
                             function(match){
                              if(match)
                               var p = match[1][1], line_nb = [0, p[2]];
                              else
                               var line_nb = 0;
                              return cont([0, line_nb, line]);
                             });
                   },
                   function(_ahg_){
                    return caml_cps_call2
                            (_ahg_,
                             _ahf_,
                             function(lines){
                              return caml_cps_call4
                                      (Stdlib_List[25],
                                       function(param, _ahD_, cont){
var
 lnum = _ahD_[1],
 consistent = param[3],
 offset = param[2],
 i = param[1];
if(! lnum) return cont([0, i + 1 | 0, offset, consistent]);
var n = lnum[1];
if(! offset)
 return cont([0, i + 1 | 0, [0, n - i | 0], consistent]);
var
 m = offset[1],
 _ahE_ = consistent ? n === (m + i | 0) ? 1 : 0 : consistent;
return cont([0, i + 1 | 0, offset, _ahE_]);
                                       },
                                       _e__,
                                       lines,
                                       function(match){
var consistent = match[3], offset = match[2];
function _ahh_(_ahi_){
 return caml_cps_call2
         (Stdlib_List[19],
          function(param, cont){
           var
            match = param[2],
            start_pos = match[2],
            text = match[1],
            lnum = param[1];
           return caml_cps_call4
                   (Stdlib_Option[8],
                    cst$66,
                    Stdlib_Int[12],
                    lnum,
                    function(_ahC_){return cont([0, text, _ahC_, start_pos]);});
          },
          function(_ahj_){
           return caml_cps_call2
                   (_ahj_,
                    _ahi_,
                    function(lines){
                     return caml_cps_call3
                             (Stdlib_Format[135],
                              ppf,
                              _e$_,
                              function(_ahk_){
                               function _ahm_(_ahB_){
                                return caml_cps_call3(Stdlib_Format[135], ppf, _fb_, cont);
                               }
                               if(! lines) return _ahm_(0);
                               var _ahl_ = lines[1], line = _ahl_[1];
                               if(caml_string_notequal(line, cst$117)){
                                if(! lines[2]){
                                 var line_start_cnum = _ahl_[3], line_nb = _ahl_[2];
                                 return caml_cps_call5
 (Stdlib_Format[135],
  ppf,
  _fc_,
  line_nb,
  line,
  function(_ahq_){
   return caml_cps_call5
           (Stdlib_Format[135],
            ppf,
            _fd_,
            caml_ml_string_length(line_nb),
            cst$67,
            function(_ahr_){
             return caml_cps_call3
                     (Stdlib_String[30],
                      function(i, c, cont){
                       var pos = line_start_cnum + i | 0;
                       return caml_cps_call3
                               (Stdlib_List[40],
                                function(param, cont){
                                 var match = param[1], x = match[2], a = match[1];
                                 return caml_equal(pos, x) ? cont([0, a]) : cont(0);
                                },
                                iset,
                                function(_aht_){
                                 function _ahu_(_ahv_){
                                  return caml_cps_exact_call3
  (mem,
   iset,
   pos,
   function(_ahw_){
    function _ahx_(_ahy_){
     return caml_cps_call3
             (Stdlib_List[40],
              function(param, cont){
               var match = param[2], y = match[2], b = match[1];
               return caml_equal(pos, y) ? cont([0, b]) : cont(0);
              },
              iset,
              function(_ahz_){
               var _ahA_ = 0 !== _ahz_ ? 1 : 0;
               return _ahA_
                       ? caml_cps_call3(Stdlib_Format[135], ppf, _ff_, cont)
                       : cont(_ahA_);
              });
    }
    return _ahw_
            ? caml_cps_call3(Stdlib_Format[23], ppf, 94, _ahx_)
            : pos
              < rightmost[4]
              ? 9
                === c
                ? caml_cps_call3(Stdlib_Format[23], ppf, 9, _ahx_)
                : caml_cps_call3(Stdlib_Format[23], ppf, 32, _ahx_)
              : _ahx_(0);
   });
                                 }
                                 return 0 !== _aht_
 ? caml_cps_call4
   (Stdlib_Format[135], ppf, _fe_, highlight_tag, _ahu_)
 : _ahu_(0);
                                });
                      },
                      line,
                      function(_ahs_){
                       return caml_cps_call3(Stdlib_Format[135], ppf, _fg_, _ahm_);
                      });
            });
  });
                                }
                               }
                               else if(! lines[2]) return _ahm_(0);
                               return caml_cps_call3
                                       (Stdlib_List[19],
function(param, cont){
 var
  line_start_cnum = param[3],
  line_nb = param[2],
  line = param[1];
 return caml_cps_call3
         (Stdlib_String[18],
          function(i, car, cont){
           return caml_cps_exact_call3
                   (mem,
                    iset,
                    line_start_cnum + i | 0,
                    function(_ahp_){return _ahp_ ? cont(car) : cont(46);});
          },
          line,
          function(line){return cont([0, line_nb, line]);});
},
lines,
function(_ahn_){
 return caml_cps_call4
         (Dynlink_compilerlibs_Misc[56],
          _fa_,
          [0, max_lines],
          ppf,
          function(_aho_){return caml_cps_call2(_aho_, _ahn_, _ahm_);});
});
                              });
                    });
          });
}
if(! offset) return _ahh_(lines);
if(! consistent) return _ahh_(lines);
var m = offset[1];
return caml_cps_call3
        (Stdlib_List[20],
         function(i, param, cont){
          var line = param[2];
          return cont([0, [0, m + i | 0], line]);
         },
         lines,
         _ahh_);
                                       });
                             });
                   });
         }
         var _ahb_ = input_name[1];
         if(_aha_){
          var pb = _aha_[1];
          if(! caml_string_notequal(_ahb_, cst_toplevel)){
           var
            pos$0 = [0, 0],
            seek$0 =
              function(n, cont){pos$0[1] = n; return cont(undef);},
            read_char$0 =
              function(param, cont){
               return caml_cps_call2
                       (Stdlib_Buffer[7],
                        pb,
                        function(_ahe_){
                         return _ahe_ <= pos$0[1]
                                 ? cont(0)
                                 : caml_cps_call3
                                   (Stdlib_Buffer[6],
                                    pb,
                                    pos$0[1],
                                    function(c){pos$0[1]++; return cont([0, c]);});
                        });
              };
           return caml_cps_exact_call5
                   (lines_around,
                    start_pos,
                    rightmost,
                    seek$0,
                    read_char$0,
                    function(lines){return lines ? _ahc_(lines) : _ahc_(0);});
          }
         }
         if(! _ag$_)
          return caml_cps_exact_call2(from_file, undef, _ahc_);
         var lb = _ag$_[1];
         function rel(n){return n - lb[4] | 0;}
         function _ahd_(lines){
          return lines
                  ? _ahc_(lines)
                  : caml_cps_exact_call2(from_file, undef, _ahc_);
         }
         if(0 > rel(start_pos[3])) return _ahd_(0);
         var pos = [0, 0];
         function seek(n, cont){pos[1] = rel(n); return cont(undef);}
         function read_char(param, cont){
          if(lb[3] <= pos[1]) return cont(0);
          var c = caml_bytes_get(lb[2], pos[1]);
          pos[1]++;
          return cont([0, c]);
         }
         return caml_cps_exact_call5
                 (lines_around, start_pos, rightmost, seek, read_char, _ahd_);
        }
        return 0 === iset
                ? _ag5_(0)
                : caml_cps_call2
                  (Stdlib_List[9],
                   iset,
                   function(_ag6_){
                    return caml_cps_call2
                            (Stdlib_List[5],
                             _ag6_,
                             function(_ag7_){
                              var _ag8_ = _ag7_[2];
                              return caml_cps_call2
                                      (Stdlib_List[5],
                                       iset,
                                       function(_ag9_){return _ag5_([0, [0, _ag9_[1], _ag8_]]);});
                             });
                   });
       });
                                     var raise = caml_pop_trap();
                                     return raise
     (caml_maybe_attach_backtrace([0, Assert_failure, _e9_], 1));
                                    });
                          });
                });
      });
                                    });
                          });
                });
    }
    return caml_cps_call7
            (Stdlib_Format[135],
             ppf,
             _fh_,
             print_loc,
             loc,
             highlight,
             loc,
             cont);
   }
   function pp_txt(ppf, txt, cont){
    return caml_cps_call4(Stdlib_Format[135], ppf, _fi_, txt, cont);
   }
   function pp(self, ppf, report, cont){
    return caml_cps_exact_call2
            (setup_colors,
             undef,
             function(_agK_){
              return caml_cps_call3
                      (Stdlib_Format[102],
                       ppf,
                       0,
                       function(out_functions){
                        function out_string(str, start, len, cont){
                         var i = start, c = 0;
                         for(;;){
                          if(i === (start + len | 0)){
                           num_loc_lines[1] = num_loc_lines[1] + c | 0;
                           return caml_cps_call4
                                   (out_functions[1], str, start, len, cont);
                          }
                          if(10 === caml_string_get(str, i))
                           var c$0 = c + 1 | 0, i$0 = i + 1 | 0, i = i$0, c = c$0;
                          else
                           var i$1 = i + 1 | 0, i = i$1;
                         }
                        }
                        return caml_cps_call3
                                (Stdlib_Format[100],
                                 ppf,
                                 [0,
                                  out_string,
                                  out_functions[2],
                                  out_functions[3],
                                  out_functions[4],
                                  out_functions[5]],
                                 function(_agL_){
                                  var _agM_ = 0, _agN_ = Stdlib_Format[67], _agO_ = report[3];
                                  return caml_cps_call3
  (self[5],
   self,
   report,
   function(_agP_){
    var _agQ_ = report[2][1];
    return caml_cps_call3
            (self[4],
             self,
             report,
             function(_agR_){
              var _agS_ = 0, _agT_ = Stdlib_Format[69], _agU_ = report[1];
              return caml_cps_call3
                      (self[2],
                       self,
                       report,
                       function(_agV_){
                        var _agW_ = report[2][2];
                        return caml_cps_call3
                                (self[3],
                                 self,
                                 report,
                                 function(_agX_){
                                  return caml_cps_call17
  (Stdlib_Format[135],
   ppf,
   _fj_,
   Stdlib_Format[65],
   0,
   _agX_,
   _agW_,
   _agV_,
   _agU_,
   _agT_,
   _agS_,
   _agR_,
   _agQ_,
   _agP_,
   _agO_,
   _agN_,
   _agM_,
   function(_agY_){
    return caml_cps_call3
            (Stdlib_Format[38],
             ppf,
             0,
             function(_agZ_){
              return caml_cps_call3
                      (Stdlib_Format[100], ppf, out_functions, cont);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function pp_report_kind(self, param, ppf, _agJ_, cont){
    if(typeof _agJ_ === "number")
     return caml_cps_call3(Stdlib_Format[135], ppf, _fk_, cont);
    switch(_agJ_[0]){
      case 0:
       var w = _agJ_[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _fl_, w, cont);
      case 1:
       var w$0 = _agJ_[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _fm_, w$0, cont);
      case 2:
       var w$1 = _agJ_[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _fn_, w$1, cont);
      default:
       var w$2 = _agJ_[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _fo_, w$2, cont);
    }
   }
   function pp_main_loc(self, report, ppf, loc, cont){
    return caml_cps_exact_call5(pp_loc, undef, report, ppf, loc, cont);
   }
   function pp_main_txt(self, param, ppf, txt, cont){
    return caml_cps_exact_call3(pp_txt, ppf, txt, cont);
   }
   function pp_submsgs(self, report, ppf, msgs, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(msg, cont){
              return caml_cps_call3
                      (self[6],
                       self,
                       report,
                       function(_agI_){
                        return caml_cps_call5
                                (Stdlib_Format[135], ppf, _fp_, _agI_, msg, cont);
                       });
             },
             msgs,
             cont);
   }
   function pp_submsg(self, report, ppf, param, cont){
    var loc = param[2], txt = param[1];
    return caml_cps_call3
            (self[8],
             self,
             report,
             function(_agG_){
              return caml_cps_call3
                      (self[7],
                       self,
                       report,
                       function(_agH_){
                        return caml_cps_call7
                                (Stdlib_Format[135],
                                 ppf,
                                 _fq_,
                                 _agH_,
                                 loc,
                                 _agG_,
                                 txt,
                                 cont);
                       });
             });
   }
   function pp_submsg_loc(self, report, ppf, loc, cont){
    var _agF_ = 1 - loc[3];
    return _agF_
            ? caml_cps_exact_call5(pp_loc, undef, report, ppf, loc, cont)
            : cont(_agF_);
   }
   function pp_submsg_txt(self, param, ppf, loc, cont){
    return caml_cps_exact_call3(pp_txt, ppf, loc, cont);
   }
   var
    batch_mode_printer =
      [0,
       pp,
       pp_report_kind,
       pp_main_loc,
       pp_main_txt,
       pp_submsgs,
       pp_submsg,
       pp_submsg_loc,
       pp_submsg_txt];
   function terminfo_toplevel_printer(lb, cont){
    function pp(self, ppf, err, cont){
     return caml_cps_exact_call2
             (setup_colors,
              undef,
              function(_agD_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(param, cont){var loc = param[2]; return cont(loc);},
                        err[3],
                        function(sub_locs){
                         var all_locs = [0, err[2][2], sub_locs];
                         return caml_cps_call3
                                 (Stdlib_List[41],
                                  is_quotable_loc,
                                  all_locs,
                                  function(locs_highlighted){
                                   return caml_cps_exact_call4
   (highlight_terminfo,
    lb,
    ppf,
    locs_highlighted,
    function(_agE_){
     return caml_cps_call4
             (batch_mode_printer[1], self, ppf, err, cont);
    });
                                  });
                        });
              });
    }
    function pp_main_loc(param, _agC_, _agB_, _agA_, cont){return cont(0);}
    function pp_submsg_loc(param, _agy_, ppf, loc, cont){
     var _agz_ = 1 - loc[3];
     return _agz_
             ? caml_cps_call5
               (Stdlib_Format[135], ppf, _fr_, print_loc, loc, cont)
             : cont(_agz_);
    }
    return cont
            ([0,
              pp,
              batch_mode_printer[2],
              pp_main_loc,
              batch_mode_printer[4],
              batch_mode_printer[5],
              batch_mode_printer[6],
              pp_submsg_loc,
              batch_mode_printer[8]]);
   }
   function best_toplevel_printer(param, cont){
    function _agw_(){
     var match = input_lexbuf[1];
     if(2 <= status[1] && match){
      var lb = match[1];
      return caml_cps_exact_call2(terminfo_toplevel_printer, lb, cont);
     }
     return cont(batch_mode_printer);
    }
    return 0 === status[1]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Terminfo[1],
               Stdlib[39],
               function(_agx_){status[1] = _agx_; return _agw_();})
            : _agw_();
   }
   function default_report_printer(param, cont){
    return caml_string_equal(input_name[1], cst_toplevel)
            ? caml_cps_exact_call2(best_toplevel_printer, undef, cont)
            : cont(batch_mode_printer);
   }
   var report_printer = [0, default_report_printer];
   function print_report(ppf, report, cont){
    return caml_cps_call2
            (report_printer[1],
             0,
             function(printer){
              return caml_cps_call4(printer[1], printer, ppf, report, cont);
             });
   }
   function mkerror(loc, sub, txt){return [0, 0, [0, txt, loc], sub];}
   function errorf$0(opt, _agu_, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(_agu_) var sth$0 = _agu_[1], sub = sth$0; else var sub = 0;
    return caml_cps_call2
            (Stdlib_Format[143],
             function(_agv_, cont){return cont(mkerror(loc, sub, _agv_));},
             cont);
   }
   function error(opt, _agt_, msg_str, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(_agt_) var sth$0 = _agt_[1], sub = sth$0; else var sub = 0;
    return cont
            (mkerror
              (loc,
               sub,
               function(ppf, cont){
                return caml_cps_call3(Stdlib_Format[13], ppf, msg_str, cont);
               }));
   }
   function error_of_printer(opt, _ags_, pp, x, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(_ags_) var sth$0 = _ags_[1], sub = sth$0; else var sub = 0;
    return cont
            (mkerror
              (loc,
               sub,
               function(ppf, cont){return caml_cps_call3(pp, ppf, x, cont);}));
   }
   function error_of_printer_file(print, x, cont){
    var _agq_ = 0;
    return caml_cps_call2
            (in_file,
             input_name[1],
             function(_agr_){
              return caml_cps_exact_call5
                      (error_of_printer, [0, _agr_], _agq_, print, x, cont);
             });
   }
   function default_warning_alert_reporter(report, mk, loc, w, cont){
    return caml_cps_call2
            (report,
             w,
             function(match){
              if(typeof match === "number") return cont(0);
              var
               match$0 = match[2],
               sub_locs = match$0[4],
               is_error = match$0[3],
               message = match$0[2],
               id = match$0[1];
              function msg_of_str(str, ppf, cont){
               return caml_cps_call3(Stdlib_Format[13], ppf, str, cont);
              }
              var
               kind = mk(is_error, id),
               main =
                 [0,
                  function(_agp_, cont){
                   return caml_cps_exact_call3
                           (msg_of_str, message, _agp_, cont);
                  },
                  loc];
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(param, cont){
                        var sub_message = param[2], loc = param[1];
                        return cont
                                ([0,
                                  function(_ago_, cont){
                                   return caml_cps_exact_call3
   (msg_of_str, sub_message, _ago_, cont);
                                  },
                                  loc]);
                       },
                       sub_locs,
                       function(sub){return cont([0, [0, kind, main, sub]]);});
             });
   }
   function _fs_(is_error, id){return is_error ? [1, id] : [0, id];}
   var _ft_ = Dynlink_compilerlibs_Warnings[9];
   function default_warning_reporter(_agm_, _agn_, cont){
    return caml_cps_exact_call5
            (default_warning_alert_reporter, _ft_, _fs_, _agm_, _agn_, cont);
   }
   var warning_reporter = [0, default_warning_reporter];
   function report_warning(loc, w, cont){
    return caml_cps_call3(warning_reporter[1], loc, w, cont);
   }
   var formatter_for_warnings = [0, Stdlib_Format[112]];
   function print_warning(loc, ppf, w, cont){
    return caml_cps_exact_call3
            (report_warning,
             loc,
             w,
             function(match){
              if(! match) return cont(0);
              var report = match[1];
              return caml_cps_exact_call3(print_report, ppf, report, cont);
             });
   }
   function prerr_warning(loc, w, cont){
    return caml_cps_exact_call4
            (print_warning, loc, formatter_for_warnings[1], w, cont);
   }
   function _fu_(is_error, id){return is_error ? [3, id] : [2, id];}
   var _fv_ = Dynlink_compilerlibs_Warnings[10];
   function default_alert_reporter(_agk_, _agl_, cont){
    return caml_cps_exact_call5
            (default_warning_alert_reporter, _fv_, _fu_, _agk_, _agl_, cont);
   }
   var alert_reporter = [0, default_alert_reporter];
   function report_alert$0(loc, w, cont){
    return caml_cps_call3(alert_reporter[1], loc, w, cont);
   }
   function print_alert(loc, ppf, w, cont){
    return caml_cps_exact_call3
            (report_alert$0,
             loc,
             w,
             function(match){
              if(! match) return cont(0);
              var report = match[1];
              return caml_cps_exact_call3(print_report, ppf, report, cont);
             });
   }
   function prerr_alert(loc, w, cont){
    return caml_cps_exact_call4
            (print_alert, loc, formatter_for_warnings[1], w, cont);
   }
   function alert(opt, _agj_, kind, loc, message, cont){
    if(opt) var sth = opt[1], def = sth; else var def = none;
    if(_agj_) var sth$0 = _agj_[1], use = sth$0; else var use = none;
    return caml_cps_exact_call3
            (prerr_alert, loc, [0, kind, message, def, use], cont);
   }
   function deprecated(def, use, loc, message, cont){
    return caml_cps_exact_call6
            (alert, def, use, cst_deprecated$3, loc, message, cont);
   }
   function auto_include_alert(lib, cont){
    return caml_cps_call7
            (Stdlib_Printf[4],
             _fw_,
             lib,
             lib,
             lib,
             lib,
             lib,
             function(message){
              return caml_cps_call4
                      (Stdlib_Format[139],
                       _fx_,
                       Stdlib_Format[131],
                       message,
                       function(_agi_){
                        var
                         alert =
                           [0, cst_ocaml_deprecated_auto_incl, _agi_, none, none];
                        return caml_cps_exact_call3(prerr_alert, none, alert, cont);
                       });
             });
   }
   function deprecated_script_alert(program, cont){
    return caml_cps_call6
            (Stdlib_Printf[4],
             _fy_,
             program,
             program,
             program,
             program,
             function(message){
              return caml_cps_call4
                      (Stdlib_Format[139],
                       _fz_,
                       Stdlib_Format[131],
                       message,
                       function(_agh_){
                        var
                         alert = [0, cst_ocaml_deprecated_cli$0, _agh_, none, none];
                        return caml_cps_exact_call3(prerr_alert, none, alert, cont);
                       });
             });
   }
   var _fA_ = [0, 0];
   function register_error_of_exn(f, cont){
    _fA_[1] = [0, f, _fA_[1]];
    return cont(0);
   }
   var Already_displayed_error = Dynlink_compilerlibs_Warnings[11];
   function error_of_exn(exn, cont){
    if(exn === Already_displayed_error) return cont(_fB_);
    function _agg_(param){
     if(! param) return cont(0);
     var rest = param[2], f = param[1];
     return caml_cps_call2
             (f,
              exn,
              function(match){
               if(! match) return caml_cps_exact_call1(_agg_, rest);
               var error = match[1];
               return cont([0, [0, 17724, error]]);
              });
    }
    return _agg_(_fA_[1]);
   }
   caml_callback
    (register_error_of_exn,
     [function(param, cont){
       if(param[1] !== Stdlib[11]) return cont(0);
       var msg = param[2], _agc_ = 0;
       return caml_cps_call2
               (in_file,
                input_name[1],
                function(_agd_){
                 return caml_cps_exact_call3
                         (errorf$0,
                          [0, _agd_],
                          _agc_,
                          function(_age_){
                           return caml_cps_call3
                                   (_age_,
                                    _fC_,
                                    msg,
                                    function(_agf_){return cont([0, _agf_]);});
                          });
                });
      }]);
   function report_exception(ppf, exn, cont){
    function _agb_(exn, n){
     caml_push_trap
      (function(exn){
        if(0 < n){
         var n$0 = n - 1 | 0;
         return caml_cps_exact_call2(_agb_, exn, n$0);
        }
        var
         raise = caml_pop_trap(),
         exn$0 = caml_maybe_attach_backtrace(exn, 0);
        return raise(exn$0);
       });
     return caml_cps_exact_call2
             (error_of_exn,
              exn,
              function(val){
               caml_pop_trap();
               if(! val){
                var
                 raise = caml_pop_trap(),
                 exn$0 = caml_maybe_attach_backtrace(exn, 0);
                return raise(exn$0);
               }
               var match = val[1];
               if(typeof match === "number") return cont(0);
               var err = match[2];
               return caml_cps_exact_call3(print_report, ppf, err, cont);
              });
    }
    return _agb_(exn, 5);
   }
   var Error$0 = [248, cst_Dynlink_compilerlibs_Locat, caml_fresh_oo_id(0)];
   caml_callback
    (register_error_of_exn,
     [function(param, cont){
       if(param[1] !== Error$0) return cont(0);
       var e = param[2];
       return cont([0, e]);
      }]);
   function raise_errorf(opt, _af$_, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(_af$_) var sth$0 = _af$_[1], sub = sth$0; else var sub = 0;
    return caml_cps_call2
            (Stdlib_Format[143],
             function(txt, cont){
              var
               _aga_ = [0, Error$0, mkerror(loc, sub, txt)],
               raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_aga_, 1));
             },
             cont);
   }
   var
    Dynlink_compilerlibs_Location =
      [0,
       none,
       is_none,
       in_file,
       init$2,
       curr,
       symbol_rloc,
       symbol_gloc,
       rhs_loc,
       rhs_interval,
       get_pos_info,
       mknoloc,
       mkloc,
       input_name,
       input_lexbuf,
       input_phrase_buffer,
       echo_eof,
       reset$2,
       rewrite_absolute_path,
       absolute_path,
       show_filename,
       print_filename,
       print_loc,
       print_locs,
       highlight_terminfo,
       msg,
       batch_mode_printer,
       terminfo_toplevel_printer,
       best_toplevel_printer,
       print_report,
       report_printer,
       default_report_printer,
       report_warning,
       warning_reporter,
       default_warning_reporter,
       formatter_for_warnings,
       print_warning,
       prerr_warning,
       report_alert$0,
       alert_reporter,
       default_alert_reporter,
       print_alert,
       prerr_alert,
       deprecated,
       alert,
       auto_include_alert,
       deprecated_script_alert,
       error,
       errorf$0,
       error_of_printer,
       error_of_printer_file,
       register_error_of_exn,
       error_of_exn,
       Error$0,
       Already_displayed_error,
       raise_errorf,
       report_exception];
   caml_register_global
    (1412, Dynlink_compilerlibs_Location, "Dynlink_compilerlibs.Location");
   function flatten(lid$0, cont){
    var accu = 0, param = lid$0;
    for(;;)
     switch(param[0]){
       case 0:
        var s = param[1]; return cont([0, s, accu]);
       case 1:
        var
         s$0 = param[2],
         lid = param[1],
         accu$0 = [0, s$0, accu],
         accu = accu$0,
         param = lid;
        break;
       default:
        return caml_cps_call2
                (Dynlink_compilerlibs_Misc[1], cst_Longident_flat, cont);
     }
   }
   function last(param, cont){
    switch(param[0]){
      case 0:
       var s = param[1]; return cont(s);
      case 1:
       var s$0 = param[2]; return cont(s$0);
      default:
       return caml_cps_call2
               (Dynlink_compilerlibs_Misc[1], cst_Longident_last, cont);
    }
   }
   function split_at_dots(s, pos, cont){
    caml_push_trap
     (function(_af8_){
       if(_af8_ === Stdlib[8]){
        var _af9_ = 0;
        return caml_cps_call4
                (Stdlib_String[15],
                 s,
                 pos,
                 caml_ml_string_length(s) - pos | 0,
                 function(_af__){return cont([0, _af__, _af9_]);});
       }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_af8_, 0));
      });
    return caml_cps_call4
            (Stdlib_String[31],
             s,
             pos,
             46,
             function(dot){
              return caml_cps_exact_call3
                      (split_at_dots,
                       s,
                       dot + 1 | 0,
                       function(_af6_){
                        return caml_cps_call4
                                (Stdlib_String[15],
                                 s,
                                 pos,
                                 dot - pos | 0,
                                 function(_af7_){
                                  caml_pop_trap();
                                  return cont([0, _af7_, _af6_]);
                                 });
                       });
             });
   }
   function unflatten(l, cont){
    if(! l) return cont(0);
    var tl = l[2], hd = l[1];
    return caml_cps_call4
            (Stdlib_List[25],
             function(p, s, cont){return cont([1, p, s]);},
             [0, hd],
             tl,
             function(_af5_){return cont([0, _af5_]);});
   }
   function parse$0(s, cont){
    return caml_cps_exact_call3
            (split_at_dots,
             s,
             0,
             function(_af4_){
              return caml_cps_exact_call2
                      (unflatten,
                       _af4_,
                       function(match){
                        if(! match) return cont(_fD_);
                        var v = match[1];
                        return cont(v);
                       });
             });
   }
   var
    Dynlink_compilerlibs_Longident = [0, flatten, unflatten, last, parse$0];
   caml_register_global
    (1413, Dynlink_compilerlibs_Longident, "Dynlink_compilerlibs.Longident");
   var docstrings = [0, 0];
   function warn_bad_docstrings(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Warnings[5],
             _fE_,
             function(_af2_){
              return _af2_
                      ? caml_cps_call2
                        (Stdlib_List[9],
                         docstrings[1],
                         function(_af3_){
                          return caml_cps_call3
                                  (Stdlib_List[17],
                                   function(ds, cont){
                                    switch(ds[3]){
                                      case 0:
                                       return caml_cps_call3
       (Dynlink_compilerlibs_Location[37], ds[2], _fF_, cont);
                                      case 1:
                                       return cont(0);
                                      default:
                                       return 2 <= ds[4]
       ? caml_cps_call3
         (Dynlink_compilerlibs_Location[37], ds[2], _fG_, cont)
       : cont(0);
                                    }
                                   },
                                   _af3_,
                                   cont);
                         })
                      : cont(_af2_);
             });
   }
   function docstring(body, loc, cont){
    var ds = [0, body, loc, 0, 0];
    return cont(ds);
   }
   function register(ds, cont){
    docstrings[1] = [0, ds, docstrings[1]];
    return cont(0);
   }
   function docstring_body(ds, cont){return cont(ds[1]);}
   function docstring_loc(ds, cont){return cont(ds[2]);}
   var doc_loc = [0, cst_ocaml_doc, Dynlink_compilerlibs_Location[1]];
   function docs_attr(ds, cont){
    var
     body = ds[1],
     loc = ds[2],
     exp = [0, [1, [2, body, loc, 0]], loc, 0, 0],
     item = [0, [0, exp, 0], loc];
    return cont([0, doc_loc, [0, [0, item, 0]], loc]);
   }
   function add_docs_attrs(docs, attrs, cont){
    var _afV_ = docs[1];
    function _afW_(attrs){
     var _afY_ = docs[2];
     function _af0_(attrs){return cont(attrs);}
     if(! _afY_) return _af0_(attrs);
     var ds = _afY_[1];
     if(! caml_string_notequal(ds[1], cst$117)) return _af0_(attrs);
     var _afZ_ = 0;
     return caml_cps_exact_call2
             (docs_attr,
              ds,
              function(_af1_){
               return caml_cps_call3
                       (Stdlib[37], attrs, [0, _af1_, _afZ_], _af0_);
              });
    }
    if(! _afV_) return _afW_(attrs);
    var ds = _afV_[1];
    return caml_string_notequal(ds[1], cst$117)
            ? caml_cps_exact_call2
              (docs_attr,
               ds,
               function(_afX_){return _afW_([0, _afX_, attrs]);})
            : _afW_(attrs);
   }
   function add_info_attrs(info, attrs, cont){
    if(info){
     var ds = info[1];
     if(caml_string_notequal(ds[1], cst$117)){
      var _afT_ = 0;
      return caml_cps_exact_call2
              (docs_attr,
               ds,
               function(_afU_){
                return caml_cps_call3
                        (Stdlib[37], attrs, [0, _afU_, _afT_], cont);
               });
     }
    }
    return cont(attrs);
   }
   var text_loc = [0, cst_ocaml_text, Dynlink_compilerlibs_Location[1]];
   function text_attr(ds, cont){
    var
     body = ds[1],
     loc = ds[2],
     exp = [0, [1, [2, body, loc, 0]], loc, 0, 0],
     item = [0, [0, exp, 0], loc];
    return cont([0, text_loc, [0, [0, item, 0]], loc]);
   }
   function add_text_attrs(dsl, attrs, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(param, cont){
              return caml_string_notequal(param[1], cst$117)
                      ? cont(1)
                      : cont(0);
             },
             dsl,
             function(fdsl){
              return caml_cps_call3
                      (Stdlib_List[19],
                       text_attr,
                       fdsl,
                       function(_afS_){
                        return caml_cps_call3(Stdlib[37], _afS_, attrs, cont);
                       });
             });
   }
   function get_docstring(info, dsl){
    var param = dsl;
    for(;;){
     if(! param) return 0;
     var ds = param[1];
     if(1 !== ds[3]){var _afR_ = info ? 1 : 2; ds[3] = _afR_; return [0, ds];}
     var rest = param[2], param = rest;
    }
   }
   function get_docstrings(dsl, cont){
    var acc = 0, param = dsl;
    for(;;){
     if(! param) return caml_cps_call2(Stdlib_List[9], acc, cont);
     var ds = param[1];
     if(1 === ds[3])
      var rest = param[2], param = rest;
     else{
      var rest$0 = param[2];
      ds[3] = 2;
      var acc$0 = [0, ds, acc], acc = acc$0, param = rest$0;
     }
    }
   }
   function associate_docstrings(dsl, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(ds, cont){
              return ds[4] ? (ds[4] = 2, cont(0)) : (ds[4] = 1, cont(0));
             },
             dsl,
             cont);
   }
   var pre_table = caml_callback(Stdlib_Hashtbl[1], [0, 50]);
   function set_pre_docstrings(pos, dsl, cont){
    var _afQ_ = 0 !== dsl ? 1 : 0;
    return _afQ_
            ? caml_cps_call4(Stdlib_Hashtbl[5], pre_table, pos, dsl, cont)
            : cont(_afQ_);
   }
   function get_pre_docs(pos, cont){
    caml_push_trap
     (function(_afP_){
       if(_afP_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afP_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             pre_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (associate_docstrings,
                       dsl,
                       function(_afN_){
                        var _afO_ = get_docstring(0, dsl);
                        caml_pop_trap();
                        return cont(_afO_);
                       });
             });
   }
   function mark_pre_docs(pos, cont){
    caml_push_trap
     (function(_afM_){
       if(_afM_ === Stdlib[8]) return cont(undef);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afM_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             pre_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (associate_docstrings,
                       dsl,
                       function(_afL_){caml_pop_trap(); return cont(undef);});
             });
   }
   var post_table = caml_callback(Stdlib_Hashtbl[1], [0, 50]);
   function set_post_docstrings(pos, dsl, cont){
    var _afK_ = 0 !== dsl ? 1 : 0;
    return _afK_
            ? caml_cps_call4(Stdlib_Hashtbl[5], post_table, pos, dsl, cont)
            : cont(_afK_);
   }
   function get_post_docs(pos, cont){
    caml_push_trap
     (function(_afJ_){
       if(_afJ_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afJ_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             post_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (associate_docstrings,
                       dsl,
                       function(_afH_){
                        var _afI_ = get_docstring(0, dsl);
                        caml_pop_trap();
                        return cont(_afI_);
                       });
             });
   }
   function mark_post_docs(pos, cont){
    caml_push_trap
     (function(_afG_){
       if(_afG_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afG_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             post_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (associate_docstrings,
                       dsl,
                       function(_afF_){caml_pop_trap(); return cont(_afF_);});
             });
   }
   function get_info(pos, cont){
    caml_push_trap
     (function(_afE_){
       if(_afE_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afE_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             post_table,
             pos,
             function(dsl){
              var _afD_ = get_docstring(1, dsl);
              caml_pop_trap();
              return cont(_afD_);
             });
   }
   var floating_table = caml_callback(Stdlib_Hashtbl[1], [0, 50]);
   function set_floating_docstrings(pos, dsl, cont){
    var _afC_ = 0 !== dsl ? 1 : 0;
    return _afC_
            ? caml_cps_call4
              (Stdlib_Hashtbl[5], floating_table, pos, dsl, cont)
            : cont(_afC_);
   }
   function get_text(pos, cont){
    caml_push_trap
     (function(_afB_){
       if(_afB_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afB_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             floating_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (get_docstrings,
                       dsl,
                       function(_afA_){caml_pop_trap(); return cont(_afA_);});
             });
   }
   function get_post_text(pos, cont){
    caml_push_trap
     (function(_afz_){
       if(_afz_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afz_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             post_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (get_docstrings,
                       dsl,
                       function(_afy_){caml_pop_trap(); return cont(_afy_);});
             });
   }
   var pre_extra_table = caml_callback(Stdlib_Hashtbl[1], [0, 50]);
   function set_pre_extra_docstrings(pos, dsl, cont){
    var _afx_ = 0 !== dsl ? 1 : 0;
    return _afx_
            ? caml_cps_call4
              (Stdlib_Hashtbl[5], pre_extra_table, pos, dsl, cont)
            : cont(_afx_);
   }
   function get_pre_extra_text(pos, cont){
    caml_push_trap
     (function(_afw_){
       if(_afw_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_afw_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             pre_extra_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (get_docstrings,
                       dsl,
                       function(_afv_){caml_pop_trap(); return cont(_afv_);});
             });
   }
   var post_extra_table = caml_callback(Stdlib_Hashtbl[1], [0, 50]);
   function set_post_extra_docstrings(pos, dsl, cont){
    var _afu_ = 0 !== dsl ? 1 : 0;
    return _afu_
            ? caml_cps_call4
              (Stdlib_Hashtbl[5], post_extra_table, pos, dsl, cont)
            : cont(_afu_);
   }
   function get_post_extra_text(pos, cont){
    caml_push_trap
     (function(_aft_){
       if(_aft_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_aft_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             post_extra_table,
             pos,
             function(dsl){
              return caml_cps_exact_call2
                      (get_docstrings,
                       dsl,
                       function(_afs_){caml_pop_trap(); return cont(_afs_);});
             });
   }
   function symbol_docs(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[6],
             0,
             function(_afo_){
              return caml_cps_exact_call2
                      (get_post_docs,
                       _afo_,
                       function(_afp_){
                        return caml_cps_call2
                                (Stdlib_Parsing[5],
                                 0,
                                 function(_afq_){
                                  return caml_cps_exact_call2
  (get_pre_docs,
   _afq_,
   function(_afr_){return cont([0, _afr_, _afp_]);});
                                 });
                       });
             });
   }
   function symbol_docs_lazy(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[5],
             0,
             function(p1){
              return caml_cps_call2
                      (Stdlib_Parsing[6],
                       0,
                       function(p2){
                        return cont
                                ([246,
                                  function(param, cont){
                                   return caml_cps_exact_call2
   (get_post_docs,
    p2,
    function(_afm_){
     return caml_cps_exact_call2
             (get_pre_docs,
              p1,
              function(_afn_){return cont([0, _afn_, _afm_]);});
    });
                                  }]);
                       });
             });
   }
   function rhs_docs(pos1, pos2, cont){
    return caml_cps_call2
            (Stdlib_Parsing[8],
             pos2,
             function(_afi_){
              return caml_cps_exact_call2
                      (get_post_docs,
                       _afi_,
                       function(_afj_){
                        return caml_cps_call2
                                (Stdlib_Parsing[7],
                                 pos1,
                                 function(_afk_){
                                  return caml_cps_exact_call2
  (get_pre_docs,
   _afk_,
   function(_afl_){return cont([0, _afl_, _afj_]);});
                                 });
                       });
             });
   }
   function rhs_docs_lazy(pos1, pos2, cont){
    return caml_cps_call2
            (Stdlib_Parsing[7],
             pos1,
             function(p1){
              return caml_cps_call2
                      (Stdlib_Parsing[8],
                       pos2,
                       function(p2){
                        return cont
                                ([246,
                                  function(param, cont){
                                   return caml_cps_exact_call2
   (get_post_docs,
    p2,
    function(_afg_){
     return caml_cps_exact_call2
             (get_pre_docs,
              p1,
              function(_afh_){return cont([0, _afh_, _afg_]);});
    });
                                  }]);
                       });
             });
   }
   function mark_symbol_docs(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[5],
             0,
             function(_afd_){
              return caml_cps_exact_call2
                      (mark_pre_docs,
                       _afd_,
                       function(_afe_){
                        return caml_cps_call2
                                (Stdlib_Parsing[6],
                                 0,
                                 function(_aff_){
                                  return caml_cps_exact_call2(mark_post_docs, _aff_, cont);
                                 });
                       });
             });
   }
   function mark_rhs_docs(pos1, pos2, cont){
    return caml_cps_call2
            (Stdlib_Parsing[7],
             pos1,
             function(_afa_){
              return caml_cps_exact_call2
                      (mark_pre_docs,
                       _afa_,
                       function(_afb_){
                        return caml_cps_call2
                                (Stdlib_Parsing[8],
                                 pos2,
                                 function(_afc_){
                                  return caml_cps_exact_call2(mark_post_docs, _afc_, cont);
                                 });
                       });
             });
   }
   function symbol_info(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[6],
             0,
             function(_ae$_){
              return caml_cps_exact_call2(get_info, _ae$_, cont);
             });
   }
   function rhs_info(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[8],
             pos,
             function(_ae__){
              return caml_cps_exact_call2(get_info, _ae__, cont);
             });
   }
   function symbol_text(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[5],
             0,
             function(_ae9_){
              return caml_cps_exact_call2(get_text, _ae9_, cont);
             });
   }
   function symbol_text_lazy(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[5],
             0,
             function(pos){
              return cont
                      ([246,
                        function(_ae8_, cont){
                         return caml_cps_exact_call2(get_text, pos, cont);
                        }]);
             });
   }
   function rhs_text(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[7],
             pos,
             function(_ae7_){
              return caml_cps_exact_call2(get_text, _ae7_, cont);
             });
   }
   function rhs_post_text(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[8],
             pos,
             function(_ae6_){
              return caml_cps_exact_call2(get_post_text, _ae6_, cont);
             });
   }
   function rhs_text_lazy(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[7],
             pos,
             function(pos){
              return cont
                      ([246,
                        function(_ae5_, cont){
                         return caml_cps_exact_call2(get_text, pos, cont);
                        }]);
             });
   }
   function symbol_pre_extra_text(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[5],
             0,
             function(_ae4_){
              return caml_cps_exact_call2(get_pre_extra_text, _ae4_, cont);
             });
   }
   function symbol_post_extra_text(param, cont){
    return caml_cps_call2
            (Stdlib_Parsing[6],
             0,
             function(_ae3_){
              return caml_cps_exact_call2(get_post_extra_text, _ae3_, cont);
             });
   }
   function rhs_pre_extra_text(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[7],
             pos,
             function(_ae2_){
              return caml_cps_exact_call2(get_pre_extra_text, _ae2_, cont);
             });
   }
   function rhs_post_extra_text(pos, cont){
    return caml_cps_call2
            (Stdlib_Parsing[8],
             pos,
             function(_ae1_){
              return caml_cps_exact_call2(get_post_extra_text, _ae1_, cont);
             });
   }
   function symbol_docs$0(param, cont){
    var endpos = param[2], startpos = param[1];
    return caml_cps_exact_call2
            (get_post_docs,
             endpos,
             function(_aeZ_){
              return caml_cps_exact_call2
                      (get_pre_docs,
                       startpos,
                       function(_ae0_){return cont([0, _ae0_, _aeZ_]);});
             });
   }
   function symbol_docs_lazy$0(param, cont){
    var p2 = param[2], p1 = param[1];
    return cont
            ([246,
              function(param, cont){
               return caml_cps_exact_call2
                       (get_post_docs,
                        p2,
                        function(_aeX_){
                         return caml_cps_exact_call2
                                 (get_pre_docs,
                                  p1,
                                  function(_aeY_){return cont([0, _aeY_, _aeX_]);});
                        });
              }]);
   }
   function rhs_docs$0(pos1, pos2, cont){
    return caml_cps_exact_call2
            (get_post_docs,
             pos2,
             function(_aeV_){
              return caml_cps_exact_call2
                      (get_pre_docs,
                       pos1,
                       function(_aeW_){return cont([0, _aeW_, _aeV_]);});
             });
   }
   function rhs_docs_lazy$0(p1, p2, cont){
    return cont
            ([246,
              function(param, cont){
               return caml_cps_exact_call2
                       (get_post_docs,
                        p2,
                        function(_aeT_){
                         return caml_cps_exact_call2
                                 (get_pre_docs,
                                  p1,
                                  function(_aeU_){return cont([0, _aeU_, _aeT_]);});
                        });
              }]);
   }
   function mark_symbol_docs$0(param, cont){
    var endpos = param[2], startpos = param[1];
    return caml_cps_exact_call2
            (mark_pre_docs,
             startpos,
             function(_aeR_){
              return caml_cps_exact_call2
                      (mark_post_docs, endpos, function(_aeS_){return cont(0);});
             });
   }
   function mark_rhs_docs$0(pos1, pos2, cont){
    return caml_cps_exact_call2
            (mark_pre_docs,
             pos1,
             function(_aeP_){
              return caml_cps_exact_call2
                      (mark_post_docs, pos2, function(_aeQ_){return cont(0);});
             });
   }
   function symbol_info$0(endpos, cont){
    return caml_cps_exact_call2(get_info, endpos, cont);
   }
   function rhs_info$0(endpos, cont){
    return caml_cps_exact_call2(get_info, endpos, cont);
   }
   function symbol_text$0(startpos, cont){
    return caml_cps_exact_call2(get_text, startpos, cont);
   }
   function symbol_text_lazy$0(startpos, cont){
    return cont
            ([246,
              function(_aeO_, cont){
               return caml_cps_exact_call2(get_text, startpos, cont);
              }]);
   }
   function rhs_text$0(pos, cont){
    return caml_cps_exact_call2(get_text, pos, cont);
   }
   function rhs_post_text$0(pos, cont){
    return caml_cps_exact_call2(get_post_text, pos, cont);
   }
   function rhs_text_lazy$0(pos, cont){
    return cont
            ([246,
              function(_aeN_, cont){
               return caml_cps_exact_call2(get_text, pos, cont);
              }]);
   }
   function symbol_pre_extra_text$0(startpos, cont){
    return caml_cps_exact_call2(get_pre_extra_text, startpos, cont);
   }
   function symbol_post_extra_text$0(endpos, cont){
    return caml_cps_exact_call2(get_post_extra_text, endpos, cont);
   }
   function rhs_pre_extra_text$0(pos, cont){
    return caml_cps_exact_call2(get_pre_extra_text, pos, cont);
   }
   function rhs_post_extra_text$0(pos, cont){
    return caml_cps_exact_call2(get_post_extra_text, pos, cont);
   }
   function init$3(param, cont){
    docstrings[1] = 0;
    return caml_cps_call2
            (Stdlib_Hashtbl[3],
             pre_table,
             function(_aeJ_){
              return caml_cps_call2
                      (Stdlib_Hashtbl[3],
                       post_table,
                       function(_aeK_){
                        return caml_cps_call2
                                (Stdlib_Hashtbl[3],
                                 floating_table,
                                 function(_aeL_){
                                  return caml_cps_call2
  (Stdlib_Hashtbl[3],
   pre_extra_table,
   function(_aeM_){
    return caml_cps_call2
            (Stdlib_Hashtbl[3], post_extra_table, cont);
   });
                                 });
                       });
             });
   }
   var
    Dynlink_compilerlibs_Docstring =
      [0,
       init$3,
       warn_bad_docstrings,
       docstring,
       register,
       docstring_body,
       docstring_loc,
       set_pre_docstrings,
       set_post_docstrings,
       set_floating_docstrings,
       set_pre_extra_docstrings,
       set_post_extra_docstrings,
       empty_docs,
       docs_attr,
       add_docs_attrs,
       symbol_docs,
       symbol_docs_lazy,
       rhs_docs,
       rhs_docs_lazy,
       mark_symbol_docs,
       mark_rhs_docs,
       0,
       docs_attr,
       add_info_attrs,
       symbol_info,
       rhs_info,
       0,
       0,
       text_attr,
       add_text_attrs,
       symbol_text,
       symbol_text_lazy,
       rhs_text,
       rhs_text_lazy,
       symbol_pre_extra_text,
       symbol_post_extra_text,
       rhs_pre_extra_text,
       rhs_post_extra_text,
       rhs_post_text,
       [0,
        symbol_docs$0,
        symbol_docs_lazy$0,
        rhs_docs$0,
        rhs_docs_lazy$0,
        mark_symbol_docs$0,
        mark_rhs_docs$0,
        symbol_info$0,
        rhs_info$0,
        symbol_text$0,
        symbol_text_lazy$0,
        rhs_text$0,
        rhs_text_lazy$0,
        symbol_pre_extra_text$0,
        symbol_post_extra_text$0,
        rhs_pre_extra_text$0,
        rhs_post_extra_text$0,
        rhs_post_text$0]];
   caml_register_global
    (1414, Dynlink_compilerlibs_Docstring, "Dynlink_compilerlibs.Docstrings");
   var
    Error$1 = [248, cst_Dynlink_compilerlibs_Synta, caml_fresh_oo_id(0)],
    Escape_error =
      [248, cst_Dynlink_compilerlibs_Synta$0, caml_fresh_oo_id(0)];
   function location_of_error(param, cont){var l = param[1]; return cont(l);}
   function ill_formed_ast(loc, s, cont){
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Error$1, [6, loc, s]], 1));
   }
   var
    Dynlink_compilerlibs_Syntaxerr =
      [0, Error$1, Escape_error, location_of_error, ill_formed_ast];
   caml_register_global
    (1415, Dynlink_compilerlibs_Syntaxerr, "Dynlink_compilerlibs.Syntaxerr");
   var default_loc = [0, Dynlink_compilerlibs_Location[1]];
   function with_default_loc(l, f, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[12],
             [0, [0, default_loc, l], 0],
             f,
             cont);
   }
   function integer(suffix, i, cont){return cont([0, i, suffix]);}
   function int$1(suffix, i, cont){
    return caml_cps_call2
            (Stdlib_Int[12],
             i,
             function(_aeI_){return cont([0, _aeI_, suffix]);});
   }
   function int32$0(opt, i, cont){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 108;
    return caml_cps_call2
            (Stdlib_Int32[14],
             i,
             function(_aeH_){return cont([0, _aeH_, [0, suffix]]);});
   }
   function int64$0(opt, i, cont){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 76;
    return caml_cps_call2
            (Stdlib_Int64[14],
             i,
             function(_aeG_){return cont([0, _aeG_, [0, suffix]]);});
   }
   function nativeint$0(opt, i, cont){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 110;
    return caml_cps_call2
            (Stdlib_Nativeint[15],
             i,
             function(_aeF_){return cont([0, _aeF_, [0, suffix]]);});
   }
   function float$0(suffix, f, cont){return cont([3, f, suffix]);}
   function char$0(c, cont){return cont([1, c]);}
   function string(quotation_delimiter, opt, s, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return cont([2, s, loc, quotation_delimiter]);
   }
   function mk(opt, name, payload, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return cont([0, name, payload, loc]);
   }
   var Attr = [0, mk];
   function mk$0(opt, _aeE_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_aeE_) var sth$0 = _aeE_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, 0, attrs]);
   }
   function attr(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[4],
             [0, a, 0],
             function(_aeD_){return cont([0, d[1], d[2], d[3], _aeD_]);});
   }
   function any(loc, attrs, param, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, 0, cont);
   }
   function var$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [0, a], cont);
   }
   function arrow(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [1, a, b, c], cont);
   }
   function tuple(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [2, a], cont);
   }
   function constr(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [3, a, b], cont);
   }
   function object(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [4, a, b], cont);
   }
   function class$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [5, a, b], cont);
   }
   function alias(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [6, a, b], cont);
   }
   function variant(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [7, a, b, c], cont);
   }
   function poly(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [8, a, b], cont);
   }
   function package$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [9, [0, a, b]], cont);
   }
   function extension$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$0, loc, attrs, [10, a], cont);
   }
   function force_poly(t, cont){
    var _aeC_ = t[1];
    if(typeof _aeC_ !== "number" && 8 === _aeC_[0]) return cont(t);
    return caml_cps_exact_call5(poly, [0, t[2]], 0, 0, t, cont);
   }
   function varify_constructors(var_names, t, cont){
    function check_variable(vl, loc, v, cont){
     return caml_cps_call3
             (Stdlib_List[36],
              v,
              vl,
              function(_aeA_){
               if(! _aeA_) return cont(_aeA_);
               var
                _aeB_ = [0, Dynlink_compilerlibs_Syntaxerr[1], [4, loc, v]],
                raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_aeB_, 1));
              });
    }
    return caml_cps_call3
            (Stdlib_List[19],
             function(v, cont){return cont(v[1]);},
             var_names,
             function(var_names){
              function loop(t, cont){
               var match = t[1];
               function _aej_(desc){return cont([0, desc, t[2], t[3], t[4]]);}
               if(typeof match === "number") return _aej_(0);
               switch(match[0]){
                 case 0:
                  var x = match[1];
                  return caml_cps_exact_call4
                          (check_variable,
                           var_names,
                           t[2],
                           x,
                           function(_aez_){return _aej_([0, x]);});
                 case 1:
                  var
                   core_type = match[3],
                   core_type$0 = match[2],
                   label = match[1];
                  return caml_cps_exact_call2
                          (loop,
                           core_type,
                           function(_aex_){
                            return caml_cps_exact_call2
                                    (loop,
                                     core_type$0,
                                     function(_aey_){return _aej_([1, label, _aey_, _aex_]);});
                           });
                 case 2:
                  var lst = match[1];
                  return caml_cps_call3
                          (Stdlib_List[19],
                           loop,
                           lst,
                           function(_aew_){return _aej_([2, _aew_]);});
                 case 3:
                  var
                   longident = match[1],
                   _aei_ = longident[1],
                   _aek_ =
                     function(){
                      var lst = match[2];
                      return caml_cps_call3
                              (Stdlib_List[19],
                               loop,
                               lst,
                               function(_aev_){return _aej_([3, longident, _aev_]);});
                     };
                  if(0 !== _aei_[0]) return _aek_();
                  if(match[2]) return _aek_();
                  var s = _aei_[1];
                  return caml_cps_call3
                          (Stdlib_List[36],
                           s,
                           var_names,
                           function(_aeu_){return _aeu_ ? _aej_([0, s]) : _aek_();});
                 case 4:
                  var o = match[2], lst$0 = match[1];
                  return caml_cps_call3
                          (Stdlib_List[19],
                           loop_object_field,
                           lst$0,
                           function(_aet_){return _aej_([4, _aet_, o]);});
                 case 5:
                  var lst$1 = match[2], longident$0 = match[1];
                  return caml_cps_call3
                          (Stdlib_List[19],
                           loop,
                           lst$1,
                           function(_aes_){return _aej_([5, longident$0, _aes_]);});
                 case 6:
                  var string = match[2], core_type$1 = match[1];
                  return caml_cps_exact_call4
                          (check_variable,
                           var_names,
                           t[2],
                           string,
                           function(_aeq_){
                            return caml_cps_exact_call2
                                    (loop,
                                     core_type$1,
                                     function(_aer_){return _aej_([6, _aer_, string]);});
                           });
                 case 7:
                  var
                   lbl_lst_option = match[3],
                   flag = match[2],
                   row_field_list = match[1];
                  return caml_cps_call3
                          (Stdlib_List[19],
                           loop_row_field,
                           row_field_list,
                           function(_aep_){
                            return _aej_([7, _aep_, flag, lbl_lst_option]);
                           });
                 case 8:
                  var core_type$2 = match[2], string_lst = match[1];
                  return caml_cps_call3
                          (Stdlib_List[17],
                           function(v, cont){
                            return caml_cps_exact_call4
                                    (check_variable, var_names, t[2], v[1], cont);
                           },
                           string_lst,
                           function(_aen_){
                            return caml_cps_exact_call2
                                    (loop,
                                     core_type$2,
                                     function(_aeo_){return _aej_([8, string_lst, _aeo_]);});
                           });
                 case 9:
                  var
                   match$0 = match[1],
                   lst$2 = match$0[2],
                   longident$1 = match$0[1];
                  return caml_cps_call3
                          (Stdlib_List[19],
                           function(param, cont){
                            var typ = param[2], n = param[1];
                            return caml_cps_exact_call2
                                    (loop, typ, function(_aem_){return cont([0, n, _aem_]);});
                           },
                           lst$2,
                           function(_ael_){return _aej_([9, [0, longident$1, _ael_]]);});
                 default:
                  var match$1 = match[1], arg = match$1[2], s$0 = match$1[1];
                  return _aej_([10, [0, s$0, arg]]);
               }
              }
              function loop_row_field(field, cont){
               var match = field[1];
               function _aef_(prf_desc){
                return cont([0, prf_desc, field[2], field[3]]);
               }
               if(0 === match[0]){
                var lst = match[3], flag = match[2], label = match[1];
                return caml_cps_call3
                        (Stdlib_List[19],
                         loop,
                         lst,
                         function(_aeh_){return _aef_([0, label, flag, _aeh_]);});
               }
               var t = match[1];
               return caml_cps_exact_call2
                       (loop, t, function(_aeg_){return _aef_([1, _aeg_]);});
              }
              function loop_object_field(field, cont){
               var match = field[1];
               function _aec_(pof_desc){
                return cont([0, pof_desc, field[2], field[3]]);
               }
               if(0 === match[0]){
                var t = match[2], label = match[1];
                return caml_cps_exact_call2
                        (loop, t, function(_aee_){return _aec_([0, label, _aee_]);});
               }
               var t$0 = match[1];
               return caml_cps_exact_call2
                       (loop, t$0, function(_aed_){return _aec_([1, _aed_]);});
              }
              return caml_cps_exact_call2(loop, t, cont);
             });
   }
   var
    Typ =
      [0,
       mk$0,
       attr,
       any,
       var$0,
       arrow,
       tuple,
       constr,
       object,
       class$0,
       alias,
       variant,
       poly,
       package$0,
       extension$0,
       force_poly,
       varify_constructors];
   function mk$1(opt, _aeb_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_aeb_) var sth$0 = _aeb_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, 0, attrs]);
   }
   function attr$0(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[4],
             [0, a, 0],
             function(_aea_){return cont([0, d[1], d[2], d[3], _aea_]);});
   }
   function any$0(loc, attrs, param, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, 0, cont);
   }
   function var$1(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [0, a], cont);
   }
   function alias$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [1, a, b], cont);
   }
   function constant(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [2, a], cont);
   }
   function interval(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [3, a, b], cont);
   }
   function tuple$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [4, a], cont);
   }
   function construct(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [5, a, b], cont);
   }
   function variant$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [6, a, b], cont);
   }
   function record$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [7, a, b], cont);
   }
   function array(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [8, a], cont);
   }
   function or(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [9, a, b], cont);
   }
   function constraint(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [10, a, b], cont);
   }
   function type(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [11, a], cont);
   }
   function lazy(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [12, a], cont);
   }
   function unpack(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [13, a], cont);
   }
   function open(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [16, a, b], cont);
   }
   function exception(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [14, a], cont);
   }
   function extension$1(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$1, loc, attrs, [15, a], cont);
   }
   var
    Pat =
      [0,
       mk$1,
       attr$0,
       any$0,
       var$1,
       alias$0,
       constant,
       interval,
       tuple$0,
       construct,
       variant$0,
       record$0,
       array,
       or,
       constraint,
       type,
       lazy,
       unpack,
       open,
       exception,
       extension$1];
   function mk$2(opt, _ad$_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ad$_) var sth$0 = _ad$_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, 0, attrs]);
   }
   function attr$1(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[4],
             [0, a, 0],
             function(_ad__){return cont([0, d[1], d[2], d[3], _ad__]);});
   }
   function ident(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [0, a], cont);
   }
   function constant$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [1, a], cont);
   }
   function let$0(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [2, a, b, c], cont);
   }
   function fun(loc, attrs, a, b, c, d, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [4, a, b, c, d], cont);
   }
   function function$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [3, a], cont);
   }
   function apply(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [5, a, b], cont);
   }
   function try$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [7, a, b], cont);
   }
   function tuple$1(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [8, a], cont);
   }
   function construct$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [9, a, b], cont);
   }
   function variant$1(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [10, a, b], cont);
   }
   function record$1(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [11, a, b], cont);
   }
   function field(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [12, a, b], cont);
   }
   function setfield(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [13, a, b, c], cont);
   }
   function array$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [14, a], cont);
   }
   function ifthenelse(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [15, a, b, c], cont);
   }
   function sequence(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [16, a, b], cont);
   }
   function while$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [17, a, b], cont);
   }
   function for$0(loc, attrs, a, b, c, d, e, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [18, a, b, c, d, e], cont);
   }
   function constraint$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [19, a, b], cont);
   }
   function coerce(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [20, a, b, c], cont);
   }
   function send(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [21, a, b], cont);
   }
   function new$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [22, a], cont);
   }
   function setinstvar(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [23, a, b], cont);
   }
   function override(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [24, a], cont);
   }
   function letmodule(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [25, a, b, c], cont);
   }
   function letexception(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [26, a, b], cont);
   }
   function assert(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [27, a], cont);
   }
   function lazy$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [28, a], cont);
   }
   function poly$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [29, a, b], cont);
   }
   function object$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [30, a], cont);
   }
   function newtype(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [31, a, b], cont);
   }
   function pack(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [32, a], cont);
   }
   function open$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [33, a, b], cont);
   }
   function letop(loc, attrs, let$0, ands, body, cont){
    return caml_cps_exact_call4
            (mk$2, loc, attrs, [34, [0, let$0, ands, body]], cont);
   }
   function extension$2(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, [35, a], cont);
   }
   function unreachable(loc, attrs, param, cont){
    return caml_cps_exact_call4(mk$2, loc, attrs, 0, cont);
   }
   function case$0(lhs, guard, rhs, cont){return cont([0, lhs, guard, rhs]);}
   function binding_op(op, pat, exp, loc, cont){return cont([0, op, pat, exp, loc]);
   }
   function mk$3(opt, _ad9_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ad9_) var sth$0 = _ad9_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, attrs]);
   }
   function attr$2(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_ad8_){return cont([0, d[1], d[2], _ad8_]);});
   }
   function ident$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [0, a], cont);
   }
   function alias$1(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [6, a], cont);
   }
   function signature(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [1, a], cont);
   }
   function functor(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [2, a, b], cont);
   }
   function with$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [3, a, b], cont);
   }
   function typeof$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [4, a], cont);
   }
   function extension$3(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$3, loc, attrs, [5, a], cont);
   }
   var
    Mty =
      [0,
       mk$3,
       attr$2,
       ident$0,
       alias$1,
       signature,
       functor,
       with$0,
       typeof$0,
       extension$3];
   function mk$4(opt, _ad7_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ad7_) var sth$0 = _ad7_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, attrs]);
   }
   function attr$3(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_ad6_){return cont([0, d[1], d[2], _ad6_]);});
   }
   function ident$1(loc, attrs, x, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [0, x], cont);
   }
   function structure(loc, attrs, x, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [1, x], cont);
   }
   function functor$0(loc, attrs, arg, body, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [2, arg, body], cont);
   }
   function apply$0(loc, attrs, m1, m2, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [3, m1, m2], cont);
   }
   function constraint$1(loc, attrs, m, mty, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [4, m, mty], cont);
   }
   function unpack$0(loc, attrs, e, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [5, e], cont);
   }
   function extension$4(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$4, loc, attrs, [6, a], cont);
   }
   var
    Mod =
      [0,
       mk$4,
       attr$3,
       ident$1,
       structure,
       functor$0,
       apply$0,
       constraint$1,
       unpack$0,
       extension$4];
   function mk$5(opt, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return cont([0, d, loc]);
   }
   function value(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [0, a], cont);
   }
   function type$0(loc, rec_flag, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [1, rec_flag, a], cont);
   }
   function type_subst(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [2, a], cont);
   }
   function type_extension(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [3, a], cont);
   }
   function exception$0(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [4, a], cont);
   }
   function module(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [5, a], cont);
   }
   function mod_subst(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [6, a], cont);
   }
   function rec_module(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [7, a], cont);
   }
   function modtype(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [8, a], cont);
   }
   function modtype_subst(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [9, a], cont);
   }
   function open$1(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [10, a], cont);
   }
   function include$2(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [11, a], cont);
   }
   function class$1(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [12, a], cont);
   }
   function class_type(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [13, a], cont);
   }
   function extension$5(loc, opt, a, cont){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return caml_cps_exact_call3(mk$5, loc, [15, a, attrs], cont);
   }
   function attribute(loc, a, cont){
    return caml_cps_exact_call3(mk$5, loc, [14, a], cont);
   }
   function text(txt, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(ds, cont){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Docstring[5],
                       ds,
                       function(_ad5_){
                        return cont(caml_string_notequal(_ad5_, cst$117));
                       });
             },
             txt,
             function(f_txt){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(ds, cont){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Docstring[28],
                                 ds,
                                 function(_ad3_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Docstring[6],
   ds,
   function(_ad4_){
    return caml_cps_exact_call3
            (attribute, [0, _ad4_], _ad3_, cont);
   });
                                 });
                       },
                       f_txt,
                       cont);
             });
   }
   var
    Sig =
      [0,
       mk$5,
       value,
       type$0,
       type_subst,
       type_extension,
       exception$0,
       module,
       mod_subst,
       rec_module,
       modtype,
       modtype_subst,
       open$1,
       include$2,
       class$1,
       class_type,
       extension$5,
       attribute,
       text];
   function mk$6(opt, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return cont([0, d, loc]);
   }
   function eval$0(loc, opt, a, cont){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return caml_cps_exact_call3(mk$6, loc, [0, a, attrs], cont);
   }
   function value$0(loc, a, b, cont){
    return caml_cps_exact_call3(mk$6, loc, [1, a, b], cont);
   }
   function primitive(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [2, a], cont);
   }
   function type$1(loc, rec_flag, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [3, rec_flag, a], cont);
   }
   function type_extension$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [4, a], cont);
   }
   function exception$1(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [5, a], cont);
   }
   function module$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [6, a], cont);
   }
   function rec_module$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [7, a], cont);
   }
   function modtype$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [8, a], cont);
   }
   function open$2(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [9, a], cont);
   }
   function class$2(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [10, a], cont);
   }
   function class_type$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [11, a], cont);
   }
   function include$3(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [12, a], cont);
   }
   function extension$6(loc, opt, a, cont){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return caml_cps_exact_call3(mk$6, loc, [14, a, attrs], cont);
   }
   function attribute$0(loc, a, cont){
    return caml_cps_exact_call3(mk$6, loc, [13, a], cont);
   }
   function text$0(txt, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(ds, cont){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Docstring[5],
                       ds,
                       function(_ad2_){
                        return cont(caml_string_notequal(_ad2_, cst$117));
                       });
             },
             txt,
             function(f_txt){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(ds, cont){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Docstring[28],
                                 ds,
                                 function(_ad0_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Docstring[6],
   ds,
   function(_ad1_){
    return caml_cps_exact_call3
            (attribute$0, [0, _ad1_], _ad0_, cont);
   });
                                 });
                       },
                       f_txt,
                       cont);
             });
   }
   var
    Str =
      [0,
       mk$6,
       eval$0,
       value$0,
       primitive,
       type$1,
       type_extension$0,
       exception$1,
       module$0,
       rec_module$0,
       modtype$0,
       open$2,
       class$2,
       class_type$0,
       include$3,
       extension$6,
       attribute$0,
       text$0];
   function mk$7(opt, _adZ_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adZ_) var sth$0 = _adZ_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, attrs]);
   }
   function attr$4(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_adY_){return cont([0, d[1], d[2], _adY_]);});
   }
   function constr$0(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [0, a, b], cont);
   }
   function structure$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [1, a], cont);
   }
   function fun$0(loc, attrs, a, b, c, d, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [2, a, b, c, d], cont);
   }
   function apply$1(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [3, a, b], cont);
   }
   function let$1(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [4, a, b, c], cont);
   }
   function constraint$2(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [5, a, b], cont);
   }
   function extension$7(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [6, a], cont);
   }
   function open$3(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$7, loc, attrs, [7, a, b], cont);
   }
   var
    Cl =
      [0,
       mk$7,
       attr$4,
       constr$0,
       structure$0,
       fun$0,
       apply$1,
       let$1,
       constraint$2,
       extension$7,
       open$3];
   function mk$8(opt, _adX_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adX_) var sth$0 = _adX_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, d, loc, attrs]);
   }
   function attr$5(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_adW_){return cont([0, d[1], d[2], _adW_]);});
   }
   function constr$1(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$8, loc, attrs, [0, a, b], cont);
   }
   function signature$0(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$8, loc, attrs, [1, a], cont);
   }
   function arrow$0(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call4(mk$8, loc, attrs, [2, a, b, c], cont);
   }
   function extension$8(loc, attrs, a, cont){
    return caml_cps_exact_call4(mk$8, loc, attrs, [3, a], cont);
   }
   function open$4(loc, attrs, a, b, cont){
    return caml_cps_exact_call4(mk$8, loc, attrs, [4, a, b], cont);
   }
   var
    Cty =
      [0, mk$8, attr$5, constr$1, signature$0, arrow$0, extension$8, open$4];
   function mk$9(opt, _adU_, _adT_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adU_) var sth$0 = _adU_[1], attrs = sth$0; else var attrs = 0;
    if(_adT_)
     var sth$1 = _adT_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adV_){return cont([0, d, loc, _adV_]);});
   }
   function inherit(loc, attrs, a, cont){
    return caml_cps_exact_call5(mk$9, loc, attrs, 0, [0, a], cont);
   }
   function val(loc, attrs, a, b, c, d, cont){
    return caml_cps_exact_call5
            (mk$9, loc, attrs, 0, [1, [0, a, b, c, d]], cont);
   }
   function method(loc, attrs, a, b, c, d, cont){
    return caml_cps_exact_call5
            (mk$9, loc, attrs, 0, [2, [0, a, b, c, d]], cont);
   }
   function constraint$3(loc, attrs, a, b, cont){
    return caml_cps_exact_call5(mk$9, loc, attrs, 0, [3, [0, a, b]], cont);
   }
   function extension$9(loc, attrs, a, cont){
    return caml_cps_exact_call5(mk$9, loc, attrs, 0, [5, a], cont);
   }
   function attribute$1(loc, a, cont){
    return caml_cps_exact_call5(mk$9, loc, 0, 0, [4, a], cont);
   }
   function text$1(txt, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(ds, cont){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Docstring[5],
                       ds,
                       function(_adS_){
                        return cont(caml_string_notequal(_adS_, cst$117));
                       });
             },
             txt,
             function(f_txt){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(ds, cont){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Docstring[28],
                                 ds,
                                 function(_adQ_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Docstring[6],
   ds,
   function(_adR_){
    return caml_cps_exact_call3
            (attribute$1, [0, _adR_], _adQ_, cont);
   });
                                 });
                       },
                       f_txt,
                       cont);
             });
   }
   function attr$6(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_adP_){return cont([0, d[1], d[2], _adP_]);});
   }
   function mk$10(opt, _adN_, _adM_, d, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adN_) var sth$0 = _adN_[1], attrs = sth$0; else var attrs = 0;
    if(_adM_)
     var sth$1 = _adM_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adO_){return cont([0, d, loc, _adO_]);});
   }
   function inherit$0(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [0, a, b, c], cont);
   }
   function val$0(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [1, [0, a, b, c]], cont);
   }
   function method$0(loc, attrs, a, b, c, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [2, [0, a, b, c]], cont);
   }
   function constraint$4(loc, attrs, a, b, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [3, [0, a, b]], cont);
   }
   function initializer(loc, attrs, a, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [4, a], cont);
   }
   function extension$10(loc, attrs, a, cont){
    return caml_cps_exact_call5(mk$10, loc, attrs, 0, [6, a], cont);
   }
   function attribute$2(loc, a, cont){
    return caml_cps_exact_call5(mk$10, loc, 0, 0, [5, a], cont);
   }
   function text$2(txt, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(ds, cont){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Docstring[5],
                       ds,
                       function(_adL_){
                        return cont(caml_string_notequal(_adL_, cst$117));
                       });
             },
             txt,
             function(f_txt){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(ds, cont){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Docstring[28],
                                 ds,
                                 function(_adJ_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Docstring[6],
   ds,
   function(_adK_){
    return caml_cps_exact_call3
            (attribute$2, [0, _adK_], _adJ_, cont);
   });
                                 });
                       },
                       f_txt,
                       cont);
             });
   }
   function virtual(ct, cont){return cont([0, ct]);}
   function concrete(o, e, cont){return cont([1, o, e]);}
   function attr$7(d, a, cont){
    return caml_cps_call3
            (Stdlib[37],
             d[3],
             [0, a, 0],
             function(_adI_){return cont([0, d[1], d[2], _adI_]);});
   }
   function mk$11(opt, _adG_, _adF_, _adE_, name, typ, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adG_) var sth$0 = _adG_[1], attrs = sth$0; else var attrs = 0;
    if(_adF_)
     var sth$1 = _adF_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adE_) var sth$2 = _adE_[1], prim = sth$2; else var prim = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adH_){return cont([0, name, typ, prim, _adH_, loc]);});
   }
   var Val = [0, mk$11];
   function mk$12(opt, _adB_, _adA_, _adz_, name, typ, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adB_) var sth$0 = _adB_[1], attrs = sth$0; else var attrs = 0;
    if(_adA_)
     var sth$1 = _adA_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adz_) var sth$2 = _adz_[1], text = sth$2; else var text = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adC_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _adC_,
                       function(_adD_){return cont([0, name, typ, _adD_, loc]);});
             });
   }
   var Md = [0, mk$12];
   function mk$13(opt, _adw_, _adv_, _adu_, name, syn, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adw_) var sth$0 = _adw_[1], attrs = sth$0; else var attrs = 0;
    if(_adv_)
     var sth$1 = _adv_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adu_) var sth$2 = _adu_[1], text = sth$2; else var text = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adx_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _adx_,
                       function(_ady_){return cont([0, name, syn, _ady_, loc]);});
             });
   }
   var Ms = [0, mk$13];
   function mk$14(opt, _adr_, _adq_, _adp_, typ, name, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adr_) var sth$0 = _adr_[1], attrs = sth$0; else var attrs = 0;
    if(_adq_)
     var sth$1 = _adq_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adp_) var sth$2 = _adp_[1], text = sth$2; else var text = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_ads_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _ads_,
                       function(_adt_){return cont([0, name, typ, _adt_, loc]);});
             });
   }
   var Mtd = [0, mk$14];
   function mk$15(opt, _adm_, _adl_, _adk_, name, expr, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adm_) var sth$0 = _adm_[1], attrs = sth$0; else var attrs = 0;
    if(_adl_)
     var sth$1 = _adl_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adk_) var sth$2 = _adk_[1], text = sth$2; else var text = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adn_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _adn_,
                       function(_ado_){return cont([0, name, expr, _ado_, loc]);});
             });
   }
   var Mb = [0, mk$15];
   function mk$16(opt, _adi_, _adh_, _adg_, expr, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_adi_) var sth$0 = _adi_[1], attrs = sth$0; else var attrs = 0;
    if(_adh_)
     var sth$1 = _adh_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_adg_) var sth$2 = _adg_[1], override = sth$2; else var override = 1;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adj_){return cont([0, expr, override, loc, _adj_]);});
   }
   var Opn = [0, mk$16];
   function mk$17(opt, _ade_, _add_, mexpr, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ade_) var sth$0 = _ade_[1], attrs = sth$0; else var attrs = 0;
    if(_add_)
     var sth$1 = _add_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adf_){return cont([0, mexpr, loc, _adf_]);});
   }
   var Incl = [0, mk$17];
   function mk$18(opt, _ada_, _ac$_, _ac__, pat, expr, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ada_) var sth$0 = _ada_[1], attrs = sth$0; else var attrs = 0;
    if(_ac$_)
     var sth$1 = _ac$_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_ac__) var sth$2 = _ac__[1], text = sth$2; else var text = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_adb_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _adb_,
                       function(_adc_){return cont([0, pat, expr, _adc_, loc]);});
             });
   }
   var Vb = [0, mk$18];
   function mk$19(opt, _ac7_, _ac6_, _ac5_, _ac4_, _ac3_, name, expr, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ac7_) var sth$0 = _ac7_[1], attrs = sth$0; else var attrs = 0;
    if(_ac6_)
     var sth$1 = _ac6_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_ac5_) var sth$2 = _ac5_[1], text = sth$2; else var text = 0;
    if(_ac4_) var sth$3 = _ac4_[1], virt = sth$3; else var virt = 1;
    if(_ac3_) var sth$4 = _ac3_[1], params = sth$4; else var params = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_ac8_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _ac8_,
                       function(_ac9_){
                        return cont([0, virt, params, name, expr, loc, _ac9_]);
                       });
             });
   }
   var Ci = [0, mk$19];
   function mk$20
   (opt,
    _ac0_,
    _acZ_,
    _acY_,
    _acX_,
    _acW_,
    _acV_,
    _acU_,
    manifest,
    name,
    cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ac0_) var sth$0 = _ac0_[1], attrs = sth$0; else var attrs = 0;
    if(_acZ_)
     var sth$1 = _acZ_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_acY_) var sth$2 = _acY_[1], text = sth$2; else var text = 0;
    if(_acX_) var sth$3 = _acX_[1], params = sth$3; else var params = 0;
    if(_acW_) var sth$4 = _acW_[1], cstrs = sth$4; else var cstrs = 0;
    if(_acV_) var sth$5 = _acV_[1], kind = sth$5; else var kind = 0;
    if(_acU_) var sth$6 = _acU_[1], priv = sth$6; else var priv = 1;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_ac1_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[29],
                       text,
                       _ac1_,
                       function(_ac2_){
                        return cont
                                ([0, name, params, cstrs, kind, priv, manifest, _ac2_, loc]);
                       });
             });
   }
   function constructor(opt, _acS_, _acR_, _acQ_, _acP_, res, name, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acS_) var sth$0 = _acS_[1], attrs = sth$0; else var attrs = 0;
    if(_acR_)
     var sth$1 = _acR_[1], info = sth$1;
    else
     var info = Dynlink_compilerlibs_Docstring[21];
    if(_acQ_) var sth$2 = _acQ_[1], vars = sth$2; else var vars = 0;
    if(_acP_) var sth$3 = _acP_[1], args = sth$3; else var args = _fH_;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[23],
             info,
             attrs,
             function(_acT_){
              return cont([0, name, vars, args, res, loc, _acT_]);
             });
   }
   function field$0(opt, _acN_, _acM_, _acL_, name, typ, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acN_) var sth$0 = _acN_[1], attrs = sth$0; else var attrs = 0;
    if(_acM_)
     var sth$1 = _acM_[1], info = sth$1;
    else
     var info = Dynlink_compilerlibs_Docstring[21];
    if(_acL_) var sth$2 = _acL_[1], mut = sth$2; else var mut = 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[23],
             info,
             attrs,
             function(_acO_){return cont([0, name, mut, typ, loc, _acO_]);});
   }
   var Type = [0, mk$20, constructor, field$0];
   function mk$21(opt, _acJ_, _acI_, _acH_, _acG_, path, constructors, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acJ_) var sth$0 = _acJ_[1], attrs = sth$0; else var attrs = 0;
    if(_acI_)
     var sth$1 = _acI_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_acH_) var sth$2 = _acH_[1], params = sth$2; else var params = 0;
    if(_acG_) var sth$3 = _acG_[1], priv = sth$3; else var priv = 1;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_acK_){
              return cont([0, path, params, constructors, priv, loc, _acK_]);
             });
   }
   function mk_exception(opt, _acE_, _acD_, constructor, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acE_) var sth$0 = _acE_[1], attrs = sth$0; else var attrs = 0;
    if(_acD_)
     var sth$1 = _acD_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[14],
             docs,
             attrs,
             function(_acF_){return cont([0, constructor, loc, _acF_]);});
   }
   function constructor$0(opt, _acA_, _acz_, _acy_, name, kind, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acA_) var sth$0 = _acA_[1], attrs = sth$0; else var attrs = 0;
    if(_acz_)
     var sth$1 = _acz_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_acy_)
     var sth$2 = _acy_[1], info = sth$2;
    else
     var info = Dynlink_compilerlibs_Docstring[21];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[23],
             info,
             attrs,
             function(_acB_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[14],
                       docs,
                       _acB_,
                       function(_acC_){return cont([0, name, kind, loc, _acC_]);});
             });
   }
   function decl(opt, _acv_, _acu_, _act_, _acs_, _acr_, res, name, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acv_) var sth$0 = _acv_[1], attrs = sth$0; else var attrs = 0;
    if(_acu_)
     var sth$1 = _acu_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_act_)
     var sth$2 = _act_[1], info = sth$2;
    else
     var info = Dynlink_compilerlibs_Docstring[21];
    if(_acs_) var sth$3 = _acs_[1], vars = sth$3; else var vars = 0;
    if(_acr_) var sth$4 = _acr_[1], args = sth$4; else var args = _fI_;
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[23],
             info,
             attrs,
             function(_acw_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[14],
                       docs,
                       _acw_,
                       function(_acx_){
                        return cont([0, name, [0, vars, args, res], loc, _acx_]);
                       });
             });
   }
   function rebind(opt, _aco_, _acn_, _acm_, name, lid, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_aco_) var sth$0 = _aco_[1], attrs = sth$0; else var attrs = 0;
    if(_acn_)
     var sth$1 = _acn_[1], docs = sth$1;
    else
     var docs = Dynlink_compilerlibs_Docstring[12];
    if(_acm_)
     var sth$2 = _acm_[1], info = sth$2;
    else
     var info = Dynlink_compilerlibs_Docstring[21];
    return caml_cps_call3
            (Dynlink_compilerlibs_Docstring[23],
             info,
             attrs,
             function(_acp_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Docstring[14],
                       docs,
                       _acp_,
                       function(_acq_){
                        return cont([0, name, [1, lid], loc, _acq_]);
                       });
             });
   }
   var Te = [0, mk$21, mk_exception, constructor$0, decl, rebind];
   function mk$22(self, fields, cont){return cont([0, self, fields]);}
   var Csig = [0, mk$22];
   function mk$23(self, fields, cont){return cont([0, self, fields]);}
   var Cstr = [0, mk$23];
   function mk$24(opt, _acl_, desc, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_acl_) var sth$0 = _acl_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, desc, loc, attrs]);
   }
   function tag(loc, attrs, label, const$0, tys, cont){
    return caml_cps_exact_call4
            (mk$24, loc, attrs, [0, label, const$0, tys], cont);
   }
   function inherit$1(loc, ty, cont){
    return caml_cps_exact_call4(mk$24, loc, 0, [1, ty], cont);
   }
   var Rf = [0, mk$24, tag, inherit$1];
   function mk$25(opt, _ack_, desc, cont){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(_ack_) var sth$0 = _ack_[1], attrs = sth$0; else var attrs = 0;
    return cont([0, desc, loc, attrs]);
   }
   function tag$0(loc, attrs, label, ty, cont){
    return caml_cps_exact_call4(mk$25, loc, attrs, [0, label, ty], cont);
   }
   function inherit$2(loc, ty, cont){
    return caml_cps_exact_call4(mk$25, loc, 0, [1, ty], cont);
   }
   var
    Of = [0, mk$25, tag$0, inherit$2],
    Dynlink_compilerlibs_Ast_helpe =
      [0,
       default_loc,
       with_default_loc,
       [0,
        char$0,
        string,
        integer,
        int$1,
        int32$0,
        int64$0,
        nativeint$0,
        float$0],
       Attr,
       Typ,
       Pat,
       [0,
        mk$2,
        attr$1,
        ident,
        constant$0,
        let$0,
        fun,
        function$0,
        apply,
        function(loc, attrs, a, b, cont){
         return caml_cps_exact_call4(mk$2, loc, attrs, [6, a, b], cont);
        },
        try$0,
        tuple$1,
        construct$0,
        variant$1,
        record$1,
        field,
        setfield,
        array$0,
        ifthenelse,
        sequence,
        while$0,
        for$0,
        coerce,
        constraint$0,
        send,
        new$0,
        setinstvar,
        override,
        letmodule,
        letexception,
        assert,
        lazy$0,
        poly$0,
        object$0,
        newtype,
        pack,
        open$0,
        letop,
        extension$2,
        unreachable,
        case$0,
        binding_op],
       Val,
       Type,
       Te,
       Mty,
       Mod,
       Sig,
       Str,
       Md,
       Ms,
       Mtd,
       Mb,
       Opn,
       Incl,
       Vb,
       Cty,
       [0,
        mk$9,
        attr$6,
        inherit,
        val,
        method,
        constraint$3,
        extension$9,
        attribute$1,
        text$1],
       Cl,
       [0,
        mk$10,
        attr$7,
        inherit$0,
        val$0,
        method$0,
        constraint$4,
        initializer,
        extension$10,
        attribute$2,
        text$2,
        virtual,
        concrete],
       Ci,
       Csig,
       Cstr,
       Rf,
       Of];
   caml_register_global
    (1417, Dynlink_compilerlibs_Ast_helpe, "Dynlink_compilerlibs.Ast_helper");
   function map_fst(f, param, cont){
    var y = param[2], x = param[1];
    return caml_cps_call2(f, x, function(_acj_){return cont([0, _acj_, y]);});
   }
   function map_snd(f, param, cont){
    var y = param[2], x = param[1];
    return caml_cps_call2(f, y, function(_aci_){return cont([0, x, _aci_]);});
   }
   function map_tuple(f1, f2, param, cont){
    var y = param[2], x = param[1];
    return caml_cps_call2
            (f2,
             y,
             function(_acg_){
              return caml_cps_exact_call2
                      (f1, x, function(_ach_){return cont([0, _ach_, _acg_]);});
             });
   }
   function map_opt(f, param, cont){
    if(! param) return cont(0);
    var x = param[1];
    return caml_cps_call2(f, x, function(_acf_){return cont([0, _acf_]);});
   }
   function map_loc(sub, param, cont){
    var loc = param[2], txt = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(_ace_){return cont([0, txt, _ace_]);});
   }
   function map$0(sub, c, cont){
    if(2 !== c[0]) return cont(c);
    var quotation_delimiter = c[3], loc = c[2], s = c[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Ast_helpe[3][2],
                       quotation_delimiter,
                       [0, loc],
                       s,
                       cont);
             });
   }
   function map$1(sub, param, cont){
    var attrs = param[4], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        if(typeof desc === "number")
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ast_helpe[5][3],
                                  [0, loc],
                                  [0, attrs],
                                  0,
                                  cont);
                        switch(desc[0]){
                          case 0:
                           var s = desc[1];
                           return caml_cps_call4
                                   (Dynlink_compilerlibs_Ast_helpe[5][4],
                                    [0, loc],
                                    [0, attrs],
                                    s,
                                    cont);
                          case 1:
                           var t2 = desc[3], t1 = desc[2], lab = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t2,
                                    function(_acc_){
                                     return caml_cps_call3
     (sub[38],
      sub,
      t1,
      function(_acd_){
       return caml_cps_call6
               (Dynlink_compilerlibs_Ast_helpe[5][5],
                [0, loc],
                [0, attrs],
                lab,
                _acd_,
                _acc_,
                cont);
      });
                                    });
                          case 2:
                           var tyl = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_aca_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _aca_,
      tyl,
      function(_acb_){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[5][6],
                [0, loc],
                [0, attrs],
                _acb_,
                cont);
      });
                                    });
                          case 3:
                           var tl = desc[2], lid = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_ab9_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _ab9_,
      tl,
      function(_ab__){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid,
                function(_ab$_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[5][7],
                          [0, loc],
                          [0, attrs],
                          _ab$_,
                          _ab__,
                          cont);
                });
      });
                                    });
                          case 4:
                           var o = desc[2], l = desc[1];
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    function(param, cont){
                                     var
                                      pof_attributes = param[3],
                                      pof_loc = param[2],
                                      pof_desc = param[1];
                                     return caml_cps_call3
     (sub[23],
      sub,
      pof_loc,
      function(loc){
       return caml_cps_call3
               (sub[2],
                sub,
                pof_attributes,
                function(attrs){
                 function _ab5_(desc){
                  return caml_cps_call4
                          (Dynlink_compilerlibs_Ast_helpe[30][1],
                           [0, loc],
                           [0, attrs],
                           desc,
                           cont);
                 }
                 if(0 === pof_desc[0]){
                  var t = pof_desc[2], l = pof_desc[1];
                  return caml_cps_call3
                          (sub[38],
                           sub,
                           t,
                           function(_ab7_){
                            return caml_cps_exact_call3
                                    (map_loc,
                                     sub,
                                     l,
                                     function(_ab8_){return _ab5_([0, _ab8_, _ab7_]);});
                           });
                 }
                 var t$0 = pof_desc[1];
                 return caml_cps_call3
                         (sub[38],
                          sub,
                          t$0,
                          function(_ab6_){return _ab5_([1, _ab6_]);});
                });
      });
                                    },
                                    l,
                                    function(_ab4_){
                                     return caml_cps_call5
     (Dynlink_compilerlibs_Ast_helpe[5][8],
      [0, loc],
      [0, attrs],
      _ab4_,
      o,
      cont);
                                    });
                          case 5:
                           var tl$0 = desc[2], lid$0 = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_ab1_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _ab1_,
      tl$0,
      function(_ab2_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid$0,
                function(_ab3_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[5][9],
                          [0, loc],
                          [0, attrs],
                          _ab3_,
                          _ab2_,
                          cont);
                });
      });
                                    });
                          case 6:
                           var s$0 = desc[2], t = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t,
                                    function(_ab0_){
                                     return caml_cps_call5
     (Dynlink_compilerlibs_Ast_helpe[5][10],
      [0, loc],
      [0, attrs],
      _ab0_,
      s$0,
      cont);
                                    });
                          case 7:
                           var ll = desc[3], b = desc[2], rl = desc[1];
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    function(param, cont){
                                     var
                                      prf_attributes = param[3],
                                      prf_loc = param[2],
                                      prf_desc = param[1];
                                     return caml_cps_call3
     (sub[23],
      sub,
      prf_loc,
      function(loc){
       return caml_cps_call3
               (sub[2],
                sub,
                prf_attributes,
                function(attrs){
                 function _abV_(desc){
                  return caml_cps_call4
                          (Dynlink_compilerlibs_Ast_helpe[29][1],
                           [0, loc],
                           [0, attrs],
                           desc,
                           cont);
                 }
                 if(0 === prf_desc[0]){
                  var tl = prf_desc[3], b = prf_desc[2], l = prf_desc[1];
                  return caml_cps_call2
                          (sub[38],
                           sub,
                           function(_abX_){
                            return caml_cps_call3
                                    (Stdlib_List[19],
                                     _abX_,
                                     tl,
                                     function(_abY_){
                                      return caml_cps_exact_call3
      (map_loc,
       sub,
       l,
       function(_abZ_){return _abV_([0, _abZ_, b, _abY_]);});
                                     });
                           });
                 }
                 var t = prf_desc[1];
                 return caml_cps_call3
                         (sub[38],
                          sub,
                          t,
                          function(_abW_){return _abV_([1, _abW_]);});
                });
      });
                                    },
                                    rl,
                                    function(_abU_){
                                     return caml_cps_call6
     (Dynlink_compilerlibs_Ast_helpe[5][11],
      [0, loc],
      [0, attrs],
      _abU_,
      b,
      ll,
      cont);
                                    });
                          case 8:
                           var t$0 = desc[2], sl = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t$0,
                                    function(_abR_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(_abT_, cont){
       return caml_cps_exact_call3(map_loc, sub, _abT_, cont);
      },
      sl,
      function(_abS_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[5][12],
                [0, loc],
                [0, attrs],
                _abS_,
                _abR_,
                cont);
      });
                                    });
                          case 9:
                           var match = desc[1], l$0 = match[2], lid$1 = match[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_abL_){
                                     function _abM_(_abQ_, cont){
                                      return caml_cps_exact_call3(map_loc, sub, _abQ_, cont);
                                     }
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(_abP_, cont){
       return caml_cps_exact_call4
               (map_tuple, _abM_, _abL_, _abP_, cont);
      },
      l$0,
      function(_abN_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid$1,
                function(_abO_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[5][13],
                          [0, loc],
                          [0, attrs],
                          _abO_,
                          _abN_,
                          cont);
                });
      });
                                    });
                          default:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x,
                                    function(_abK_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[5][14],
      [0, loc],
      [0, attrs],
      _abK_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_type_declaration(sub, param, cont){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             ptype_loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       ptype_attributes,
                       function(attrs){
                        return caml_cps_exact_call3
                                (map_loc,
                                 sub,
                                 ptype_name,
                                 function(_abw_){
                                  return caml_cps_call2
  (sub[38],
   sub,
   function(_abx_){
    return caml_cps_exact_call3
            (map_opt,
             _abx_,
             ptype_manifest,
             function(_aby_){
              var _abz_ = [0, ptype_private];
              return caml_cps_call3
                      (sub[42],
                       sub,
                       ptype_kind,
                       function(_abA_){
                        var _abB_ = [0, _abA_];
                        return caml_cps_call2
                                (sub[23],
                                 sub,
                                 function(f3){
                                  return caml_cps_call2
  (sub[38],
   sub,
   function(f2){
    return caml_cps_call2
            (sub[38],
             sub,
             function(f1){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(param, cont){
                        var z = param[3], y = param[2], x = param[1];
                        return caml_cps_call2
                                (f3,
                                 z,
                                 function(_abH_){
                                  return caml_cps_call2
  (f2,
   y,
   function(_abI_){
    return caml_cps_call2
            (f1,
             x,
             function(_abJ_){return cont([0, _abJ_, _abI_, _abH_]);});
   });
                                 });
                       },
                       ptype_cstrs,
                       function(_abC_){
                        var _abD_ = [0, _abC_];
                        return caml_cps_call2
                                (sub[38],
                                 sub,
                                 function(_abE_){
                                  return caml_cps_call3
  (Stdlib_List[19],
   function(_abG_, cont){
    return caml_cps_exact_call3(map_fst, _abE_, _abG_, cont);
   },
   ptype_params,
   function(_abF_){
    return caml_cps_call11
            (Dynlink_compilerlibs_Ast_helpe[9][1],
             [0, loc],
             [0, attrs],
             0,
             0,
             [0, _abF_],
             _abD_,
             _abB_,
             _abz_,
             _aby_,
             _abw_,
             cont);
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function map_type_kind(sub, param, cont){
    if(typeof param === "number") return 0 === param ? cont(0) : cont(1);
    if(0 === param[0]){
     var l = param[1];
     return caml_cps_call2
             (sub[16],
              sub,
              function(_abu_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        _abu_,
                        l,
                        function(_abv_){return cont([0, _abv_]);});
              });
    }
    var l$0 = param[1];
    return caml_cps_call2
            (sub[22],
             sub,
             function(_abs_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       _abs_,
                       l$0,
                       function(_abt_){return cont([1, _abt_]);});
             });
   }
   function map_constructor_arguments(sub, param, cont){
    if(0 === param[0]){
     var l = param[1];
     return caml_cps_call2
             (sub[38],
              sub,
              function(_abq_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        _abq_,
                        l,
                        function(_abr_){return cont([0, _abr_]);});
              });
    }
    var l$0 = param[1];
    return caml_cps_call2
            (sub[22],
             sub,
             function(_abo_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       _abo_,
                       l$0,
                       function(_abp_){return cont([1, _abp_]);});
             });
   }
   function map_type_extension(sub, param, cont){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             ptyext_loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       ptyext_attributes,
                       function(attrs){
                        return caml_cps_call2
                                (sub[19],
                                 sub,
                                 function(_abh_){
                                  return caml_cps_call3
  (Stdlib_List[19],
   _abh_,
   ptyext_constructors,
   function(_abi_){
    return caml_cps_exact_call3
            (map_loc,
             sub,
             ptyext_path,
             function(_abj_){
              var _abk_ = [0, ptyext_private];
              return caml_cps_call2
                      (sub[38],
                       sub,
                       function(_abl_){
                        return caml_cps_call3
                                (Stdlib_List[19],
                                 function(_abn_, cont){
                                  return caml_cps_exact_call3(map_fst, _abl_, _abn_, cont);
                                 },
                                 ptyext_params,
                                 function(_abm_){
                                  return caml_cps_call8
  (Dynlink_compilerlibs_Ast_helpe[10][1],
   [0, loc],
   [0, attrs],
   0,
   [0, _abm_],
   _abk_,
   _abj_,
   _abi_,
   cont);
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function map_type_exception(sub, param, cont){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             ptyexn_loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       ptyexn_attributes,
                       function(attrs){
                        return caml_cps_call3
                                (sub[19],
                                 sub,
                                 ptyexn_constructor,
                                 function(_abg_){
                                  return caml_cps_call5
  (Dynlink_compilerlibs_Ast_helpe[10][2],
   [0, loc],
   [0, attrs],
   0,
   _abg_,
   cont);
                                 });
                       });
             });
   }
   function map_extension_constructor(sub, param, cont){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             pext_loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       pext_attributes,
                       function(attrs){
                        function _aa9_(_abe_){
                         return caml_cps_exact_call3
                                 (map_loc,
                                  sub,
                                  pext_name,
                                  function(_abf_){
                                   return caml_cps_call7
   (Dynlink_compilerlibs_Ast_helpe[10][3],
    [0, loc],
    [0, attrs],
    0,
    0,
    _abf_,
    _abe_,
    cont);
                                  });
                        }
                        if(0 === pext_kind[0]){
                         var
                          cto = pext_kind[3],
                          ctl = pext_kind[2],
                          vars = pext_kind[1];
                         return caml_cps_call2
                                 (sub[38],
                                  sub,
                                  function(_aa$_){
                                   return caml_cps_exact_call3
   (map_opt,
    _aa$_,
    cto,
    function(_aba_){
     return caml_cps_exact_call3
             (map_constructor_arguments,
              sub,
              ctl,
              function(_abb_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(_abd_, cont){
                         return caml_cps_exact_call3(map_loc, sub, _abd_, cont);
                        },
                        vars,
                        function(_abc_){return _aa9_([0, _abc_, _abb_, _aba_]);});
              });
    });
                                  });
                        }
                        var li = pext_kind[1];
                        return caml_cps_exact_call3
                                (map_loc,
                                 sub,
                                 li,
                                 function(_aa__){return _aa9_([1, _aa__]);});
                       });
             });
   }
   function map$2(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var tys = desc[2], lid = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_aa6_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _aa6_,
      tys,
      function(_aa7_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid,
                function(_aa8_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[22][3],
                          [0, loc],
                          [0, attrs],
                          _aa8_,
                          _aa7_,
                          cont);
                });
      });
                                    });
                          case 1:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[10],
                                    sub,
                                    x,
                                    function(_aa5_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[22][4],
      [0, loc],
      [0, attrs],
      _aa5_,
      cont);
                                    });
                          case 2:
                           var ct = desc[3], t = desc[2], lab = desc[1];
                           return caml_cps_call3
                                   (sub[12],
                                    sub,
                                    ct,
                                    function(_aa3_){
                                     return caml_cps_call3
     (sub[38],
      sub,
      t,
      function(_aa4_){
       return caml_cps_call6
               (Dynlink_compilerlibs_Ast_helpe[22][5],
                [0, loc],
                [0, attrs],
                lab,
                _aa4_,
                _aa3_,
                cont);
      });
                                    });
                          case 3:
                           var x$0 = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$0,
                                    function(_aa2_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[22][6],
      [0, loc],
      [0, attrs],
      _aa2_,
      cont);
                                    });
                          default:
                           var ct$0 = desc[2], o = desc[1];
                           return caml_cps_call3
                                   (sub[12],
                                    sub,
                                    ct$0,
                                    function(_aa0_){
                                     return caml_cps_call3
     (sub[31],
      sub,
      o,
      function(_aa1_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[22][7],
                [0, loc],
                [0, attrs],
                _aa1_,
                _aa0_,
                cont);
      });
                                    });
                        }
                       });
             });
   }
   function map_field(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var ct = desc[1];
                           return caml_cps_call3
                                   (sub[12],
                                    sub,
                                    ct,
                                    function(_aaZ_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[23][3],
      [0, loc],
      [0, attrs],
      _aaZ_,
      cont);
                                    });
                          case 1:
                           var
                            match = desc[1],
                            t = match[4],
                            v = match[3],
                            m = match[2],
                            s = match[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t,
                                    function(_aaX_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s,
      function(_aaY_){
       return caml_cps_call7
               (Dynlink_compilerlibs_Ast_helpe[23][4],
                [0, loc],
                [0, attrs],
                _aaY_,
                m,
                v,
                _aaX_,
                cont);
      });
                                    });
                          case 2:
                           var
                            match$0 = desc[1],
                            t$0 = match$0[4],
                            v$0 = match$0[3],
                            p = match$0[2],
                            s$0 = match$0[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t$0,
                                    function(_aaV_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s$0,
      function(_aaW_){
       return caml_cps_call7
               (Dynlink_compilerlibs_Ast_helpe[23][5],
                [0, loc],
                [0, attrs],
                _aaW_,
                p,
                v$0,
                _aaV_,
                cont);
      });
                                    });
                          case 3:
                           var match$1 = desc[1], t2 = match$1[2], t1 = match$1[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t2,
                                    function(_aaT_){
                                     return caml_cps_call3
     (sub[38],
      sub,
      t1,
      function(_aaU_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[23][6],
                [0, loc],
                [0, attrs],
                _aaU_,
                _aaT_,
                cont);
      });
                                    });
                          case 4:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[1],
                                    sub,
                                    x,
                                    function(_aaS_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[23][8],
      [0, loc],
      _aaS_,
      cont);
                                    });
                          default:
                           var x$0 = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$0,
                                    function(_aaR_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[23][7],
      [0, loc],
      [0, attrs],
      _aaR_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_signature(sub, param, cont){
    var pcsig_fields = param[2], pcsig_self = param[1];
    return caml_cps_call2
            (sub[14],
             sub,
             function(_aaO_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       _aaO_,
                       pcsig_fields,
                       function(_aaP_){
                        return caml_cps_call3
                                (sub[38],
                                 sub,
                                 pcsig_self,
                                 function(_aaQ_){
                                  return caml_cps_call3
  (Dynlink_compilerlibs_Ast_helpe[27][1], _aaQ_, _aaP_, cont);
                                 });
                       });
             });
   }
   function map_functor_param(sub, param, cont){
    if(! param) return cont(0);
    var mt = param[2], s = param[1];
    return caml_cps_call3
            (sub[28],
             sub,
             mt,
             function(_aaM_){
              return caml_cps_exact_call3
                      (map_loc,
                       sub,
                       s,
                       function(_aaN_){return cont([0, _aaN_, _aaM_]);});
             });
   }
   function map$3(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var s = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s,
                                    function(_aaL_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[11][3],
      [0, loc],
      [0, attrs],
      _aaL_,
      cont);
                                    });
                          case 1:
                           var sg = desc[1];
                           return caml_cps_call3
                                   (sub[34],
                                    sub,
                                    sg,
                                    function(_aaK_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[11][5],
      [0, loc],
      [0, attrs],
      _aaK_,
      cont);
                                    });
                          case 2:
                           var mt = desc[2], param = desc[1];
                           return caml_cps_call3
                                   (sub[28],
                                    sub,
                                    mt,
                                    function(_aaI_){
                                     return caml_cps_exact_call3
     (map_functor_param,
      sub,
      param,
      function(_aaJ_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[11][6],
                [0, loc],
                [0, attrs],
                _aaJ_,
                _aaI_,
                cont);
      });
                                    });
                          case 3:
                           var l = desc[2], mt$0 = desc[1];
                           return caml_cps_call2
                                   (sub[45],
                                    sub,
                                    function(_aaF_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _aaF_,
      l,
      function(_aaG_){
       return caml_cps_call3
               (sub[28],
                sub,
                mt$0,
                function(_aaH_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[11][7],
                          [0, loc],
                          [0, attrs],
                          _aaH_,
                          _aaG_,
                          cont);
                });
      });
                                    });
                          case 4:
                           var me = desc[1];
                           return caml_cps_call3
                                   (sub[27],
                                    sub,
                                    me,
                                    function(_aaE_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[11][8],
      [0, loc],
      [0, attrs],
      _aaE_,
      cont);
                                    });
                          case 5:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x,
                                    function(_aaD_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[11][9],
      [0, loc],
      [0, attrs],
      _aaD_,
      cont);
                                    });
                          default:
                           var s$0 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s$0,
                                    function(_aaC_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[11][4],
      [0, loc],
      [0, attrs],
      _aaC_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_with_constraint(sub, param, cont){
    switch(param[0]){
      case 0:
       var d = param[2], lid = param[1];
       return caml_cps_call3
               (sub[39],
                sub,
                d,
                function(_aaA_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          lid,
                          function(_aaB_){return cont([0, _aaB_, _aaA_]);});
                });
      case 1:
       var lid2 = param[2], lid$0 = param[1];
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid2,
                function(_aay_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          lid$0,
                          function(_aaz_){return cont([1, _aaz_, _aay_]);});
                });
      case 2:
       var mty = param[2], lid$1 = param[1];
       return caml_cps_call3
               (sub[28],
                sub,
                mty,
                function(_aaw_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          lid$1,
                          function(_aax_){return cont([2, _aax_, _aaw_]);});
                });
      case 3:
       var mty$0 = param[2], lid$2 = param[1];
       return caml_cps_call3
               (sub[28],
                sub,
                mty$0,
                function(_aau_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          lid$2,
                          function(_aav_){return cont([3, _aav_, _aau_]);});
                });
      case 4:
       var d$0 = param[2], lid$3 = param[1];
       return caml_cps_call3
               (sub[39],
                sub,
                d$0,
                function(_aas_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          lid$3,
                          function(_aat_){return cont([4, _aat_, _aas_]);});
                });
      default:
       var lid$4 = param[2], s = param[1];
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid$4,
                function(_aaq_){
                 return caml_cps_exact_call3
                         (map_loc,
                          sub,
                          s,
                          function(_aar_){return cont([5, _aar_, _aaq_]);});
                });
    }
   }
   function map_signature_item(sub, param, cont){
    var loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              switch(desc[0]){
                case 0:
                 var vd = desc[1];
                 return caml_cps_call3
                         (sub[44],
                          sub,
                          vd,
                          function(_aap_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][2],
                                    [0, loc],
                                    _aap_,
                                    cont);
                          });
                case 1:
                 var l = desc[2], rf = desc[1];
                 return caml_cps_call2
                         (sub[39],
                          sub,
                          function(_aan_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _aan_,
                                    l,
                                    function(_aao_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[13][3],
      [0, loc],
      rf,
      _aao_,
      cont);
                                    });
                          });
                case 2:
                 var l$0 = desc[1];
                 return caml_cps_call2
                         (sub[39],
                          sub,
                          function(_aal_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _aal_,
                                    l$0,
                                    function(_aam_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[13][4],
      [0, loc],
      _aam_,
      cont);
                                    });
                          });
                case 3:
                 var te = desc[1];
                 return caml_cps_call3
                         (sub[40],
                          sub,
                          te,
                          function(_aak_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][5],
                                    [0, loc],
                                    _aak_,
                                    cont);
                          });
                case 4:
                 var ed = desc[1];
                 return caml_cps_call3
                         (sub[41],
                          sub,
                          ed,
                          function(_aaj_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][6],
                                    [0, loc],
                                    _aaj_,
                                    cont);
                          });
                case 5:
                 var x = desc[1];
                 return caml_cps_call3
                         (sub[25],
                          sub,
                          x,
                          function(_aai_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][7],
                                    [0, loc],
                                    _aai_,
                                    cont);
                          });
                case 6:
                 var x$0 = desc[1];
                 return caml_cps_call3
                         (sub[26],
                          sub,
                          x$0,
                          function(_aah_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][8],
                                    [0, loc],
                                    _aah_,
                                    cont);
                          });
                case 7:
                 var l$1 = desc[1];
                 return caml_cps_call2
                         (sub[25],
                          sub,
                          function(_aaf_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _aaf_,
                                    l$1,
                                    function(_aag_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[13][9],
      [0, loc],
      _aag_,
      cont);
                                    });
                          });
                case 8:
                 var x$1 = desc[1];
                 return caml_cps_call3
                         (sub[29],
                          sub,
                          x$1,
                          function(_aae_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][10],
                                    [0, loc],
                                    _aae_,
                                    cont);
                          });
                case 9:
                 var x$2 = desc[1];
                 return caml_cps_call3
                         (sub[29],
                          sub,
                          x$2,
                          function(_aad_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][11],
                                    [0, loc],
                                    _aad_,
                                    cont);
                          });
                case 10:
                 var x$3 = desc[1];
                 return caml_cps_call3
                         (sub[31],
                          sub,
                          x$3,
                          function(_aac_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][12],
                                    [0, loc],
                                    _aac_,
                                    cont);
                          });
                case 11:
                 var x$4 = desc[1];
                 return caml_cps_call3
                         (sub[21],
                          sub,
                          x$4,
                          function(_aab_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][13],
                                    [0, loc],
                                    _aab_,
                                    cont);
                          });
                case 12:
                 var l$2 = desc[1];
                 return caml_cps_call2
                         (sub[7],
                          sub,
                          function(_$$_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$$_,
                                    l$2,
                                    function(_aaa_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[13][14],
      [0, loc],
      _aaa_,
      cont);
                                    });
                          });
                case 13:
                 var l$3 = desc[1];
                 return caml_cps_call2
                         (sub[13],
                          sub,
                          function(_$9_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$9_,
                                    l$3,
                                    function(_$__){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[13][15],
      [0, loc],
      _$__,
      cont);
                                    });
                          });
                case 14:
                 var x$5 = desc[1];
                 return caml_cps_call3
                         (sub[1],
                          sub,
                          x$5,
                          function(_$8_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[13][17],
                                    [0, loc],
                                    _$8_,
                                    cont);
                          });
                default:
                 var attrs = desc[2], x$6 = desc[1];
                 return caml_cps_call3
                         (sub[2],
                          sub,
                          attrs,
                          function(attrs){
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$6,
                                    function(_$7_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[13][16],
      [0, loc],
      [0, attrs],
      _$7_,
      cont);
                                    });
                          });
              }
             });
   }
   function map$4(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var x = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    x,
                                    function(_$6_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[12][3],
      [0, loc],
      [0, attrs],
      _$6_,
      cont);
                                    });
                          case 1:
                           var str = desc[1];
                           return caml_cps_call3
                                   (sub[36],
                                    sub,
                                    str,
                                    function(_$5_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[12][4],
      [0, loc],
      [0, attrs],
      _$5_,
      cont);
                                    });
                          case 2:
                           var body = desc[2], param = desc[1];
                           return caml_cps_call3
                                   (sub[27],
                                    sub,
                                    body,
                                    function(_$3_){
                                     return caml_cps_exact_call3
     (map_functor_param,
      sub,
      param,
      function(_$4_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[12][5],
                [0, loc],
                [0, attrs],
                _$4_,
                _$3_,
                cont);
      });
                                    });
                          case 3:
                           var m2 = desc[2], m1 = desc[1];
                           return caml_cps_call3
                                   (sub[27],
                                    sub,
                                    m2,
                                    function(_$1_){
                                     return caml_cps_call3
     (sub[27],
      sub,
      m1,
      function(_$2_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[12][6],
                [0, loc],
                [0, attrs],
                _$2_,
                _$1_,
                cont);
      });
                                    });
                          case 4:
                           var mty = desc[2], m = desc[1];
                           return caml_cps_call3
                                   (sub[28],
                                    sub,
                                    mty,
                                    function(_$Z_){
                                     return caml_cps_call3
     (sub[27],
      sub,
      m,
      function(_$0_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[12][7],
                [0, loc],
                [0, attrs],
                _$0_,
                _$Z_,
                cont);
      });
                                    });
                          case 5:
                           var e = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e,
                                    function(_$Y_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[12][8],
      [0, loc],
      [0, attrs],
      _$Y_,
      cont);
                                    });
                          default:
                           var x$0 = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$0,
                                    function(_$X_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[12][9],
      [0, loc],
      [0, attrs],
      _$X_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_structure_item(sub, param, cont){
    var loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              switch(desc[0]){
                case 0:
                 var attrs = desc[2], x = desc[1];
                 return caml_cps_call3
                         (sub[2],
                          sub,
                          attrs,
                          function(attrs){
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    x,
                                    function(_$W_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[14][2],
      [0, loc],
      [0, attrs],
      _$W_,
      cont);
                                    });
                          });
                case 1:
                 var vbs = desc[2], r = desc[1];
                 return caml_cps_call2
                         (sub[43],
                          sub,
                          function(_$U_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$U_,
                                    vbs,
                                    function(_$V_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[14][3],
      [0, loc],
      r,
      _$V_,
      cont);
                                    });
                          });
                case 2:
                 var vd = desc[1];
                 return caml_cps_call3
                         (sub[44],
                          sub,
                          vd,
                          function(_$T_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][4],
                                    [0, loc],
                                    _$T_,
                                    cont);
                          });
                case 3:
                 var l = desc[2], rf = desc[1];
                 return caml_cps_call2
                         (sub[39],
                          sub,
                          function(_$R_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$R_,
                                    l,
                                    function(_$S_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[14][5],
      [0, loc],
      rf,
      _$S_,
      cont);
                                    });
                          });
                case 4:
                 var te = desc[1];
                 return caml_cps_call3
                         (sub[40],
                          sub,
                          te,
                          function(_$Q_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][6],
                                    [0, loc],
                                    _$Q_,
                                    cont);
                          });
                case 5:
                 var ed = desc[1];
                 return caml_cps_call3
                         (sub[41],
                          sub,
                          ed,
                          function(_$P_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][7],
                                    [0, loc],
                                    _$P_,
                                    cont);
                          });
                case 6:
                 var x$0 = desc[1];
                 return caml_cps_call3
                         (sub[24],
                          sub,
                          x$0,
                          function(_$O_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][8],
                                    [0, loc],
                                    _$O_,
                                    cont);
                          });
                case 7:
                 var l$0 = desc[1];
                 return caml_cps_call2
                         (sub[24],
                          sub,
                          function(_$M_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$M_,
                                    l$0,
                                    function(_$N_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[14][9],
      [0, loc],
      _$N_,
      cont);
                                    });
                          });
                case 8:
                 var x$1 = desc[1];
                 return caml_cps_call3
                         (sub[29],
                          sub,
                          x$1,
                          function(_$L_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][10],
                                    [0, loc],
                                    _$L_,
                                    cont);
                          });
                case 9:
                 var x$2 = desc[1];
                 return caml_cps_call3
                         (sub[30],
                          sub,
                          x$2,
                          function(_$K_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][11],
                                    [0, loc],
                                    _$K_,
                                    cont);
                          });
                case 10:
                 var l$1 = desc[1];
                 return caml_cps_call2
                         (sub[6],
                          sub,
                          function(_$I_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$I_,
                                    l$1,
                                    function(_$J_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[14][12],
      [0, loc],
      _$J_,
      cont);
                                    });
                          });
                case 11:
                 var l$2 = desc[1];
                 return caml_cps_call2
                         (sub[13],
                          sub,
                          function(_$G_){
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    _$G_,
                                    l$2,
                                    function(_$H_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[14][13],
      [0, loc],
      _$H_,
      cont);
                                    });
                          });
                case 12:
                 var x$3 = desc[1];
                 return caml_cps_call3
                         (sub[20],
                          sub,
                          x$3,
                          function(_$F_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][14],
                                    [0, loc],
                                    _$F_,
                                    cont);
                          });
                case 13:
                 var x$4 = desc[1];
                 return caml_cps_call3
                         (sub[1],
                          sub,
                          x$4,
                          function(_$E_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Ast_helpe[14][16],
                                    [0, loc],
                                    _$E_,
                                    cont);
                          });
                default:
                 var attrs$0 = desc[2], x$5 = desc[1];
                 return caml_cps_call3
                         (sub[2],
                          sub,
                          attrs$0,
                          function(attrs){
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$5,
                                    function(_$D_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[14][15],
      [0, loc],
      [0, attrs],
      _$D_,
      cont);
                                    });
                          });
              }
             });
   }
   function map$5(sub, param, cont){
    var attrs = param[4], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        if(typeof desc === "number")
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ast_helpe[7][39],
                                  [0, loc],
                                  [0, attrs],
                                  0,
                                  cont);
                        switch(desc[0]){
                          case 0:
                           var x = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    x,
                                    function(_$C_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][3],
      [0, loc],
      [0, attrs],
      _$C_,
      cont);
                                    });
                          case 1:
                           var x$0 = desc[1];
                           return caml_cps_call3
                                   (sub[15],
                                    sub,
                                    x$0,
                                    function(_$B_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][4],
      [0, loc],
      [0, attrs],
      _$B_,
      cont);
                                    });
                          case 2:
                           var e = desc[3], vbs = desc[2], r = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e,
                                    function(_$y_){
                                     return caml_cps_call2
     (sub[43],
      sub,
      function(_$z_){
       return caml_cps_call3
               (Stdlib_List[19],
                _$z_,
                vbs,
                function(_$A_){
                 return caml_cps_call6
                         (Dynlink_compilerlibs_Ast_helpe[7][5],
                          [0, loc],
                          [0, attrs],
                          r,
                          _$A_,
                          _$y_,
                          cont);
                });
      });
                                    });
                          case 3:
                           var pel = desc[1];
                           return caml_cps_call3
                                   (sub[5],
                                    sub,
                                    pel,
                                    function(_$x_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][7],
      [0, loc],
      [0, attrs],
      _$x_,
      cont);
                                    });
                          case 4:
                           var
                            e$0 = desc[4],
                            p = desc[3],
                            def = desc[2],
                            lab = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$0,
                                    function(_$t_){
                                     return caml_cps_call3
     (sub[32],
      sub,
      p,
      function(_$u_){
       return caml_cps_call2
               (sub[17],
                sub,
                function(_$v_){
                 return caml_cps_exact_call3
                         (map_opt,
                          _$v_,
                          def,
                          function(_$w_){
                           return caml_cps_call7
                                   (Dynlink_compilerlibs_Ast_helpe[7][6],
                                    [0, loc],
                                    [0, attrs],
                                    lab,
                                    _$w_,
                                    _$u_,
                                    _$t_,
                                    cont);
                          });
                });
      });
                                    });
                          case 5:
                           var l = desc[2], e$1 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(_$p_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(_$s_, cont){
       return caml_cps_exact_call3(map_snd, _$p_, _$s_, cont);
      },
      l,
      function(_$q_){
       return caml_cps_call3
               (sub[17],
                sub,
                e$1,
                function(_$r_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[7][8],
                          [0, loc],
                          [0, attrs],
                          _$r_,
                          _$q_,
                          cont);
                });
      });
                                    });
                          case 6:
                           var pel$0 = desc[2], e$2 = desc[1];
                           return caml_cps_call3
                                   (sub[5],
                                    sub,
                                    pel$0,
                                    function(_$n_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e$2,
      function(_$o_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][9],
                [0, loc],
                [0, attrs],
                _$o_,
                _$n_,
                cont);
      });
                                    });
                          case 7:
                           var pel$1 = desc[2], e$3 = desc[1];
                           return caml_cps_call3
                                   (sub[5],
                                    sub,
                                    pel$1,
                                    function(_$l_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e$3,
      function(_$m_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][10],
                [0, loc],
                [0, attrs],
                _$m_,
                _$l_,
                cont);
      });
                                    });
                          case 8:
                           var el = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(_$j_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _$j_,
      el,
      function(_$k_){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[7][11],
                [0, loc],
                [0, attrs],
                _$k_,
                cont);
      });
                                    });
                          case 9:
                           var arg = desc[2], lid = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(_$g_){
                                     return caml_cps_exact_call3
     (map_opt,
      _$g_,
      arg,
      function(_$h_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid,
                function(_$i_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[7][12],
                          [0, loc],
                          [0, attrs],
                          _$i_,
                          _$h_,
                          cont);
                });
      });
                                    });
                          case 10:
                           var eo = desc[2], lab$0 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(_$e_){
                                     return caml_cps_exact_call3
     (map_opt,
      _$e_,
      eo,
      function(_$f_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][13],
                [0, loc],
                [0, attrs],
                lab$0,
                _$f_,
                cont);
      });
                                    });
                          case 11:
                           var eo$0 = desc[2], l$0 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(__9_){
                                     return caml_cps_exact_call3
     (map_opt,
      __9_,
      eo$0,
      function(____){
       return caml_cps_call2
               (sub[17],
                sub,
                function(__$_){
                 function _$a_(_$d_, cont){
                  return caml_cps_exact_call3(map_loc, sub, _$d_, cont);
                 }
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(_$c_, cont){
                           return caml_cps_exact_call4
                                   (map_tuple, _$a_, __$_, _$c_, cont);
                          },
                          l$0,
                          function(_$b_){
                           return caml_cps_call5
                                   (Dynlink_compilerlibs_Ast_helpe[7][14],
                                    [0, loc],
                                    [0, attrs],
                                    _$b_,
                                    ____,
                                    cont);
                          });
                });
      });
                                    });
                          case 12:
                           var lid$0 = desc[2], e$4 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    lid$0,
                                    function(__7_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e$4,
      function(__8_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][15],
                [0, loc],
                [0, attrs],
                __8_,
                __7_,
                cont);
      });
                                    });
                          case 13:
                           var e2 = desc[3], lid$1 = desc[2], e1 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e2,
                                    function(__4_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      lid$1,
      function(__5_){
       return caml_cps_call3
               (sub[17],
                sub,
                e1,
                function(__6_){
                 return caml_cps_call6
                         (Dynlink_compilerlibs_Ast_helpe[7][16],
                          [0, loc],
                          [0, attrs],
                          __6_,
                          __5_,
                          __4_,
                          cont);
                });
      });
                                    });
                          case 14:
                           var el$0 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(__2_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      __2_,
      el$0,
      function(__3_){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[7][17],
                [0, loc],
                [0, attrs],
                __3_,
                cont);
      });
                                    });
                          case 15:
                           var e3 = desc[3], e2$0 = desc[2], e1$0 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(__Y_){
                                     return caml_cps_exact_call3
     (map_opt,
      __Y_,
      e3,
      function(__Z_){
       return caml_cps_call3
               (sub[17],
                sub,
                e2$0,
                function(__0_){
                 return caml_cps_call3
                         (sub[17],
                          sub,
                          e1$0,
                          function(__1_){
                           return caml_cps_call6
                                   (Dynlink_compilerlibs_Ast_helpe[7][18],
                                    [0, loc],
                                    [0, attrs],
                                    __1_,
                                    __0_,
                                    __Z_,
                                    cont);
                          });
                });
      });
                                    });
                          case 16:
                           var e2$1 = desc[2], e1$1 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e2$1,
                                    function(__W_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e1$1,
      function(__X_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][19],
                [0, loc],
                [0, attrs],
                __X_,
                __W_,
                cont);
      });
                                    });
                          case 17:
                           var e2$2 = desc[2], e1$2 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e2$2,
                                    function(__U_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e1$2,
      function(__V_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][20],
                [0, loc],
                [0, attrs],
                __V_,
                __U_,
                cont);
      });
                                    });
                          case 18:
                           var
                            e3$0 = desc[5],
                            d = desc[4],
                            e2$3 = desc[3],
                            e1$3 = desc[2],
                            p$0 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e3$0,
                                    function(__Q_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e2$3,
      function(__R_){
       return caml_cps_call3
               (sub[17],
                sub,
                e1$3,
                function(__S_){
                 return caml_cps_call3
                         (sub[32],
                          sub,
                          p$0,
                          function(__T_){
                           return caml_cps_call8
                                   (Dynlink_compilerlibs_Ast_helpe[7][21],
                                    [0, loc],
                                    [0, attrs],
                                    __T_,
                                    __S_,
                                    __R_,
                                    d,
                                    __Q_,
                                    cont);
                          });
                });
      });
                                    });
                          case 19:
                           var t = desc[2], e$5 = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t,
                                    function(__O_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e$5,
      function(__P_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][23],
                [0, loc],
                [0, attrs],
                __P_,
                __O_,
                cont);
      });
                                    });
                          case 20:
                           var t2 = desc[3], t1 = desc[2], e$6 = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t2,
                                    function(__K_){
                                     return caml_cps_call2
     (sub[38],
      sub,
      function(__L_){
       return caml_cps_exact_call3
               (map_opt,
                __L_,
                t1,
                function(__M_){
                 return caml_cps_call3
                         (sub[17],
                          sub,
                          e$6,
                          function(__N_){
                           return caml_cps_call6
                                   (Dynlink_compilerlibs_Ast_helpe[7][22],
                                    [0, loc],
                                    [0, attrs],
                                    __N_,
                                    __M_,
                                    __K_,
                                    cont);
                          });
                });
      });
                                    });
                          case 21:
                           var s = desc[2], e$7 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s,
                                    function(__I_){
                                     return caml_cps_call3
     (sub[17],
      sub,
      e$7,
      function(__J_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][24],
                [0, loc],
                [0, attrs],
                __J_,
                __I_,
                cont);
      });
                                    });
                          case 22:
                           var lid$2 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    lid$2,
                                    function(__H_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][25],
      [0, loc],
      [0, attrs],
      __H_,
      cont);
                                    });
                          case 23:
                           var e$8 = desc[2], s$0 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$8,
                                    function(__F_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s$0,
      function(__G_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][26],
                [0, loc],
                [0, attrs],
                __G_,
                __F_,
                cont);
      });
                                    });
                          case 24:
                           var sel = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(__A_){
                                     function __B_(__E_, cont){
                                      return caml_cps_exact_call3(map_loc, sub, __E_, cont);
                                     }
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(__D_, cont){
       return caml_cps_exact_call4
               (map_tuple, __B_, __A_, __D_, cont);
      },
      sel,
      function(__C_){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[7][27],
                [0, loc],
                [0, attrs],
                __C_,
                cont);
      });
                                    });
                          case 25:
                           var e$9 = desc[3], me = desc[2], s$1 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$9,
                                    function(__x_){
                                     return caml_cps_call3
     (sub[27],
      sub,
      me,
      function(__y_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                s$1,
                function(__z_){
                 return caml_cps_call6
                         (Dynlink_compilerlibs_Ast_helpe[7][28],
                          [0, loc],
                          [0, attrs],
                          __z_,
                          __y_,
                          __x_,
                          cont);
                });
      });
                                    });
                          case 26:
                           var e$10 = desc[2], cd = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$10,
                                    function(__v_){
                                     return caml_cps_call3
     (sub[19],
      sub,
      cd,
      function(__w_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][29],
                [0, loc],
                [0, attrs],
                __w_,
                __v_,
                cont);
      });
                                    });
                          case 27:
                           var e$11 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$11,
                                    function(__u_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][30],
      [0, loc],
      [0, attrs],
      __u_,
      cont);
                                    });
                          case 28:
                           var e$12 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$12,
                                    function(__t_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][31],
      [0, loc],
      [0, attrs],
      __t_,
      cont);
                                    });
                          case 29:
                           var t$0 = desc[2], e$13 = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(__q_){
                                     return caml_cps_exact_call3
     (map_opt,
      __q_,
      t$0,
      function(__r_){
       return caml_cps_call3
               (sub[17],
                sub,
                e$13,
                function(__s_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[7][32],
                          [0, loc],
                          [0, attrs],
                          __s_,
                          __r_,
                          cont);
                });
      });
                                    });
                          case 30:
                           var cls = desc[1];
                           return caml_cps_call3
                                   (sub[11],
                                    sub,
                                    cls,
                                    function(__p_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][33],
      [0, loc],
      [0, attrs],
      __p_,
      cont);
                                    });
                          case 31:
                           var e$14 = desc[2], s$2 = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$14,
                                    function(__n_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s$2,
      function(__o_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][34],
                [0, loc],
                [0, attrs],
                __o_,
                __n_,
                cont);
      });
                                    });
                          case 32:
                           var me$0 = desc[1];
                           return caml_cps_call3
                                   (sub[27],
                                    sub,
                                    me$0,
                                    function(__m_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][35],
      [0, loc],
      [0, attrs],
      __m_,
      cont);
                                    });
                          case 33:
                           var e$15 = desc[2], o = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e$15,
                                    function(__k_){
                                     return caml_cps_call3
     (sub[30],
      sub,
      o,
      function(__l_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[7][36],
                [0, loc],
                [0, attrs],
                __l_,
                __k_,
                cont);
      });
                                    });
                          case 34:
                           var
                            match = desc[1],
                            body = match[3],
                            ands = match[2],
                            let$0 = match[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    body,
                                    function(__g_){
                                     return caml_cps_call2
     (sub[3],
      sub,
      function(__h_){
       return caml_cps_call3
               (Stdlib_List[19],
                __h_,
                ands,
                function(__i_){
                 return caml_cps_call3
                         (sub[3],
                          sub,
                          let$0,
                          function(__j_){
                           return caml_cps_call6
                                   (Dynlink_compilerlibs_Ast_helpe[7][37],
                                    [0, loc],
                                    [0, attrs],
                                    __j_,
                                    __i_,
                                    __g_,
                                    cont);
                          });
                });
      });
                                    });
                          default:
                           var x$1 = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$1,
                                    function(__f_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[7][38],
      [0, loc],
      [0, attrs],
      __f_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_binding_op(sub, param, cont){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1];
    return caml_cps_exact_call3
            (map_loc,
             sub,
             pbop_op,
             function(op){
              return caml_cps_call3
                      (sub[32],
                       sub,
                       pbop_pat,
                       function(pat){
                        return caml_cps_call3
                                (sub[17],
                                 sub,
                                 pbop_exp,
                                 function(exp){
                                  return caml_cps_call3
  (sub[23],
   sub,
   pbop_loc,
   function(loc){
    return caml_cps_call5
            (Dynlink_compilerlibs_Ast_helpe[7][41],
             op,
             pat,
             exp,
             loc,
             cont);
   });
                                 });
                       });
             });
   }
   function map$6(sub, param, cont){
    var attrs = param[4], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        if(typeof desc === "number")
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ast_helpe[6][3],
                                  [0, loc],
                                  [0, attrs],
                                  0,
                                  cont);
                        switch(desc[0]){
                          case 0:
                           var s = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s,
                                    function(__e_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][4],
      [0, loc],
      [0, attrs],
      __e_,
      cont);
                                    });
                          case 1:
                           var s$0 = desc[2], p = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s$0,
                                    function(__c_){
                                     return caml_cps_call3
     (sub[32],
      sub,
      p,
      function(__d_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][5],
                [0, loc],
                [0, attrs],
                __d_,
                __c_,
                cont);
      });
                                    });
                          case 2:
                           var c = desc[1];
                           return caml_cps_call3
                                   (sub[15],
                                    sub,
                                    c,
                                    function(__b_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][6],
      [0, loc],
      [0, attrs],
      __b_,
      cont);
                                    });
                          case 3:
                           var c2 = desc[2], c1 = desc[1];
                           return caml_cps_call3
                                   (sub[15],
                                    sub,
                                    c2,
                                    function(_Z$_){
                                     return caml_cps_call3
     (sub[15],
      sub,
      c1,
      function(__a_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][7],
                [0, loc],
                [0, attrs],
                __a_,
                _Z$_,
                cont);
      });
                                    });
                          case 4:
                           var pl = desc[1];
                           return caml_cps_call2
                                   (sub[32],
                                    sub,
                                    function(_Z9_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _Z9_,
      pl,
      function(_Z__){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[6][8],
                [0, loc],
                [0, attrs],
                _Z__,
                cont);
      });
                                    });
                          case 5:
                           var p$0 = desc[2], l = desc[1];
                           return caml_cps_exact_call3
                                   (map_opt,
                                    function(param, cont){
                                     var p = param[2], vl = param[1];
                                     return caml_cps_call3
     (sub[32],
      sub,
      p,
      function(_Z6_){
       return caml_cps_call3
               (Stdlib_List[19],
                function(_Z8_, cont){
                 return caml_cps_exact_call3(map_loc, sub, _Z8_, cont);
                },
                vl,
                function(_Z7_){return cont([0, _Z7_, _Z6_]);});
      });
                                    },
                                    p$0,
                                    function(_Z4_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      l,
      function(_Z5_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][9],
                [0, loc],
                [0, attrs],
                _Z5_,
                _Z4_,
                cont);
      });
                                    });
                          case 6:
                           var p$1 = desc[2], l$0 = desc[1];
                           return caml_cps_call2
                                   (sub[32],
                                    sub,
                                    function(_Z2_){
                                     return caml_cps_exact_call3
     (map_opt,
      _Z2_,
      p$1,
      function(_Z3_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][10],
                [0, loc],
                [0, attrs],
                l$0,
                _Z3_,
                cont);
      });
                                    });
                          case 7:
                           var cf = desc[2], lpl = desc[1];
                           return caml_cps_call2
                                   (sub[32],
                                    sub,
                                    function(_ZX_){
                                     function _ZY_(_Z1_, cont){
                                      return caml_cps_exact_call3(map_loc, sub, _Z1_, cont);
                                     }
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(_Z0_, cont){
       return caml_cps_exact_call4
               (map_tuple, _ZY_, _ZX_, _Z0_, cont);
      },
      lpl,
      function(_ZZ_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][11],
                [0, loc],
                [0, attrs],
                _ZZ_,
                cf,
                cont);
      });
                                    });
                          case 8:
                           var pl$0 = desc[1];
                           return caml_cps_call2
                                   (sub[32],
                                    sub,
                                    function(_ZV_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _ZV_,
      pl$0,
      function(_ZW_){
       return caml_cps_call4
               (Dynlink_compilerlibs_Ast_helpe[6][12],
                [0, loc],
                [0, attrs],
                _ZW_,
                cont);
      });
                                    });
                          case 9:
                           var p2 = desc[2], p1 = desc[1];
                           return caml_cps_call3
                                   (sub[32],
                                    sub,
                                    p2,
                                    function(_ZT_){
                                     return caml_cps_call3
     (sub[32],
      sub,
      p1,
      function(_ZU_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][13],
                [0, loc],
                [0, attrs],
                _ZU_,
                _ZT_,
                cont);
      });
                                    });
                          case 10:
                           var t = desc[2], p$2 = desc[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t,
                                    function(_ZR_){
                                     return caml_cps_call3
     (sub[32],
      sub,
      p$2,
      function(_ZS_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][14],
                [0, loc],
                [0, attrs],
                _ZS_,
                _ZR_,
                cont);
      });
                                    });
                          case 11:
                           var s$1 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s$1,
                                    function(_ZQ_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][15],
      [0, loc],
      [0, attrs],
      _ZQ_,
      cont);
                                    });
                          case 12:
                           var p$3 = desc[1];
                           return caml_cps_call3
                                   (sub[32],
                                    sub,
                                    p$3,
                                    function(_ZP_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][16],
      [0, loc],
      [0, attrs],
      _ZP_,
      cont);
                                    });
                          case 13:
                           var s$2 = desc[1];
                           return caml_cps_exact_call3
                                   (map_loc,
                                    sub,
                                    s$2,
                                    function(_ZO_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][17],
      [0, loc],
      [0, attrs],
      _ZO_,
      cont);
                                    });
                          case 14:
                           var p$4 = desc[1];
                           return caml_cps_call3
                                   (sub[32],
                                    sub,
                                    p$4,
                                    function(_ZN_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][19],
      [0, loc],
      [0, attrs],
      _ZN_,
      cont);
                                    });
                          case 15:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x,
                                    function(_ZM_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[6][20],
      [0, loc],
      [0, attrs],
      _ZM_,
      cont);
                                    });
                          default:
                           var p$5 = desc[2], lid = desc[1];
                           return caml_cps_call3
                                   (sub[32],
                                    sub,
                                    p$5,
                                    function(_ZK_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      lid,
      function(_ZL_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[6][18],
                [0, loc],
                [0, attrs],
                _ZL_,
                _ZK_,
                cont);
      });
                                    });
                        }
                       });
             });
   }
   function map$7(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var tys = desc[2], lid = desc[1];
                           return caml_cps_call2
                                   (sub[38],
                                    sub,
                                    function(_ZH_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      _ZH_,
      tys,
      function(_ZI_){
       return caml_cps_exact_call3
               (map_loc,
                sub,
                lid,
                function(_ZJ_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[24][3],
                          [0, loc],
                          [0, attrs],
                          _ZJ_,
                          _ZI_,
                          cont);
                });
      });
                                    });
                          case 1:
                           var s = desc[1];
                           return caml_cps_call3
                                   (sub[11],
                                    sub,
                                    s,
                                    function(_ZG_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[24][4],
      [0, loc],
      [0, attrs],
      _ZG_,
      cont);
                                    });
                          case 2:
                           var ce = desc[4], p = desc[3], e = desc[2], lab = desc[1];
                           return caml_cps_call3
                                   (sub[8],
                                    sub,
                                    ce,
                                    function(_ZC_){
                                     return caml_cps_call3
     (sub[32],
      sub,
      p,
      function(_ZD_){
       return caml_cps_call2
               (sub[17],
                sub,
                function(_ZE_){
                 return caml_cps_exact_call3
                         (map_opt,
                          _ZE_,
                          e,
                          function(_ZF_){
                           return caml_cps_call7
                                   (Dynlink_compilerlibs_Ast_helpe[24][5],
                                    [0, loc],
                                    [0, attrs],
                                    lab,
                                    _ZF_,
                                    _ZD_,
                                    _ZC_,
                                    cont);
                          });
                });
      });
                                    });
                          case 3:
                           var l = desc[2], ce$0 = desc[1];
                           return caml_cps_call2
                                   (sub[17],
                                    sub,
                                    function(_Zy_){
                                     return caml_cps_call3
     (Stdlib_List[19],
      function(_ZB_, cont){
       return caml_cps_exact_call3(map_snd, _Zy_, _ZB_, cont);
      },
      l,
      function(_Zz_){
       return caml_cps_call3
               (sub[8],
                sub,
                ce$0,
                function(_ZA_){
                 return caml_cps_call5
                         (Dynlink_compilerlibs_Ast_helpe[24][6],
                          [0, loc],
                          [0, attrs],
                          _ZA_,
                          _Zz_,
                          cont);
                });
      });
                                    });
                          case 4:
                           var ce$1 = desc[3], vbs = desc[2], r = desc[1];
                           return caml_cps_call3
                                   (sub[8],
                                    sub,
                                    ce$1,
                                    function(_Zv_){
                                     return caml_cps_call2
     (sub[43],
      sub,
      function(_Zw_){
       return caml_cps_call3
               (Stdlib_List[19],
                _Zw_,
                vbs,
                function(_Zx_){
                 return caml_cps_call6
                         (Dynlink_compilerlibs_Ast_helpe[24][7],
                          [0, loc],
                          [0, attrs],
                          r,
                          _Zx_,
                          _Zv_,
                          cont);
                });
      });
                                    });
                          case 5:
                           var ct = desc[2], ce$2 = desc[1];
                           return caml_cps_call3
                                   (sub[12],
                                    sub,
                                    ct,
                                    function(_Zt_){
                                     return caml_cps_call3
     (sub[8],
      sub,
      ce$2,
      function(_Zu_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[24][8],
                [0, loc],
                [0, attrs],
                _Zu_,
                _Zt_,
                cont);
      });
                                    });
                          case 6:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x,
                                    function(_Zs_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[24][9],
      [0, loc],
      [0, attrs],
      _Zs_,
      cont);
                                    });
                          default:
                           var ce$3 = desc[2], o = desc[1];
                           return caml_cps_call3
                                   (sub[8],
                                    sub,
                                    ce$3,
                                    function(_Zq_){
                                     return caml_cps_call3
     (sub[31],
      sub,
      o,
      function(_Zr_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[24][10],
                [0, loc],
                [0, attrs],
                _Zr_,
                _Zq_,
                cont);
      });
                                    });
                        }
                       });
             });
   }
   function map_kind(sub, param, cont){
    if(0 === param[0]){
     var t = param[1];
     return caml_cps_call3
             (sub[38], sub, t, function(_Zp_){return cont([0, _Zp_]);});
    }
    var e = param[2], o = param[1];
    return caml_cps_call3
            (sub[17], sub, e, function(_Zo_){return cont([1, o, _Zo_]);});
   }
   function map_field$0(sub, param, cont){
    var attrs = param[3], loc = param[2], desc = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       attrs,
                       function(attrs){
                        switch(desc[0]){
                          case 0:
                           var s = desc[3], ce = desc[2], o = desc[1];
                           return caml_cps_exact_call3
                                   (map_opt,
                                    function(_Zn_, cont){
                                     return caml_cps_exact_call3(map_loc, sub, _Zn_, cont);
                                    },
                                    s,
                                    function(_Zl_){
                                     return caml_cps_call3
     (sub[8],
      sub,
      ce,
      function(_Zm_){
       return caml_cps_call6
               (Dynlink_compilerlibs_Ast_helpe[25][3],
                [0, loc],
                [0, attrs],
                o,
                _Zm_,
                _Zl_,
                cont);
      });
                                    });
                          case 1:
                           var
                            match = desc[1],
                            k = match[3],
                            m = match[2],
                            s$0 = match[1];
                           return caml_cps_exact_call3
                                   (map_kind,
                                    sub,
                                    k,
                                    function(_Zj_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s$0,
      function(_Zk_){
       return caml_cps_call6
               (Dynlink_compilerlibs_Ast_helpe[25][4],
                [0, loc],
                [0, attrs],
                _Zk_,
                m,
                _Zj_,
                cont);
      });
                                    });
                          case 2:
                           var
                            match$0 = desc[1],
                            k$0 = match$0[3],
                            p = match$0[2],
                            s$1 = match$0[1];
                           return caml_cps_exact_call3
                                   (map_kind,
                                    sub,
                                    k$0,
                                    function(_Zh_){
                                     return caml_cps_exact_call3
     (map_loc,
      sub,
      s$1,
      function(_Zi_){
       return caml_cps_call6
               (Dynlink_compilerlibs_Ast_helpe[25][5],
                [0, loc],
                [0, attrs],
                _Zi_,
                p,
                _Zh_,
                cont);
      });
                                    });
                          case 3:
                           var match$1 = desc[1], t2 = match$1[2], t1 = match$1[1];
                           return caml_cps_call3
                                   (sub[38],
                                    sub,
                                    t2,
                                    function(_Zf_){
                                     return caml_cps_call3
     (sub[38],
      sub,
      t1,
      function(_Zg_){
       return caml_cps_call5
               (Dynlink_compilerlibs_Ast_helpe[25][6],
                [0, loc],
                [0, attrs],
                _Zg_,
                _Zf_,
                cont);
      });
                                    });
                          case 4:
                           var e = desc[1];
                           return caml_cps_call3
                                   (sub[17],
                                    sub,
                                    e,
                                    function(_Ze_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[25][7],
      [0, loc],
      [0, attrs],
      _Ze_,
      cont);
                                    });
                          case 5:
                           var x = desc[1];
                           return caml_cps_call3
                                   (sub[1],
                                    sub,
                                    x,
                                    function(_Zd_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[25][9],
      [0, loc],
      _Zd_,
      cont);
                                    });
                          default:
                           var x$0 = desc[1];
                           return caml_cps_call3
                                   (sub[18],
                                    sub,
                                    x$0,
                                    function(_Zc_){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Ast_helpe[25][8],
      [0, loc],
      [0, attrs],
      _Zc_,
      cont);
                                    });
                        }
                       });
             });
   }
   function map_structure(sub, param, cont){
    var pcstr_fields = param[2], pcstr_self = param[1];
    return caml_cps_call2
            (sub[9],
             sub,
             function(_Y$_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       _Y$_,
                       pcstr_fields,
                       function(_Za_){
                        return caml_cps_call3
                                (sub[32],
                                 sub,
                                 pcstr_self,
                                 function(_Zb_){return cont([0, _Zb_, _Za_]);});
                       });
             });
   }
   function class_infos(sub, f, param, cont){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pl = param[2],
     pci_virt = param[1];
    return caml_cps_call3
            (sub[23],
             sub,
             pci_loc,
             function(loc){
              return caml_cps_call3
                      (sub[2],
                       sub,
                       pci_attributes,
                       function(attrs){
                        return caml_cps_call2
                                (f,
                                 pci_expr,
                                 function(_Y6_){
                                  return caml_cps_exact_call3
  (map_loc,
   sub,
   pci_name,
   function(_Y7_){
    return caml_cps_call2
            (sub[38],
             sub,
             function(_Y8_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(_Y__, cont){
                        return caml_cps_exact_call3(map_fst, _Y8_, _Y__, cont);
                       },
                       pl,
                       function(_Y9_){
                        return caml_cps_call9
                                (Dynlink_compilerlibs_Ast_helpe[26][1],
                                 [0, loc],
                                 [0, attrs],
                                 0,
                                 0,
                                 [0, pci_virt],
                                 [0, _Y9_],
                                 _Y7_,
                                 _Y6_,
                                 cont);
                       });
             });
   });
                                 });
                       });
             });
   }
   var
    default_mapper =
      [0,
       function(this$0, a, cont){
        return caml_cps_call3
                (this$0[23],
                 this$0,
                 a[3],
                 function(_Y3_){
                  return caml_cps_call3
                          (this$0[33],
                           this$0,
                           a[2],
                           function(_Y4_){
                            return caml_cps_exact_call3
                                    (map_loc,
                                     this$0,
                                     a[1],
                                     function(_Y5_){return cont([0, _Y5_, _Y4_, _Y3_]);});
                           });
                 });
       },
       function(this$0, l, cont){
        return caml_cps_call2
                (this$0[1],
                 this$0,
                 function(_Y2_){
                  return caml_cps_call3(Stdlib_List[19], _Y2_, l, cont);
                 });
       },
       map_binding_op,
       function(this$0, param, cont){
        var pc_rhs = param[3], pc_guard = param[2], pc_lhs = param[1];
        return caml_cps_call3
                (this$0[17],
                 this$0,
                 pc_rhs,
                 function(_YY_){
                  return caml_cps_call2
                          (this$0[17],
                           this$0,
                           function(_YZ_){
                            return caml_cps_exact_call3
                                    (map_opt,
                                     _YZ_,
                                     pc_guard,
                                     function(_Y0_){
                                      return caml_cps_call3
      (this$0[32],
       this$0,
       pc_lhs,
       function(_Y1_){return cont([0, _Y1_, _Y0_, _YY_]);});
                                     });
                           });
                 });
       },
       function(this$0, l, cont){
        return caml_cps_call2
                (this$0[4],
                 this$0,
                 function(_YX_){
                  return caml_cps_call3(Stdlib_List[19], _YX_, l, cont);
                 });
       },
       function(this$0, cont){
        return caml_cps_call2
                (this$0[8],
                 this$0,
                 function(_YV_){
                  return cont
                          (function(_YW_, cont){
                            return caml_cps_exact_call4
                                    (class_infos, this$0, _YV_, _YW_, cont);
                           });
                 });
       },
       function(this$0, cont){
        return caml_cps_call2
                (this$0[12],
                 this$0,
                 function(_YT_){
                  return cont
                          (function(_YU_, cont){
                            return caml_cps_exact_call4
                                    (class_infos, this$0, _YT_, _YU_, cont);
                           });
                 });
       },
       map$7,
       map_field$0,
       map_signature,
       map_structure,
       map$2,
       function(this$0, cont){
        return caml_cps_call2
                (this$0[12],
                 this$0,
                 function(_YR_){
                  return cont
                          (function(_YS_, cont){
                            return caml_cps_exact_call4
                                    (class_infos, this$0, _YR_, _YS_, cont);
                           });
                 });
       },
       map_field,
       map$0,
       function(this$0, param, cont){
        var
         pcd_attributes = param[6],
         pcd_loc = param[5],
         pcd_res = param[4],
         pcd_args = param[3],
         pcd_vars = param[2],
         pcd_name = param[1];
        return caml_cps_exact_call3
                (map_loc,
                 this$0,
                 pcd_name,
                 function(_YF_){
                  return caml_cps_call2
                          (this$0[38],
                           this$0,
                           function(_YG_){
                            return caml_cps_exact_call3
                                    (map_opt,
                                     _YG_,
                                     pcd_res,
                                     function(_YH_){
                                      return caml_cps_exact_call3
      (map_constructor_arguments,
       this$0,
       pcd_args,
       function(_YI_){
        var _YJ_ = [0, _YI_];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_YQ_, cont){
                  return caml_cps_exact_call3(map_loc, this$0, _YQ_, cont);
                 },
                 pcd_vars,
                 function(_YK_){
                  var _YL_ = [0, _YK_], _YM_ = 0;
                  return caml_cps_call3
                          (this$0[2],
                           this$0,
                           pcd_attributes,
                           function(_YN_){
                            var _YO_ = [0, _YN_];
                            return caml_cps_call3
                                    (this$0[23],
                                     this$0,
                                     pcd_loc,
                                     function(_YP_){
                                      return caml_cps_call8
      (Dynlink_compilerlibs_Ast_helpe[9][2],
       [0, _YP_],
       _YO_,
       _YM_,
       _YL_,
       _YJ_,
       _YH_,
       _YF_,
       cont);
                                     });
                           });
                 });
       });
                                     });
                           });
                 });
       },
       map$5,
       function(this$0, param, cont){
        var e = param[2], s = param[1];
        return caml_cps_call3
                (this$0[33],
                 this$0,
                 e,
                 function(_YD_){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           s,
                           function(_YE_){return cont([0, _YE_, _YD_]);});
                 });
       },
       map_extension_constructor,
       function(this$0, param, cont){
        var
         pincl_attributes = param[3],
         pincl_loc = param[2],
         pincl_mod = param[1];
        return caml_cps_call3
                (this$0[27],
                 this$0,
                 pincl_mod,
                 function(_Yy_){
                  var _Yz_ = 0;
                  return caml_cps_call3
                          (this$0[2],
                           this$0,
                           pincl_attributes,
                           function(_YA_){
                            var _YB_ = [0, _YA_];
                            return caml_cps_call3
                                    (this$0[23],
                                     this$0,
                                     pincl_loc,
                                     function(_YC_){
                                      return caml_cps_call5
      (Dynlink_compilerlibs_Ast_helpe[20][1],
       [0, _YC_],
       _YB_,
       _Yz_,
       _Yy_,
       cont);
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         pincl_attributes = param[3],
         pincl_loc = param[2],
         pincl_mod = param[1];
        return caml_cps_call3
                (this$0[28],
                 this$0,
                 pincl_mod,
                 function(_Yt_){
                  var _Yu_ = 0;
                  return caml_cps_call3
                          (this$0[2],
                           this$0,
                           pincl_attributes,
                           function(_Yv_){
                            var _Yw_ = [0, _Yv_];
                            return caml_cps_call3
                                    (this$0[23],
                                     this$0,
                                     pincl_loc,
                                     function(_Yx_){
                                      return caml_cps_call5
      (Dynlink_compilerlibs_Ast_helpe[20][1],
       [0, _Yx_],
       _Yw_,
       _Yu_,
       _Yt_,
       cont);
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         pld_attributes = param[5],
         pld_loc = param[4],
         pld_type = param[3],
         pld_mutable = param[2],
         pld_name = param[1];
        return caml_cps_call3
                (this$0[38],
                 this$0,
                 pld_type,
                 function(_Ym_){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           pld_name,
                           function(_Yn_){
                            var _Yo_ = [0, pld_mutable], _Yp_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pld_attributes,
                                     function(_Yq_){
                                      var _Yr_ = [0, _Yq_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pld_loc,
       function(_Ys_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[9][3],
                 [0, _Ys_],
                 _Yr_,
                 _Yp_,
                 _Yo_,
                 _Yn_,
                 _Ym_,
                 cont);
       });
                                     });
                           });
                 });
       },
       function(this$0, l, cont){return cont(l);},
       function(this$0, param, cont){
        var
         pmb_loc = param[4],
         pmb_attributes = param[3],
         pmb_expr = param[2],
         pmb_name = param[1];
        return caml_cps_call3
                (this$0[27],
                 this$0,
                 pmb_expr,
                 function(_Yf_){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           pmb_name,
                           function(_Yg_){
                            var _Yh_ = 0, _Yi_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pmb_attributes,
                                     function(_Yj_){
                                      var _Yk_ = [0, _Yj_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pmb_loc,
       function(_Yl_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[18][1],
                 [0, _Yl_],
                 _Yk_,
                 _Yi_,
                 _Yh_,
                 _Yg_,
                 _Yf_,
                 cont);
       });
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         pmd_loc = param[4],
         pmd_attributes = param[3],
         pmd_type = param[2],
         pmd_name = param[1];
        return caml_cps_call3
                (this$0[28],
                 this$0,
                 pmd_type,
                 function(_X__){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           pmd_name,
                           function(_X$_){
                            var _Ya_ = 0, _Yb_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pmd_attributes,
                                     function(_Yc_){
                                      var _Yd_ = [0, _Yc_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pmd_loc,
       function(_Ye_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[15][1],
                 [0, _Ye_],
                 _Yd_,
                 _Yb_,
                 _Ya_,
                 _X$_,
                 _X__,
                 cont);
       });
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         pms_loc = param[4],
         pms_attributes = param[3],
         pms_manifest = param[2],
         pms_name = param[1];
        return caml_cps_exact_call3
                (map_loc,
                 this$0,
                 pms_manifest,
                 function(_X3_){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           pms_name,
                           function(_X4_){
                            var _X5_ = 0, _X6_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pms_attributes,
                                     function(_X7_){
                                      var _X8_ = [0, _X7_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pms_loc,
       function(_X9_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[16][1],
                 [0, _X9_],
                 _X8_,
                 _X6_,
                 _X5_,
                 _X4_,
                 _X3_,
                 cont);
       });
                                     });
                           });
                 });
       },
       map$4,
       map$3,
       function(this$0, param, cont){
        var
         pmtd_loc = param[4],
         pmtd_attributes = param[3],
         pmtd_type = param[2],
         pmtd_name = param[1];
        return caml_cps_exact_call3
                (map_loc,
                 this$0,
                 pmtd_name,
                 function(_XV_){
                  return caml_cps_call2
                          (this$0[28],
                           this$0,
                           function(_XW_){
                            return caml_cps_exact_call3
                                    (map_opt,
                                     _XW_,
                                     pmtd_type,
                                     function(_XX_){
                                      var _XY_ = 0, _XZ_ = 0;
                                      return caml_cps_call3
      (this$0[2],
       this$0,
       pmtd_attributes,
       function(_X0_){
        var _X1_ = [0, _X0_];
        return caml_cps_call3
                (this$0[23],
                 this$0,
                 pmtd_loc,
                 function(_X2_){
                  return caml_cps_call7
                          (Dynlink_compilerlibs_Ast_helpe[17][1],
                           [0, _X2_],
                           _X1_,
                           _XZ_,
                           _XY_,
                           _XX_,
                           _XV_,
                           cont);
                 });
       });
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         popen_attributes = param[4],
         popen_loc = param[3],
         popen_override = param[2],
         popen_expr = param[1];
        return caml_cps_call3
                (this$0[27],
                 this$0,
                 popen_expr,
                 function(_XP_){
                  var _XQ_ = [0, popen_override], _XR_ = 0;
                  return caml_cps_call3
                          (this$0[2],
                           this$0,
                           popen_attributes,
                           function(_XS_){
                            var _XT_ = [0, _XS_];
                            return caml_cps_call3
                                    (this$0[23],
                                     this$0,
                                     popen_loc,
                                     function(_XU_){
                                      return caml_cps_call6
      (Dynlink_compilerlibs_Ast_helpe[19][1],
       [0, _XU_],
       _XT_,
       _XR_,
       _XQ_,
       _XP_,
       cont);
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         popen_attributes = param[4],
         popen_loc = param[3],
         popen_override = param[2],
         popen_expr = param[1];
        return caml_cps_exact_call3
                (map_loc,
                 this$0,
                 popen_expr,
                 function(_XJ_){
                  var _XK_ = [0, popen_override], _XL_ = 0;
                  return caml_cps_call3
                          (this$0[2],
                           this$0,
                           popen_attributes,
                           function(_XM_){
                            var _XN_ = [0, _XM_];
                            return caml_cps_call3
                                    (this$0[23],
                                     this$0,
                                     popen_loc,
                                     function(_XO_){
                                      return caml_cps_call6
      (Dynlink_compilerlibs_Ast_helpe[19][1],
       [0, _XO_],
       _XN_,
       _XL_,
       _XK_,
       _XJ_,
       cont);
                                     });
                           });
                 });
       },
       map$6,
       function(this$0, param, cont){
        switch(param[0]){
          case 0:
           var x = param[1];
           return caml_cps_call3
                   (this$0[36],
                    this$0,
                    x,
                    function(_XI_){return cont([0, _XI_]);});
          case 1:
           var x$0 = param[1];
           return caml_cps_call3
                   (this$0[34],
                    this$0,
                    x$0,
                    function(_XH_){return cont([1, _XH_]);});
          case 2:
           var x$1 = param[1];
           return caml_cps_call3
                   (this$0[38],
                    this$0,
                    x$1,
                    function(_XG_){return cont([2, _XG_]);});
          default:
           var g = param[2], x$2 = param[1];
           return caml_cps_call2
                   (this$0[17],
                    this$0,
                    function(_XD_){
                     return caml_cps_exact_call3
                             (map_opt,
                              _XD_,
                              g,
                              function(_XE_){
                               return caml_cps_call3
                                       (this$0[32],
this$0,
x$2,
function(_XF_){return cont([3, _XF_, _XE_]);});
                              });
                    });
        }
       },
       function(this$0, l, cont){
        return caml_cps_call2
                (this$0[35],
                 this$0,
                 function(_XC_){
                  return caml_cps_call3(Stdlib_List[19], _XC_, l, cont);
                 });
       },
       map_signature_item,
       function(this$0, l, cont){
        return caml_cps_call2
                (this$0[37],
                 this$0,
                 function(_XB_){
                  return caml_cps_call3(Stdlib_List[19], _XB_, l, cont);
                 });
       },
       map_structure_item,
       map$1,
       map_type_declaration,
       map_type_extension,
       map_type_exception,
       map_type_kind,
       function(this$0, param, cont){
        var
         pvb_loc = param[4],
         pvb_attributes = param[3],
         pvb_expr = param[2],
         pvb_pat = param[1];
        return caml_cps_call3
                (this$0[17],
                 this$0,
                 pvb_expr,
                 function(_Xu_){
                  return caml_cps_call3
                          (this$0[32],
                           this$0,
                           pvb_pat,
                           function(_Xv_){
                            var _Xw_ = 0, _Xx_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pvb_attributes,
                                     function(_Xy_){
                                      var _Xz_ = [0, _Xy_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pvb_loc,
       function(_XA_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[21][1],
                 [0, _XA_],
                 _Xz_,
                 _Xx_,
                 _Xw_,
                 _Xv_,
                 _Xu_,
                 cont);
       });
                                     });
                           });
                 });
       },
       function(this$0, param, cont){
        var
         pval_loc = param[5],
         pval_attributes = param[4],
         pval_prim = param[3],
         pval_type = param[2],
         pval_name = param[1];
        return caml_cps_call3
                (this$0[38],
                 this$0,
                 pval_type,
                 function(_Xn_){
                  return caml_cps_exact_call3
                          (map_loc,
                           this$0,
                           pval_name,
                           function(_Xo_){
                            var _Xp_ = [0, pval_prim], _Xq_ = 0;
                            return caml_cps_call3
                                    (this$0[2],
                                     this$0,
                                     pval_attributes,
                                     function(_Xr_){
                                      var _Xs_ = [0, _Xr_];
                                      return caml_cps_call3
      (this$0[23],
       this$0,
       pval_loc,
       function(_Xt_){
        return caml_cps_call7
                (Dynlink_compilerlibs_Ast_helpe[8][1],
                 [0, _Xt_],
                 _Xs_,
                 _Xq_,
                 _Xp_,
                 _Xo_,
                 _Xn_,
                 cont);
       });
                                     });
                           });
                 });
       },
       map_with_constraint];
   function extension_of_error(param, cont){
    var sub = param[3], main = param[2], kind = param[1];
    if(0 !== kind){
     var
      _Xa_ = [0, Stdlib[6], cst_extension_of_error_expecte],
      raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_Xa_, 1));
    }
    function str_of_pp(pp_msg, cont){
     return caml_cps_call3(Stdlib_Format[139], _fJ_, pp_msg, cont);
    }
    return caml_cps_call3
            (Stdlib_List[19],
             function(msg, cont){
              var _Xh_ = 0, _Xi_ = 0, _Xj_ = msg[2];
              return caml_cps_exact_call2
                      (str_of_pp,
                       msg[1],
                       function(_Xk_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Ast_helpe[7][4],
                                 0,
                                 0,
                                 [2, _Xk_, _Xj_, _Xi_],
                                 function(_Xl_){
                                  return caml_cps_call4
  (Dynlink_compilerlibs_Ast_helpe[14][2],
   0,
   0,
   _Xl_,
   function(_Xm_){
    return caml_cps_call4
            (Dynlink_compilerlibs_Ast_helpe[14][15],
             0,
             0,
             [0, [0, cst_ocaml_error, msg[2]], [0, [0, _Xm_, _Xh_]]],
             cont);
   });
                                 });
                       });
             },
             sub,
             function(_Xb_){
              var _Xc_ = 0, _Xd_ = main[2];
              return caml_cps_exact_call2
                      (str_of_pp,
                       main[1],
                       function(_Xe_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Ast_helpe[7][4],
                                 0,
                                 0,
                                 [2, _Xe_, _Xd_, _Xc_],
                                 function(_Xf_){
                                  return caml_cps_call4
  (Dynlink_compilerlibs_Ast_helpe[14][2],
   0,
   0,
   _Xf_,
   function(_Xg_){
    return cont
            ([0, [0, cst_ocaml_error$0, main[2]], [0, [0, _Xg_, _Xb_]]]);
   });
                                 });
                       });
             });
   }
   function attribute_of_warning(loc, s, cont){
    var _W9_ = 0;
    return caml_cps_call4
            (Dynlink_compilerlibs_Ast_helpe[7][4],
             0,
             0,
             [2, s, loc, 0],
             function(_W__){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Ast_helpe[14][2],
                       [0, loc],
                       0,
                       _W__,
                       function(_W$_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Ast_helpe[4][1],
                                 0,
                                 [0, cst_ocaml_ppwarning, loc],
                                 [0, [0, _W$_, _W9_]],
                                 cont);
                       });
             });
   }
   var cookies = [0, Dynlink_compilerlibs_Misc[13][4][65][1]];
   function get_cookie(k, cont){
    caml_push_trap
     (function(_W8_){
       if(_W8_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_W8_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][65][28],
             k,
             cookies[1],
             function(_W7_){caml_pop_trap(); return cont([0, _W7_]);});
   }
   function set_cookie(k, v, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Misc[13][4][65][4],
             k,
             v,
             cookies[1],
             function(_W6_){cookies[1] = _W6_; return cont(0);});
   }
   var tool_name_ref = [0, cst_none$2];
   function tool_name(param, cont){return cont(tool_name_ref[1]);}
   function lid(name){
    return [0, [0, name], Dynlink_compilerlibs_Location[1]];
   }
   function make_string(s, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Ast_helpe[3][2],
             0,
             0,
             s,
             function(_W5_){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Ast_helpe[7][4], 0, 0, _W5_, cont);
             });
   }
   function make_bool(x, cont){
    if(x){
     var _W3_ = lid(cst_true);
     return caml_cps_call5
             (Dynlink_compilerlibs_Ast_helpe[7][12], 0, 0, _W3_, 0, cont);
    }
    var _W4_ = lid(cst_false);
    return caml_cps_call5
            (Dynlink_compilerlibs_Ast_helpe[7][12], 0, 0, _W4_, 0, cont);
   }
   function make_list(f, lst, cont){
    if(lst){
     var rest = lst[2], x = lst[1], _WW_ = 0;
     return caml_cps_exact_call3
             (make_list,
              f,
              rest,
              function(_WY_){
               var _WZ_ = [0, _WY_, _WW_];
               return caml_cps_exact_call2
                       (f,
                        x,
                        function(_W0_){
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ast_helpe[7][11],
                                  0,
                                  0,
                                  [0, _W0_, _WZ_],
                                  function(_W1_){
                                   var _W2_ = lid(cst$68);
                                   return caml_cps_call5
   (Dynlink_compilerlibs_Ast_helpe[7][12],
    0,
    0,
    _W2_,
    [0, _W1_],
    cont);
                                  });
                        });
              });
    }
    var _WX_ = lid(cst$69);
    return caml_cps_call5
            (Dynlink_compilerlibs_Ast_helpe[7][12], 0, 0, _WX_, 0, cont);
   }
   function get_cookies(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[13][4][65][20],
             cookies[1],
             function(_WS_){
              return caml_cps_exact_call3
                      (make_list,
                       function(param, cont){
                        var x2 = param[2], x1 = param[1], _WU_ = [0, x2, 0];
                        return caml_cps_exact_call2
                                (make_string,
                                 x1,
                                 function(_WV_){
                                  return caml_cps_call4
  (Dynlink_compilerlibs_Ast_helpe[7][11],
   0,
   0,
   [0, _WV_, _WU_],
   cont);
                                 });
                       },
                       _WS_,
                       function(_WT_){return cont([0, lid(cst_cookies), _WT_]);});
             });
   }
   function mk$26(fields, cont){
    var _WO_ = Dynlink_compilerlibs_Location[1], _WP_ = 0;
    return caml_cps_call5
            (Dynlink_compilerlibs_Ast_helpe[7][14],
             0,
             0,
             fields,
             0,
             function(_WQ_){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Ast_helpe[14][2],
                       0,
                       0,
                       _WQ_,
                       function(_WR_){
                        return cont
                                ([0,
                                  [0, cst_ocaml_ppx_context, Dynlink_compilerlibs_Location[1]],
                                  [0, [0, _WR_, _WP_]],
                                  _WO_]);
                       });
             });
   }
   function ppx_context(tool_name, param, cont){
    var _Wh_ = 0;
    return caml_cps_exact_call2
            (get_cookies,
             undef,
             function(_Wi_){
              var _Wj_ = [0, _Wi_, _Wh_];
              return caml_cps_exact_call2
                      (make_bool,
                       0,
                       function(_Wk_){
                        var _Wl_ = [0, [0, lid(cst_unsafe_string), _Wk_], _Wj_];
                        return caml_cps_exact_call2
                                (make_bool,
                                 Dynlink_compilerlibs_Clflags[161][1],
                                 function(_Wm_){
                                  var _Wn_ = [0, [0, lid(cst_unboxed_types), _Wm_], _Wl_];
                                  return caml_cps_exact_call2
  (make_bool,
   Dynlink_compilerlibs_Clflags[65][1],
   function(_Wo_){
    var
     _Wp_ = [0, [0, lid(cst_transparent_modules), _Wo_], _Wn_];
    return caml_cps_exact_call2
            (make_bool,
             Dynlink_compilerlibs_Clflags[51][1],
             function(_Wq_){
              var _Wr_ = [0, [0, lid(cst_principal), _Wq_], _Wp_];
              return caml_cps_exact_call2
                      (make_bool,
                       Dynlink_compilerlibs_Clflags[53][1],
                       function(_Ws_){
                        var _Wt_ = [0, [0, lid(cst_recursive_types), _Ws_], _Wr_];
                        return caml_cps_exact_call2
                                (make_bool,
                                 0,
                                 function(_Wu_){
                                  var _Wv_ = [0, [0, lid(cst_use_vmthreads), _Wu_], _Wt_];
                                  return caml_cps_exact_call2
  (make_bool,
   Dynlink_compilerlibs_Clflags[40][1],
   function(_Ww_){
    var _Wx_ = [0, [0, lid(cst_use_threads), _Ww_], _Wv_];
    return caml_cps_exact_call2
            (make_bool,
             Dynlink_compilerlibs_Clflags[19][1],
             function(_Wz_){
              var
               _WA_ = [0, [0, lid(cst_debug), _Wz_], _Wx_],
               opt = Dynlink_compilerlibs_Clflags[62][1];
              function _WB_(_WE_){
               var _WF_ = [0, [0, lid(cst_for_package), _WE_], _WA_];
               return caml_cps_exact_call3
                       (make_list,
                        make_string,
                        Dynlink_compilerlibs_Clflags[34][1],
                        function(_WG_){
                         var _WH_ = [0, [0, lid(cst_open_modules), _WG_], _WF_];
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Load_path[8],
                                  0,
                                  function(_WI_){
                                   return caml_cps_exact_call3
   (make_list,
    make_string,
    _WI_,
    function(_WJ_){
     var _WK_ = [0, [0, lid(cst_load_path), _WJ_], _WH_];
     return caml_cps_exact_call3
             (make_list,
              make_string,
              Dynlink_compilerlibs_Clflags[14][1],
              function(_WL_){
               var _WM_ = [0, [0, lid(cst_include_dirs), _WL_], _WK_];
               return caml_cps_exact_call2
                       (make_string,
                        tool_name,
                        function(_WN_){
                         var fields = [0, [0, lid(cst_tool_name), _WN_], _WM_];
                         return caml_cps_exact_call2(mk$26, fields, cont);
                        });
              });
    });
                                  });
                        });
              }
              if(opt){
               var x = opt[1];
               return caml_cps_exact_call2
                       (make_string,
                        x,
                        function(_WC_){
                         var _WD_ = lid(cst_Some);
                         return caml_cps_call5
                                 (Dynlink_compilerlibs_Ast_helpe[7][12],
                                  0,
                                  0,
                                  _WD_,
                                  [0, _WC_],
                                  _WB_);
                        });
              }
              var _Wy_ = lid(cst_None$0);
              return caml_cps_call5
                      (Dynlink_compilerlibs_Ast_helpe[7][12], 0, 0, _Wy_, 0, _WB_);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function get_fields(param, cont){
    if(0 === param[0]){
     var _We_ = param[1];
     if(_We_){
      var _Wf_ = _We_[1][1];
      if(0 === _Wf_[0]){
       var _Wg_ = _Wf_[1][1];
       if
        (typeof _Wg_ !== "number"
         && 11 === _Wg_[0] && ! _Wg_[2] && ! _Wf_[2] && ! _We_[2]){var fields = _Wg_[1]; return cont(fields);}
      }
     }
    }
    return caml_cps_call4(Dynlink_compilerlibs_Location[55], 0, 0, _fK_, cont);
   }
   function restore$0(fields, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var match$0 = param[1][1];
              if(0 !== match$0[0]) return cont(0);
              var payload = param[2], name = match$0[1];
              function get_string(param, cont){
               var _Wc_ = param[1];
               if(typeof _Wc_ !== "number" && 1 === _Wc_[0]){
                var _Wd_ = _Wc_[1];
                if(2 === _Wd_[0] && ! _Wd_[3]){
                 var str = _Wd_[1];
                 return cont(str);
                }
               }
               return caml_cps_call5
                       (Dynlink_compilerlibs_Location[55], 0, 0, _fL_, name, cont);
              }
              function get_bool(pexp, cont){
               var _V$_ = pexp[1];
               if(typeof _V$_ !== "number" && 9 === _V$_[0]){
                var _Wa_ = _V$_[1][1];
                if(0 === _Wa_[0]){
                 var _Wb_ = _Wa_[1];
                 if(caml_string_notequal(_Wb_, cst_false$1)){
                  if(! caml_string_notequal(_Wb_, cst_true$1) && ! _V$_[2])
                   return cont(1);
                 }
                 else if(! _V$_[2]) return cont(0);
                }
               }
               return caml_cps_call5
                       (Dynlink_compilerlibs_Location[55], 0, 0, _fM_, name, cont);
              }
              function get_list(elem, param, cont){
               var _V2_ = param[1];
               if(typeof _V2_ !== "number" && 9 === _V2_[0]){
                var _V3_ = _V2_[1][1];
                if(0 === _V3_[0]){
                 var _V4_ = _V3_[1];
                 if(caml_string_notequal(_V4_, cst$138)){
                  if(! caml_string_notequal(_V4_, cst$139) && ! _V2_[2])
                   return cont(0);
                 }
                 else{
                  var _V5_ = _V2_[2];
                  if(_V5_){
                   var _V6_ = _V5_[1][1];
                   if(typeof _V6_ !== "number" && 8 === _V6_[0]){
                    var _V7_ = _V6_[1];
                    if(_V7_){
                     var _V8_ = _V7_[2];
                     if(_V8_ && ! _V8_[2]){
                      var rest = _V8_[1], exp = _V7_[1];
                      return caml_cps_exact_call3
                              (get_list,
                               elem,
                               rest,
                               function(_V9_){
                                return caml_cps_exact_call2
(elem, exp, function(_V__){return cont([0, _V__, _V9_]);});
                               });
                     }
                    }
                   }
                  }
                 }
                }
               }
               return caml_cps_call5
                       (Dynlink_compilerlibs_Location[55], 0, 0, _fN_, name, cont);
              }
              var switch$0 = caml_string_compare(name, cst_principal$0);
              if(0 <= switch$0){
               if(0 >= switch$0)
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VP_){
                          Dynlink_compilerlibs_Clflags[51][1] = _VP_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_recursive_types$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VO_){
                          Dynlink_compilerlibs_Clflags[53][1] = _VO_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_tool_name$0))
                return caml_cps_exact_call2
                        (get_string,
                         payload,
                         function(_VN_){tool_name_ref[1] = _VN_; return cont(0);});
               if(! caml_string_notequal(name, cst_transparent_modules$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VM_){
                          Dynlink_compilerlibs_Clflags[65][1] = _VM_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_unboxed_types$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VL_){
                          Dynlink_compilerlibs_Clflags[161][1] = _VL_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_use_threads$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VK_){
                          Dynlink_compilerlibs_Clflags[40][1] = _VK_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_use_vmthreads$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VJ_){
                          return _VJ_
                                  ? caml_cps_call4
                                    (Dynlink_compilerlibs_Location[55], 0, 0, _fQ_, cont)
                                  : cont(_VJ_);
                         });
              }
              else{
               if(! caml_string_notequal(name, cst_cookies$0))
                return caml_cps_exact_call3
                        (get_list,
                         function(param, cont){
                          var _VY_ = param[1];
                          if(typeof _VY_ !== "number" && 8 === _VY_[0]){
                           var _VZ_ = _VY_[1];
                           if(_VZ_){
                            var _V0_ = _VZ_[2];
                            if(_V0_ && ! _V0_[2]){
                             var e2 = _V0_[1], e1 = _VZ_[1];
                             return caml_cps_exact_call2
                                     (get_string,
                                      e1,
                                      function(_V1_){return cont([0, _V1_, e2]);});
                            }
                           }
                          }
                          return caml_cps_call5
                                  (Dynlink_compilerlibs_Location[55], 0, 0, _fO_, name, cont);
                         },
                         payload,
                         function(l){
                          return caml_cps_call4
                                  (Stdlib_List[25],
                                   function(s, param, cont){
                                    var v = param[2], k = param[1];
                                    return caml_cps_call4
    (Dynlink_compilerlibs_Misc[13][4][65][4], k, v, s, cont);
                                   },
                                   Dynlink_compilerlibs_Misc[13][4][65][1],
                                   l,
                                   function(_VX_){cookies[1] = _VX_; return cont(0);});
                         });
               if(! caml_string_notequal(name, cst_debug$0))
                return caml_cps_exact_call2
                        (get_bool,
                         payload,
                         function(_VW_){
                          Dynlink_compilerlibs_Clflags[19][1] = _VW_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_for_package$0)){
                var
                 _VF_ = payload[1],
                 _VI_ =
                   function(_VV_){
                    Dynlink_compilerlibs_Clflags[62][1] = _VV_;
                    return cont(0);
                   };
                if(typeof _VF_ !== "number" && 9 === _VF_[0]){
                 var _VG_ = _VF_[1][1];
                 if(0 === _VG_[0]){
                  var _VH_ = _VG_[1];
                  if(caml_string_notequal(_VH_, cst_None$2)){
                   if(! caml_string_notequal(_VH_, cst_Some$1)){
                    var match = _VF_[2];
                    if(match){
                     var exp = match[1];
                     return caml_cps_exact_call2
                             (get_string, exp, function(_VU_){return _VI_([0, _VU_]);});
                    }
                   }
                  }
                  else if(! _VF_[2]) return _VI_(0);
                 }
                }
                return caml_cps_call5
                        (Dynlink_compilerlibs_Location[55], 0, 0, _fP_, name, _VI_);
               }
               if(! caml_string_notequal(name, cst_include_dirs$0))
                return caml_cps_exact_call3
                        (get_list,
                         get_string,
                         payload,
                         function(_VT_){
                          Dynlink_compilerlibs_Clflags[14][1] = _VT_;
                          return cont(0);
                         });
               if(! caml_string_notequal(name, cst_load_path$0)){
                var
                 auto_include =
                   function(find_in_dir, fn, cont){
                    if(Dynlink_compilerlibs_Clflags[15][1]){
                     var _VS_ = Stdlib[8], raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_VS_, 1));
                    }
                    var alert = Dynlink_compilerlibs_Location[45];
                    return caml_cps_call4
                            (Dynlink_compilerlibs_Load_path[7],
                             alert,
                             find_in_dir,
                             fn,
                             cont);
                   };
                return caml_cps_exact_call3
                        (get_list,
                         get_string,
                         payload,
                         function(_VR_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Load_path[6],
                                   auto_include,
                                   _VR_,
                                   cont);
                         });
               }
               if(! caml_string_notequal(name, cst_open_modules$0))
                return caml_cps_exact_call3
                        (get_list,
                         get_string,
                         payload,
                         function(_VQ_){
                          Dynlink_compilerlibs_Clflags[34][1] = _VQ_;
                          return cont(0);
                         });
              }
              return cont(0);
             },
             fields,
             cont);
   }
   function update_cookies(fields, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(param, cont){
              var _VE_ = param[1][1];
              if
               (0 === _VE_[0]
                && ! caml_string_notequal(_VE_[1], cst_cookies$0))
               return cont(0);
              return cont(1);
             },
             fields,
             function(fields){
              var _VC_ = 0;
              return caml_cps_exact_call2
                      (get_cookies,
                       undef,
                       function(_VD_){
                        return caml_cps_call3
                                (Stdlib[37], fields, [0, _VD_, _VC_], cont);
                       });
             });
   }
   function extension_of_exn(exn, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[52],
             exn,
             function(match){
              if(! match){
               var
                raise = caml_pop_trap(),
                exn$0 = caml_maybe_attach_backtrace(exn, 1);
               return raise(exn$0);
              }
              var match$0 = match[1];
              if(typeof match$0 === "number")
               return cont
                       ([0,
                         [0, cst_ocaml_error$1, Dynlink_compilerlibs_Location[1]],
                         _fR_]);
              var error = match$0[2];
              return caml_cps_exact_call2(extension_of_error, error, cont);
             });
   }
   function apply_lazy(source, target, mapper, cont){
    function implem(ast, cont){
     function _Vr_(fields, ast){
      return caml_cps_exact_call2
              (restore$0,
               fields,
               function(_Vt_){
                function _Vu_(ast){
                 return caml_cps_exact_call2
                         (update_cookies,
                          fields,
                          function(fields){
                           return caml_cps_exact_call2
                                   (mk$26,
                                    fields,
                                    function(_VA_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[14][16],
      0,
      _VA_,
      function(_VB_){return cont([0, _VB_, ast]);});
                                    });
                          });
                }
                caml_push_trap
                 (function(exn){
                   var
                    _Vw_ = 0,
                    _Vx_ = Dynlink_compilerlibs_Location[1],
                    _Vy_ = 0;
                   return caml_cps_exact_call2
                           (extension_of_exn,
                            exn,
                            function(_Vz_){
                             return _Vu_([0, [0, [14, _Vz_, _Vy_], _Vx_], _Vw_]);
                            });
                  });
                return caml_cps_exact_call2
                        (mapper,
                         undef,
                         function(mapper){
                          return caml_cps_call3
                                  (mapper[36],
                                   mapper,
                                   ast,
                                   function(_Vv_){caml_pop_trap(); return _Vu_(_Vv_);});
                         });
               });
     }
     if(ast){
      var _Vp_ = ast[1][1];
      if(13 === _Vp_[0]){
       var _Vq_ = _Vp_[1];
       if(! caml_string_notequal(_Vq_[1][1], cst_ocaml_ppx_context$0)){
        var l = ast[2], x = _Vq_[2];
        return caml_cps_exact_call2
                (get_fields, x, function(_Vs_){return _Vr_(_Vs_, l);});
       }
      }
     }
     return _Vr_(0, ast);
    }
    function iface(ast, cont){
     function _Ve_(fields, ast){
      return caml_cps_exact_call2
              (restore$0,
               fields,
               function(_Vg_){
                function _Vh_(ast){
                 return caml_cps_exact_call2
                         (update_cookies,
                          fields,
                          function(fields){
                           return caml_cps_exact_call2
                                   (mk$26,
                                    fields,
                                    function(_Vn_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Ast_helpe[13][17],
      0,
      _Vn_,
      function(_Vo_){return cont([0, _Vo_, ast]);});
                                    });
                          });
                }
                caml_push_trap
                 (function(exn){
                   var
                    _Vj_ = 0,
                    _Vk_ = Dynlink_compilerlibs_Location[1],
                    _Vl_ = 0;
                   return caml_cps_exact_call2
                           (extension_of_exn,
                            exn,
                            function(_Vm_){
                             return _Vh_([0, [0, [15, _Vm_, _Vl_], _Vk_], _Vj_]);
                            });
                  });
                return caml_cps_exact_call2
                        (mapper,
                         undef,
                         function(mapper){
                          return caml_cps_call3
                                  (mapper[34],
                                   mapper,
                                   ast,
                                   function(_Vi_){caml_pop_trap(); return _Vh_(_Vi_);});
                         });
               });
     }
     if(ast){
      var _Vc_ = ast[1][1];
      if(14 === _Vc_[0]){
       var _Vd_ = _Vc_[1];
       if(! caml_string_notequal(_Vd_[1][1], cst_ocaml_ppx_context$0)){
        var l = ast[2], x = _Vd_[2];
        return caml_cps_exact_call2
                (get_fields, x, function(_Vf_){return _Ve_(_Vf_, l);});
       }
      }
     }
     return _Ve_(0, ast);
    }
    return caml_cps_call2
            (Stdlib[80],
             source,
             function(ic){
              return caml_cps_call3
                      (Stdlib[86],
                       ic,
                       caml_ml_string_length(Dynlink_compilerlibs_Config[30]),
                       function(magic){
                        function rewrite(transform, cont){
                         return caml_cps_call2
                                 (Stdlib[89],
                                  ic,
                                  function(_U9_){
                                   Dynlink_compilerlibs_Location[13][1] = _U9_;
                                   return caml_cps_call2
   (Stdlib[89],
    ic,
    function(ast){
     return caml_cps_call2
             (Stdlib[93],
              ic,
              function(_U__){
               return caml_cps_exact_call2
                       (transform,
                        ast,
                        function(ast){
                         return caml_cps_call2
                                 (Stdlib[61],
                                  target,
                                  function(oc){
                                   return caml_cps_call3
   (Stdlib[66],
    oc,
    magic,
    function(_U$_){
     return caml_cps_call3
             (Stdlib[72],
              oc,
              Dynlink_compilerlibs_Location[13][1],
              function(_Va_){
               return caml_cps_call3
                       (Stdlib[72],
                        oc,
                        ast,
                        function(_Vb_){return caml_cps_call2(Stdlib[76], oc, cont);});
              });
    });
                                  });
                        });
              });
    });
                                  });
                        }
                        return caml_string_equal
                                 (magic, Dynlink_compilerlibs_Config[30])
                                ? caml_cps_exact_call2(rewrite, implem, cont)
                                : caml_string_equal
                                   (magic, Dynlink_compilerlibs_Config[29])
                                  ? caml_cps_exact_call2(rewrite, iface, cont)
                                  : caml_cps_call2
                                    (Stdlib[93],
                                     ic,
                                     function(_U8_){
                                      return caml_cps_call2
      (Stdlib[2], cst_Ast_mapper_OCaml_version_m, cont);
                                     });
                       });
             });
   }
   function drop_ppx_context_str(restore, items, cont){
    if(items){
     var _U3_ = items[1][1];
     if(13 === _U3_[0]){
      var _U4_ = _U3_[1];
      if(! caml_string_notequal(_U4_[1][1], cst_ocaml_ppx_context$0)){
       var
        items$0 = items[2],
        a = _U4_[2],
        _U5_ = function(_U7_){return cont(items$0);};
       return restore
               ? caml_cps_exact_call2
                 (get_fields,
                  a,
                  function(_U6_){
                   return caml_cps_exact_call2(restore$0, _U6_, _U5_);
                  })
               : _U5_(0);
      }
     }
    }
    return cont(items);
   }
   function drop_ppx_context_sig(restore, items, cont){
    if(items){
     var _UY_ = items[1][1];
     if(14 === _UY_[0]){
      var _UZ_ = _UY_[1];
      if(! caml_string_notequal(_UZ_[1][1], cst_ocaml_ppx_context$0)){
       var
        items$0 = items[2],
        a = _UZ_[2],
        _U0_ = function(_U2_){return cont(items$0);};
       return restore
               ? caml_cps_exact_call2
                 (get_fields,
                  a,
                  function(_U1_){
                   return caml_cps_exact_call2(restore$0, _U1_, _U0_);
                  })
               : _U0_(0);
      }
     }
    }
    return cont(items);
   }
   function add_ppx_context_str(tool_name, ast, cont){
    return caml_cps_exact_call3
            (ppx_context,
             tool_name,
             undef,
             function(_UW_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Ast_helpe[14][16],
                       0,
                       _UW_,
                       function(_UX_){return cont([0, _UX_, ast]);});
             });
   }
   function add_ppx_context_sig(tool_name, ast, cont){
    return caml_cps_exact_call3
            (ppx_context,
             tool_name,
             undef,
             function(_UU_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Ast_helpe[13][17],
                       0,
                       _UU_,
                       function(_UV_){return cont([0, _UV_, ast]);});
             });
   }
   function apply$2(source, target, mapper, cont){
    return caml_cps_exact_call4
            (apply_lazy,
             source,
             target,
             function(param, cont){return cont(mapper);},
             cont);
   }
   function run_main(mapper, cont){
    caml_push_trap
     (function(exn){
       return caml_cps_call2
               (Stdlib_Printexc[1],
                exn,
                function(_US_){
                 return caml_cps_call2
                         (Stdlib[53],
                          _US_,
                          function(_UT_){return caml_cps_call2(Stdlib[99], 2, cont);});
                });
      });
    var a = runtime.caml_sys_argv(0), n = a.length - 1;
    function _UL_(_UR_){caml_pop_trap(); return cont(_UR_);}
    if(2 >= n)
     return caml_cps_call3
             (Stdlib_Printf[3],
              _fS_,
              Stdlib_Sys[1],
              function(_UQ_){return caml_cps_call2(Stdlib[99], 2, _UL_);});
    function mapper$0(param, cont){
     caml_push_trap
      (function(exn){
        function f(param, _UP_, cont){
         var
          raise = caml_pop_trap(),
          exn$0 = caml_maybe_attach_backtrace(exn, 0);
         return raise(exn$0);
        }
        return cont
                ([0,
                  default_mapper[1],
                  default_mapper[2],
                  default_mapper[3],
                  default_mapper[4],
                  default_mapper[5],
                  default_mapper[6],
                  default_mapper[7],
                  default_mapper[8],
                  default_mapper[9],
                  default_mapper[10],
                  default_mapper[11],
                  default_mapper[12],
                  default_mapper[13],
                  default_mapper[14],
                  default_mapper[15],
                  default_mapper[16],
                  default_mapper[17],
                  default_mapper[18],
                  default_mapper[19],
                  default_mapper[20],
                  default_mapper[21],
                  default_mapper[22],
                  default_mapper[23],
                  default_mapper[24],
                  default_mapper[25],
                  default_mapper[26],
                  default_mapper[27],
                  default_mapper[28],
                  default_mapper[29],
                  default_mapper[30],
                  default_mapper[31],
                  default_mapper[32],
                  default_mapper[33],
                  f,
                  default_mapper[35],
                  f,
                  default_mapper[37],
                  default_mapper[38],
                  default_mapper[39],
                  default_mapper[40],
                  default_mapper[41],
                  default_mapper[42],
                  default_mapper[43],
                  default_mapper[44],
                  default_mapper[45]]);
       });
     return caml_cps_call4
             (Stdlib_Array[5],
              a,
              1,
              n - 3 | 0,
              function(_UM_){
               return caml_cps_call2
                       (Stdlib_Array[9],
                        _UM_,
                        function(_UN_){
                         return caml_cps_call2
                                 (mapper,
                                  _UN_,
                                  function(_UO_){caml_pop_trap(); return cont(_UO_);});
                        });
              });
    }
    var
     _UI_ = n - 1 | 0,
     _UK_ = n - 2 | 0,
     _UJ_ = caml_check_bound(a, _UI_)[1 + _UI_];
    return caml_cps_exact_call4
            (apply_lazy,
             caml_check_bound(a, _UK_)[1 + _UK_],
             _UJ_,
             mapper$0,
             _UL_);
   }
   var
    register_function =
      [0,
       function(name, f, cont){
        return caml_cps_exact_call2(run_main, f, cont);
       }];
   function register$0(name, f, cont){
    return caml_cps_call3(register_function[1], name, f, cont);
   }
   var
    Dynlink_compilerlibs_Ast_mappe =
      [0,
       default_mapper,
       tool_name,
       apply$2,
       run_main,
       register_function,
       register$0,
       map_opt,
       extension_of_error,
       attribute_of_warning,
       add_ppx_context_str,
       add_ppx_context_sig,
       drop_ppx_context_str,
       drop_ppx_context_sig,
       set_cookie,
       get_cookie];
   caml_register_global
    (1418, Dynlink_compilerlibs_Ast_mappe, "Dynlink_compilerlibs.Ast_mapper");
   var Error$2 = [248, cst_Dynlink_compilerlibs_Attr_, caml_fresh_oo_id(0)];
   function get_no_payload_attribute(alt_names, attrs, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(a, cont){
              return caml_cps_call3(Stdlib_List[36], a[1][1], alt_names, cont);
             },
             attrs,
             function(match){
              if(! match) return cont(0);
              var _UD_ = match[1], _UE_ = _UD_[2], name = _UD_[1];
              if(0 === _UE_[0] && ! _UE_[1] && ! match[2])
               return cont([0, name]);
              var _UF_ = match[2];
              if(_UF_){
               var
                name$0 = _UF_[1][1],
                _UG_ = [0, Error$2, name$0[2], [0, name$0[1]]],
                raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_UG_, 1));
              }
              var
               _UH_ = [0, Error$2, name[2], [1, name[1]]],
               raise$0 = caml_pop_trap();
              return raise$0(caml_maybe_attach_backtrace(_UH_, 1));
             });
   }
   function has_no_payload_attribute(alt_names, attrs, cont){
    return caml_cps_exact_call3
            (get_no_payload_attribute,
             alt_names,
             attrs,
             function(match){return match ? cont(1) : cont(0);});
   }
   function report_error(ppf, param, cont){
    if(0 === param[0]){
     var name = param[1];
     return caml_cps_call4(Stdlib_Format[135], ppf, _fT_, name, cont);
    }
    var name$0 = param[1];
    return caml_cps_call4(Stdlib_Format[135], ppf, _fU_, name$0, cont);
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$2) return cont(0);
       var err = param[3], loc = param[2];
       return caml_cps_call5
               (Dynlink_compilerlibs_Location[49],
                [0, loc],
                0,
                report_error,
                err,
                function(_UC_){return cont([0, _UC_]);});
      }]);
   var
    Dynlink_compilerlibs_Attr_help =
      [0,
       get_no_payload_attribute,
       has_no_payload_attribute,
       Error$2,
       report_error];
   caml_register_global
    (1419, Dynlink_compilerlibs_Attr_help, "Dynlink_compilerlibs.Attr_helper");
   function string_of_payload(param){
    if(0 === param[0]){
     var _Uz_ = param[1];
     if(_Uz_){
      var _UA_ = _Uz_[1][1];
      if(0 === _UA_[0]){
       var _UB_ = _UA_[1][1];
       if(typeof _UB_ !== "number" && 1 === _UB_[0] && ! _Uz_[2]){
        var c = _UB_[1];
        if(2 !== c[0]) return 0;
        var s = c[1];
        return [0, s];
       }
      }
     }
    }
    return 0;
   }
   function string_of_opt_payload(p){
    var match = string_of_payload(p);
    if(! match) return cst$70;
    var s = match[1];
    return s;
   }
   function error_of_extension(ext, cont){
    var match = ext[1], main_txt = match[1];
    if
     (caml_string_notequal(main_txt, cst_error$1)
      && caml_string_notequal(main_txt, cst_ocaml_error$2)){
     var loc = match[2];
     return caml_cps_call5
             (Dynlink_compilerlibs_Location[48],
              [0, loc],
              0,
              _fY_,
              main_txt,
              cont);
    }
    var p = ext[2], main_loc = match[2];
    if(0 === p[0]){
     var _Up_ = p[1];
     if(! _Up_){
      var _Us_ = Dynlink_compilerlibs_Location[54], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_Us_, 1));
     }
     var _Uq_ = _Up_[1][1];
     if(0 === _Uq_[0]){
      var _Ur_ = _Uq_[1][1];
      if(typeof _Ur_ !== "number" && 1 === _Ur_[0]){
       var match$0 = _Ur_[1];
       if(2 === match$0[0]){
        var inner = _Up_[2], msg = match$0[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(param, cont){
                  var _Ut_ = param[1];
                  if(14 !== _Ut_[0])
                   return cont
                           ([0,
                             function(ppf, cont){
                              return caml_cps_call4
                                      (Stdlib_Format[135], ppf, _fV_, main_txt, cont);
                             },
                             main_loc]);
                  var _Uu_ = _Ut_[1], match = _Uu_[1], txt = match[1];
                  if
                   (caml_string_notequal(txt, cst_error$1)
                    && caml_string_notequal(txt, cst_ocaml_error$2)){
                   var loc = match[2];
                   return cont
                           ([0,
                             function(ppf, cont){
                              return caml_cps_call4
                                      (Stdlib_Format[135], ppf, _fW_, txt, cont);
                             },
                             loc]);
                  }
                  var p = _Uu_[2], loc$0 = match[2];
                  if(0 === p[0]){
                   var _Uv_ = p[1];
                   if(_Uv_){
                    var _Uw_ = _Uv_[1][1];
                    if(0 === _Uw_[0]){
                     var _Ux_ = _Uw_[1][1];
                     if(typeof _Ux_ !== "number" && 1 === _Ux_[0]){
                      var _Uy_ = _Ux_[1];
                      if(2 === _Uy_[0] && ! _Uv_[2]){
                       var msg = _Uy_[1];
                       return cont
                               ([0,
                                 function(ppf, cont){
                                  return caml_cps_call3(Stdlib_Format[131], ppf, msg, cont);
                                 },
                                 loc$0]);
                      }
                     }
                    }
                   }
                  }
                  return cont
                          ([0,
                            function(ppf, cont){
                             return caml_cps_call4
                                     (Stdlib_Format[135], ppf, _fX_, main_txt, cont);
                            },
                            loc$0]);
                 },
                 inner,
                 function(sub){
                  return caml_cps_call5
                          (Dynlink_compilerlibs_Location[49],
                           [0, main_loc],
                           [0, sub],
                           Stdlib_Format[131],
                           msg,
                           cont);
                 });
       }
      }
     }
    }
    return caml_cps_call5
            (Dynlink_compilerlibs_Location[48],
             [0, main_loc],
             0,
             _fZ_,
             main_txt,
             cont);
   }
   function kind_and_message(param){
    if(0 === param[0]){
     var _Uf_ = param[1];
     if(_Uf_){
      var _Ug_ = _Uf_[1][1];
      if(0 === _Ug_[0]){
       var _Uh_ = _Ug_[1][1];
       if(typeof _Uh_ !== "number")
        switch(_Uh_[0]){
          case 0:
           var _Ui_ = _Uh_[1][1];
           if(0 === _Ui_[0] && ! _Uf_[2]){
            var id = _Ui_[1];
            return [0, [0, id, cst$71]];
           }
           break;
          case 5:
           var _Uj_ = _Uh_[1][1];
           if(typeof _Uj_ !== "number" && 0 === _Uj_[0]){
            var _Uk_ = _Uj_[1][1];
            if(0 === _Uk_[0]){
             var _Ul_ = _Uh_[2];
             if(_Ul_){
              var _Um_ = _Ul_[1];
              if(typeof _Um_[1] === "number"){
               var _Un_ = _Um_[2][1];
               if(typeof _Un_ !== "number" && 1 === _Un_[0]){
                var _Uo_ = _Un_[1];
                if(2 === _Uo_[0] && ! _Ul_[2] && ! _Uf_[2]){
                 var s = _Uo_[1], id$0 = _Uk_[1];
                 return [0, [0, id$0, s]];
                }
               }
              }
             }
            }
           }
           break;
        }
      }
     }
    }
    return 0;
   }
   function cat$0(s1, s2, cont){
    return caml_string_equal(s2, cst$117)
            ? cont(s1)
            : caml_cps_call3
              (Stdlib[28],
               cst$72,
               s2,
               function(_Ue_){
                return caml_cps_call3(Stdlib[28], s1, _Ue_, cont);
               });
   }
   function alert_attr(x, cont){
    var _Ud_ = x[1][1];
    a:
    if(caml_string_notequal(_Ud_, cst_alert)){
     if(caml_string_notequal(_Ud_, cst_deprecated$5)){
      if(! caml_string_notequal(_Ud_, cst_ocaml_alert)) break a;
      if(caml_string_notequal(_Ud_, "ocaml.deprecated")) return cont(0);
     }
     return cont([0, [0, x, cst_deprecated$4, string_of_opt_payload(x[2])]]);
    }
    var match = kind_and_message(x[2]);
    if(! match) return cont(0);
    var match$0 = match[1], message = match$0[2], kind = match$0[1];
    return cont([0, [0, x, kind, message]]);
   }
   function alert_attrs(l, cont){
    return caml_cps_call3(Stdlib_List[22], alert_attr, l, cont);
   }
   function alerts_of_attrs(l, cont){
    return caml_cps_exact_call2
            (alert_attrs,
             l,
             function(_Ub_){
              return caml_cps_call4
                      (Stdlib_List[25],
                       function(acc, param, cont){
                        var message = param[3], kind = param[2];
                        function upd(param, cont){
                         if(param){
                          var s = param[1];
                          if(caml_string_notequal(s, cst$117))
                           return caml_cps_exact_call3
                                   (cat$0, s, message, function(_Uc_){return cont([0, _Uc_]);});
                         }
                         return cont([0, message]);
                        }
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[13][4][65][5],
                                 kind,
                                 upd,
                                 acc,
                                 cont);
                       },
                       Dynlink_compilerlibs_Misc[13][4][65][1],
                       _Ub_,
                       cont);
             });
   }
   function check_alerts(loc, attrs, s, cont){
    return caml_cps_exact_call2
            (alerts_of_attrs,
             attrs,
             function(_T$_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][12],
                       function(kind, message, cont){
                        return caml_cps_exact_call3
                                (cat$0,
                                 s,
                                 message,
                                 function(_Ua_){
                                  return caml_cps_call6
  (Dynlink_compilerlibs_Location[44],
   0,
   0,
   kind,
   loc,
   _Ua_,
   cont);
                                 });
                       },
                       _T$_,
                       cont);
             });
   }
   function check_alerts_inclusion(def, use, loc, attrs1, attrs2, s, cont){
    return caml_cps_exact_call2
            (alerts_of_attrs,
             attrs2,
             function(m2){
              return caml_cps_exact_call2
                      (alerts_of_attrs,
                       attrs1,
                       function(_T7_){
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Misc[13][4][65][12],
                                 function(kind, msg, cont){
                                  return caml_cps_call3
  (Dynlink_compilerlibs_Misc[13][4][65][3],
   kind,
   m2,
   function(_T8_){
    var _T9_ = 1 - _T8_;
    return _T9_
            ? caml_cps_exact_call3
              (cat$0,
               s,
               msg,
               function(_T__){
                return caml_cps_call6
                        (Dynlink_compilerlibs_Location[44],
                         [0, def],
                         [0, use],
                         kind,
                         loc,
                         _T__,
                         cont);
               })
            : cont(_T9_);
   });
                                 },
                                 _T7_,
                                 cont);
                       });
             });
   }
   function deprecated_mutable_of_attrs(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var _T5_ = param$0[1], _T6_ = _T5_[1][1];
     if
      (caml_string_notequal(_T6_, "deprecated_mutable")
       && caml_string_notequal(_T6_, "ocaml.deprecated_mutable")){var tl = param$0[2], param$0 = tl; continue;}
     var p = _T5_[2];
     return [0, string_of_opt_payload(p)];
    }
   }
   function check_deprecated_mutable(loc, attrs, s, cont){
    var match = deprecated_mutable_of_attrs(attrs);
    if(! match) return cont(0);
    var txt = match[1];
    return caml_cps_exact_call3
            (cat$0,
             s,
             txt,
             function(_T3_){
              return caml_cps_call3
                      (Stdlib_Printf[4],
                       _f0_,
                       _T3_,
                       function(_T4_){
                        return caml_cps_call5
                                (Dynlink_compilerlibs_Location[43], 0, 0, loc, _T4_, cont);
                       });
             });
   }
   function check_deprecated_mutable_inclu
   (def, use, loc, attrs1, attrs2, s, cont){
    var
     match = deprecated_mutable_of_attrs(attrs1),
     match$0 = deprecated_mutable_of_attrs(attrs2);
    if(match && ! match$0){
     var txt = match[1];
     return caml_cps_exact_call3
             (cat$0,
              s,
              txt,
              function(_T1_){
               return caml_cps_call3
                       (Stdlib_Printf[4],
                        _f1_,
                        _T1_,
                        function(_T2_){
                         return caml_cps_call5
                                 (Dynlink_compilerlibs_Location[43],
                                  [0, def],
                                  [0, use],
                                  loc,
                                  _T2_,
                                  cont);
                        });
              });
    }
    return cont(0);
   }
   function attrs_of_sig(param){
    if(param){
     var match = param[1][1];
     if(14 === match[0]){
      var tl = param[2], a = match[1];
      return [0, a, attrs_of_sig(tl)];
     }
    }
    return 0;
   }
   function alerts_of_sig(sg, cont){
    return caml_cps_exact_call2(alerts_of_attrs, attrs_of_sig(sg), cont);
   }
   function attrs_of_str(param){
    if(param){
     var match = param[1][1];
     if(13 === match[0]){
      var tl = param[2], a = match[1];
      return [0, a, attrs_of_str(tl)];
     }
    }
    return 0;
   }
   function alerts_of_str(str, cont){
    return caml_cps_exact_call2(alerts_of_attrs, attrs_of_str(str), cont);
   }
   function check_no_alert(attrs, cont){
    return caml_cps_exact_call2
            (alert_attrs,
             attrs,
             function(_T0_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(param, cont){
                        var a = param[1];
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Location[37],
                                 a[3],
                                 [35, a[1][1]],
                                 cont);
                       },
                       _T0_,
                       cont);
             });
   }
   function warn_payload(loc, txt, msg, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Location[37], loc, [30, txt, msg], cont);
   }
   function warning_attribute(opt, cont){
    if(opt) var sth = opt[1], ppwarning = sth; else var ppwarning = 1;
    function process(loc, txt, errflag, payload, cont){
     var match = string_of_payload(payload);
     if(! match)
      return caml_cps_exact_call4
              (warn_payload, loc, txt, cst_A_single_string_literal_is, cont);
     var s = match[1];
     caml_push_trap
      (function(exn){
        if(exn[1] === Stdlib_Arg[8]){
         var msg = exn[2];
         return caml_cps_exact_call4(warn_payload, loc, txt, msg, cont);
        }
        var
         raise = caml_pop_trap(),
         exn$0 = caml_maybe_attach_backtrace(exn, 0);
        return raise(exn$0);
       });
     return caml_cps_call3
             (Dynlink_compilerlibs_Warnings[2],
              errflag,
              s,
              function(_TX_){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Location[42],
                        loc,
                        function(_TY_){
                         return caml_cps_call3
                                 (Stdlib_Option[9],
                                  _TY_,
                                  _TX_,
                                  function(_TZ_){caml_pop_trap(); return cont(_TZ_);});
                        });
              });
    }
    return cont
            (function(param, cont){
              var txt = param[1][1];
              if
               (caml_string_notequal(txt, cst_alert)
                && caml_string_notequal(txt, cst_ocaml_alert)){
               a:
               {
                b:
                if(caml_string_notequal(txt, cst_ocaml_ppwarning$0)){
                 c:
                 if(caml_string_notequal(txt, "ocaml.warnerror")){
                  if(caml_string_notequal(txt, "ocaml.warning")){
                   if(! caml_string_notequal(txt, "ppwarning")) break b;
                   if(! caml_string_notequal(txt, "warnerror")) break c;
                   if(caml_string_notequal(txt, cst_warning$1)) break a;
                  }
                  var attr_loc = param[3], attr_payload = param[2];
                  return caml_cps_exact_call5
                          (process, attr_loc, txt, 0, attr_payload, cont);
                 }
                 var attr_loc$0 = param[3], attr_payload$0 = param[2];
                 return caml_cps_exact_call5
                         (process, attr_loc$0, txt, 1, attr_payload$0, cont);
                }
                var _TQ_ = param[2];
                if(0 === _TQ_[0]){
                 var _TR_ = _TQ_[1];
                 if(_TR_){
                  var _TS_ = _TR_[1], _TT_ = _TS_[1];
                  if(0 === _TT_[0]){
                   var _TU_ = _TT_[1][1];
                   if(typeof _TU_ !== "number" && 1 === _TU_[0]){
                    var _TV_ = _TU_[1];
                    if(2 === _TV_[0] && ! _TR_[2]){
                     var pstr_loc = _TS_[2], s$0 = _TV_[1];
                     if(ppwarning)
                      return caml_cps_call3
                              (Dynlink_compilerlibs_Location[37],
                               pstr_loc,
                               [10, s$0],
                               cont);
                    }
                   }
                  }
                 }
                }
               }
               return cont(0);
              }
              var attr_loc$1 = param[3], attr_payload$1 = param[2];
              if(0 === attr_payload$1[0]){
               var _TM_ = attr_payload$1[1];
               if(_TM_){
                var _TN_ = _TM_[1][1];
                if(0 === _TN_[0]){
                 var _TO_ = _TN_[1][1];
                 if(typeof _TO_ !== "number" && 1 === _TO_[0]){
                  var _TP_ = _TO_[1];
                  if(2 === _TP_[0] && ! _TM_[2]){
                   var s = _TP_[1];
                   caml_push_trap
                    (function(exn){
                      if(exn[1] === Stdlib_Arg[8]){
                       var msg = exn[2];
                       return caml_cps_exact_call4
                               (warn_payload, attr_loc$1, txt, msg, cont);
                      }
                      var
                       raise = caml_pop_trap(),
                       exn$0 = caml_maybe_attach_backtrace(exn, 0);
                      return raise(exn$0);
                     });
                   return caml_cps_call2
                           (Dynlink_compilerlibs_Warnings[3],
                            s,
                            function(_TW_){caml_pop_trap(); return cont(_TW_);});
                  }
                 }
                }
               }
              }
              var match = kind_and_message(attr_payload$1);
              return match
                      ? caml_string_notequal
                         (match[1][1], cst_all)
                        ? cont(0)
                        : caml_cps_exact_call4
                          (warn_payload,
                           attr_loc$1,
                           txt,
                           cst_The_alert_name_all_is_rese,
                           cont)
                      : caml_cps_exact_call4
                        (warn_payload, attr_loc$1, txt, cst_Invalid_payload, cont);
             });
   }
   function warning_scope(ppwarning, attrs, f, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Warnings[15],
             0,
             function(prev){
              caml_push_trap
               (function(exn){
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Warnings[16],
                          prev,
                          function(_TL_){
                           var
                            raise = caml_pop_trap(),
                            exn$0 = caml_maybe_attach_backtrace(exn, 0);
                           return raise(exn$0);
                          });
                });
              return caml_cps_call2
                      (Stdlib_List[9],
                       attrs,
                       function(_TH_){
                        return caml_cps_exact_call2
                                (warning_attribute,
                                 ppwarning,
                                 function(_TI_){
                                  return caml_cps_call3
  (Stdlib_List[17],
   _TI_,
   _TH_,
   function(_TJ_){
    return caml_cps_call2
            (f,
             0,
             function(ret){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Warnings[16],
                       prev,
                       function(_TK_){caml_pop_trap(); return cont(ret);});
             });
   });
                                 });
                       });
             });
   }
   var
    warn_on_literal_pattern =
      caml_callback
       (Stdlib_List[33],
        [function(a, cont){
          var _TG_ = a[1][1];
          if
           (caml_string_notequal(_TG_, cst_ocaml_warn_on_literal_patt$0)
            && caml_string_notequal(_TG_, "warn_on_literal_pattern"))
           return cont(0);
          return cont(1);
         }]),
    explicit_arity =
      caml_callback
       (Stdlib_List[33],
        [function(a, cont){
          var _TF_ = a[1][1];
          if
           (caml_string_notequal(_TF_, "explicit_arity")
            && caml_string_notequal(_TF_, "ocaml.explicit_arity"))
           return cont(0);
          return cont(1);
         }]),
    immediate =
      caml_callback
       (Stdlib_List[33],
        [function(a, cont){
          var _TE_ = a[1][1];
          if
           (caml_string_notequal(_TE_, "immediate")
            && caml_string_notequal(_TE_, "ocaml.immediate"))
           return cont(0);
          return cont(1);
         }]),
    immediate64 =
      caml_callback
       (Stdlib_List[33],
        [function(a, cont){
          var _TD_ = a[1][1];
          if
           (caml_string_notequal(_TD_, "immediate64")
            && caml_string_notequal(_TD_, "ocaml.immediate64"))
           return cont(0);
          return cont(1);
         }]);
   function check(l, a, cont){
    return caml_cps_call3(Stdlib_List[36], a[1][1], l, cont);
   }
   function has_unboxed(attr, cont){
    return caml_cps_call3
            (Stdlib_List[33],
             function(_TC_, cont){
              return caml_cps_exact_call3(check, _f2_, _TC_, cont);
             },
             attr,
             cont);
   }
   function has_boxed(attr, cont){
    return caml_cps_call3
            (Stdlib_List[33],
             function(_TB_, cont){
              return caml_cps_exact_call3(check, _f3_, _TB_, cont);
             },
             attr,
             cont);
   }
   var
    Dynlink_compilerlibs_Builtin_a =
      [0,
       check_alerts,
       check_alerts_inclusion,
       alerts_of_attrs,
       alerts_of_sig,
       alerts_of_str,
       check_deprecated_mutable,
       check_deprecated_mutable_inclu,
       check_no_alert,
       error_of_extension,
       warning_attribute,
       warning_scope,
       warn_on_literal_pattern,
       explicit_arity,
       immediate,
       immediate64,
       has_unboxed,
       has_boxed];
   caml_register_global
    (1420,
     Dynlink_compilerlibs_Builtin_a,
     "Dynlink_compilerlibs.Builtin_attributes");
   var
    lowest_scope = 0,
    highest_scope = 100000000,
    currentstamp = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]),
    predefstamp = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]);
   function create_scoped(scope, s, cont){
    currentstamp[1]++;
    return cont([1, s, currentstamp[1], scope]);
   }
   function create_local(s, cont){
    currentstamp[1]++;
    return cont([0, s, currentstamp[1]]);
   }
   function create_predef(s, cont){
    predefstamp[1]++;
    return cont([3, s, predefstamp[1]]);
   }
   function create_persistent(s, cont){return cont([2, s]);}
   function name(param, cont){var name = param[1]; return cont(name);}
   function rename(id, cont){
    if(1 < id[0])
     return caml_cps_call3(Dynlink_compilerlibs_Misc[2], _f4_, id[1], cont);
    var name = id[1];
    currentstamp[1]++;
    return cont([0, name, currentstamp[1]]);
   }
   function unique_name(param, cont){
    switch(param[0]){
      case 2:
       var name$0 = param[1];
       return caml_cps_call3(Stdlib[28], name$0, cst_0$1, cont);
      case 3:
       var name$1 = param[1]; return cont(name$1);
      default:
       var stamp = param[2], name = param[1];
       return caml_cps_call2
               (Stdlib_Int[12],
                stamp,
                function(_Tz_){
                 return caml_cps_call3
                         (Stdlib[28],
                          cst$73,
                          _Tz_,
                          function(_TA_){
                           return caml_cps_call3(Stdlib[28], name, _TA_, cont);
                          });
                });
    }
   }
   function unique_toplevel_name(param, cont){
    if(1 < param[0]){var name$0 = param[1]; return cont(name$0);}
    var stamp = param[2], name = param[1];
    return caml_cps_call2
            (Stdlib_Int[12],
             stamp,
             function(_Tx_){
              return caml_cps_call3
                      (Stdlib[28],
                       cst$74,
                       _Tx_,
                       function(_Ty_){
                        return caml_cps_call3(Stdlib[28], name, _Ty_, cont);
                       });
             });
   }
   function persistent(param, cont){
    return 2 === param[0] ? cont(1) : cont(0);
   }
   function original_equal(i1, i2, cont){
    a:
    {
     switch(i1[0]){
       case 0:
        if(0 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       case 1:
        if(1 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       case 2:
        if(2 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       default:
        if(3 === i2[0]){
         var s2 = i2[2], s1 = i1[2];
         return cont(s1 === s2 ? 1 : 0);
        }
     }
     return cont(0);
    }
    return cont(caml_string_equal(name1, name2));
   }
   function same(i1, i2, cont){
    a:
    {
     switch(i1[0]){
       case 0:
        if(0 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;} break;
       case 1:
        if(1 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;} break;
       case 2:
        if(2 === i2[0]){
         var name2 = i2[1], name1 = i1[1];
         return cont(caml_string_equal(name1, name2));
        }
        break;
       default: if(3 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;}
     }
     return cont(0);
    }
    return cont(s1 === s2 ? 1 : 0);
   }
   function scope(param, cont){
    switch(param[0]){
      case 0:
       return cont(highest_scope);
      case 1:
       var scope = param[3]; return cont(scope);
      default: return cont(lowest_scope);
    }
   }
   var reinit_level = [0, -1];
   function reinit(param, cont){
    return 0 <= reinit_level[1]
            ? (currentstamp[1] = reinit_level[1], cont(0))
            : (reinit_level[1] = currentstamp[1], cont(0));
   }
   function global(param, cont){return 1 < param[0] ? cont(1) : cont(0);}
   function is_predef(param, cont){return 3 === param[0] ? cont(1) : cont(0);}
   function _f5_(with_scope, ppf){
    return function(param, cont){
     switch(param[0]){
       case 0:
        var
         n = param[2],
         name = param[1],
         _Tp_ =
           function(_Tw_){
            return caml_cps_call5
                    (Stdlib_Format[135], ppf, _f7_, name, _Tw_, cont);
           };
        return Dynlink_compilerlibs_Clflags[66][1]
                ? caml_cps_call3(Stdlib_Format[138], _f6_, n, _Tp_)
                : _Tp_(cst$75);
       case 1:
        var
         scope = param[3],
         n$0 = param[2],
         name$0 = param[1],
         _Tq_ =
           function(_Tt_){
            function _Tu_(_Tv_){
             return caml_cps_call6
                     (Stdlib_Format[135], ppf, _f__, name$0, _Tv_, _Tt_, cont);
            }
            return Dynlink_compilerlibs_Clflags[66][1]
                    ? caml_cps_call3(Stdlib_Format[138], _f9_, n$0, _Tu_)
                    : _Tu_(cst$76);
           };
        return with_scope
                ? caml_cps_call3(Stdlib_Format[138], _f8_, scope, _Tq_)
                : _Tq_(cst$77);
       case 2:
        var name$1 = param[1];
        return caml_cps_call4(Stdlib_Format[135], ppf, _f$_, name$1, cont);
       default:
        var
         n$1 = param[2],
         name$2 = param[1],
         _Tr_ =
           function(_Ts_){
            return caml_cps_call5
                    (Stdlib_Format[135], ppf, _gb_, name$2, _Ts_, cont);
           };
        return Dynlink_compilerlibs_Clflags[66][1]
                ? caml_cps_call3(Stdlib_Format[138], _ga_, n$1, _Tr_)
                : _Tr_(cst$78);
     }};
   }
   function print_with_scope(ppf, id, cont){
    return caml_cps_exact_call2(_f5_(1, ppf), id, cont);
   }
   function print$6(ppf, id, cont){
    return caml_cps_exact_call2(_f5_(0, ppf), id, cont);
   }
   function mknode(l, d, r){
    if(l) var h = l[4], hl = h; else var hl = 0;
    if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
    var _To_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
    return [0, l, d, r, _To_];
   }
   function balance(l, d, r){
    if(l) var h = l[4], hl = h; else var hl = 0;
    if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
    if((hr + 1 | 0) < hl){
     if(l){
      var lr = l[3], ld = l[2], ll = l[1];
      if(lr) var h$1 = lr[4], h$2 = h$1; else var h$2 = 0;
      if(ll) var h$3 = ll[4], h$4 = h$3; else var h$4 = 0;
      if(h$2 <= h$4) return mknode(ll, ld, mknode(lr, d, r));
      if(lr){
       var lrr = lr[3], lrd = lr[2], lrl = lr[1], _Tm_ = mknode(lrr, d, r);
       return mknode(mknode(ll, ld, lrl), lrd, _Tm_);
      }
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _gc_], 1);
    }
    if((hl + 1 | 0) >= hr) return mknode(l, d, r);
    if(r){
     var rl = r[1], rr = r[3], rd = r[2];
     if(rl) var h$5 = rl[4], h$6 = h$5; else var h$6 = 0;
     if(rr) var h$7 = rr[4], h$8 = h$7; else var h$8 = 0;
     if(h$6 <= h$8) return mknode(mknode(l, d, rl), rd, rr);
     if(rl){
      var
       rr$0 = r[3],
       rd$0 = r[2],
       rlr = rl[3],
       rld = rl[2],
       rll = rl[1],
       _Tn_ = mknode(rlr, rd$0, rr$0);
      return mknode(mknode(l, d, rll), rld, _Tn_);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _gd_], 1);
   }
   function add$0(id, data, param, cont){
    if(! param) return cont([0, 0, [0, id, data, 0], 0, 1]);
    var h = param[4], r = param[3], k = param[2], l = param[1];
    return caml_cps_call3
            (Stdlib_String[9],
             id[1],
             k[1][1],
             function(c){
              return 0 === c
                      ? cont([0, l, [0, id, data, [0, k]], r, h])
                      : 0
                        <= c
                        ? caml_cps_exact_call4
                          (add$0,
                           id,
                           data,
                           r,
                           function(_Tk_){return cont(balance(l, k, _Tk_));})
                        : caml_cps_exact_call4
                          (add$0,
                           id,
                           data,
                           l,
                           function(_Tl_){return cont(balance(_Tl_, k, r));});
             });
   }
   function remove_min_binding(param, cont){
    if(! param)
     return caml_cps_call2(Stdlib[1], cst_Map_remove_min_elt, cont);
    var l = param[1];
    if(l){
     var r = param[3], d = param[2];
     return caml_cps_exact_call2
             (remove_min_binding,
              l,
              function(_Tj_){return cont(balance(_Tj_, d, r));});
    }
    var r$0 = param[3];
    return cont(r$0);
   }
   function remove(id, m, cont){
    if(! m) return cont(0);
    var h = m[4], t2 = m[3], k = m[2], t1 = m[1];
    return caml_cps_call3
            (Stdlib_String[9],
             id[1],
             k[1][1],
             function(c){
              if(0 !== c)
               return 0 <= c
                       ? caml_cps_exact_call3
                         (remove,
                          id,
                          t2,
                          function(rr){
                           return t2 === rr ? cont(m) : cont(balance(t1, k, rr));
                          })
                       : caml_cps_exact_call3
                         (remove,
                          id,
                          t1,
                          function(ll){
                           return t1 === ll ? cont(m) : cont(balance(ll, k, t2));
                          });
              var match = k[3];
              if(match){var k$0 = match[1]; return cont([0, t1, k$0, t2, h]);}
              if(! t1) return cont(t2);
              if(! t2) return cont(t1);
              var param = t2;
              for(;;){
               if(! param){
                var _Th_ = Stdlib[8], raise = caml_pop_trap();
                return raise(caml_maybe_attach_backtrace(_Th_, 1));
               }
               var l = param[1];
               if(! l) break;
               var param = l;
              }
              var d = param[2];
              return caml_cps_exact_call2
                      (remove_min_binding,
                       t2,
                       function(_Ti_){return cont(balance(t1, d, _Ti_));});
             });
   }
   function find_same(id, param, cont){
    function _Tb_(param){
     if(param){
      var r = param[3], k = param[2], l = param[1];
      return caml_cps_call3
              (Stdlib_String[9],
               id[1],
               k[1][1],
               function(c){
                return 0 === c
                        ? caml_cps_exact_call3
                          (same,
                           id,
                           k[1],
                           function(_Td_){
                            if(_Td_) return cont(k[2]);
                            function _Te_(param){
                             if(param){
                              var k = param[1];
                              return caml_cps_exact_call3
                                      (same,
                                       id,
                                       k[1],
                                       function(_Tg_){
return _Tg_ ? cont(k[2]) : caml_cps_exact_call1(_Te_, k[3]);
                                       });
                             }
                             var _Tf_ = Stdlib[8], raise = caml_pop_trap();
                             return raise(caml_maybe_attach_backtrace(_Tf_, 1));
                            }
                            return _Te_(k[3]);
                           })
                        : 0
                          <= c
                          ? caml_cps_exact_call1(_Tb_, r)
                          : caml_cps_exact_call1(_Tb_, l);
               });
     }
     var _Tc_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_Tc_, 1));
    }
    return _Tb_(param);
   }
   function find_name(n, param, cont){
    function _S$_(param){
     if(param){
      var r = param[3], k = param[2], l = param[1];
      return caml_cps_call3
              (Stdlib_String[9],
               n,
               k[1][1],
               function(c){
                return 0 === c
                        ? cont([0, k[1], k[2]])
                        : 0
                          <= c
                          ? caml_cps_exact_call1(_S$_, r)
                          : caml_cps_exact_call1(_S$_, l);
               });
     }
     var _Ta_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_Ta_, 1));
    }
    return _S$_(param);
   }
   function get_all(param){
    if(! param) return 0;
    var k = param[1], _S__ = get_all(k[3]);
    return [0, [0, k[1], k[2]], _S__];
   }
   function find_all(n, param, cont){
    function _S8_(param){
     if(! param) return cont(0);
     var r = param[3], k = param[2], l = param[1];
     return caml_cps_call3
             (Stdlib_String[9],
              n,
              k[1][1],
              function(c){
               if(0 !== c)
                return 0 <= c
                        ? caml_cps_exact_call1(_S8_, r)
                        : caml_cps_exact_call1(_S8_, l);
               var _S9_ = get_all(k[3]);
               return cont([0, [0, k[1], k[2]], _S9_]);
              });
    }
    return _S8_(param);
   }
   function fold_aux(f, stack, accu, param, cont){
    function _S7_(param, accu, stack){
     if(param){
      var r = param[3], k = param[2], l = param[1];
      return caml_cps_call3
              (f,
               k,
               accu,
               function(accu){
                var stack$0 = [0, l, stack];
                return caml_cps_exact_call3(_S7_, r, accu, stack$0);
               });
     }
     if(! stack) return cont(accu);
     var stack$0 = stack[2], a = stack[1];
     return caml_cps_exact_call3(_S7_, a, accu, stack$0);
    }
    return _S7_(param, accu, stack);
   }
   function fold_name(f, tbl, accu, cont){
    return caml_cps_exact_call5
            (fold_aux,
             function(k, cont){return caml_cps_call3(f, k[1], k[2], cont);},
             0,
             accu,
             tbl,
             cont);
   }
   function fold_data(f, d, accu, cont){
    if(! d) return cont(accu);
    var k = d[1];
    return caml_cps_exact_call4
            (fold_data,
             f,
             k[3],
             accu,
             function(_S6_){return caml_cps_call4(f, k[1], k[2], _S6_, cont);});
   }
   function fold_all(f, tbl, accu, cont){
    return caml_cps_exact_call5
            (fold_aux,
             function(k, cont){
              var _S4_ = [0, k];
              return cont
                      (function(_S5_, cont){
                        return caml_cps_exact_call4(fold_data, f, _S4_, _S5_, cont);
                       });
             },
             0,
             accu,
             tbl,
             cont);
   }
   function iter$0(f, param, cont){
    function _S1_(param){
     if(! param) return cont(0);
     var r = param[3], k = param[2], l = param[1];
     return caml_cps_exact_call3
             (iter$0,
              f,
              l,
              function(_S2_){
               return caml_cps_call3
                       (f,
                        k[1],
                        k[2],
                        function(_S3_){return caml_cps_exact_call1(_S1_, r);});
              });
    }
    return _S1_(param);
   }
   function make_key_generator(param, cont){
    var c = [0, 1];
    return cont
            (function(global_id, cont){
              if(1 < global_id[0])
               return caml_cps_call3
                       (Dynlink_compilerlibs_Misc[2], _ge_, global_id[1], cont);
              var stamp = c[1];
              c[1] += -1;
              return cont([0, key_name, stamp]);
             });
   }
   function compare$7(x, y, cont){
    a:
    {
     switch(x[0]){
       case 0:
        if(0 !== y[0]) return cont(1);
        var c = x[2] - y[2] | 0;
        return 0 === c ? cont(caml_string_compare(x[1], y[1])) : cont(c);
       case 1:
        switch(y[0]){
          case 1:
           var c$0 = x[2] - y[2] | 0;
           return 0 === c$0
                   ? cont(caml_string_compare(x[1], y[1]))
                   : cont(c$0);
          case 0:
           break a;
          default: return cont(1);
        }
       case 2:
        var x$0 = x[1];
        switch(y[0]){
          case 2:
           var y$0 = y[1]; return cont(caml_string_compare(x$0, y$0));
          case 3:
           return cont(1);
          case 0:
           break a;
        }
        break;
       default:
        var s1 = x[2];
        switch(y[0]){
          case 2:
           return cont(-1);
          case 3:
           var s2 = y[2]; return cont(caml_int_compare(s1, s2));
          case 0:
           break a;
        }
     }
     return cont(-1);
    }
    return cont(-1);
   }
   function output$4(oc, id, cont){
    return caml_cps_exact_call2
            (unique_name,
             id,
             function(_S0_){
              return caml_cps_call3(Stdlib[66], oc, _S0_, cont);
             });
   }
   function hash$5(i, cont){
    if(1 < i[0]) var _SZ_ = 0; else var stamp = i[2], _SZ_ = stamp;
    return cont(caml_string_get(i[1], 0) ^ _SZ_);
   }
   var
    include$4 =
      caml_callback
       (Dynlink_compilerlibs_Identifia[2],
        [[0, same, hash$5, compare$7, output$4, print$6]]),
    T$1 = include$4[1],
    hash$6 = include$4[3],
    compare$8 = include$4[4],
    output$5 = include$4[5],
    print$7 = include$4[6],
    Set$2 = include$4[7],
    Map$4 = include$4[8],
    Tbl$2 = include$4[9],
    Dynlink_compilerlibs_Ident =
      [0,
       T$1,
       original_equal,
       hash$6,
       output$5,
       print$7,
       Set$2,
       Map$4,
       Tbl$2,
       print_with_scope,
       create_scoped,
       create_local,
       create_persistent,
       create_predef,
       rename,
       name,
       unique_name,
       unique_toplevel_name,
       persistent,
       same,
       compare$8,
       global,
       is_predef,
       scope,
       lowest_scope,
       highest_scope,
       reinit,
       0,
       add$0,
       find_same,
       find_name,
       find_all,
       fold_name,
       fold_all,
       iter$0,
       remove,
       make_key_generator];
   caml_register_global
    (1421, Dynlink_compilerlibs_Ident, "Dynlink_compilerlibs.Ident");
   function same$0(p1, p2, cont){
    function _SU_(p2, p1){
     var _SV_ = p1 === p2 ? 1 : 0;
     if(_SV_)
      var _SW_ = _SV_;
     else{
      switch(p1[0]){
        case 0:
         var id1 = p1[1];
         if(0 === p2[0]){
          var id2 = p2[1];
          return caml_cps_call3
                  (Dynlink_compilerlibs_Ident[19], id1, id2, cont);
         }
         break;
        case 1:
         var s1 = p1[2], p1$0 = p1[1];
         if(1 === p2[0]){
          var s2 = p2[2], p2$0 = p2[1], _SX_ = caml_string_equal(s1, s2);
          return _SX_ ? caml_cps_exact_call2(_SU_, p2$0, p1$0) : cont(_SX_);
         }
         break;
        default:
         var arg1 = p1[2], fun1 = p1[1];
         if(2 === p2[0]){
          var arg2 = p2[2], fun2 = p2[1];
          return caml_cps_exact_call3
                  (same$0,
                   fun1,
                   fun2,
                   function(_SY_){
                    return _SY_
                            ? caml_cps_exact_call2(_SU_, arg2, arg1)
                            : cont(_SY_);
                   });
         }
      }
      var _SW_ = 0;
     }
     return cont(_SW_);
    }
    return _SU_(p2, p1);
   }
   function compare$9(p1, p2, cont){
    function _ST_(p2, p1){
     if(p1 === p2) return cont(0);
     a:
     {
      switch(p1[0]){
        case 0:
         var id1 = p1[1];
         if(0 === p2[0]){
          var id2 = p2[1];
          return caml_cps_call3
                  (Dynlink_compilerlibs_Ident[20], id1, id2, cont);
         }
         break;
        case 1:
         var p1$0 = p1[1], s1 = p1[2];
         if(1 === p2[0]){
          var s2 = p2[2], p2$0 = p2[1];
          return caml_cps_exact_call3
                  (compare$9,
                   p1$0,
                   p2$0,
                   function(h){
                    return 0 === h
                            ? caml_cps_call3(Stdlib_String[9], s1, s2, cont)
                            : cont(h);
                   });
         }
         break;
        default:
         var arg1 = p1[2], fun1 = p1[1];
         if(2 !== p2[0]) break a;
         var arg2 = p2[2], fun2 = p2[1];
         return caml_cps_exact_call3
                 (compare$9,
                  fun1,
                  fun2,
                  function(h){
                   return 0 === h
                           ? caml_cps_exact_call2(_ST_, arg2, arg1)
                           : cont(h);
                  });
      }
      if(0 !== p2[0]) return cont(-1);
     }
     return cont(1);
    }
    return _ST_(p2, p1);
   }
   function find_free_opt(ids, param, cont){
    function _SR_(param){
     switch(param[0]){
       case 0:
        var id = param[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Ident[19],
                 id,
                 function(_SS_){
                  return caml_cps_call3(Stdlib_List[39], _SS_, ids, cont);
                 });
       case 1:
        var p = param[1]; return caml_cps_exact_call1(_SR_, p);
       default:
        var p2 = param[2], p1 = param[1];
        return caml_cps_exact_call3
                (find_free_opt,
                 ids,
                 p1,
                 function(res){
                  return res ? cont(res) : caml_cps_exact_call1(_SR_, p2);
                 });
     }
    }
    return _SR_(param);
   }
   function exists_free(ids, p, cont){
    return caml_cps_exact_call3
            (find_free_opt,
             ids,
             p,
             function(match){return match ? cont(1) : cont(0);});
   }
   function scope$0(param, cont){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var id = param$0[1];
        return caml_cps_call2(Dynlink_compilerlibs_Ident[23], id, cont);
       case 1:
        var p = param$0[1], param$0 = p; break;
       default:
        var p2 = param$0[2], p1 = param$0[1];
        return caml_cps_exact_call2
                (scope$0,
                 p2,
                 function(_SP_){
                  return caml_cps_exact_call2
                          (scope$0,
                           p1,
                           function(_SQ_){
                            return caml_cps_call3(Stdlib_Int[11], _SQ_, _SP_, cont);
                           });
                 });
     }
   }
   function kfalse(param, cont){return cont(0);}
   function name$0(opt, param, cont){
    if(opt) var sth = opt[1], paren = sth; else var paren = kfalse;
    switch(param[0]){
      case 0:
       var id = param[1];
       return caml_cps_call2(Dynlink_compilerlibs_Ident[15], id, cont);
      case 1:
       var s = param[2], p = param[1];
       return caml_cps_call2
               (paren,
                s,
                function(_SK_){
                 function _SL_(_SN_){
                  return caml_cps_exact_call3
                          (name$0,
                           [0, paren],
                           p,
                           function(_SO_){
                            return caml_cps_call3(Stdlib[28], _SO_, _SN_, cont);
                           });
                 }
                 return _SK_
                         ? caml_cps_call3
                           (Stdlib[28],
                            s,
                            cst$79,
                            function(_SM_){
                             return caml_cps_call3(Stdlib[28], cst$80, _SM_, _SL_);
                            })
                         : caml_cps_call3(Stdlib[28], cst$81, s, _SL_);
                });
      default:
       var p2 = param[2], p1 = param[1];
       return caml_cps_exact_call3
               (name$0,
                [0, paren],
                p2,
                function(_SG_){
                 return caml_cps_call3
                         (Stdlib[28],
                          _SG_,
                          cst$82,
                          function(_SH_){
                           return caml_cps_call3
                                   (Stdlib[28],
                                    cst$83,
                                    _SH_,
                                    function(_SI_){
                                     return caml_cps_exact_call3
     (name$0,
      [0, paren],
      p1,
      function(_SJ_){
       return caml_cps_call3(Stdlib[28], _SJ_, _SI_, cont);
      });
                                    });
                          });
                });
    }
   }
   function print$8(ppf, param, cont){
    switch(param[0]){
      case 0:
       var id = param[1];
       return caml_cps_call3(Dynlink_compilerlibs_Ident[9], ppf, id, cont);
      case 1:
       var s = param[2], p = param[1];
       return caml_cps_call6
               (Stdlib_Format[135], ppf, _gf_, print$8, p, s, cont);
      default:
       var p2 = param[2], p1 = param[1];
       return caml_cps_call7
               (Stdlib_Format[135], ppf, _gg_, print$8, p1, print$8, p2, cont);
    }
   }
   function head(param, cont){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var id = param$0[1]; return cont(id);
       case 1:
        var p = param$0[1], param$0 = p; break;
       default:
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _gh_], 1));
     }
   }
   function flatten$0(t, cont){
    var acc = 0, param = t;
    for(;;)
     switch(param[0]){
       case 0:
        var id = param[1]; return cont([0, 17724, [0, id, acc]]);
       case 1:
        var
         s = param[2],
         p = param[1],
         acc$0 = [0, s, acc],
         acc = acc$0,
         param = p;
        break;
       default: return cont(437034030);
     }
   }
   function heads(p, cont){
    function heads(p, acc){
     var p$0 = p, acc$0 = acc;
     for(;;)
      switch(p$0[0]){
        case 0:
         var id = p$0[1]; return [0, id, acc$0];
        case 1:
         var p$1 = p$0[1], p$0 = p$1; break;
        default:
         var
          p2 = p$0[2],
          p1 = p$0[1],
          acc$1 = heads(p2, acc$0),
          p$0 = p1,
          acc$0 = acc$1;
      }
    }
    return cont(heads(p, 0));
   }
   function last$0(param, cont){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var id = param$0[1];
        return caml_cps_call2(Dynlink_compilerlibs_Ident[15], id, cont);
       case 1:
        var s = param$0[2]; return cont(s);
       default: var p = param$0[2], param$0 = p;
     }
   }
   function is_uident(s, cont){
    if(caml_string_notequal(s, cst$117))
     return 25 < caml_string_get(s, 0) - 65 >>> 0 ? cont(0) : cont(1);
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Assert_failure, _gi_], 1));
   }
   function constructor_typath(p, cont){
    function _SA_(){return cont([0, p]);}
    switch(p[0]){
      case 0:
       var id = p[1];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[15],
                id,
                function(_SE_){
                 return caml_cps_exact_call2
                         (is_uident,
                          _SE_,
                          function(_SF_){return _SF_ ? cont([2, id]) : _SA_();});
                });
      case 1:
       var s = p[2], ty_path = p[1];
       return caml_cps_exact_call2
               (is_uident,
                s,
                function(_SB_){
                 return _SB_
                         ? caml_cps_exact_call2
                           (last$0,
                            ty_path,
                            function(_SC_){
                             return caml_cps_exact_call2
                                     (is_uident,
                                      _SC_,
                                      function(_SD_){
                                       return _SD_ ? cont([1, ty_path, s]) : cont([3, ty_path, s]);
                                      });
                            })
                         : _SA_();
                });
      default: return _SA_();
    }
   }
   function is_constructor_typath(p, cont){
    return caml_cps_exact_call2
            (constructor_typath,
             p,
             function(match){return 0 === match[0] ? cont(0) : cont(1);});
   }
   var
    T$2 = [0, compare$9],
    Set$3 = caml_callback(Stdlib_Set[1], [T$2]),
    Map$5 = caml_callback(Stdlib_Map[1], [T$2]),
    Dynlink_compilerlibs_Path =
      [0,
       same$0,
       compare$9,
       find_free_opt,
       exists_free,
       scope$0,
       flatten$0,
       name$0,
       head,
       print$8,
       heads,
       last$0,
       is_uident,
       constructor_typath,
       is_constructor_typath,
       Map$5,
       Set$3];
   caml_register_global
    (1422, Dynlink_compilerlibs_Path, "Dynlink_compilerlibs.Path");
   var Error$3 = [248, cst_Dynlink_compilerlibs_Primi, caml_fresh_oo_id(0)];
   function is_ocaml_repr(param, cont){
    if(typeof param === "number" && ! param) return cont(1);
    return cont(0);
   }
   function is_unboxed(param, cont){
    if(typeof param === "number" && 1 !== param) return cont(0);
    return cont(1);
   }
   function is_untagged(param, cont){
    if(typeof param === "number" && 2 <= param) return cont(1);
    return cont(0);
   }
   function make_native_repr_args(arity, x){
    return 0 === arity ? 0 : [0, x, make_native_repr_args(arity - 1 | 0, x)];
   }
   function simple(name, arity, alloc, cont){
    return cont
            ([0,
              name,
              arity,
              alloc,
              cst$84,
              make_native_repr_args(arity, 0),
              0]);
   }
   function make$0
   (name, alloc, native_name, native_repr_args, native_repr_res, cont){
    return caml_cps_call2
            (Stdlib_List[1],
             native_repr_args,
             function(_Sz_){
              return cont
                      ([0,
                        name,
                        _Sz_,
                        alloc,
                        native_name,
                        native_repr_args,
                        native_repr_res]);
             });
   }
   function parse_declaration
   (valdecl, native_repr_args, native_repr_res, cont){
    return caml_cps_call2
            (Stdlib_List[1],
             native_repr_args,
             function(arity){
              var _Sc_ = valdecl[3];
              function _Sh_
              (name, native_name, old_style_noalloc, old_style_float){
               return caml_cps_call3
                       (Dynlink_compilerlibs_Attr_help[2],
                        _gj_,
                        valdecl[4],
                        function(noalloc_attribute){
                         function _Sj_(_Sn_){
                          if(_Sn_){
                           var
                            _So_ = [0, Error$3, valdecl[5], 0],
                            raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_So_, 1));
                          }
                          var
                           noalloc_attribute$0 =
                             old_style_noalloc ? noalloc_attribute : old_style_noalloc;
                          if(noalloc_attribute$0){
                           var
                            _Sp_ = [0, Error$3, valdecl[5], 1],
                            raise$0 = caml_pop_trap();
                           return raise$0(caml_maybe_attach_backtrace(_Sp_, 1));
                          }
                          var
                           old_style_noalloc$0 = old_style_noalloc || old_style_float;
                          function _Sq_(_Sr_){
                           var _Ss_ = caml_string_equal(native_name, cst$117);
                           function _St_(_Sx_){
                            if(_Sx_){
                             var
                              _Sy_ = [0, Error$3, valdecl[5], 2],
                              raise = caml_pop_trap();
                             return raise(caml_maybe_attach_backtrace(_Sy_, 1));
                            }
                            var noalloc = old_style_noalloc$0 || noalloc_attribute;
                            if(old_style_float)
                             var
                              native_repr_res$0 = 1,
                              native_repr_args$0 = make_native_repr_args(arity, 1);
                            else
                             var
                              native_repr_res$0 = native_repr_res,
                              native_repr_args$0 = native_repr_args;
                            return cont
                                    ([0,
                                      name,
                                      arity,
                                      1 - noalloc,
                                      native_name,
                                      native_repr_args$0,
                                      native_repr_res$0]);
                           }
                           return _Ss_
                                   ? caml_cps_call3
                                     (Stdlib_List[32],
                                      is_ocaml_repr,
                                      native_repr_args,
                                      function(_Su_){
                                       function _Sv_(_Sw_){return _St_(1 - _Sw_);}
                                       return _Su_
       ? caml_cps_exact_call2(is_ocaml_repr, native_repr_res, _Sv_)
       : _Sv_(_Su_);
                                      })
                                   : _St_(_Ss_);
                          }
                          return old_style_float
                                  ? caml_cps_call5
                                    (Dynlink_compilerlibs_Location[43],
                                     0,
                                     0,
                                     valdecl[5],
                                     cst_unboxed_noalloc_should_be_,
                                     _Sq_)
                                  : old_style_noalloc$0
                                    ? caml_cps_call5
                                      (Dynlink_compilerlibs_Location[43],
                                       0,
                                       0,
                                       valdecl[5],
                                       cst_noalloc_should_be_used_ins,
                                       _Sq_)
                                    : _Sq_(0);
                         }
                         return old_style_float
                                 ? caml_cps_call3
                                   (Stdlib_List[32],
                                    is_ocaml_repr,
                                    native_repr_args,
                                    function(_Sk_){
                                     function _Sl_(_Sm_){return _Sj_(1 - _Sm_);}
                                     return _Sk_
     ? caml_cps_exact_call2(is_ocaml_repr, native_repr_res, _Sl_)
     : _Sl_(_Sk_);
                                    })
                                 : _Sj_(old_style_float);
                        });
              }
              if(! _Sc_)
               return caml_cps_call2
                       (Dynlink_compilerlibs_Misc[1],
                        cst_Primitive_parse_declaratio,
                        function(_Si_){
                         var
                          old_style_float = _Si_[4],
                          old_style_noalloc = _Si_[3],
                          native_name = _Si_[2],
                          name = _Si_[1];
                         return _Sh_
                                 (name, native_name, old_style_noalloc, old_style_float);
                        });
              var name = _Sc_[1], _Sd_ = _Sc_[2];
              if(! _Sd_) return _Sh_(name, cst$86, 0, 0);
              var name2 = _Sd_[1];
              if(caml_string_notequal(name2, cst_noalloc)){
               var _Se_ = _Sd_[2];
               if(_Se_ && ! caml_string_notequal(_Se_[1], cst_float$0))
                return _Sh_(name, name2, 0, 1);
              }
              else{
               var _Sf_ = _Sd_[2];
               if(_Sf_){
                var name2$0 = _Sf_[1], _Sg_ = _Sf_[2];
                if(_Sg_ && ! caml_string_notequal(_Sg_[1], cst_float$0))
                 return _Sh_(name, name2$0, 1, 1);
                return _Sh_(name, name2$0, 1, 0);
               }
              }
              return caml_string_notequal(name2, cst_noalloc)
                      ? _Sh_(name, name2, 0, 0)
                      : _Sh_(name, cst$85, 1, 0);
             });
   }
   function add_native_repr_attributes(ty, attrs, cont){
    a:
    {
     if(typeof ty !== "number" && 1 === ty[0]){
      if(! attrs) break a;
      var
       rest = attrs[2],
       attr_opt = attrs[1],
       b = ty[3],
       a = ty[2],
       label = ty[1];
      return caml_cps_exact_call3
              (add_native_repr_attributes,
               b,
               rest,
               function(b){
                if(attr_opt)
                 var attr = attr_opt[1], a$0 = [14, a, attr];
                else
                 var a$0 = a;
                return cont([1, label, a$0, b]);
               });
     }
     if(attrs){
      var _Sa_ = attrs[1];
      if(_Sa_ && ! attrs[2]){var attr = _Sa_[1]; return cont([14, ty, attr]);}
     }
    }
    return caml_cps_call3
            (Stdlib_List[32],
             function(x, cont){return cont(0 === x ? 1 : 0);},
             attrs,
             function(_Sb_){
              if(_Sb_) return cont(ty);
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _gk_], 1));
             });
   }
   function print$9(p, osig_val_decl, cont){
    var
     prims =
       caml_string_notequal(p[4], cst$117)
        ? [0, p[1], [0, p[4], 0]]
        : [0, p[1], 0];
    function for_all(f, cont){
     return caml_cps_call3
             (Stdlib_List[32],
              f,
              p[5],
              function(_R$_){
               return _R$_ ? caml_cps_exact_call2(f, p[6], cont) : cont(_R$_);
              });
    }
    return caml_cps_exact_call2
            (for_all,
             is_unboxed,
             function(all_unboxed){
              return caml_cps_exact_call2
                      (for_all,
                       is_untagged,
                       function(all_untagged){
                        var
                         attrs = p[3] ? 0 : [0, oattr_noalloc, 0],
                         attrs$0 =
                           all_unboxed
                            ? [0, oattr_unboxed, attrs]
                            : all_untagged ? [0, oattr_untagged, attrs] : attrs;
                        function attr_of_native_repr(param, cont){
                         if(typeof param === "number")
                          switch(param){
                            case 0:
                             return cont(0);
                            case 2:
                             return all_untagged ? cont(0) : cont([0, oattr_untagged]);
                          }
                         return all_unboxed ? cont(0) : cont([0, oattr_unboxed]);
                        }
                        var _R6_ = 0;
                        return caml_cps_exact_call2
                                (attr_of_native_repr,
                                 p[6],
                                 function(_R7_){
                                  var _R8_ = [0, _R7_, _R6_];
                                  return caml_cps_call3
  (Stdlib_List[19],
   attr_of_native_repr,
   p[5],
   function(_R9_){
    return caml_cps_call3
            (Stdlib[37],
             _R9_,
             _R8_,
             function(type_attrs){
              return caml_cps_exact_call3
                      (add_native_repr_attributes,
                       osig_val_decl[2],
                       type_attrs,
                       function(_R__){
                        return cont([0, osig_val_decl[1], _R__, prims, attrs$0]);
                       });
             });
   });
                                 });
                       });
             });
   }
   function native_name(p, cont){
    return caml_string_notequal(p[4], cst$117) ? cont(p[4]) : cont(p[1]);
   }
   function byte_name(p, cont){return cont(p[1]);}
   function equal_boxed_integer(bi1, bi2, cont){
    a:
    {
     switch(bi1){
       case 0:
        if(bi2) break a; break;
       case 1:
        if(1 !== bi2) break a; break;
       default: if(2 > bi2) break a;
     }
     return cont(1);
    }
    return cont(0);
   }
   function equal_native_repr(nr1, nr2, cont){
    if(typeof nr1 === "number")
     switch(nr1){
       case 0:
        if(typeof nr2 === "number" && ! nr2) return cont(1); return cont(0);
       case 1:
        if(typeof nr2 === "number" && 1 === nr2) return cont(1);
        return cont(0);
       default:
        if(typeof nr2 === "number" && 2 <= nr2) return cont(1);
        return cont(0);
     }
    var bi1 = nr1[1];
    if(typeof nr2 === "number") return cont(0);
    var bi2 = nr2[1];
    return caml_cps_exact_call3(equal_boxed_integer, bi1, bi2, cont);
   }
   function native_name_is_external(p, cont){
    return caml_cps_exact_call2
            (native_name,
             p,
             function(nat_name){
              var
               _R4_ = caml_string_notequal(nat_name, cst$117),
               _R5_ =
                 _R4_ ? 37 !== caml_string_get(nat_name, 0) ? 1 : 0 : _R4_;
              return cont(_R5_);
             });
   }
   function report_error$0(ppf, err, cont){
    switch(err){
      case 0:
       return caml_cps_call3(Stdlib_Format[135], ppf, _gl_, cont);
      case 1:
       return caml_cps_call3(Stdlib_Format[135], ppf, _gm_, cont);
      default: return caml_cps_call3(Stdlib_Format[135], ppf, _gn_, cont);
    }
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$3) return cont(0);
       var err = param[3], loc = param[2];
       return caml_cps_call5
               (Dynlink_compilerlibs_Location[49],
                [0, loc],
                0,
                report_error$0,
                err,
                function(_R3_){return cont([0, _R3_]);});
      }]);
   var
    Dynlink_compilerlibs_Primitive =
      [0,
       simple,
       make$0,
       parse_declaration,
       print$9,
       native_name,
       byte_name,
       equal_boxed_integer,
       equal_native_repr,
       native_name_is_external,
       Error$3];
   caml_register_global
    (1423, Dynlink_compilerlibs_Primitive, "Dynlink_compilerlibs.Primitive");
   var Violation = [0];
   function coerce$0(t, as, cont){
    a:
    {
     b:
     {
      switch(t){
        case 0:
         switch(as){case 2: return cont(_gq_);case 0: break;default: break b;
         }
         break;
        case 1:
         if(0 !== as) break a; break;
      }
      if(! as) break a;
     }
     if(2 > as) return cont(_gp_);
    }
    return cont(_go_);
   }
   function of_attributes(attrs, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Builtin_a[14],
             attrs,
             function(match){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Builtin_a[15],
                       attrs,
                       function(match$0){
                        return match ? cont(1) : match$0 ? cont(2) : cont(0);
                       });
             });
   }
   var
    Dynlink_compilerlibs_Type_imme = [0, Violation, coerce$0, of_attributes];
   caml_register_global
    (1424,
     Dynlink_compilerlibs_Type_imme,
     "Dynlink_compilerlibs.Type_immediacy");
   function equal$6(x, y, cont){return cont(caml_equal(x, y));}
   function compare$10(x, y, cont){return cont(caml_compare(x, y));}
   function hash$7(x, cont){
    return caml_cps_call2(Stdlib_Hashtbl[28], x, cont);
   }
   function print$10(fmt, param, cont){
    if(typeof param === "number")
     return caml_cps_call3(Stdlib_Format[13], fmt, cst_internal, cont);
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_cps_call3(Stdlib_Format[13], fmt, s, cont);
      case 1:
       var id = param[2], comp_unit = param[1];
       return caml_cps_call5
               (Stdlib_Format[135], fmt, _gr_, comp_unit, id, cont);
      default:
       var name = param[1];
       return caml_cps_call4(Stdlib_Format[135], fmt, _gs_, name, cont);
    }
   }
   function output$6(oc, t, cont){
    return caml_cps_call2
            (Stdlib_Format[108],
             oc,
             function(fmt){
              return caml_cps_exact_call3(print$10, fmt, t, cont);
             });
   }
   var
    include$5 =
      caml_callback
       (Dynlink_compilerlibs_Identifia[2],
        [[0, equal$6, hash$7, compare$10, output$6, print$10]]),
    T$3 = include$5[1],
    equal$7 = include$5[2],
    hash$8 = include$5[3],
    compare$11 = include$5[4],
    output$7 = include$5[5],
    print$11 = include$5[6],
    Set$4 = include$5[7],
    Map$6 = include$5[8],
    Tbl$3 = include$5[9],
    id = [0, -1];
   function reinit$0(param, cont){id[1] = -1; return cont(0);}
   function mk$27(current_unit, cont){
    id[1]++;
    return cont([1, current_unit, id[1]]);
   }
   function of_compilation_unit_id(id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[18],
             id,
             function(_RY_){
              function _RZ_(_R1_){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Ident[15],
                        id,
                        function(_R2_){return cont([0, _R2_]);});
              }
              return 1 - _RY_
                      ? caml_cps_call2
                        (Dynlink_compilerlibs_Ident[15],
                         id,
                         function(_R0_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Misc[2], _gt_, _R0_, _RZ_);
                         })
                      : _RZ_(0);
             });
   }
   function of_predef_id(id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[22],
             id,
             function(_RT_){
              function _RU_(_RW_){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Ident[15],
                        id,
                        function(_RX_){return cont([2, _RX_]);});
              }
              return 1 - _RT_
                      ? caml_cps_call2
                        (Dynlink_compilerlibs_Ident[15],
                         id,
                         function(_RV_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Misc[2], _gu_, _RV_, _RU_);
                         })
                      : _RU_(0);
             });
   }
   function for_actual_declaration(param, cont){
    if(typeof param !== "number" && 1 === param[0]) return cont(1);
    return cont(0);
   }
   function to_string$1(param, cont){
    switch(param){
      case 0:
       return cont(cst_value);
      case 1:
       return cont(cst_type);
      case 2:
       return cont(cst_module);
      case 3:
       return cont(cst_module_type);
      case 4:
       return cont(cst_extension_constructor$0);
      case 5:
       return cont(cst_class);
      default: return cont(cst_class_type);
    }
   }
   function can_appear_in_types(param, cont){
    if(4 !== param && param) return cont(1);
    return cont(0);
   }
   var Sig_component_kind = [0, to_string$1, can_appear_in_types];
   function compare$12(_RS_, _RR_, cont){
    return cont(caml_compare(_RS_, _RR_));
   }
   function make$1(str, ns, cont){return cont([0, str, ns]);}
   function value$1(id, cont){
    var _RP_ = 0;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RQ_){return cont([0, _RQ_, _RP_]);});
   }
   function type$2(id, cont){
    var _RN_ = 1;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RO_){return cont([0, _RO_, _RN_]);});
   }
   function module$1(id, cont){
    var _RL_ = 2;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RM_){return cont([0, _RM_, _RL_]);});
   }
   function module_type(id, cont){
    var _RJ_ = 3;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RK_){return cont([0, _RK_, _RJ_]);});
   }
   function extension_constructor(id, cont){
    var _RH_ = 4;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RI_){return cont([0, _RI_, _RH_]);});
   }
   function class$3(id, cont){
    var _RF_ = 5;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RG_){return cont([0, _RG_, _RF_]);});
   }
   function class_type$1(id, cont){
    var _RD_ = 6;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_RE_){return cont([0, _RE_, _RD_]);});
   }
   function print$12(fmt, param, cont){
    var ns = param[2], name = param[1];
    return caml_cps_call2
            (Sig_component_kind[1],
             ns,
             function(_RC_){
              return caml_cps_call5
                      (Stdlib_Format[135], fmt, _gv_, name, _RC_, cont);
             });
   }
   var Map$7 = caml_callback(Stdlib_Map[1], [[0, compare$12]]);
   function print$13(fmt, cont){
    return caml_cps_call3
            (Stdlib_Format[132],
             0,
             function(fmt, cont){
              return caml_cps_call4
                      (Stdlib_Format[135], fmt, _gw_, print$11, cont);
             },
             function(print_uid_opt){
              function aux(fmt, param, cont){
               var desc = param[2], uid = param[1];
               if(typeof desc === "number")
                return caml_cps_call3
                        (Stdlib_Format[132],
                         0,
                         print$11,
                         function(_RB_){
                          return caml_cps_call5
                                  (Stdlib_Format[135], fmt, _gx_, _RB_, uid, cont);
                         });
               switch(desc[0]){
                 case 0:
                  var id = desc[1];
                  return caml_cps_call7
                          (Stdlib_Format[135],
                           fmt,
                           _gy_,
                           Dynlink_compilerlibs_Ident[5],
                           id,
                           print_uid_opt,
                           uid,
                           cont);
                 case 1:
                  var t = desc[2], id$0 = desc[1];
                  return caml_cps_call9
                          (Stdlib_Format[135],
                           fmt,
                           _gz_,
                           print_uid_opt,
                           uid,
                           Dynlink_compilerlibs_Ident[5],
                           id$0,
                           aux,
                           t,
                           cont);
                 case 2:
                  var t2 = desc[2], t1 = desc[1];
                  return caml_cps_call9
                          (Stdlib_Format[135],
                           fmt,
                           _gA_,
                           aux,
                           t1,
                           aux,
                           t2,
                           print_uid_opt,
                           uid,
                           cont);
                 case 3:
                  var
                   map = desc[1],
                   print_map =
                     function(fmt, cont){
                      return caml_cps_call2
                              (Map$7[12],
                               function(item, t, cont){
                                return caml_cps_call7
(Stdlib_Format[135],
 fmt,
 _gB_,
 print$12,
 item,
 aux,
 t,
 cont);
                               },
                               cont);
                     };
                  return caml_cps_call7
                          (Stdlib_Format[135],
                           fmt,
                           _gC_,
                           print_uid_opt,
                           uid,
                           print_map,
                           map,
                           cont);
                 case 4:
                  var item = desc[2], t$0 = desc[1];
                  if(! uid)
                   return caml_cps_call7
                           (Stdlib_Format[135],
                            fmt,
                            _gE_,
                            aux,
                            t$0,
                            print$12,
                            item,
                            cont);
                  var uid$0 = uid[1];
                  return caml_cps_call9
                          (Stdlib_Format[135],
                           fmt,
                           _gD_,
                           aux,
                           t$0,
                           print$12,
                           item,
                           print$11,
                           uid$0,
                           cont);
                 default:
                  var name = desc[1];
                  return caml_cps_call4
                          (Stdlib_Format[135], fmt, _gF_, name, cont);
               }
              }
              return caml_cps_call4(Stdlib_Format[135], fmt, _gG_, aux, cont);
             });
   }
   function fresh_var(opt, uid, cont){
    if(opt) var sth = opt[1], name = sth; else var name = cst_shape_var;
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[11],
             name,
             function(var$0){
              return cont([0, var$0, [0, [0, uid], [0, var$0]]]);
             });
   }
   var
    for_unnamed_functor_param =
      caml_callback(Dynlink_compilerlibs_Ident[11], [cst$87]);
   function var$2(uid, id, cont){return cont([0, [0, uid], [0, id]]);}
   function abs(uid, var$0, body, cont){
    return cont([0, uid, [1, var$0, body]]);
   }
   function str(uid, map, cont){return cont([0, uid, [3, map]]);}
   function leaf(uid, cont){return cont([0, [0, uid], 0]);}
   function proj(uid, t, item, cont){
    var match = t[2];
    if(typeof match === "number") return cont(t);
    if(3 !== match[0]) return cont([0, uid, [4, t, item]]);
    var map = match[1];
    caml_push_trap
     (function(_RA_){
       if(_RA_ === Stdlib[8]) return cont(t);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_RA_, 0));
      });
    return caml_cps_call3
            (Map$7[28],
             item,
             map,
             function(_Rz_){caml_pop_trap(); return cont(_Rz_);});
   }
   function app(uid, f, arg, cont){return cont([0, uid, [2, f, arg]]);}
   function decompose_abs(t, cont){
    var match = t[2];
    if(typeof match !== "number" && 1 === match[0]){
     var t$0 = match[2], x = match[1];
     return cont([0, [0, x, t$0]]);
    }
    return cont(0);
   }
   function Make_reduce(Params){
    function improve_uid(uid, nf){return nf[1] ? nf : [0, uid, nf[2]];}
    function in_memo_table(memo_table, memo_key, f, arg, cont){
     caml_push_trap
      (function(_Rx_){
        if(_Rx_ === Stdlib[8])
         return caml_cps_exact_call2
                 (f,
                  arg,
                  function(res){
                   return caml_cps_call4
                           (Stdlib_Hashtbl[11],
                            memo_table,
                            memo_key,
                            res,
                            function(_Ry_){return cont(res);});
                  });
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_Rx_, 0));
       });
     return caml_cps_call3
             (Stdlib_Hashtbl[6],
              memo_table,
              memo_key,
              function(res){caml_pop_trap(); return cont(res);});
    }
    function bind(env, var$0, shape, cont){
     var _Rv_ = env[4];
     return caml_cps_call4
             (Dynlink_compilerlibs_Ident[7][4],
              var$0,
              shape,
              env[3],
              function(_Rw_){return cont([0, env[1], env[2], _Rw_, _Rv_]);});
    }
    function reduce(env, t, cont){
     var memo_key = [0, env[3], t];
     return caml_cps_exact_call5
             (in_memo_table,
              env[4],
              memo_key,
              function(_Ru_, cont){
               return caml_cps_exact_call3(reduce$0, env, _Ru_, cont);
              },
              t,
              cont);
    }
    function reduce$0(env, t, cont){
     var local_env = env[3], global_env = env[2], fuel = env[1];
     function reduce$0(env, t, cont){
      return caml_cps_exact_call3(reduce, env, t, cont);
     }
     function delay_reduce(env, t){return [0, env[3], t];}
     function force(param, cont){
      var t = param[2], local_env = param[1];
      return caml_cps_exact_call3
              (reduce$0, [0, env[1], env[2], local_env, env[4]], t, cont);
     }
     function return$0(desc){return [0, t[1], desc];}
     if(0 > fuel[1]) return cont(return$0([6, t[2]]));
     var match = t[2];
     if(typeof match === "number") return cont(return$0(0));
     switch(match[0]){
       case 0:
        var id = match[1];
        caml_push_trap
         (function(_Rs_){
           if(_Rs_ === Stdlib[8]){
            caml_push_trap
             (function(_Rt_){
               if(_Rt_ === Stdlib[8]) return cont(return$0([0, id]));
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_Rt_, 0));
              });
            return caml_cps_call3
                    (Params[3],
                     global_env,
                     id,
                     function(res){
                      caml_pop_trap();
                      return caml_equal(res, t)
                              ? cont(return$0([0, id]))
                              : (fuel
                                 [1]
                                += -1,
                                caml_cps_exact_call3(reduce$0, env, res, cont));
                     });
           }
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_Rs_, 0));
          });
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[7][28],
                 id,
                 local_env,
                 function(val){
                  caml_pop_trap();
                  if(! val) return cont(return$0([0, id]));
                  var def = val[1];
                  return caml_cps_exact_call2(force, def, cont);
                 });
       case 1:
        var body = match[2], var$0 = match[1];
        return caml_cps_exact_call4
                (bind,
                 env,
                 var$0,
                 0,
                 function(_Rr_){
                  var body_nf = delay_reduce(_Rr_, body);
                  return cont(return$0([2, local_env, var$0, body, body_nf]));
                 });
       case 2:
        var arg = match[2], f = match[1];
        return caml_cps_exact_call3
                (reduce$0,
                 env,
                 f,
                 function(f){
                  var match = f[2];
                  if(typeof match !== "number" && 2 === match[0]){
                   var
                    body = match[3],
                    var$0 = match[2],
                    clos_env = match[1],
                    arg$0 = delay_reduce(env, arg);
                   return caml_cps_exact_call4
                           (bind,
                            [0, env[1], env[2], clos_env, env[4]],
                            var$0,
                            [0, arg$0],
                            function(env){
                             return caml_cps_exact_call3
                                     (reduce$0,
                                      env,
                                      body,
                                      function(_Rq_){return cont(improve_uid(t[1], _Rq_));});
                            });
                  }
                  return caml_cps_exact_call3
                          (reduce$0,
                           env,
                           arg,
                           function(arg){return cont(return$0([1, f, arg]));});
                 });
       case 3:
        var m = match[1];
        return caml_cps_call3
                (Map$7[34],
                 function(_Rp_, cont){return cont(delay_reduce(env, _Rp_));},
                 m,
                 function(mnf){return cont(return$0([3, mnf]));});
       case 4:
        var item = match[2], str = match[1];
        return caml_cps_exact_call3
                (reduce$0,
                 env,
                 str,
                 function(str){
                  function nored(param){return return$0([4, str, item]);}
                  var match = str[2];
                  if(typeof match !== "number" && 3 === match[0]){
                   var items = match[1];
                   caml_push_trap
                    (function(_Ro_){
                      if(_Ro_ === Stdlib[8]) return cont(nored(undef));
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_Ro_, 0));
                     });
                   return caml_cps_call3
                           (Map$7[28],
                            item,
                            items,
                            function(nf){
                             caml_pop_trap();
                             return caml_cps_exact_call2
                                     (force,
                                      nf,
                                      function(_Rn_){return cont(improve_uid(t[1], _Rn_));});
                            });
                  }
                  return cont(nored(undef));
                 });
       default:
        var unit_name = match[1];
        return caml_cps_call2
                (Params[2],
                 unit_name,
                 function(match){
                  if(! match) return cont(return$0([5, unit_name]));
                  var t = match[1];
                  return caml_cps_exact_call3(reduce$0, env, t, cont);
                 });
     }
    }
    function read_back(env, nf, cont){
     return caml_cps_exact_call5
             (in_memo_table,
              env[5],
              nf,
              function(_Rm_, cont){
               return caml_cps_exact_call3(read_back$0, env, _Rm_, cont);
              },
              nf,
              cont);
    }
    function read_back$0(env, nf, cont){
     return caml_cps_exact_call3
             (read_back_desc,
              env,
              nf[2],
              function(_Rl_){return cont([0, nf[1], _Rl_]);});
    }
    function read_back_desc(env, desc, cont){
     function read_back$0(nf, cont){
      return caml_cps_exact_call3(read_back, env, nf, cont);
     }
     function read_back_force(param, cont){
      var t = param[2], local_env = param[1];
      return caml_cps_exact_call3
              (reduce,
               [0, env[1], env[2], local_env, env[4]],
               t,
               function(_Rk_){
                return caml_cps_exact_call2(read_back$0, _Rk_, cont);
               });
     }
     if(typeof desc === "number") return cont(0);
     switch(desc[0]){
       case 0:
        var v = desc[1]; return cont([0, v]);
       case 1:
        var nfu = desc[2], nft = desc[1];
        return caml_cps_exact_call2
                (read_back$0,
                 nfu,
                 function(_Ri_){
                  return caml_cps_exact_call2
                          (read_back$0,
                           nft,
                           function(_Rj_){return cont([2, _Rj_, _Ri_]);});
                 });
       case 2:
        var nf = desc[4], x = desc[2];
        return caml_cps_exact_call2
                (read_back_force,
                 nf,
                 function(_Rh_){return cont([1, x, _Rh_]);});
       case 3:
        var nstr = desc[1];
        return caml_cps_call3
                (Map$7[34],
                 read_back_force,
                 nstr,
                 function(_Rg_){return cont([3, _Rg_]);});
       case 4:
        var item = desc[2], nf$0 = desc[1];
        return caml_cps_exact_call2
                (read_back$0,
                 nf$0,
                 function(_Rf_){return cont([4, _Rf_, item]);});
       case 5:
        var s = desc[1]; return cont([5, s]);
       default: var t = desc[1]; return cont(t);
     }
    }
    function reduce$1(global_env, t, cont){
     var fuel = [0, Params[1]];
     return caml_cps_call3
             (Stdlib_Hashtbl[1],
              0,
              42,
              function(reduce_memo_table){
               return caml_cps_call3
                       (Stdlib_Hashtbl[1],
                        0,
                        42,
                        function(read_back_memo_table){
                         var
                          local_env = Dynlink_compilerlibs_Ident[7][1],
                          env =
                            [0,
                             fuel,
                             global_env,
                             local_env,
                             reduce_memo_table,
                             read_back_memo_table];
                         return caml_cps_exact_call3
                                 (reduce,
                                  env,
                                  t,
                                  function(_Re_){
                                   return caml_cps_exact_call3(read_back, env, _Re_, cont);
                                  });
                        });
              });
    }
    return [0, , , , , , , , , reduce$1];
   }
   function read_unit_shape(param, cont){return cont(0);}
   function find_shape(env, id, cont){
    var _Rd_ = Stdlib[8], raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace(_Rd_, 1));
   }
   var Local_reduce = Make_reduce([0, 10, read_unit_shape, find_shape]);
   function local_reduce(shape, cont){
    return caml_cps_exact_call3(Local_reduce[9], 0, shape, cont);
   }
   var dummy_mod = [0, 0, [3, Map$7[1]]];
   function of_path(find_shape, namespace, cont){
    function aux(ns, param, cont){
     switch(param[0]){
       case 0:
        var id = param[1]; return caml_cps_call3(find_shape, ns, id, cont);
       case 1:
        var name = param[2], path = param[1], _Q$_ = [0, name, ns];
        return caml_cps_exact_call3
                (aux,
                 2,
                 path,
                 function(_Rc_){
                  return caml_cps_exact_call4(proj, 0, _Rc_, _Q$_, cont);
                 });
       default:
        var p2 = param[2], p1 = param[1];
        return caml_cps_exact_call3
                (aux,
                 2,
                 p2,
                 function(_Ra_){
                  return caml_cps_exact_call3
                          (aux,
                           2,
                           p1,
                           function(_Rb_){
                            return caml_cps_exact_call4(app, 0, _Rb_, _Ra_, cont);
                           });
                 });
     }
    }
    return cont
            (function(_Q__, cont){
              return caml_cps_exact_call3(aux, namespace, _Q__, cont);
             });
   }
   function for_persistent_unit(s, cont){
    var _Q7_ = [5, s];
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[12],
             s,
             function(_Q8_){
              return caml_cps_exact_call2
                      (of_compilation_unit_id,
                       _Q8_,
                       function(_Q9_){return cont([0, [0, _Q9_], _Q7_]);});
             });
   }
   function set_uid_if_none(t, uid, cont){
    return t[1] ? cont(t) : cont([0, [0, uid], t[2]]);
   }
   var empty$0 = Map$7[1];
   function add$1(t, item, shape, cont){
    return caml_cps_call4(Map$7[4], item, shape, t, cont);
   }
   function add_value(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_Q5_){
              return caml_cps_exact_call2
                      (value$1,
                       id,
                       function(_Q6_){
                        return caml_cps_call4(Map$7[4], _Q6_, _Q5_, t, cont);
                       });
             });
   }
   function add_value_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (value$1,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_Q4_){
                        return caml_cps_call4(Map$7[4], item, _Q4_, t, cont);
                       });
             });
   }
   function add_type(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_Q2_){
              return caml_cps_exact_call2
                      (type$2,
                       id,
                       function(_Q3_){
                        return caml_cps_call4(Map$7[4], _Q3_, _Q2_, t, cont);
                       });
             });
   }
   function add_type_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (type$2,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_Q1_){
                        return caml_cps_call4(Map$7[4], item, _Q1_, t, cont);
                       });
             });
   }
   function add_module(t, id, shape, cont){
    return caml_cps_exact_call2
            (module$1,
             id,
             function(_Q0_){
              return caml_cps_call4(Map$7[4], _Q0_, shape, t, cont);
             });
   }
   function add_module_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (module$1,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_QZ_){
                        return caml_cps_call4(Map$7[4], item, _QZ_, t, cont);
                       });
             });
   }
   function add_module_type(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_QX_){
              return caml_cps_exact_call2
                      (module_type,
                       id,
                       function(_QY_){
                        return caml_cps_call4(Map$7[4], _QY_, _QX_, t, cont);
                       });
             });
   }
   function add_module_type_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (module_type,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_QW_){
                        return caml_cps_call4(Map$7[4], item, _QW_, t, cont);
                       });
             });
   }
   function add_extcons(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_QU_){
              return caml_cps_exact_call2
                      (extension_constructor,
                       id,
                       function(_QV_){
                        return caml_cps_call4(Map$7[4], _QV_, _QU_, t, cont);
                       });
             });
   }
   function add_extcons_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (extension_constructor,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_QT_){
                        return caml_cps_call4(Map$7[4], item, _QT_, t, cont);
                       });
             });
   }
   function add_class(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_QR_){
              return caml_cps_exact_call2
                      (class$3,
                       id,
                       function(_QS_){
                        return caml_cps_call4(Map$7[4], _QS_, _QR_, t, cont);
                       });
             });
   }
   function add_class_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (class$3,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_QQ_){
                        return caml_cps_call4(Map$7[4], item, _QQ_, t, cont);
                       });
             });
   }
   function add_class_type(t, id, uid, cont){
    return caml_cps_exact_call2
            (leaf,
             uid,
             function(_QO_){
              return caml_cps_exact_call2
                      (class_type$1,
                       id,
                       function(_QP_){
                        return caml_cps_call4(Map$7[4], _QP_, _QO_, t, cont);
                       });
             });
   }
   function add_class_type_proj(t, id, shape, cont){
    return caml_cps_exact_call2
            (class_type$1,
             id,
             function(item){
              return caml_cps_exact_call4
                      (proj,
                       0,
                       shape,
                       item,
                       function(_QN_){
                        return caml_cps_call4(Map$7[4], item, _QN_, t, cont);
                       });
             });
   }
   var
    Map$8 =
      [0,
       empty$0,
       add$1,
       add_value,
       add_value_proj,
       add_type,
       add_type_proj,
       add_module,
       add_module_proj,
       add_module_type,
       add_module_type_proj,
       add_extcons,
       add_extcons_proj,
       add_class,
       add_class_proj,
       add_class_type,
       add_class_type_proj],
    Dynlink_compilerlibs_Shape =
      [0,
       [0,
        reinit$0,
        mk$27,
        of_compilation_unit_id,
        of_predef_id,
        0,
        for_actual_declaration,
        T$3,
        equal$7,
        hash$8,
        compare$11,
        output$7,
        print$11,
        Set$4,
        Map$6,
        Tbl$3],
       Sig_component_kind,
       [0,
        make$1,
        value$1,
        type$2,
        module$1,
        module_type,
        extension_constructor,
        class$3,
        class_type$1,
        Map$7],
       print$13,
       for_unnamed_functor_param,
       fresh_var,
       var$2,
       abs,
       app,
       str,
       proj,
       leaf,
       decompose_abs,
       for_persistent_unit,
       leaf_for_unpack,
       Map$8,
       dummy_mod,
       of_path,
       set_uid_if_none,
       function(_QM_, cont){return cont([0, Make_reduce(_QM_)[9]]);},
       local_reduce];
   caml_register_global
    (1425, Dynlink_compilerlibs_Shape, "Dynlink_compilerlibs.Shape");
   function compare$13(t1, t2, cont){return cont(t1[4] - t2[4] | 0);}
   function hash$9(t, cont){return cont(t[4]);}
   function equal$8(t1, t2, cont){return cont(t1 === t2 ? 1 : 0);}
   function single(param){
    switch(param){
      case 0:
       return 1;
      case 1:
       return 2;
      case 2:
       return 4;
      case 3:
       return 8;
      case 4:
       return 16;
      case 5:
       return 32;
      default: return 64;
    }
   }
   function union(v1, v2, cont){return cont(v1 | v2);}
   function inter(v1, v2, cont){return cont(v1 & v2);}
   function subset(v1, v2, cont){return cont((v1 & v2) === v1 ? 1 : 0);}
   function eq(v1, v2, cont){return cont(v1 === v2 ? 1 : 0);}
   function set$0(x, b, v, cont){
    if(b) return cont(v | single(x));
    var _QK_ = single(x);
    return caml_cps_call2
            (Stdlib[21], _QK_, function(_QL_){return cont(v & _QL_);});
   }
   function mem$0(x, cont){
    var _QI_ = single(x);
    return cont
            (function(_QJ_, cont){
              return caml_cps_exact_call3(subset, _QI_, _QJ_, cont);
             });
   }
   var
    unknown = 7,
    _gH_ = single(3),
    _gI_ = single(4),
    covariant = single(0) | _gI_ | _gH_;
   function swap(f1, f2, v, cont){
    return caml_cps_exact_call2
            (mem$0,
             f2,
             function(_QE_){
              return caml_cps_exact_call2
                      (_QE_,
                       v,
                       function(_QF_){
                        return caml_cps_exact_call4
                                (set$0,
                                 f1,
                                 _QF_,
                                 v,
                                 function(v$0){
                                  return caml_cps_exact_call2
  (mem$0,
   f1,
   function(_QG_){
    return caml_cps_exact_call2
            (_QG_,
             v,
             function(_QH_){
              return caml_cps_exact_call4(set$0, f2, _QH_, v$0, cont);
             });
   });
                                 });
                       });
             });
   }
   function conjugate(v, cont){
    return caml_cps_exact_call4
            (swap,
             4,
             5,
             v,
             function(_QD_){
              return caml_cps_exact_call4(swap, 0, 1, _QD_, cont);
             });
   }
   function get_upper(v, cont){
    return caml_cps_exact_call2
            (mem$0,
             1,
             function(_Qz_){
              return caml_cps_exact_call2
                      (_Qz_,
                       v,
                       function(_QA_){
                        return caml_cps_exact_call2
                                (mem$0,
                                 0,
                                 function(_QB_){
                                  return caml_cps_exact_call2
  (_QB_, v, function(_QC_){return cont([0, _QC_, _QA_]);});
                                 });
                       });
             });
   }
   function get_lower(v, cont){
    return caml_cps_exact_call2
            (mem$0,
             3,
             function(_Qr_){
              return caml_cps_exact_call2
                      (_Qr_,
                       v,
                       function(_Qs_){
                        return caml_cps_exact_call2
                                (mem$0,
                                 6,
                                 function(_Qt_){
                                  return caml_cps_exact_call2
  (_Qt_,
   v,
   function(_Qu_){
    return caml_cps_exact_call2
            (mem$0,
             5,
             function(_Qv_){
              return caml_cps_exact_call2
                      (_Qv_,
                       v,
                       function(_Qw_){
                        return caml_cps_exact_call2
                                (mem$0,
                                 4,
                                 function(_Qx_){
                                  return caml_cps_exact_call2
  (_Qx_,
   v,
   function(_Qy_){return cont([0, _Qy_, _Qw_, _Qu_, _Qs_]);});
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function unknown_signature(injective, arity, cont){
    function _Qq_(v){
     return caml_cps_call3(Dynlink_compilerlibs_Misc[9], v, arity, cont);
    }
    return injective
            ? caml_cps_exact_call4(set$0, 3, 1, unknown, _Qq_)
            : _Qq_(unknown);
   }
   function eq$0(m1, m2, cont){return cont(m1 === m2 ? 1 : 0);}
   function rank$0(param, cont){
    switch(param){
      case 0:
       return cont(0);
      case 1:
       return cont(1);
      default: return cont(2);
    }
   }
   function compare$14(m1, m2, cont){
    return caml_cps_exact_call2
            (rank$0,
             m2,
             function(_Qo_){
              return caml_cps_exact_call2
                      (rank$0,
                       m1,
                       function(_Qp_){return cont(caml_int_compare(_Qp_, _Qo_));});
             });
   }
   function max(m1, m2, cont){
    return caml_cps_exact_call2
            (rank$0,
             m2,
             function(_Qm_){
              return caml_cps_exact_call2
                      (rank$0,
                       m1,
                       function(_Qn_){return _Qm_ <= _Qn_ ? cont(m1) : cont(m2);});
             });
   }
   function print$14(ppf, param, cont){
    switch(param){
      case 0:
       return caml_cps_call3(Stdlib_Format[135], ppf, _gJ_, cont);
      case 1:
       return caml_cps_call3(Stdlib_Format[135], ppf, _gK_, cont);
      default: return caml_cps_call3(Stdlib_Format[135], ppf, _gL_, cont);
    }
   }
   function print_signature(ppf, modes, cont){
    function pp_sep(ppf, param, cont){
     return caml_cps_call3(Stdlib_Format[135], ppf, _gM_, cont);
    }
    return caml_cps_call3
            (Stdlib_Format[129],
             [0, pp_sep],
             print$14,
             function(_Ql_){
              return caml_cps_call5
                      (Stdlib_Format[135], ppf, _gN_, _Ql_, modes, cont);
             });
   }
   function default_signature(arity, cont){
    var default_mode = Dynlink_compilerlibs_Config[60] ? 2 : 0;
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[9], default_mode, arity, cont);
   }
   function equal_tag(t1, t2, cont){
    if(typeof t1 === "number"){
     if(typeof t2 === "number") return cont(1);
    }
    else
     switch(t1[0]){
       case 0:
        var i1 = t1[1];
        if(typeof t2 !== "number" && 0 === t2[0]){
         var i2 = t2[1];
         return cont(i2 === i1 ? 1 : 0);
        }
        break;
       case 1:
        var i1$0 = t1[1];
        if(typeof t2 !== "number" && 1 === t2[0]){
         var i2$0 = t2[1];
         return cont(i2$0 === i1$0 ? 1 : 0);
        }
        break;
       default:
        var path1 = t1[1];
        if(typeof t2 !== "number" && 2 === t2[0]){
         var b2 = t2[2], path2 = t2[1], b1 = t1[2];
         return caml_cps_call3
                 (Dynlink_compilerlibs_Path[1],
                  path1,
                  path2,
                  function(_Qj_){
                   var _Qk_ = _Qj_ ? b1 === b2 ? 1 : 0 : _Qj_;
                   return cont(_Qk_);
                  });
        }
     }
    return cont(0);
   }
   function may_equal_constr(c1, c2, cont){
    var _Qi_ = c1[5] === c2[5] ? 1 : 0;
    if(! _Qi_) return cont(_Qi_);
    var tag1 = c1[6], match = c2[6];
    if
     (typeof tag1 !== "number"
      && 2 === tag1[0] && typeof match !== "number" && 2 === match[0])
     return cont(1);
    return caml_cps_exact_call3(equal_tag, tag1, match, cont);
   }
   function item_visibility(param, cont){
    switch(param[0]){
      case 3:
       var vis = param[5]; break;
      case 0:
      case 4:
       var vis = param[3]; break;
      default: var vis = param[4];
    }
    return cont(vis);
   }
   function bound_value_identifiers(param, cont){
    var param$0 = param;
    for(;;){
     if(! param$0) return cont(0);
     var match = param$0[1];
     switch(match[0]){
       case 0:
        if(typeof match[2][2] === "number"){
         var rem = param$0[2], id = match[1];
         return caml_cps_exact_call2
                 (bound_value_identifiers,
                  rem,
                  function(_Qh_){return cont([0, id, _Qh_]);});
        }
        break;
       case 2:
        var rem$1 = param$0[2], id$0 = match[1];
        return caml_cps_exact_call2
                (bound_value_identifiers,
                 rem$1,
                 function(_Qg_){return cont([0, id$0, _Qg_]);});
       case 3:
        if(! match[2]){
         var rem$2 = param$0[2], id$1 = match[1];
         return caml_cps_exact_call2
                 (bound_value_identifiers,
                  rem$2,
                  function(_Qf_){return cont([0, id$1, _Qf_]);});
        }
        break;
       case 5:
        var rem$3 = param$0[2], id$2 = match[1];
        return caml_cps_exact_call2
                (bound_value_identifiers,
                 rem$3,
                 function(_Qe_){return cont([0, id$2, _Qe_]);});
     }
     var rem$0 = param$0[2], param$0 = rem$0;
    }
   }
   function signature_item_id(param, cont){var id = param[1]; return cont(id);
   }
   var
    trail =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [function(_Qd_, cont){return cont([0, _Qd_]);}, 0]);
   function log_change(ch){
    var r = [0, 0];
    trail[1][1] = [0, ch, r];
    trail[1] = r;
    return;
   }
   function field_kind_internal_repr(kind, cont){
    var kind$0 = kind;
    for(;;){
     if(typeof kind$0 !== "number"){
      var kind$1 = kind$0[1];
      if(typeof kind$1 !== "number" || kind$1){var kind$0 = kind$1; continue;}
     }
     return cont(kind$0);
    }
   }
   function field_kind_repr(fk, cont){
    return caml_cps_exact_call2
            (field_kind_internal_repr,
             fk,
             function(match){
              return typeof match === "number"
                      ? 2 <= match ? cont(2) : cont(1)
                      : cont(0);
             });
   }
   function field_private(param, cont){return cont([0, 0]);}
   function is_commu_ok(param, cont){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return param$0 ? cont(0) : cont(1);
     var commu = param$0[1], param$0 = commu;
    }
   }
   function commu_var(param, cont){return cont([0, 1]);}
   function repr_link(t$0, d, t, cont){
    function _Qa_(t, d){
     var d$0 = t[1];
     function _Qb_(){
      log_change([1, t$0, t$0[1], d]);
      t$0[1] = d;
      return cont(t);
     }
     if(typeof d$0 === "number") return _Qb_();
     switch(d$0[0]){
       case 5:
        var t$1 = d$0[4], k = d$0[2];
        return caml_cps_exact_call2
                (field_kind_internal_repr,
                 k,
                 function(_Qc_){
                  return 2 === _Qc_
                          ? caml_cps_exact_call2(_Qa_, t$1, d$0)
                          : _Qb_();
                 });
       case 6:
        var t$2 = d$0[1]; return caml_cps_exact_call2(_Qa_, t$2, d$0);
       default: return _Qb_();
     }
    }
    return _Qa_(t, d);
   }
   function repr_link1(t$0, t, cont){
    var d = t[1];
    function _P__(){return cont(t);}
    if(typeof d === "number") return _P__();
    switch(d[0]){
      case 5:
       var t$1 = d[4], k = d[2];
       return caml_cps_exact_call2
               (field_kind_internal_repr,
                k,
                function(_P$_){
                 return 2 === _P$_
                         ? caml_cps_exact_call4(repr_link, t$0, d, t$1, cont)
                         : _P__();
                });
      case 6:
       var t$2 = d[1];
       return caml_cps_exact_call4(repr_link, t$0, d, t$2, cont);
      default: return _P__();
    }
   }
   function repr(t, cont){
    var match = t[1];
    function _P8_(){return cont(t);}
    if(typeof match === "number") return _P8_();
    switch(match[0]){
      case 5:
       var t$0 = match[4], k = match[2];
       return caml_cps_exact_call2
               (field_kind_internal_repr,
                k,
                function(_P9_){
                 return 2 === _P9_
                         ? caml_cps_exact_call3(repr_link1, t, t$0, cont)
                         : _P8_();
                });
      case 6:
       var t$1 = match[1];
       return caml_cps_exact_call3(repr_link1, t, t$1, cont);
      default: return _P8_();
    }
   }
   function get_desc(t, cont){
    return caml_cps_exact_call2
            (repr, t, function(_P7_){return cont(_P7_[1]);});
   }
   function get_level(t, cont){
    return caml_cps_exact_call2
            (repr, t, function(_P6_){return cont(_P6_[2]);});
   }
   function get_scope(t, cont){
    return caml_cps_exact_call2
            (repr, t, function(_P5_){return cont(_P5_[3]);});
   }
   function get_id(t, cont){
    return caml_cps_exact_call2
            (repr, t, function(_P4_){return cont(_P4_[4]);});
   }
   function create_expr(desc, level, scope, id, cont){return cont([0, desc, level, scope, id]);
   }
   function set_desc(ty, d, cont){ty[1] = d; return cont(0);}
   function set_stub_desc(ty, d, cont){
    if(caml_equal(ty[1], _gO_)){ty[1] = d; return cont(0);}
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Assert_failure, _gP_], 1));
   }
   function set_level(ty, lv, cont){ty[2] = lv; return cont(0);}
   function set_scope(ty, sc, cont){ty[3] = sc; return cont(0);}
   function coerce$1(ty, cont){return cont(ty);}
   function type_expr(ty, cont){return cont(ty);}
   function eq_type(t1, t2, cont){
    var _PZ_ = t1 === t2 ? 1 : 0;
    function _P0_(_P3_){return cont(_P3_);}
    return _PZ_
            ? _P0_(_PZ_)
            : caml_cps_exact_call2
              (repr,
               t2,
               function(_P1_){
                return caml_cps_exact_call2
                        (repr,
                         t1,
                         function(_P2_){return _P0_(_P2_ === _P1_ ? 1 : 0);});
               });
   }
   function compare_type(t1, t2, cont){
    return caml_cps_exact_call2
            (get_id,
             t2,
             function(_PX_){
              return caml_cps_exact_call2
                      (get_id,
                       t1,
                       function(_PY_){return cont(caml_int_compare(_PY_, _PX_));});
             });
   }
   function create_row(fields, more, closed, fixed, name, cont){return cont([0, fields, more, closed, fixed, name]);
   }
   function row_fields(row, cont){
    return caml_cps_exact_call2
            (get_desc,
             row[2],
             function(match){
              if(typeof match !== "number" && 8 === match[0]){
               var row$0 = match[1];
               return caml_cps_exact_call2
                       (row_fields,
                        row$0,
                        function(_PW_){
                         return caml_cps_call3(Stdlib[37], row[1], _PW_, cont);
                        });
              }
              return cont(row[1]);
             });
   }
   function row_repr_no_fields(row, cont){
    function _PV_(row){
     return caml_cps_exact_call2
             (get_desc,
              row[2],
              function(match){
               if(typeof match !== "number" && 8 === match[0]){
                var row$0 = match[1];
                return caml_cps_exact_call1(_PV_, row$0);
               }
               return cont(row);
              });
    }
    return _PV_(row);
   }
   function row_more(row, cont){
    return caml_cps_exact_call2
            (row_repr_no_fields, row, function(_PU_){return cont(_PU_[2]);});
   }
   function row_closed(row, cont){
    return caml_cps_exact_call2
            (row_repr_no_fields, row, function(_PT_){return cont(_PT_[3]);});
   }
   function row_fixed(row, cont){
    return caml_cps_exact_call2
            (row_repr_no_fields, row, function(_PS_){return cont(_PS_[4]);});
   }
   function row_name(row, cont){
    return caml_cps_exact_call2
            (row_repr_no_fields, row, function(_PR_){return cont(_PR_[5]);});
   }
   function get_row_field(tag, row, cont){
    function _PQ_(row){
     var param = row[1];
     for(;;){
      if(! param) break;
      var fields = param[2], match = param[1], f = match[2], tag$0 = match[1];
      if(caml_string_equal(tag, tag$0)) return cont(f);
      var param = fields;
     }
     return caml_cps_exact_call2
             (get_desc,
              row[2],
              function(match){
               if(typeof match !== "number" && 8 === match[0]){
                var row = match[1];
                return caml_cps_exact_call1(_PQ_, row);
               }
               return cont(0);
              });
    }
    return _PQ_(row);
   }
   function set_row_name(row, row_name, cont){
    return caml_cps_exact_call2
            (row_fields,
             row,
             function(row_fields){
              return caml_cps_exact_call2
                      (row_repr_no_fields,
                       row,
                       function(row){
                        return cont
                                ([0, row_fields, row[2], row[3], row[4], row_name]);
                       });
             });
   }
   function row_repr(row, cont){
    return caml_cps_exact_call2
            (row_fields,
             row,
             function(fields){
              return caml_cps_exact_call2
                      (row_repr_no_fields,
                       row,
                       function(row){
                        return cont([0, fields, row[2], row[3], row[4], row[5]]);
                       });
             });
   }
   function row_field_repr(fi, cont){
    function _PK_(rf, tl){
     function _PN_(match){
      if(typeof match === "number") return cont(0);
      if(0 === match[0]){var t = match[1]; return cont([0, t]);}
      var matched = match[3], arg_type = match[2], no_arg = match[1];
      return cont([1, no_arg, arg_type, matched]);
     }
     if(typeof rf === "number") return _PN_(0);
     if(0 === rf[0])
      return rf[1]
              ? 0
                === tl
                ? _PN_(rf)
                : caml_cps_call2
                  (Stdlib_List[5],
                   tl,
                   function(_PP_){return _PN_([0, [0, _PP_]]);})
              : _PN_(rf);
     var arg_type = rf[2], rf$0 = rf[4][1];
     if(typeof rf$0 === "number" && rf$0){
      var _PL_ = rf[4], _PM_ = rf[3];
      return caml_cps_call3
              (Stdlib[37],
               tl,
               rf[2],
               function(_PO_){return _PN_([1, rf[1], _PO_, _PM_, _PL_]);});
     }
     return caml_cps_call3
             (Stdlib[37],
              tl,
              arg_type,
              function(tl){return caml_cps_exact_call2(_PK_, rf$0, tl);});
    }
    return _PK_(fi, 0);
   }
   function row_field_ext(fi, cont){
    var fi$0 = fi;
    for(;;){
     if(typeof fi$0 !== "number" && 1 === fi$0[0]){
      var ext = fi$0[4], rf = ext[1];
      if(typeof rf !== "number"){var fi$0 = rf; continue;}
      if(rf) return cont(ext);
      var fi$0 = rf;
      continue;
     }
     return caml_cps_call2
             (Dynlink_compilerlibs_Misc[1], cst_Types_row_field_ext, cont);
    }
   }
   function rf_present(oty, cont){return cont([0, oty]);}
   function rf_either(use_ext_of, no_arg, arg_type, matched, cont){
    function _PJ_(ext){return cont([1, no_arg, arg_type, matched, ext]);}
    if(! use_ext_of) return _PJ_([0, 1]);
    var rf = use_ext_of[1];
    return caml_cps_exact_call2(row_field_ext, rf, _PJ_);
   }
   function rf_either_of(param, cont){
    if(! param) return cont([1, 1, 0, 0, [0, 1]]);
    var ty = param[1];
    return cont([1, 0, [0, ty, 0], 0, [0, 1]]);
   }
   function eq_row_field_ext(rf1, rf2, cont){
    return caml_cps_exact_call2
            (row_field_ext,
             rf2,
             function(_PH_){
              return caml_cps_exact_call2
                      (row_field_ext,
                       rf1,
                       function(_PI_){return cont(_PI_ === _PH_ ? 1 : 0);});
             });
   }
   function changed_row_field_exts(l, f, cont){
    return caml_cps_call3
            (Stdlib_List[19],
             row_field_ext,
             l,
             function(exts){
              return caml_cps_call2
                      (f,
                       0,
                       function(_PG_){
                        return caml_cps_call3
                                (Stdlib_List[33],
                                 function(r, cont){return cont(1 !== r[1] ? 1 : 0);},
                                 exts,
                                 cont);
                       });
             });
   }
   function match_row_field(present, absent, either, f, cont){
    if(typeof f === "number") return caml_cps_call2(absent, 0, cont);
    if(0 === f[0]){var t = f[1]; return caml_cps_call2(present, t, cont);}
    var
     ext = f[4],
     matched = f[3],
     arg_type = f[2],
     no_arg = f[1],
     e = ext[1];
    a:
    {if(typeof e === "number" && e){var e$0 = 0; break a;} var e$0 = [0, e];}
    return caml_cps_call5(either, no_arg, arg_type, matched, e$0, cont);
   }
   var new_id = caml_callback(Dynlink_compilerlibs_Local_sto[1], [-1]);
   function newty3(level, scope, desc, cont){
    new_id[1]++;
    return cont([0, desc, level, scope, new_id[1]]);
   }
   function newty2(level, desc, cont){
    return caml_cps_exact_call4
            (newty3, level, Dynlink_compilerlibs_Ident[24], desc, cont);
   }
   function undo_change(param, cont){
    switch(param[0]){
      case 0:
       var desc = param[2], ty = param[1];
       return caml_cps_exact_call3(set_desc, ty, desc, cont);
      case 1:
       var desc$0 = param[2], ty$0 = param[1];
       return caml_cps_exact_call3(set_desc, ty$0, desc$0, cont);
      case 2:
       var level = param[2], ty$1 = param[1];
       return caml_cps_exact_call3(set_level, ty$1, level, cont);
      case 3:
       var scope = param[2], ty$2 = param[1];
       return caml_cps_exact_call3(set_scope, ty$2, scope, cont);
      case 4:
       var v = param[2], r = param[1]; r[1] = v; return cont(0);
      case 5:
       var r$0 = param[1]; r$0[1] = 1; return cont(0);
      case 6:
       param[1][1] = 0; return cont(0);
      case 7:
       param[1][1] = 1; return cont(0);
      default:
       var v$0 = param[2], r$1 = param[1]; r$1[1] = v$0; return cont(0);
    }
   }
   var last_snapshot = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]);
   function log_type(ty){
    var _PF_ = ty[4] <= last_snapshot[1] ? 1 : 0;
    return _PF_ ? log_change([0, ty, ty[1]]) : _PF_;
   }
   function link_type(ty$0, ty, cont){
    return caml_cps_exact_call2
            (repr,
             ty$0,
             function(ty$0){
              return caml_cps_exact_call2
                      (repr,
                       ty,
                       function(ty){
                        if(ty$0 === ty) return cont(0);
                        log_type(ty$0);
                        var desc = ty$0[1];
                        return caml_cps_exact_call3
                                (set_desc,
                                 ty$0,
                                 [6, ty],
                                 function(_PD_){
                                  var match = ty[1];
                                  if
                                   (typeof desc !== "number"
                                    &&
                                     0 === desc[0] && typeof match !== "number" && 0 === match[0]){
                                   var name = match[1], name$0 = desc[1];
                                   if(! name$0) return name ? cont(0) : cont(0);
                                   if(name){
                                    var _PE_ = ty$0[2] < ty[2] ? 1 : 0;
                                    return _PE_
    ? (log_type
       (ty),
      caml_cps_exact_call3(set_desc, ty, [0, name$0], cont))
    : cont(_PE_);
                                   }
                                   log_type(ty);
                                   return caml_cps_exact_call3(set_desc, ty, [0, name$0], cont);
                                  }
                                  return cont(0);
                                 });
                       });
             });
   }
   function set_type_desc(ty, td, cont){
    return caml_cps_exact_call2
            (repr,
             ty,
             function(ty){
              var _PC_ = td !== ty[1] ? 1 : 0;
              return _PC_
                      ? (log_type
                         (ty),
                        caml_cps_exact_call3(set_desc, ty, td, cont))
                      : cont(_PC_);
             });
   }
   function set_level$0(ty, level, cont){
    return caml_cps_exact_call2
            (repr,
             ty,
             function(ty){
              var _PB_ = level !== ty[2] ? 1 : 0;
              if(! _PB_) return cont(_PB_);
              if(ty[4] <= last_snapshot[1]) log_change([2, ty, ty[2]]);
              return caml_cps_exact_call3(set_level, ty, level, cont);
             });
   }
   function set_scope$0(ty, scope, cont){
    return caml_cps_exact_call2
            (repr,
             ty,
             function(ty){
              var _PA_ = scope !== ty[3] ? 1 : 0;
              if(! _PA_) return cont(_PA_);
              if(ty[4] <= last_snapshot[1]) log_change([3, ty, ty[3]]);
              return caml_cps_exact_call3(set_scope, ty, scope, cont);
             });
   }
   function set_univar(rty, ty, cont){
    log_change([8, rty, rty[1]]);
    rty[1] = [0, ty];
    return cont(0);
   }
   function set_name(nm, v, cont){
    log_change([4, nm, nm[1]]);
    nm[1] = v;
    return cont(0);
   }
   function link_row_field_ext(inside, v, cont){
    var inside$0 = inside;
    for(;;){
     if(typeof inside$0 !== "number" && 1 === inside$0[0]){
      var e = inside$0[4], inside$1 = e[1];
      if(typeof inside$1 !== "number"){var inside$0 = inside$1; continue;}
      if(inside$1){log_change([5, e]); e[1] = v; return cont(0);}
      var inside$0 = inside$1;
      continue;
     }
     return caml_cps_call2(Stdlib[1], cst_Types_link_row_field_ext, cont);
    }
   }
   function link_kind(inside, k, cont){
    var inside$0 = inside;
    for(;;){
     if(typeof inside$0 === "number")
      return caml_cps_call2(Stdlib[1], cst_Types_link_kind, cont);
     var inside$1 = inside$0[1];
     if(typeof inside$1 === "number"){
      if(! inside$1)
       return caml_cps_exact_call2
               (field_kind_internal_repr,
                k,
                function(k){
                 var
                  _Py_ = k !== inside$0 ? 1 : 0,
                  _Pz_ =
                    _Py_
                     ? (log_change([6, inside$0]), inside$0[1] = k, 0)
                     : _Py_;
                 return cont(_Pz_);
                });
      var inside$0 = inside$1;
     }
     else
      var inside$0 = inside$1;
    }
   }
   function link_commu(inside, c$0, cont){
    var inside$0 = inside;
    for(;;){
     if(typeof inside$0 === "number")
      return caml_cps_call2(Stdlib[1], cst_Types_link_commu, cont);
     var inside$1 = inside$0[1];
     if(typeof inside$1 === "number"){
      if(inside$1){
       var c = c$0;
       for(;;){
        if(typeof c !== "number"){
         var commu = c[1];
         if(typeof commu !== "number" || ! commu){var c = commu; continue;}
        }
        var
         _Pw_ = c !== inside$0 ? 1 : 0,
         _Px_ = _Pw_ ? (log_change([7, inside$0]), inside$0[1] = c, 0) : _Pw_;
        return cont(_Px_);
       }
      }
      var inside$0 = inside$1;
     }
     else
      var inside$0 = inside$1;
    }
   }
   function set_commu_ok(c, cont){
    return caml_cps_exact_call3(link_commu, c, 0, cont);
   }
   function snapshot(param, cont){
    var old = last_snapshot[1];
    last_snapshot[1] = new_id[1];
    return cont([0, trail[1], old]);
   }
   function backtrack$0(cleanup_abbrev, param, cont){
    var old = param[2], changes = param[1], change = changes[1];
    return typeof change === "number"
            ? change
              ? caml_cps_call2(Stdlib[2], cst_Types_backtrack, cont)
              : (last_snapshot[1] = old, cont(0))
            : caml_cps_call2
              (cleanup_abbrev,
               0,
               function(_Pu_){
                var backlog = 0, param = change;
                for(;;){
                 if(typeof param === "number") break;
                 var next = param[2], ch = param[1], d = next[1];
                 next[1] = 1;
                 var accu = [0, ch, backlog], backlog = accu, param = d;
                }
                if(! param)
                 return caml_cps_call3
                         (Stdlib_List[17],
                          undo_change,
                          backlog,
                          function(_Pv_){
                           changes[1] = 0;
                           last_snapshot[1] = old;
                           trail[1] = changes;
                           return cont(0);
                          });
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _gQ_], 1));
               });
   }
   function undo_first_change_after(param, cont){
    var changes = param[1], match = changes[1];
    if(typeof match === "number") return cont(0);
    var ch = match[1];
    return caml_cps_exact_call2(undo_change, ch, cont);
   }
   function undo_compress(param, cont){
    var changes = param[1];
    if(typeof changes[1] === "number") return cont(0);
    var log = 0, r = changes;
    for(;;){
     var _Pr_ = r[1];
     if(typeof _Pr_ === "number") break;
     if(1 === _Pr_[1][0])
      var next$0 = _Pr_[2], log$0 = [0, r, log], log = log$0, r = next$0;
     else
      var next = _Pr_[2], r = next;
    }
    return caml_cps_call3
            (Stdlib_List[17],
             function(r, cont){
              var _Ps_ = r[1];
              if(typeof _Ps_ !== "number"){
               var match = _Ps_[1];
               if(1 === match[0]){
                var
                 next = _Ps_[2],
                 d = match[3],
                 desc = match[2],
                 ty = match[1];
                if(ty[1] === d)
                 return caml_cps_exact_call3
                         (set_desc,
                          ty,
                          desc,
                          function(_Pt_){r[1] = next[1]; return cont(0);});
               }
              }
              return cont(0);
             },
             log,
             cont);
   }
   var
    Dynlink_compilerlibs_Types =
      [0,
       is_commu_ok,
       0,
       commu_var,
       field_kind_repr,
       1,
       2,
       field_private,
       field_kind_internal_repr,
       get_desc,
       get_level,
       get_scope,
       get_id,
       [0,
        create_expr,
        set_desc,
        set_level,
        set_scope,
        repr,
        type_expr,
        coerce$1,
        set_stub_desc],
       create_expr,
       newty3,
       newty2,
       [0, compare$13, equal$8, hash$9],
       eq_type,
       compare_type,
       create_row,
       row_fields,
       row_more,
       row_closed,
       row_fixed,
       row_name,
       set_row_name,
       get_row_field,
       row_repr,
       row_field_repr,
       rf_present,
       0,
       rf_either,
       rf_either_of,
       eq_row_field_ext,
       changed_row_field_exts,
       match_row_field,
       Dynlink_compilerlibs_Misc[13][4][64],
       Dynlink_compilerlibs_Misc[13][4][64],
       Dynlink_compilerlibs_Misc[13][4][65],
       Dynlink_compilerlibs_Misc[13][4][65],
       [0,
        0,
        127,
        covariant,
        unknown,
        union,
        inter,
        subset,
        eq,
        set$0,
        mem$0,
        conjugate,
        get_upper,
        get_lower,
        unknown_signature],
       [0,
        eq$0,
        print$14,
        rank$0,
        compare$14,
        max,
        print_signature,
        default_signature],
       item_visibility,
       equal_tag,
       may_equal_constr,
       bound_value_identifiers,
       signature_item_id,
       snapshot,
       backtrack$0,
       undo_first_change_after,
       undo_compress,
       link_type,
       set_type_desc,
       set_level$0,
       set_scope$0,
       set_name,
       link_row_field_ext,
       set_univar,
       link_kind,
       link_commu,
       set_commu_ok];
   caml_register_global
    (1426, Dynlink_compilerlibs_Types, "Dynlink_compilerlibs.Types");
   function wrap_repr(f, ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[13][5],
             ty,
             function(_Pq_){return caml_cps_call2(f, _Pq_, cont);});
   }
   function wrap_type_expr(f, tty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[13][6],
             tty,
             function(_Pp_){return caml_cps_call2(f, _Pp_, cont);});
   }
   var
    TransientTypeSet =
      caml_callback(Stdlib_Set[1], [[0, Dynlink_compilerlibs_Types[17][1]]]),
    empty$1 = TransientTypeSet[1],
    is_empty = TransientTypeSet[2],
    mem$1 = TransientTypeSet[3],
    add$2 = TransientTypeSet[4],
    singleton = TransientTypeSet[5],
    remove$0 = TransientTypeSet[6],
    union$0 = TransientTypeSet[7],
    inter$0 = TransientTypeSet[8],
    disjoint = TransientTypeSet[9],
    diff = TransientTypeSet[10],
    compare$15 = TransientTypeSet[11],
    equal$9 = TransientTypeSet[12],
    subset$0 = TransientTypeSet[13],
    iter$1 = TransientTypeSet[14],
    map$8 = TransientTypeSet[15],
    fold = TransientTypeSet[16],
    for_all$0 = TransientTypeSet[17],
    filter = TransientTypeSet[19],
    filter_map = TransientTypeSet[20],
    partition = TransientTypeSet[21],
    cardinal = TransientTypeSet[22],
    min_elt = TransientTypeSet[24],
    min_elt_opt = TransientTypeSet[25],
    max_elt = TransientTypeSet[26],
    max_elt_opt = TransientTypeSet[27],
    choose = TransientTypeSet[28],
    choose_opt = TransientTypeSet[29],
    split = TransientTypeSet[30],
    find$1 = TransientTypeSet[31],
    find_opt = TransientTypeSet[32],
    find_first = TransientTypeSet[33],
    find_first_opt = TransientTypeSet[34],
    find_last = TransientTypeSet[35],
    find_last_opt = TransientTypeSet[36],
    of_list = TransientTypeSet[37],
    to_seq_from = TransientTypeSet[38],
    to_seq$0 = TransientTypeSet[39],
    to_rev_seq = TransientTypeSet[40],
    add_seq = TransientTypeSet[41],
    of_seq$0 = TransientTypeSet[42];
   function add$3(_Po_, cont){
    return caml_cps_exact_call3(wrap_repr, add$2, _Po_, cont);
   }
   function mem$2(_Pn_, cont){
    return caml_cps_exact_call3(wrap_repr, mem$1, _Pn_, cont);
   }
   function singleton$0(_Pm_, cont){
    return caml_cps_exact_call3(wrap_repr, singleton, _Pm_, cont);
   }
   function exists$0(p, cont){
    return caml_cps_call2
            (TransientTypeSet[18],
             function(_Pl_, cont){
              return caml_cps_exact_call3(wrap_type_expr, p, _Pl_, cont);
             },
             cont);
   }
   function elements(set, cont){
    return caml_cps_call2
            (TransientTypeSet[23],
             set,
             function(_Pk_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       Dynlink_compilerlibs_Types[13][6],
                       _Pk_,
                       cont);
             });
   }
   var
    TypeSet =
      [0,
       empty$1,
       is_empty,
       remove$0,
       union$0,
       inter$0,
       disjoint,
       diff,
       compare$15,
       equal$9,
       subset$0,
       iter$1,
       map$8,
       fold,
       for_all$0,
       filter,
       filter_map,
       partition,
       cardinal,
       min_elt,
       min_elt_opt,
       max_elt,
       max_elt_opt,
       choose,
       choose_opt,
       split,
       find$1,
       find_opt,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       of_list,
       to_seq_from,
       to_seq$0,
       to_rev_seq,
       add_seq,
       of_seq$0,
       add$3,
       mem$2,
       singleton$0,
       exists$0,
       elements],
    TransientTypeMap =
      caml_callback(Stdlib_Map[1], [[0, Dynlink_compilerlibs_Types[17][1]]]),
    empty$2 = TransientTypeMap[1],
    is_empty$0 = TransientTypeMap[2],
    mem$3 = TransientTypeMap[3],
    update = TransientTypeMap[5],
    remove$1 = TransientTypeMap[7],
    merge = TransientTypeMap[8],
    union$1 = TransientTypeMap[9],
    compare$16 = TransientTypeMap[10],
    equal$10 = TransientTypeMap[11],
    iter$2 = TransientTypeMap[12],
    for_all$1 = TransientTypeMap[14],
    exists$1 = TransientTypeMap[15],
    filter$0 = TransientTypeMap[16],
    filter_map$0 = TransientTypeMap[17],
    partition$0 = TransientTypeMap[18],
    cardinal$0 = TransientTypeMap[19],
    bindings = TransientTypeMap[20],
    min_binding = TransientTypeMap[21],
    min_binding_opt = TransientTypeMap[22],
    max_binding = TransientTypeMap[23],
    max_binding_opt = TransientTypeMap[24],
    choose$0 = TransientTypeMap[25],
    choose_opt$0 = TransientTypeMap[26],
    split$0 = TransientTypeMap[27],
    find_opt$0 = TransientTypeMap[29],
    find_first$0 = TransientTypeMap[30],
    find_first_opt$0 = TransientTypeMap[31],
    find_last$0 = TransientTypeMap[32],
    find_last_opt$0 = TransientTypeMap[33],
    map$9 = TransientTypeMap[34],
    mapi$0 = TransientTypeMap[35],
    to_seq$1 = TransientTypeMap[36],
    to_rev_seq$0 = TransientTypeMap[37],
    to_seq_from$0 = TransientTypeMap[38],
    add_seq$0 = TransientTypeMap[39],
    of_seq$1 = TransientTypeMap[40],
    _gR_ = TransientTypeMap[4],
    _gS_ = TransientTypeMap[6],
    _gT_ = TransientTypeMap[28];
   function add$4(ty, cont){
    return caml_cps_exact_call3(wrap_repr, _gR_, ty, cont);
   }
   function find$2(ty, cont){
    return caml_cps_exact_call3(wrap_repr, _gT_, ty, cont);
   }
   function singleton$1(ty, cont){
    return caml_cps_exact_call3(wrap_repr, _gS_, ty, cont);
   }
   function fold$0(f, cont){
    return caml_cps_call2
            (TransientTypeMap[13],
             function(_Pj_, cont){
              return caml_cps_exact_call3(wrap_type_expr, f, _Pj_, cont);
             },
             cont);
   }
   var
    TypeMap =
      [0,
       empty$2,
       is_empty$0,
       mem$3,
       update,
       remove$1,
       merge,
       union$1,
       compare$16,
       equal$10,
       iter$2,
       for_all$1,
       exists$1,
       filter$0,
       filter_map$0,
       partition$0,
       cardinal$0,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose$0,
       choose_opt$0,
       split$0,
       find_opt$0,
       find_first$0,
       find_first_opt$0,
       find_last$0,
       find_last_opt$0,
       map$9,
       mapi$0,
       to_seq$1,
       to_rev_seq$0,
       to_seq_from$0,
       add_seq$0,
       of_seq$1,
       add$4,
       find$2,
       singleton$1,
       fold$0],
    _gU_ = Dynlink_compilerlibs_Types[17],
    TransientTypeHash =
      caml_callback(Stdlib_Hashtbl[26], [[0, _gU_[2], _gU_[3]]]),
    create$4 = TransientTypeHash[1],
    clear = TransientTypeHash[2],
    reset$3 = TransientTypeHash[3],
    copy = TransientTypeHash[4],
    remove$2 = TransientTypeHash[6],
    find_opt$1 = TransientTypeHash[8],
    find_all$0 = TransientTypeHash[9],
    replace = TransientTypeHash[10],
    mem$4 = TransientTypeHash[11],
    filter_map_inplace = TransientTypeHash[13],
    fold$1 = TransientTypeHash[14],
    length$0 = TransientTypeHash[15],
    stats = TransientTypeHash[16],
    to_seq$2 = TransientTypeHash[17],
    to_seq_keys = TransientTypeHash[18],
    to_seq_values = TransientTypeHash[19],
    add_seq$1 = TransientTypeHash[20],
    replace_seq = TransientTypeHash[21],
    of_seq$2 = TransientTypeHash[22],
    _gV_ = TransientTypeHash[5],
    _gW_ = TransientTypeHash[7];
   function add$5(hash, cont){
    return caml_cps_call2
            (_gV_,
             hash,
             function(_Ph_){
              return cont
                      (function(_Pi_, cont){
                        return caml_cps_exact_call3(wrap_repr, _Ph_, _Pi_, cont);
                       });
             });
   }
   function find$3(hash, cont){
    return caml_cps_call2
            (_gW_,
             hash,
             function(_Pf_){
              return cont
                      (function(_Pg_, cont){
                        return caml_cps_exact_call3(wrap_repr, _Pf_, _Pg_, cont);
                       });
             });
   }
   function iter$3(f, cont){
    return caml_cps_call2
            (TransientTypeHash[12],
             function(_Pe_, cont){
              return caml_cps_exact_call3(wrap_type_expr, f, _Pe_, cont);
             },
             cont);
   }
   var
    TypeHash =
      [0,
       create$4,
       clear,
       reset$3,
       copy,
       remove$2,
       find_opt$1,
       find_all$0,
       replace,
       mem$4,
       filter_map_inplace,
       fold$1,
       length$0,
       stats,
       to_seq$2,
       to_seq_keys,
       to_seq_values,
       add_seq$1,
       replace_seq,
       of_seq$2,
       add$5,
       find$3,
       iter$3];
   function equal$11(param, _Pb_, cont){
    var
     t2 = _Pb_[2],
     t2$0 = _Pb_[1],
     t1 = param[2],
     t1$0 = param[1],
     _Pc_ = t1$0 === t2$0 ? 1 : 0,
     _Pd_ = _Pc_ ? t1 === t2 ? 1 : 0 : _Pc_;
    return cont(_Pd_);
   }
   function hash$10(param, cont){
    var t = param[2], t$0 = param[1];
    return cont(t$0[4] + (93 * t[4] | 0) | 0);
   }
   var
    TransientTypePairs =
      caml_callback(Stdlib_Hashtbl[26], [[0, equal$11, hash$10]]);
   function create$5(n, cont){
    var _O$_ = 0;
    return caml_cps_call2
            (TransientTypePairs[1],
             n,
             function(_Pa_){return cont([0, _Pa_, _O$_]);});
   }
   function clear$0(t, cont){
    t[2] = 0;
    return caml_cps_call2(TransientTypePairs[2], t[1], cont);
   }
   function repr2(param, cont){
    var t2 = param[2], t1 = param[1];
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[13][5],
             t2,
             function(_O9_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Types[13][5],
                       t1,
                       function(_O__){return cont([0, _O__, _O9_]);});
             });
   }
   function add$6(t, p, cont){
    return caml_cps_exact_call2
            (repr2,
             p,
             function(p){
              return caml_cps_call3
                      (TransientTypePairs[11],
                       t[1],
                       p,
                       function(_O7_){
                        return _O7_
                                ? cont(0)
                                : caml_cps_call4
                                  (TransientTypePairs[5],
                                   t[1],
                                   p,
                                   0,
                                   function(_O8_){t[2] = [0, p, t[2]]; return cont(0);});
                       });
             });
   }
   function mem$5(t, p, cont){
    return caml_cps_exact_call2
            (repr2,
             p,
             function(_O6_){
              return caml_cps_call3(TransientTypePairs[11], t[1], _O6_, cont);
             });
   }
   function iter$4(f, t, cont){
    return caml_cps_call2
            (Stdlib_List[9],
             t[2],
             function(_O2_){
              return caml_cps_call2
                      (Stdlib_List[17],
                       function(param, cont){
                        var t2 = param[2], t1 = param[1];
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[13][6],
                                 t2,
                                 function(_O4_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Types[13][6],
   t1,
   function(_O5_){
    return caml_cps_call2(f, [0, _O5_, _O4_], cont);
   });
                                 });
                       },
                       function(_O3_){return caml_cps_call2(_O3_, _O2_, cont);});
             });
   }
   var
    print_raw =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _gX_], 1));
       }],
    generic_level = Dynlink_compilerlibs_Ident[25],
    lowest_level = Dynlink_compilerlibs_Ident[24],
    pivot_level = (2 * lowest_level | 0) - 1 | 0;
   function newgenty(desc, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Types[16], generic_level, desc, cont);
   }
   function newgenvar(name, param, cont){
    return caml_cps_exact_call2(newgenty, [0, name], cont);
   }
   function newgenstub(scope, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[15], generic_level, scope, _gY_, cont);
   }
   function is_Tvar(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              if(typeof match !== "number" && 0 === match[0]) return cont(1);
              return cont(0);
             });
   }
   function is_Tunivar(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              if(typeof match !== "number" && 9 === match[0]) return cont(1);
              return cont(0);
             });
   }
   function is_Tconstr(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              if(typeof match !== "number" && 3 === match[0]) return cont(1);
              return cont(0);
             });
   }
   function merge_fixed_explanation(fixed1, fixed2, cont){
    a:
    {
     if(fixed1){
      var _OY_ = fixed1[1];
      if(typeof _OY_ !== "number" && 1 !== _OY_[0]){var x$2 = fixed1; break a;}
     }
     else if(! fixed2) return cont(0);
     if(fixed2){
      var _OZ_ = fixed2[1];
      if(typeof _OZ_ !== "number" && 1 !== _OZ_[0]){var x$2 = fixed2; break a;}
     }
     b:
     {
      if(fixed1){
       var _O0_ = fixed1[1];
       if(typeof _O0_ === "number" && ! _O0_){var x$1 = fixed1; break b;}
      }
      if(fixed2){
       var _O1_ = fixed2[1];
       if(typeof _O1_ === "number" && ! _O1_){var x$1 = fixed2; break b;}
      }
      c:
      {
       if(fixed1 && typeof fixed1[1] !== "number"){var x$0 = fixed1; break c;}
       if(fixed2 && typeof fixed2[1] !== "number"){var x$0 = fixed2; break c;}
       var x = fixed1 || fixed2;
       return cont(x);
      }
      return cont(x$0);
     }
     return cont(x$1);
    }
    return cont(x$2);
   }
   function fixed_explanation(row, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[24],
             row,
             function(x){
              return x
                      ? cont(x)
                      : caml_cps_call2
                        (Dynlink_compilerlibs_Types[22],
                         row,
                         function(ty){
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Types[9],
                                   ty,
                                   function(match){
                                    if(typeof match !== "number")
                                     switch(match[0]){
                                       case 3:
var p = match[1]; return cont([0, [1, p]]);
                                       case 9:
return cont([0, [0, ty]]);
                                       case 0: break;
                                       default:
var raise = caml_pop_trap();
return raise
        (caml_maybe_attach_backtrace([0, Assert_failure, _gZ_], 1));
                                     }
                                    return cont(0);
                                   });
                         });
             });
   }
   function is_fixed(row, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[24],
             row,
             function(match){return match ? cont(1) : cont(0);});
   }
   function has_fixed_explanation(row, cont){
    return caml_cps_exact_call2
            (fixed_explanation,
             row,
             function(_OX_){return cont(0 !== _OX_ ? 1 : 0);});
   }
   function static_row(row, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[23],
             row,
             function(_OV_){
              return _OV_
                      ? caml_cps_call2
                        (Dynlink_compilerlibs_Types[21],
                         row,
                         function(_OW_){
                          return caml_cps_call3
                                  (Stdlib_List[32],
                                   function(param, cont){
                                    var f = param[2];
                                    return caml_cps_call2
    (Dynlink_compilerlibs_Types[29],
     f,
     function(match){
      if(typeof match !== "number" && 1 === match[0])
       return cont(0);
      return cont(1);
     });
                                   },
                                   _OW_,
                                   cont);
                         })
                      : cont(_OV_);
             });
   }
   function hash_variant(s, cont){
    var accu = [0, 0], _OS_ = caml_ml_string_length(s) - 1 | 0, _OR_ = 0;
    if(_OS_ >= 0){
     var i = _OR_;
     for(;;){
      var _OT_ = caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + _OT_ | 0;
      var _OU_ = i + 1 | 0;
      if(_OS_ === i) break;
      var i = _OU_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    return 1073741823 < accu[1]
            ? cont(accu[1] + 2147483648 | 0)
            : cont(accu[1]);
   }
   function proxy(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              function _OO_(){return cont(ty);}
              if(typeof match === "number") return _OO_();
              switch(match[0]){
                case 4:
                 var
                  ty$0 = match[1],
                  _OP_ =
                    function(ty){
                     return caml_cps_call2
                             (Dynlink_compilerlibs_Types[9],
                              ty,
                              function(match){
                               if(typeof match === "number") return cont(ty);
                               switch(match[0]){
                                 case 5:
                                  var ty$0 = match[4];
                                  return caml_cps_exact_call1(_OP_, ty$0);
                                 case 0:
                                 case 3:
                                 case 9:
                                  return cont(ty);
                                 default:
                                  var raise = caml_pop_trap();
                                  return raise
  (caml_maybe_attach_backtrace([0, Assert_failure, _g0_], 1));
                               }
                              });
                    };
                 return _OP_(ty$0);
                case 8:
                 var row = match[1];
                 return caml_cps_exact_call2
                         (static_row,
                          row,
                          function(_OQ_){
                           return _OQ_
                                   ? _OO_()
                                   : caml_cps_call2(Dynlink_compilerlibs_Types[22], row, cont);
                          });
                default: return _OO_();
              }
             });
   }
   function row_of_type(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             t,
             function(match){
              if(typeof match !== "number")
               switch(match[0]){
                 case 4:
                  var
                   t$0 = match[1],
                   _ON_ =
                     function(t){
                      return caml_cps_call2
                              (Dynlink_compilerlibs_Types[9],
                               t,
                               function(match){
                                if(typeof match !== "number" && 5 === match[0]){
                                 var t$0 = match[4];
                                 return caml_cps_exact_call1(_ON_, t$0);
                                }
                                return cont(t);
                               });
                     };
                  return _ON_(t$0);
                 case 8:
                  var row = match[1];
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Types[22], row, cont);
               }
              return cont(t);
             });
   }
   function has_constr_row(t, cont){
    return caml_cps_exact_call2
            (is_Tconstr,
             t,
             function(_OK_){
              var _OL_ = 1 - _OK_;
              return _OL_
                      ? caml_cps_exact_call2
                        (row_of_type,
                         t,
                         function(_OM_){
                          return caml_cps_exact_call2(is_Tconstr, _OM_, cont);
                         })
                      : cont(_OL_);
             });
   }
   function is_row_name(s, cont){
    var l = caml_ml_string_length(s), _OG_ = 4 < l ? 1 : 0;
    function _OH_(_OJ_){return cont(_OJ_);}
    return _OG_
            ? caml_cps_call4
              (Stdlib_String[15],
               s,
               l - 4 | 0,
               4,
               function(_OI_){return _OH_(caml_string_equal(_OI_, "#row"));})
            : _OH_(_OG_);
   }
   function is_constr_row(allow_ident, t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             t,
             function(match){
              if(typeof match !== "number" && 3 === match[0]){
               var match$0 = match[1];
               switch(match$0[0]){
                 case 0:
                  var id = match$0[1];
                  if(allow_ident)
                   return caml_cps_call2
                           (Dynlink_compilerlibs_Ident[15],
                            id,
                            function(_OF_){
                             return caml_cps_exact_call2(is_row_name, _OF_, cont);
                            });
                  break;
                 case 1:
                  var s = match$0[2];
                  return caml_cps_exact_call2(is_row_name, s, cont);
               }
              }
              return cont(0);
             });
   }
   function set_static_row_name(decl, path, cont){
    var match = decl[5];
    if(! match) return cont(0);
    var ty = match[1];
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              function _OD_(){return cont(0);}
              if(typeof match === "number") return _OD_();
              if(8 !== match[0]) return _OD_();
              var row = match[1];
              return caml_cps_exact_call2
                      (static_row,
                       row,
                       function(_OE_){
                        return _OE_
                                ? caml_cps_call3
                                  (Dynlink_compilerlibs_Types[26],
                                   row,
                                   [0, [0, path, decl[1]]],
                                   function(row){
                                    return caml_cps_call3
    (Dynlink_compilerlibs_Types[53], ty, [8, row], cont);
                                   })
                                : _OD_();
                       });
             });
   }
   function fold_row(f, init, row, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[21],
             row,
             function(_OA_){
              return caml_cps_call4
                      (Stdlib_List[25],
                       function(init, param, cont){
                        var fi = param[2];
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[29],
                                 fi,
                                 function(match){
                                  if(typeof match !== "number"){
                                   if(0 !== match[0]){
                                    var tl = match[2];
                                    return caml_cps_call4(Stdlib_List[25], f, init, tl, cont);
                                   }
                                   var match$0 = match[1];
                                   if(match$0){
                                    var ty = match$0[1];
                                    return caml_cps_call3(f, init, ty, cont);
                                   }
                                  }
                                  return cont(init);
                                 });
                       },
                       init,
                       _OA_,
                       function(result){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[22],
                                 row,
                                 function(_OB_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Types[9],
   _OB_,
   function(match){
    if(typeof match !== "number")
     switch(match[0]){
       case 0:
       case 3:
       case 7:
       case 9: break;
       default:
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _g1_], 1));
     }
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[25],
             row,
             function(_OC_){
              return caml_cps_call3
                      (Stdlib_Option[7],
                       function(param, cont){
                        var l = param[2];
                        return caml_cps_call4(Stdlib_List[25], f, result, l, cont);
                       },
                       _OC_,
                       function(match){
                        if(! match) return cont(result);
                        var result$0 = match[1];
                        return cont(result$0);
                       });
             });
   });
                                 });
                       });
             });
   }
   function iter_row(f, row, cont){
    return caml_cps_exact_call4
            (fold_row,
             function(param, v, cont){return caml_cps_call2(f, v, cont);},
             0,
             row,
             cont);
   }
   function fold_type_expr(f, init, ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(match){
              if(typeof match === "number") return cont(init);
              switch(match[0]){
                case 0:
                 return cont(init);
                case 1:
                 var ty2 = match[3], ty1 = match[2];
                 return caml_cps_call3
                         (f,
                          init,
                          ty1,
                          function(result){
                           return caml_cps_call3(f, result, ty2, cont);
                          });
                case 2:
                 var l = match[1];
                 return caml_cps_call4(Stdlib_List[25], f, init, l, cont);
                case 3:
                 var l$0 = match[2];
                 return caml_cps_call4(Stdlib_List[25], f, init, l$0, cont);
                case 4:
                 var ty = match[1], _Oy_ = match[2][1];
                 if(! _Oy_) return caml_cps_call3(f, init, ty, cont);
                 var p = _Oy_[1][2];
                 return caml_cps_call3
                         (f,
                          init,
                          ty,
                          function(result){
                           return caml_cps_call4(Stdlib_List[25], f, result, p, cont);
                          });
                case 5:
                 var ty2$0 = match[4], ty1$0 = match[3];
                 return caml_cps_call3
                         (f,
                          init,
                          ty1$0,
                          function(result){
                           return caml_cps_call3(f, result, ty2$0, cont);
                          });
                case 8:
                 var row = match[1];
                 return caml_cps_exact_call4
                         (fold_row,
                          f,
                          init,
                          row,
                          function(result){
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Types[22],
                                    row,
                                    function(_Oz_){
                                     return caml_cps_call3(f, result, _Oz_, cont);
                                    });
                          });
                case 9:
                 return cont(init);
                case 10:
                 var tyl = match[2], ty$0 = match[1];
                 return caml_cps_call3
                         (f,
                          init,
                          ty$0,
                          function(result){
                           return caml_cps_call4(Stdlib_List[25], f, result, tyl, cont);
                          });
                case 11:
                 var fl = match[2];
                 return caml_cps_call4
                         (Stdlib_List[25],
                          function(result, param, cont){
                           var ty = param[2];
                           return caml_cps_call3(f, result, ty, cont);
                          },
                          init,
                          fl,
                          cont);
                default:
                 var raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace([0, Assert_failure, _g2_], 1));
              }
             });
   }
   function iter_type_expr(f, ty, cont){
    return caml_cps_exact_call4
            (fold_type_expr,
             function(param, v, cont){return caml_cps_call2(f, v, cont);},
             0,
             ty,
             cont);
   }
   function iter_abbrev(f, param, cont){
    function _Ov_(param){
     if(typeof param === "number") return cont(0);
     if(0 === param[0]){
      var rem = param[5], ty = param[4], ty$0 = param[3];
      return caml_cps_call2
              (f,
               ty$0,
               function(_Ow_){
                return caml_cps_call2
                        (f,
                         ty,
                         function(_Ox_){return caml_cps_exact_call1(_Ov_, rem);});
               });
     }
     var rem$0 = param[1];
     return caml_cps_exact_call1(_Ov_, rem$0[1]);
    }
    return _Ov_(param);
   }
   function iter_type_expr_cstr_args(f, param, cont){
    if(0 === param[0]){
     var tl = param[1];
     return caml_cps_call3(Stdlib_List[17], f, tl, cont);
    }
    var lbls = param[1];
    return caml_cps_call3
            (Stdlib_List[17],
             function(d, cont){return caml_cps_call2(f, d[3], cont);},
             lbls,
             cont);
   }
   function map_type_expr_cstr_args(f, param, cont){
    if(0 === param[0]){
     var tl = param[1];
     return caml_cps_call3
             (Stdlib_List[19], f, tl, function(_Ou_){return cont([0, _Ou_]);});
    }
    var lbls = param[1];
    return caml_cps_call3
            (Stdlib_List[19],
             function(d, cont){
              var _Oq_ = d[6], _Or_ = d[5], _Os_ = d[4];
              return caml_cps_call2
                      (f,
                       d[3],
                       function(_Ot_){
                        return cont([0, d[1], d[2], _Ot_, _Os_, _Or_, _Oq_]);
                       });
             },
             lbls,
             function(_Op_){return cont([1, _Op_]);});
   }
   function iter_type_expr_kind(f, param, cont){
    if(typeof param === "number") return 0 === param ? cont(0) : cont(0);
    if(0 === param[0]){
     var lbls = param[1];
     return caml_cps_call3
             (Stdlib_List[17],
              function(d, cont){return caml_cps_call2(f, d[3], cont);},
              lbls,
              cont);
    }
    var cstrs = param[1];
    return caml_cps_call3
            (Stdlib_List[17],
             function(cd, cont){
              return caml_cps_exact_call3
                      (iter_type_expr_cstr_args,
                       f,
                       cd[2],
                       function(_Oo_){
                        return caml_cps_call3(Stdlib_Option[9], f, cd[3], cont);
                       });
             },
             cstrs,
             cont);
   }
   function it_signature(it, cont){
    return caml_cps_call2
            (it[2],
             it,
             function(_On_){
              return caml_cps_call2(Stdlib_List[17], _On_, cont);
             });
   }
   function it_signature_item(it, param, cont){
    switch(param[0]){
      case 0:
       var vd = param[2]; return caml_cps_call3(it[3], it, vd, cont);
      case 1:
       var td = param[2]; return caml_cps_call3(it[4], it, td, cont);
      case 2:
       var td$0 = param[2]; return caml_cps_call3(it[5], it, td$0, cont);
      case 3:
       var md = param[3]; return caml_cps_call3(it[6], it, md, cont);
      case 4:
       var mtd = param[2]; return caml_cps_call3(it[7], it, mtd, cont);
      case 5:
       var cd = param[2]; return caml_cps_call3(it[8], it, cd, cont);
      default:
       var ctd = param[2]; return caml_cps_call3(it[9], it, ctd, cont);
    }
   }
   function it_value_description(it, vd, cont){
    return caml_cps_call3(it[15], it, vd[1], cont);
   }
   function it_type_declaration(it, td, cont){
    var _Oh_ = td[1];
    return caml_cps_call2
            (it[15],
             it,
             function(_Oi_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       _Oi_,
                       _Oh_,
                       function(_Oj_){
                        var _Ok_ = td[5];
                        return caml_cps_call2
                                (it[15],
                                 it,
                                 function(_Ol_){
                                  return caml_cps_call3
  (Stdlib_Option[9],
   _Ol_,
   _Ok_,
   function(_Om_){
    return caml_cps_call3(it[13], it, td[3], cont);
   });
                                 });
                       });
             });
   }
   function it_extension_constructor(it, td, cont){
    return caml_cps_call2
            (it[16],
             td[1],
             function(_N__){
              var _N$_ = td[2];
              return caml_cps_call2
                      (it[15],
                       it,
                       function(_Oa_){
                        return caml_cps_call3
                                (Stdlib_List[17],
                                 _Oa_,
                                 _N$_,
                                 function(_Ob_){
                                  var _Oc_ = td[3];
                                  return caml_cps_call2
  (it[15],
   it,
   function(_Od_){
    return caml_cps_exact_call3
            (iter_type_expr_cstr_args,
             _Od_,
             _Oc_,
             function(_Oe_){
              var _Of_ = td[4];
              return caml_cps_call2
                      (it[15],
                       it,
                       function(_Og_){
                        return caml_cps_call3(Stdlib_Option[9], _Og_, _Of_, cont);
                       });
             });
   });
                                 });
                       });
             });
   }
   function it_module_declaration(it, md, cont){
    return caml_cps_call3(it[11], it, md[1], cont);
   }
   function it_modtype_declaration(it, mtd, cont){
    var _N8_ = mtd[1];
    return caml_cps_call2
            (it[11],
             it,
             function(_N9_){
              return caml_cps_call3(Stdlib_Option[9], _N9_, _N8_, cont);
             });
   }
   function it_class_declaration(it, cd, cont){
    var _N1_ = cd[1];
    return caml_cps_call2
            (it[15],
             it,
             function(_N2_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       _N2_,
                       _N1_,
                       function(_N3_){
                        return caml_cps_call3
                                (it[12],
                                 it,
                                 cd[2],
                                 function(_N4_){
                                  var _N5_ = cd[4];
                                  return caml_cps_call2
  (it[15],
   it,
   function(_N6_){
    return caml_cps_call3
            (Stdlib_Option[9],
             _N6_,
             _N5_,
             function(_N7_){return caml_cps_call2(it[16], cd[3], cont);});
   });
                                 });
                       });
             });
   }
   function it_class_type_declaration(it, ctd, cont){
    var _NX_ = ctd[1];
    return caml_cps_call2
            (it[15],
             it,
             function(_NY_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       _NY_,
                       _NX_,
                       function(_NZ_){
                        return caml_cps_call3
                                (it[12],
                                 it,
                                 ctd[2],
                                 function(_N0_){return caml_cps_call2(it[16], ctd[3], cont);});
                       });
             });
   }
   function it_functor_param(it, param, cont){
    if(! param) return cont(0);
    var mt = param[2];
    return caml_cps_call3(it[11], it, mt, cont);
   }
   function it_module_type(it, param, cont){
    switch(param[0]){
      case 1:
       var sg = param[1]; return caml_cps_call3(it[1], it, sg, cont);
      case 2:
       var mt = param[2], p$0 = param[1];
       return caml_cps_call3
               (it[10],
                it,
                p$0,
                function(_NW_){return caml_cps_call3(it[11], it, mt, cont);});
      default: var p = param[1]; return caml_cps_call2(it[16], p, cont);
    }
   }
   function it_class_type(it, param, cont){
    switch(param[0]){
      case 0:
       var cty = param[3], tyl = param[2], p = param[1];
       return caml_cps_call2
               (it[16],
                p,
                function(_NT_){
                 return caml_cps_call2
                         (it[15],
                          it,
                          function(_NU_){
                           return caml_cps_call3
                                   (Stdlib_List[17],
                                    _NU_,
                                    tyl,
                                    function(_NV_){
                                     return caml_cps_call3(it[12], it, cty, cont);
                                    });
                          });
                });
      case 1:
       var cs = param[1];
       return caml_cps_call3
               (it[15],
                it,
                cs[1],
                function(_NO_){
                 return caml_cps_call3
                         (it[15],
                          it,
                          cs[2],
                          function(_NP_){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Types[40][12],
                                    function(param, _NS_, cont){
                                     var ty = _NS_[3];
                                     return caml_cps_call3(it[15], it, ty, cont);
                                    },
                                    cs[3],
                                    function(_NQ_){
                                     return caml_cps_call3
     (Dynlink_compilerlibs_Types[39][12],
      function(param, _NR_, cont){
       var ty = _NR_[3];
       return caml_cps_call3(it[15], it, ty, cont);
      },
      cs[4],
      cont);
                                    });
                          });
                });
      default:
       var cty$0 = param[3], ty = param[2];
       return caml_cps_call3
               (it[15],
                it,
                ty,
                function(_NN_){
                 return caml_cps_call3(it[12], it, cty$0, cont);
                });
    }
   }
   function it_type_kind(it, kind, cont){
    return caml_cps_call2
            (it[15],
             it,
             function(_NM_){
              return caml_cps_exact_call3
                      (iter_type_expr_kind, _NM_, kind, cont);
             });
   }
   function it_do_type_expr(it, ty, cont){
    return caml_cps_call2
            (it[15],
             it,
             function(_NI_){
              return caml_cps_exact_call3
                      (iter_type_expr,
                       _NI_,
                       ty,
                       function(_NJ_){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[9],
                                 ty,
                                 function(match){
                                  a:
                                  if(typeof match !== "number"){
                                   switch(match[0]){
                                     case 4:
                                      var _NK_ = match[2][1];
                                      if(! _NK_) break a;
                                      var p = _NK_[1][1];
                                      break;
                                     case 8:
                                      var row = match[1];
                                      return caml_cps_call2
      (Dynlink_compilerlibs_Types[25],
       row,
       function(_NL_){
        return caml_cps_call3
                (Stdlib_Option[9],
                 function(param, cont){
                  var p = param[1];
                  return caml_cps_call2(it[16], p, cont);
                 },
                 _NL_,
                 cont);
       });
                                     case 3:
                                     case 11:
                                      var p = match[1]; break;
                                     default: break a;
                                   }
                                   return caml_cps_call2(it[16], p, cont);
                                  }
                                  return cont(0);
                                 });
                       });
             });
   }
   function it_path(p, cont){return cont(0);}
   function copy_row(f, fixed, row, keep, more, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[28],
             row,
             function(match){
              var
               orig_name = match[5],
               orig_fixed = match[4],
               closed = match[3],
               orig_fields = match[1];
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(param, cont){
                        var fi = param[2], l = param[1];
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[29],
                                 fi,
                                 function(match){
                                  function _NE_(_NH_){return cont([0, l, _NH_]);}
                                  if(typeof match === "number")
                                   return _NE_(Dynlink_compilerlibs_Types[31]);
                                  if(0 === match[0]){
                                   var oty = match[1];
                                   return caml_cps_call3
   (Stdlib_Option[7],
    f,
    oty,
    function(_NG_){
     return caml_cps_call2
             (Dynlink_compilerlibs_Types[30], _NG_, _NE_);
    });
                                  }
                                  var
                                   m = match[3],
                                   tl = match[2],
                                   c = match[1],
                                   use_ext_of = keep ? [0, fi] : 0;
                                  return caml_cps_exact_call2
  (is_fixed,
   row,
   function(_NF_){
    var m$0 = _NF_ ? fixed : m;
    return caml_cps_call3
            (Stdlib_List[19],
             f,
             tl,
             function(tl){
              return caml_cps_call5
                      (Dynlink_compilerlibs_Types[32],
                       use_ext_of,
                       c,
                       tl,
                       m$0,
                       _NE_);
             });
   });
                                 });
                       },
                       orig_fields,
                       function(fields){
                        function _NC_(name){
                         var fixed$0 = fixed ? orig_fixed : 0;
                         return caml_cps_call6
                                 (Dynlink_compilerlibs_Types[20],
                                  fields,
                                  more,
                                  closed,
                                  fixed$0,
                                  name,
                                  cont);
                        }
                        if(! orig_name) return _NC_(0);
                        var match = orig_name[1], tl = match[2], path = match[1];
                        return caml_cps_call3
                                (Stdlib_List[19],
                                 f,
                                 tl,
                                 function(_ND_){return _NC_([0, [0, path, _ND_]]);});
                       });
             });
   }
   function copy_type_desc(opt, f, ty, cont){
    function _Nh_(ty, opt){
     if(opt) var sth = opt[1], keep_names = sth; else var keep_names = 0;
     if(typeof ty === "number") return cont(0);
     switch(ty[0]){
       case 0:
        return keep_names ? cont(ty) : cont(_g3_);
       case 1:
        var c = ty[4], ty2 = ty[3], ty1 = ty[2], p = ty[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Types[1],
                 c,
                 function(_Nx_){
                  function _Ny_(_Nz_){
                   return caml_cps_call2
                           (f,
                            ty2,
                            function(_NA_){
                             return caml_cps_call2
                                     (f,
                                      ty1,
                                      function(_NB_){return cont([1, p, _NB_, _NA_, _Nz_]);});
                            });
                  }
                  return _Nx_
                          ? _Ny_(Dynlink_compilerlibs_Types[2])
                          : caml_cps_call2(Dynlink_compilerlibs_Types[3], 0, _Ny_);
                 });
       case 2:
        var l = ty[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 f,
                 l,
                 function(_Nw_){return cont([2, _Nw_]);});
       case 3:
        var l$0 = ty[2], p$0 = ty[1], _Ni_ = [0, 0];
        return caml_cps_call3
                (Stdlib_List[19],
                 f,
                 l$0,
                 function(_Nv_){return cont([3, p$0, _Nv_, _Ni_]);});
       case 4:
        var ty$0 = ty[1], _Nj_ = ty[2][1];
        if(_Nj_){
         var match = _Nj_[1], tl = match[2], p$1 = match[1];
         return caml_cps_call3
                 (Stdlib_List[19],
                  f,
                  tl,
                  function(_Ns_){
                   var _Nt_ = [0, [0, [0, p$1, _Ns_]]];
                   return caml_cps_call2
                           (f, ty$0, function(_Nu_){return cont([4, _Nu_, _Nt_]);});
                  });
        }
        var _Nk_ = [0, 0];
        return caml_cps_call2
                (f, ty$0, function(_Nr_){return cont([4, _Nr_, _Nk_]);});
       case 5:
        var ty2$0 = ty[4], ty1$0 = ty[3], k = ty[2], p$2 = ty[1];
        return caml_cps_call2
                (f,
                 ty2$0,
                 function(_No_){
                  return caml_cps_call2
                          (f,
                           ty1$0,
                           function(_Np_){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Types[8],
                                     k,
                                     function(_Nq_){return cont([5, p$2, _Nq_, _Np_, _No_]);});
                           });
                 });
       case 6:
        var ty$1 = ty[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Types[9],
                 ty$1,
                 function(ty){return caml_cps_exact_call2(_Nh_, ty, 0);});
       case 7:
        var raise$0 = caml_pop_trap();
        return raise$0
                (caml_maybe_attach_backtrace([0, Assert_failure, _g4_], 1));
       case 8:
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _g5_], 1));
       case 9:
        return cont(ty);
       case 10:
        var tyl = ty[2], ty$2 = ty[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 f,
                 tyl,
                 function(tyl){
                  return caml_cps_call2
                          (f, ty$2, function(_Nn_){return cont([10, _Nn_, tyl]);});
                 });
       default:
        var fl = ty[2], p$3 = ty[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(param, cont){
                  var ty = param[2], n = param[1];
                  return caml_cps_call2
                          (f, ty, function(_Nm_){return cont([0, n, _Nm_]);});
                 },
                 fl,
                 function(_Nl_){return cont([11, p$3, _Nl_]);});
     }
    }
    return _Nh_(ty, opt);
   }
   function redirect_desc(copy_scope, ty, desc, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[13][5],
             ty,
             function(ty){
              copy_scope[1] = [0, [0, ty, ty[1]], copy_scope[1]];
              return caml_cps_call3
                      (Dynlink_compilerlibs_Types[13][2], ty, desc, cont);
             });
   }
   function with_scope(f, cont){
    var scope = [0, 0];
    return caml_cps_call2
            (f,
             scope,
             function(res){
              var saved_desc = scope[1];
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(param, cont){
                        var desc = param[2], ty = param[1];
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Types[13][2], ty, desc, cont);
                       },
                       saved_desc,
                       function(_Ng_){return cont(res);});
             });
   }
   var For_copy = [0, redirect_desc, with_scope];
   function find_expans(priv, p1, param, cont){
    function _Nc_(param){
     if(typeof param === "number") return cont(0);
     if(0 !== param[0]){
      var rem = param[1][1];
      return caml_cps_exact_call1(_Nc_, rem);
     }
     var priv$0 = param[1], ty = param[4], p2 = param[2];
     a:
     {if(priv && ! priv$0){var _Nd_ = 0; break a;} var _Nd_ = 1;}
     function _Ne_(){
      var rem = param[5];
      return caml_cps_exact_call1(_Nc_, rem);
     }
     return _Nd_
             ? caml_cps_call3
               (Dynlink_compilerlibs_Path[1],
                p1,
                p2,
                function(_Nf_){return _Nf_ ? cont([0, ty]) : _Ne_();})
             : _Ne_();
    }
    return _Nc_(param);
   }
   var memo = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]);
   function cleanup_abbrev(param, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(abbr, cont){abbr[1] = 0; return cont(0);},
             memo[1],
             function(_Nb_){memo[1] = 0; return cont(0);});
   }
   function memorize_abbrev(mem, priv, path, v$0, v, cont){
    mem[1] = [0, priv, path, v$0, v, mem[1]];
    memo[1] = [0, mem, memo[1]];
    return cont(0);
   }
   function forget_abbrev_rec(mem, path, cont){
    if(typeof mem === "number") return cont(mem);
    if(0 === mem[0]){
     var priv = mem[1], rem = mem[5], path$0 = mem[2];
     return caml_cps_call3
             (Dynlink_compilerlibs_Path[1],
              path,
              path$0,
              function(_M$_){
               if(_M$_) return cont(rem);
               var rem$0 = mem[5], v = mem[4], v$0 = mem[3], path$0 = mem[2];
               return caml_cps_exact_call3
                       (forget_abbrev_rec,
                        rem$0,
                        path,
                        function(_Na_){
                         return cont([0, priv, path$0, v$0, v, _Na_]);
                        });
              });
    }
    var mem$0 = mem[1];
    return caml_cps_exact_call3
            (forget_abbrev_rec,
             mem$0[1],
             path,
             function(_M9_){
              mem$0[1] = _M9_;
              var _M__ = Stdlib[3], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_M__, 1));
             });
   }
   function forget_abbrev(mem, path, cont){
    caml_push_trap
     (function(_M8_){
       if(_M8_ === Stdlib[3]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_M8_, 0));
      });
    return caml_cps_exact_call3
            (forget_abbrev_rec,
             mem[1],
             path,
             function(_M7_){mem[1] = _M7_; caml_pop_trap(); return cont(0);});
   }
   var
    snapshot$0 = Dynlink_compilerlibs_Types[48],
    backtrack$1 =
      caml_callback(Dynlink_compilerlibs_Types[49], [cleanup_abbrev]);
   function is_optional(param, cont){
    if(typeof param !== "number" && 1 === param[0]) return cont(1);
    return cont(0);
   }
   function label_name(param, cont){
    if(typeof param === "number") return cont(cst$88);
    var s = param[1];
    return cont(s);
   }
   function prefixed_label_name(param, cont){
    if(typeof param === "number") return cont(cst$89);
    if(0 === param[0]){
     var s = param[1];
     return caml_cps_call3(Stdlib[28], cst$90, s, cont);
    }
    var s$0 = param[1];
    return caml_cps_call3(Stdlib[28], cst$91, s$0, cont);
   }
   function extract_label(l, ls, cont){
    function _M4_(param, hd){
     if(! param) return cont(0);
     var ls = param[2], p = param[1], t = p[2], l$0 = p[1];
     return caml_cps_exact_call2
             (label_name,
              l$0,
              function(_M5_){
               if(caml_string_equal(_M5_, l))
                return caml_cps_call3
                        (Stdlib_List[12],
                         hd,
                         ls,
                         function(_M6_){
                          return cont([0, [0, l$0, t, 0 !== hd ? 1 : 0, _M6_]]);
                         });
               var hd$0 = [0, p, hd];
               return caml_cps_exact_call2(_M4_, ls, hd$0);
              });
    }
    return _M4_(ls, 0);
   }
   function signature_of_class_type(param, cont){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var cty = param$0[3], param$0 = cty; break;
       case 1:
        var sign = param$0[1]; return cont(sign);
       default: var cty$0 = param$0[3], param$0 = cty$0;
     }
   }
   function class_body(cty, cont){
    var cty$0 = cty;
    for(;;)
     switch(cty$0[0]){
       case 0:
        return cont(cty$0);
       case 1:
        return cont(cty$0);
       default: var cty$1 = cty$0[3], cty$0 = cty$1;
     }
   }
   function scrape_class_type(cty, cont){
    var cty$0 = cty;
    for(;;){
     if(0 !== cty$0[0]) return cont(cty$0);
     var cty$1 = cty$0[3], cty$0 = cty$1;
    }
   }
   function class_type_arity(param, cont){
    var param$0 = param;
    for(;;)
     switch(param$0[0]){
       case 0:
        var cty = param$0[3], param$0 = cty; break;
       case 1:
        return cont(0);
       default:
        var cty$0 = param$0[3];
        return caml_cps_exact_call2
                (class_type_arity,
                 cty$0,
                 function(_M3_){return cont(1 + _M3_ | 0);});
     }
   }
   function abbreviate_class_type(path, params, cty, cont){
    if(2 !== cty[0]) return cont([0, path, params, cty]);
    var cty$0 = cty[3], ty = cty[2], l = cty[1];
    return caml_cps_exact_call4
            (abbreviate_class_type,
             path,
             params,
             cty$0,
             function(_M2_){return cont([2, l, ty, _M2_]);});
   }
   function self_type(cty, cont){
    return caml_cps_exact_call2
            (signature_of_class_type,
             cty,
             function(_M1_){return cont(_M1_[1]);});
   }
   function self_type_row(cty, cont){
    return caml_cps_exact_call2
            (signature_of_class_type,
             cty,
             function(_M0_){return cont(_M0_[2]);});
   }
   function methods(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[39][13],
             function(name, param, l, cont){return cont([0, name, l]);},
             sign[4],
             0,
             cont);
   }
   function virtual_methods(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[39][13],
             function(name, param, l, cont){
              var vr = param[2];
              return vr ? cont(l) : cont([0, name, l]);
             },
             sign[4],
             0,
             cont);
   }
   function concrete_methods(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[39][13],
             function(name, param, s, cont){
              var vr = param[2];
              return vr
                      ? caml_cps_call3
                        (Dynlink_compilerlibs_Types[37][4], name, s, cont)
                      : cont(s);
             },
             sign[4],
             Dynlink_compilerlibs_Types[37][1],
             cont);
   }
   function public_methods(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[39][13],
             function(name, param, l, cont){
              var priv = param[1];
              return priv ? cont(l) : cont([0, name, l]);
             },
             sign[4],
             0,
             cont);
   }
   function instance_vars(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[40][13],
             function(name, param, l, cont){return cont([0, name, l]);},
             sign[3],
             0,
             cont);
   }
   function virtual_instance_vars(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[40][13],
             function(name, param, l, cont){
              var vr = param[2];
              return vr ? cont(l) : cont([0, name, l]);
             },
             sign[3],
             0,
             cont);
   }
   function concrete_instance_vars(sign, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Types[40][13],
             function(name, param, s, cont){
              var vr = param[2];
              return vr
                      ? caml_cps_call3
                        (Dynlink_compilerlibs_Types[38][4], name, s, cont)
                      : cont(s);
             },
             sign[3],
             Dynlink_compilerlibs_Types[38][1],
             cont);
   }
   function method_type(label, sign, cont){
    caml_push_trap
     (function(_MZ_){
       if(_MZ_ === Stdlib[8]){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _g6_], 1));
       }
       var raise$0 = caml_pop_trap();
       return raise$0(caml_maybe_attach_backtrace(_MZ_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Types[39][28],
             label,
             sign[4],
             function(val){caml_pop_trap(); var ty = val[3]; return cont(ty);});
   }
   function instance_variable_type(label, sign, cont){
    caml_push_trap
     (function(_MY_){
       if(_MY_ === Stdlib[8]){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _g7_], 1));
       }
       var raise$0 = caml_pop_trap();
       return raise$0(caml_maybe_attach_backtrace(_MY_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Types[40][28],
             label,
             sign[3],
             function(val){caml_pop_trap(); var ty = val[3]; return cont(ty);});
   }
   function not_marked_node(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[10],
             ty,
             function(_MX_){return cont(lowest_level <= _MX_ ? 1 : 0);});
   }
   function flip_mark_node(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[13][5],
             ty,
             function(ty){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Types[13][3],
                       ty,
                       pivot_level - ty[2] | 0,
                       cont);
             });
   }
   function logged_mark_node(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[10],
             ty,
             function(_MW_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Types[54],
                       ty,
                       pivot_level - _MW_ | 0,
                       cont);
             });
   }
   function try_mark_node(ty, cont){
    return caml_cps_exact_call2
            (not_marked_node,
             ty,
             function(_MS_){
              function _MT_(_MV_){return cont(_MV_);}
              return _MS_
                      ? caml_cps_exact_call2
                        (flip_mark_node, ty, function(_MU_){return _MT_(1);})
                      : _MT_(_MS_);
             });
   }
   function try_logged_mark_node(ty, cont){
    return caml_cps_exact_call2
            (not_marked_node,
             ty,
             function(_MO_){
              function _MP_(_MR_){return cont(_MR_);}
              return _MO_
                      ? caml_cps_exact_call2
                        (logged_mark_node, ty, function(_MQ_){return _MP_(1);})
                      : _MP_(_MO_);
             });
   }
   function mark_type(ty, cont){
    return caml_cps_exact_call2
            (not_marked_node,
             ty,
             function(_MM_){
              return _MM_
                      ? caml_cps_exact_call2
                        (flip_mark_node,
                         ty,
                         function(_MN_){
                          return caml_cps_exact_call3
                                  (iter_type_expr, mark_type, ty, cont);
                         })
                      : cont(_MM_);
             });
   }
   function mark_type_params(ty, cont){
    return caml_cps_exact_call3(iter_type_expr, mark_type, ty, cont);
   }
   function it_type_expr(it, ty, cont){
    return caml_cps_exact_call2
            (try_mark_node,
             ty,
             function(_ML_){
              return _ML_ ? caml_cps_call3(it[14], it, ty, cont) : cont(_ML_);
             });
   }
   var
    type_iterators =
      [0,
       it_signature,
       it_signature_item,
       it_value_description,
       it_type_declaration,
       it_extension_constructor,
       it_module_declaration,
       it_modtype_declaration,
       it_class_declaration,
       it_class_type_declaration,
       it_functor_param,
       it_module_type,
       it_class_type,
       it_type_kind,
       it_do_type_expr,
       it_type_expr,
       it_path];
   function unmark_type(ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[10],
             ty,
             function(_MI_){
              var _MJ_ = _MI_ < lowest_level ? 1 : 0;
              return _MJ_
                      ? caml_cps_exact_call2
                        (flip_mark_node,
                         ty,
                         function(_MK_){
                          return caml_cps_exact_call3
                                  (iter_type_expr, unmark_type, ty, cont);
                         })
                      : cont(_MJ_);
             });
   }
   function it_type_expr$0(it, ty, cont){
    return caml_cps_exact_call2(unmark_type, ty, cont);
   }
   var
    unmark_iterators =
      [0,
       type_iterators[1],
       type_iterators[2],
       type_iterators[3],
       type_iterators[4],
       type_iterators[5],
       type_iterators[6],
       type_iterators[7],
       type_iterators[8],
       type_iterators[9],
       type_iterators[10],
       type_iterators[11],
       type_iterators[12],
       type_iterators[13],
       type_iterators[14],
       it_type_expr$0,
       type_iterators[16]];
   function unmark_type_decl(decl, cont){
    return caml_cps_call3(unmark_iterators[4], unmark_iterators, decl, cont);
   }
   function unmark_extension_constructor(ext, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             unmark_type,
             ext[2],
             function(_MG_){
              return caml_cps_exact_call3
                      (iter_type_expr_cstr_args,
                       unmark_type,
                       ext[3],
                       function(_MH_){
                        return caml_cps_call3
                                (Stdlib_Option[9], unmark_type, ext[4], cont);
                       });
             });
   }
   function unmark_class_signature(sign, cont){
    return caml_cps_exact_call2
            (unmark_type,
             sign[1],
             function(_MD_){
              return caml_cps_exact_call2
                      (unmark_type,
                       sign[2],
                       function(_ME_){
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Types[40][12],
                                 function(l, param, cont){
                                  var t = param[3];
                                  return caml_cps_exact_call2(unmark_type, t, cont);
                                 },
                                 sign[3],
                                 function(_MF_){
                                  return caml_cps_call3
  (Dynlink_compilerlibs_Types[39][12],
   function(l, param, cont){
    var t = param[3];
    return caml_cps_exact_call2(unmark_type, t, cont);
   },
   sign[4],
   cont);
                                 });
                       });
             });
   }
   function unmark_class_type(cty, cont){
    return caml_cps_call3(unmark_iterators[12], unmark_iterators, cty, cont);
   }
   function cstr_type_path(cstr, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             cstr[2],
             function(match){
              if(typeof match !== "number" && 3 === match[0]){var p = match[1]; return cont(p);}
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _g8_], 1));
             });
   }
   var
    Dynlink_compilerlibs_Btype =
      [0,
       TypeSet,
       TransientTypeMap,
       TypeMap,
       TypeHash,
       [0, create$5, clear$0, add$6, mem$5, iter$4],
       generic_level,
       newgenty,
       newgenvar,
       newgenstub,
       is_Tvar,
       is_Tunivar,
       is_Tconstr,
       dummy_method,
       is_fixed,
       has_fixed_explanation,
       fixed_explanation,
       merge_fixed_explanation,
       static_row,
       hash_variant,
       proxy,
       row_of_type,
       has_constr_row,
       is_row_name,
       is_constr_row,
       set_static_row_name,
       iter_type_expr,
       fold_type_expr,
       iter_row,
       fold_row,
       iter_abbrev,
       iter_type_expr_kind,
       iter_type_expr_cstr_args,
       map_type_expr_cstr_args,
       type_iterators,
       unmark_iterators,
       copy_type_desc,
       copy_row,
       For_copy,
       lowest_level,
       not_marked_node,
       logged_mark_node,
       try_logged_mark_node,
       flip_mark_node,
       try_mark_node,
       mark_type,
       mark_type_params,
       unmark_type,
       unmark_type_decl,
       unmark_extension_constructor,
       unmark_class_type,
       unmark_class_signature,
       find_expans,
       cleanup_abbrev,
       memorize_abbrev,
       forget_abbrev,
       snapshot$0,
       backtrack$1,
       is_optional,
       label_name,
       prefixed_label_name,
       extract_label,
       signature_of_class_type,
       class_body,
       scrape_class_type,
       class_type_arity,
       abbreviate_class_type,
       self_type,
       self_type_row,
       methods,
       virtual_methods,
       concrete_methods,
       public_methods,
       instance_vars,
       virtual_instance_vars,
       concrete_instance_vars,
       method_type,
       instance_variable_type,
       print_raw,
       cstr_type_path];
   caml_register_global
    (1427, Dynlink_compilerlibs_Btype, "Dynlink_compilerlibs.Btype");
   var
    identity =
      [0,
       Dynlink_compilerlibs_Path[15][1],
       Dynlink_compilerlibs_Path[15][1],
       Dynlink_compilerlibs_Path[15][1],
       0,
       0];
   function add_type_path(id, p, s, cont){
    var _My_ = s[5], _Mz_ = s[4], _MA_ = s[3], _MB_ = s[2];
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][4],
             id,
             [0, p],
             s[1],
             function(_MC_){return cont([0, _MC_, _MB_, _MA_, _Mz_, _My_]);});
   }
   function add_type$0(id, p, s, cont){
    return caml_cps_exact_call4(add_type_path, [0, id], p, s, cont);
   }
   function add_type_function(id, params, body, s, cont){
    var _Mt_ = s[5], _Mu_ = s[4], _Mv_ = s[3], _Mw_ = s[2];
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][4],
             id,
             [1, params, body],
             s[1],
             function(_Mx_){return cont([0, _Mx_, _Mw_, _Mv_, _Mu_, _Mt_]);});
   }
   function add_module_path(id, p, s, cont){
    var _Mp_ = s[5], _Mq_ = s[4], _Mr_ = s[3];
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][4],
             id,
             p,
             s[2],
             function(_Ms_){return cont([0, s[1], _Ms_, _Mr_, _Mq_, _Mp_]);});
   }
   function add_module$0(id, p, s, cont){
    return caml_cps_exact_call4(add_module_path, [0, id], p, s, cont);
   }
   function add_modtype_path(p, ty, s, cont){
    var _Mm_ = s[5], _Mn_ = s[4];
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][4],
             p,
             ty,
             s[3],
             function(_Mo_){return cont([0, s[1], s[2], _Mo_, _Mn_, _Mm_]);});
   }
   function add_modtype(id, ty, s, cont){
    return caml_cps_exact_call4(add_modtype_path, [0, id], ty, s, cont);
   }
   function for_saving(s, cont){return cont([0, s[1], s[2], s[3], 1, s[5]]);}
   function change_locs(s, loc, cont){
    return cont([0, s[1], s[2], s[3], s[4], [0, loc]]);
   }
   function loc(s, x){
    var match = s[5];
    if(match){var l = match[1]; return l;}
    if(s[4] && ! Dynlink_compilerlibs_Clflags[133][1])
     return Dynlink_compilerlibs_Location[1];
    return x;
   }
   var
    _g9_ = Dynlink_compilerlibs_Ast_mappe[1],
    remove_loc =
      [0,
       _g9_[1],
       _g9_[2],
       _g9_[3],
       _g9_[4],
       _g9_[5],
       _g9_[6],
       _g9_[7],
       _g9_[8],
       _g9_[9],
       _g9_[10],
       _g9_[11],
       _g9_[12],
       _g9_[13],
       _g9_[14],
       _g9_[15],
       _g9_[16],
       _g9_[17],
       _g9_[18],
       _g9_[19],
       _g9_[20],
       _g9_[21],
       _g9_[22],
       function(this$0, loc, cont){
        return cont(Dynlink_compilerlibs_Location[1]);
       },
       _g9_[24],
       _g9_[25],
       _g9_[26],
       _g9_[27],
       _g9_[28],
       _g9_[29],
       _g9_[30],
       _g9_[31],
       _g9_[32],
       _g9_[33],
       _g9_[34],
       _g9_[35],
       _g9_[36],
       _g9_[37],
       _g9_[38],
       _g9_[39],
       _g9_[40],
       _g9_[41],
       _g9_[42],
       _g9_[43],
       _g9_[44],
       _g9_[45]];
   function is_not_doc(param, cont){
    var _Ml_ = param[1][1];
    return caml_string_notequal(_Ml_, "doc")
            ? caml_string_notequal
               (_Ml_, cst_ocaml_doc$0)
              ? caml_string_notequal
                 (_Ml_, cst_ocaml_text$0)
                ? caml_string_notequal(_Ml_, "text") ? cont(1) : cont(0)
                : cont(0)
              : cont(0)
            : cont(0);
   }
   function attrs(s, x, cont){
    function _Mk_(x){
     if(s[4] && ! Dynlink_compilerlibs_Clflags[133][1])
      return caml_cps_call3(remove_loc[2], remove_loc, x, cont);
     return cont(x);
    }
    return s[4]
            ? Dynlink_compilerlibs_Clflags
                [132]
               [1]
              ? _Mk_(x)
              : caml_cps_call3(Stdlib_List[41], is_not_doc, x, _Mk_)
            : _Mk_(x);
   }
   function module_path(s, path, cont){
    caml_push_trap
     (function(_Mg_){
       if(_Mg_ === Stdlib[8])
        switch(path[0]){
          case 0:
           return cont(path);
          case 1:
           var n = path[2], p = path[1];
           return caml_cps_exact_call3
                   (module_path,
                    s,
                    p,
                    function(_Mj_){return cont([1, _Mj_, n]);});
          default:
           var p2 = path[2], p1 = path[1];
           return caml_cps_exact_call3
                   (module_path,
                    s,
                    p2,
                    function(_Mh_){
                     return caml_cps_exact_call3
                             (module_path,
                              s,
                              p1,
                              function(_Mi_){return cont([2, _Mi_, _Mh_]);});
                    });
        }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Mg_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Path[15][28],
             path,
             s[2],
             function(_Mf_){caml_pop_trap(); return cont(_Mf_);});
   }
   function modtype_path(s, path, cont){
    caml_push_trap
     (function(_Md_){
       if(_Md_ === Stdlib[8])
        switch(path[0]){
          case 0:
           return cont(path);
          case 1:
           var n = path[2], p = path[1];
           return caml_cps_exact_call3
                   (module_path,
                    s,
                    p,
                    function(_Me_){return cont([1, _Me_, n]);});
          default:
           return caml_cps_call2
                   (Dynlink_compilerlibs_Misc[1], cst_Subst_modtype_path, cont);
        }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Md_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Path[15][28],
             path,
             s[3],
             function(val){
              caml_pop_trap();
              if(0 !== val[0])
               return caml_cps_call2
                       (Dynlink_compilerlibs_Misc[1],
                        cst_Subst_modtype_path$0,
                        cont);
              var p = val[1];
              return cont(p);
             });
   }
   function _g__(s, path, cont){
    caml_push_trap
     (function(_Mb_){
       if(_Mb_ === Stdlib[8])
        switch(path[0]){
          case 0:
           return cont(path);
          case 1:
           var n = path[2], p = path[1];
           return caml_cps_exact_call3
                   (module_path,
                    s,
                    p,
                    function(_Mc_){return cont([1, _Mc_, n]);});
          default:
           return caml_cps_call2
                   (Dynlink_compilerlibs_Misc[1], cst_Subst_type_path, cont);
        }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Mb_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Path[15][28],
             path,
             s[1],
             function(val){
              caml_pop_trap();
              if(0 === val[0]){var p = val[1]; return cont(p);}
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _g$_], 1));
             });
   }
   function type_path(s, p, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Path[13],
             p,
             function(match){
              switch(match[0]){
                case 0:
                 var p$0 = match[1];
                 return caml_cps_exact_call3(_g__, s, p$0, cont);
                case 1:
                 var cstr = match[2], p$1 = match[1];
                 return caml_cps_exact_call3
                         (module_path,
                          s,
                          p$1,
                          function(_Ma_){return cont([1, _Ma_, cstr]);});
                case 2:
                 return caml_cps_exact_call3(_g__, s, p, cont);
                default:
                 var cstr$0 = match[2], ty_path = match[1];
                 return caml_cps_exact_call3
                         (_g__,
                          s,
                          ty_path,
                          function(_L$_){return cont([1, _L$_, cstr$0]);});
              }
             });
   }
   function to_subst_by_type_function(s, p, cont){
    caml_push_trap
     (function(_L__){
       if(_L__ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_L__, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Path[15][28],
             p,
             s[1],
             function(val){
              caml_pop_trap();
              return 0 === val[0] ? cont(0) : cont(1);
             });
   }
   var new_id$0 = caml_callback(Dynlink_compilerlibs_Local_sto[1], [-1]);
   function reset_for_saving(param, cont){new_id$0[1] = -1; return cont(0);}
   function newpersty(desc, cont){
    new_id$0[1] += -1;
    return caml_cps_call5
            (Dynlink_compilerlibs_Types[14],
             desc,
             Dynlink_compilerlibs_Btype[6],
             Dynlink_compilerlibs_Btype[39],
             new_id$0[1],
             cont);
   }
   function norm(d){
    if(typeof d !== "number")
     switch(d[0]){
       case 0:
        if(! d[1]) return tvar_none; break;
       case 9:
        if(! d[1]) return tunivar_none; break;
     }
    return d;
   }
   var
    ctype_apply_env_empty =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _ha_], 1));
       }];
   function typexp(copy_scope, s, ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Types[9],
             ty,
             function(desc){
              function _Lj_(){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Btype[21],
                        ty,
                        function(tm){
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Btype[12],
                                  ty,
                                  function(_Lr_){
                                   var _Ls_ = 1 - _Lr_;
                                   function _Lt_(has_fixed_row){
                                    function _Lu_(ty$0){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Btype[38][1],
      copy_scope,
      ty,
      [7, ty$0, 0],
      function(_Lw_){
       function _Ly_(desc){
        return caml_cps_call3
                (Dynlink_compilerlibs_Types[13][8],
                 ty$0,
                 desc,
                 function(_L9_){return cont(ty$0);});
       }
       if(has_fixed_row)
        return caml_cps_call2
                (Dynlink_compilerlibs_Types[9],
                 tm,
                 function(match){
                  if(typeof match !== "number" && 3 === match[0]){
                   var match$0 = match[1];
                   if(1 === match$0[0]){
                    var tl = match[2], i = match$0[2], m = match$0[1];
                    return caml_cps_call4
                            (Stdlib_String[15],
                             i,
                             0,
                             caml_ml_string_length(i) - 4 | 0,
                             function(i){
                              var _L7_ = [0, 0];
                              return caml_cps_exact_call3
                                      (type_path,
                                       s,
                                       [1, m, i],
                                       function(_L8_){return _Ly_([3, _L8_, tl, _L7_]);});
                             });
                   }
                  }
                  var raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace([0, Assert_failure, _hc_], 1));
                 });
       function _Lx_(){
        return caml_cps_call4
                (Dynlink_compilerlibs_Btype[36],
                 0,
                 function(_L6_, cont){
                  return caml_cps_exact_call4
                          (typexp, copy_scope, s, _L6_, cont);
                 },
                 desc,
                 _Ly_);
       }
       if(typeof desc === "number") return _Lx_();
       switch(desc[0]){
         case 3:
          var args = desc[2], p = desc[1];
          return caml_cps_call3
                  (Stdlib_List[19],
                   function(_L5_, cont){
                    return caml_cps_exact_call4
                            (typexp, copy_scope, s, _L5_, cont);
                   },
                   args,
                   function(args){
                    caml_push_trap
                     (function(_L2_){
                       if(_L2_ === Stdlib[8]){
                        var _L3_ = [0, 0];
                        return caml_cps_exact_call3
                                (type_path,
                                 s,
                                 p,
                                 function(_L4_){return _Ly_([3, _L4_, args, _L3_]);});
                       }
                       var raise = caml_pop_trap();
                       return raise(caml_maybe_attach_backtrace(_L2_, 0));
                      });
                    return caml_cps_call3
                            (Dynlink_compilerlibs_Path[15][28],
                             p,
                             s[1],
                             function(val){
                              caml_pop_trap();
                              if(0 === val[0]){
                               var _LZ_ = [0, 0];
                               return caml_cps_exact_call3
                                       (type_path,
s,
p,
function(_L1_){return _Ly_([3, _L1_, args, _LZ_]);});
                              }
                              var body = val[2], params = val[1];
                              return caml_cps_call4
                                      (ctype_apply_env_empty[1],
                                       params,
                                       body,
                                       args,
                                       function(_L0_){return _Ly_([6, _L0_]);});
                             });
                   });
         case 4:
          var name = desc[2], t1 = desc[1];
          return caml_cps_exact_call4
                  (typexp,
                   copy_scope,
                   s,
                   t1,
                   function(t1){
                    var _LT_ = name[1];
                    function _LU_(name){return _Ly_([4, t1, [0, name]]);}
                    if(! _LT_) return _LU_(0);
                    var match = _LT_[1], tl = match[2], p = match[1];
                    return caml_cps_exact_call3
                            (to_subst_by_type_function,
                             s,
                             p,
                             function(_LV_){
                              return _LV_
                                      ? _LU_(0)
                                      : caml_cps_call3
(Stdlib_List[19],
 function(_LY_, cont){
  return caml_cps_exact_call4
          (typexp, copy_scope, s, _LY_, cont);
 },
 tl,
 function(_LW_){
  return caml_cps_exact_call3
          (type_path,
           s,
           p,
           function(_LX_){return _LU_([0, [0, _LX_, _LW_]]);});
 });
                             });
                   });
         case 5:
          var t2 = desc[4], kind = desc[2];
          return caml_cps_call2
                  (Dynlink_compilerlibs_Types[4],
                   kind,
                   function(_LR_){
                    return 2 === _LR_
                            ? caml_cps_exact_call4
                              (typexp,
                               copy_scope,
                               s,
                               t2,
                               function(_LS_){return _Ly_([6, _LS_]);})
                            : _Lx_();
                   });
         case 8:
          var row = desc[1];
          return caml_cps_call2
                  (Dynlink_compilerlibs_Types[22],
                   row,
                   function(more){
                    return caml_cps_call2
                            (Dynlink_compilerlibs_Types[9],
                             more,
                             function(mored){
                              if(typeof mored !== "number" && 7 === mored[0]){
                               var match = mored[2];
                               if(match){
                                var ty2 = match[1];
                                return caml_cps_call4
(Dynlink_compilerlibs_Btype[38][1],
 copy_scope,
 ty,
 [7, ty2, 0],
 function(_LQ_){return _Ly_([6, ty2]);});
                               }
                              }
                              var _LC_ = s[4];
                              function _LE_(dup){
                               function _LI_(more$0){
                                return caml_cps_call4
(Dynlink_compilerlibs_Btype[38][1],
 copy_scope,
 more,
 [7, more$0, [0, ty$0]],
 function(_LK_){
  return caml_cps_call6
          (Dynlink_compilerlibs_Btype[37],
           function(_LP_, cont){
            return caml_cps_exact_call4
                    (typexp, copy_scope, s, _LP_, cont);
           },
           1,
           row,
           1 - dup,
           more$0,
           function(row){
            return caml_cps_call2
                    (Dynlink_compilerlibs_Types[25],
                     row,
                     function(match){
                      if(! match) return _Ly_([8, row]);
                      var match$0 = match[1], tl = match$0[2], p = match$0[1];
                      return caml_cps_exact_call3
                              (to_subst_by_type_function,
                               s,
                               p,
                               function(_LL_){
                                function _LM_(name){
                                 return caml_cps_call3
 (Dynlink_compilerlibs_Types[26],
  row,
  name,
  function(_LO_){return _Ly_([8, _LO_]);});
                                }
                                return _LL_
? _LM_(0)
: caml_cps_exact_call3
  (type_path,
   s,
   p,
   function(_LN_){return _LM_([0, [0, _LN_, tl]]);});
                               });
                     });
           });
 });
                               }
                               a:
                               if(typeof mored !== "number"){
                                switch(mored[0]){
                                  case 7:
                                   if(! mored[2]){var ty = mored[1]; return _LI_(ty);} break;
                                  case 3:
                                   break a;
                                  case 0:
                                  case 9:
                                   return s[4]
   ? caml_cps_exact_call2(newpersty, norm(mored), _LI_)
   : dup
     ? caml_cps_call2
       (Dynlink_compilerlibs_Btype[10],
        more,
        function(_LJ_){
         return _LJ_
                 ? caml_cps_call2(Dynlink_compilerlibs_Btype[7], mored, _LI_)
                 : _LI_(more);
        })
     : _LI_(more);
                                }
                                var raise = caml_pop_trap();
                                return raise
(caml_maybe_attach_backtrace([0, Assert_failure, _hd_], 1));
                               }
                               return caml_cps_exact_call4
                                       (typexp, copy_scope, s, more, _LI_);
                              }
                              if(_LC_) return _LE_(_LC_);
                              var _LD_ = Dynlink_compilerlibs_Btype[6];
                              return caml_cps_call2
                                      (Dynlink_compilerlibs_Types[10],
                                       more,
                                       function(_LF_){
var _LG_ = _LF_ === _LD_ ? 1 : 0;
return _LG_
        ? _LE_(_LG_)
        : caml_cps_call2
          (Dynlink_compilerlibs_Btype[18],
           row,
           function(_LH_){
            return _LH_
                    ? _LE_(_LH_)
                    : caml_cps_call2(Dynlink_compilerlibs_Btype[12], more, _LE_);
           });
                                       });
                             });
                   });
         case 11:
          var fl = desc[2], p$0 = desc[1];
          return caml_cps_call3
                  (Stdlib_List[19],
                   function(param, cont){
                    var ty = param[2], n = param[1];
                    return caml_cps_exact_call4
                            (typexp,
                             copy_scope,
                             s,
                             ty,
                             function(_LB_){return cont([0, n, _LB_]);});
                   },
                   fl,
                   function(_Lz_){
                    return caml_cps_exact_call3
                            (modtype_path,
                             s,
                             p$0,
                             function(_LA_){return _Ly_([11, _LA_, _Lz_]);});
                   });
         default: return _Lx_();
       }
      });
                                    }
                                    return s[4]
    ? caml_cps_exact_call2(newpersty, _hb_, _Lu_)
    : caml_cps_call2
      (Dynlink_compilerlibs_Types[11],
       ty,
       function(_Lv_){
        return caml_cps_call2
                (Dynlink_compilerlibs_Btype[9], _Lv_, _Lu_);
       });
                                   }
                                   return _Ls_
   ? caml_cps_call3
     (Dynlink_compilerlibs_Btype[24], 0, tm, _Lt_)
   : _Lt_(_Ls_);
                                  });
                        });
              }
              if(typeof desc === "number") return _Lj_();
              switch(desc[0]){
                case 5:
                 var k = desc[2], m = desc[1];
                 return s[4]
                         ? _Lj_()
                         : caml_string_equal
                            (m, Dynlink_compilerlibs_Btype[13])
                           ? caml_cps_call2
                             (Dynlink_compilerlibs_Types[4],
                              k,
                              function(_Lo_){
                               if(2 === _Lo_) return _Lj_();
                               var _Lp_ = Dynlink_compilerlibs_Btype[6];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Types[10],
ty,
function(_Lq_){return _Lq_ < _Lp_ ? cont(ty) : _Lj_();});
                              })
                           : _Lj_();
                case 7:
                 var ty$0 = desc[1]; return cont(ty$0);
                case 0:
                case 9:
                 var
                  _Li_ =
                    function(){
                     function _Ll_(ty$0){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Btype[38][1],
                               copy_scope,
                               ty,
                               [7, ty$0, 0],
                               function(_Ln_){return cont(ty$0);});
                     }
                     return s[4]
                             ? caml_cps_exact_call2(newpersty, norm(desc), _Ll_)
                             : caml_cps_call2
                               (Dynlink_compilerlibs_Types[10],
                                ty,
                                function(_Lm_){
                                 return caml_cps_call3
 (Dynlink_compilerlibs_Types[16], _Lm_, desc, _Ll_);
                                });
                    };
                 return s[4]
                         ? _Li_()
                         : caml_cps_call2
                           (Dynlink_compilerlibs_Types[12],
                            ty,
                            function(_Lk_){return 0 <= _Lk_ ? cont(ty) : _Li_();});
                default: return _Lj_();
              }
             });
   }
   function type_expr$0(s, ty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4(typexp, copy_scope, s, ty, cont);
             },
             cont);
   }
   function label_declaration(copy_scope, s, l, cont){
    var _Le_ = l[6];
    return caml_cps_exact_call3
            (attrs,
             s,
             l[5],
             function(_Lf_){
              var _Lg_ = loc(s, l[4]);
              return caml_cps_exact_call4
                      (typexp,
                       copy_scope,
                       s,
                       l[3],
                       function(_Lh_){
                        return cont([0, l[1], l[2], _Lh_, _Lg_, _Lf_, _Le_]);
                       });
             });
   }
   function constructor_arguments(copy_scope, s, param, cont){
    if(0 === param[0]){
     var l = param[1];
     return caml_cps_call3
             (Stdlib_List[19],
              function(_Ld_, cont){
               return caml_cps_exact_call4(typexp, copy_scope, s, _Ld_, cont);
              },
              l,
              function(_Lc_){return cont([0, _Lc_]);});
    }
    var l$0 = param[1];
    return caml_cps_call3
            (Stdlib_List[19],
             function(_Lb_, cont){
              return caml_cps_exact_call4
                      (label_declaration, copy_scope, s, _Lb_, cont);
             },
             l$0,
             function(_La_){return cont([1, _La_]);});
   }
   function type_declaration(copy_scope, s, decl, cont){
    var _KL_ = decl[14], _KM_ = decl[13], _KN_ = decl[12];
    return caml_cps_exact_call3
            (attrs,
             s,
             decl[11],
             function(_KO_){
              var
               _KP_ = loc(s, decl[10]),
               match = decl[5],
               _KQ_ = Dynlink_compilerlibs_Btype[39],
               _KR_ = 0,
               _KS_ = decl[7],
               _KT_ = decl[6];
              function _KU_(_KW_){
               var match = decl[3], _KX_ = decl[4];
               function _KY_(_K8_){
                var _K9_ = decl[2];
                return caml_cps_call3
                        (Stdlib_List[19],
                         function(_K$_, cont){
                          return caml_cps_exact_call4
                                  (typexp, copy_scope, s, _K$_, cont);
                         },
                         decl[1],
                         function(_K__){
                          return cont
                                  ([0,
                                    _K__,
                                    _K9_,
                                    _K8_,
                                    _KX_,
                                    _KW_,
                                    _KT_,
                                    _KS_,
                                    _KR_,
                                    _KQ_,
                                    _KP_,
                                    _KO_,
                                    _KN_,
                                    _KM_,
                                    _KL_]);
                         });
               }
               if(typeof match === "number")
                return 0 === match ? _KY_(0) : _KY_(1);
               if(0 === match[0]){
                var rep = match[2], lbls = match[1];
                return caml_cps_call3
                        (Stdlib_List[19],
                         function(_K7_, cont){
                          return caml_cps_exact_call4
                                  (label_declaration, copy_scope, s, _K7_, cont);
                         },
                         lbls,
                         function(_K6_){return _KY_([0, _K6_, rep]);});
               }
               var rep$0 = match[2], cstrs = match[1];
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(c, cont){
                         var _K0_ = c[6];
                         return caml_cps_exact_call3
                                 (attrs,
                                  s,
                                  c[5],
                                  function(_K1_){
                                   var _K2_ = loc(s, c[4]);
                                   return caml_cps_call3
   (Stdlib_Option[7],
    function(_K5_, cont){
     return caml_cps_exact_call4
             (typexp, copy_scope, s, _K5_, cont);
    },
    c[3],
    function(_K3_){
     return caml_cps_exact_call4
             (constructor_arguments,
              copy_scope,
              s,
              c[2],
              function(_K4_){
               return cont([0, c[1], _K4_, _K3_, _K2_, _K1_, _K0_]);
              });
    });
                                  });
                        },
                        cstrs,
                        function(_KZ_){return _KY_([1, _KZ_, rep$0]);});
              }
              if(! match) return _KU_(0);
              var ty = match[1];
              return caml_cps_exact_call4
                      (typexp,
                       copy_scope,
                       s,
                       ty,
                       function(_KV_){return _KU_([0, _KV_]);});
             });
   }
   function type_declaration$0(s, decl, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4
                      (type_declaration, copy_scope, s, decl, cont);
             },
             cont);
   }
   function _he_(copy_scope, s, param, cont){
    switch(param[0]){
      case 0:
       var cty = param[3], tyl = param[2], p = param[1];
       return caml_cps_exact_call3
               (type_path,
                s,
                p,
                function(p){
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(_KK_, cont){
                           return caml_cps_exact_call4
                                   (typexp, copy_scope, s, _KK_, cont);
                          },
                          tyl,
                          function(tyl){
                           return caml_cps_exact_call4
                                   (_he_,
                                    copy_scope,
                                    s,
                                    cty,
                                    function(cty){return cont([0, p, tyl, cty]);});
                          });
                });
      case 1:
       var sign = param[1];
       return caml_cps_call3
               (Dynlink_compilerlibs_Types[39][34],
                function(param, cont){
                 var t = param[3], v = param[2], p = param[1];
                 return caml_cps_exact_call4
                         (typexp,
                          copy_scope,
                          s,
                          t,
                          function(_KJ_){return cont([0, p, v, _KJ_]);});
                },
                sign[4],
                function(_KE_){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Types[40][34],
                          function(param, cont){
                           var t = param[3], v = param[2], m = param[1];
                           return caml_cps_exact_call4
                                   (typexp,
                                    copy_scope,
                                    s,
                                    t,
                                    function(_KI_){return cont([0, m, v, _KI_]);});
                          },
                          sign[3],
                          function(_KF_){
                           return caml_cps_exact_call4
                                   (typexp,
                                    copy_scope,
                                    s,
                                    sign[2],
                                    function(_KG_){
                                     return caml_cps_exact_call4
     (typexp,
      copy_scope,
      s,
      sign[1],
      function(_KH_){
       return cont([1, [0, _KH_, _KG_, _KF_, _KE_]]);
      });
                                    });
                          });
                });
      default:
       var cty$0 = param[3], ty = param[2], l = param[1];
       return caml_cps_exact_call4
               (_he_,
                copy_scope,
                s,
                cty$0,
                function(_KC_){
                 return caml_cps_exact_call4
                         (typexp,
                          copy_scope,
                          s,
                          ty,
                          function(_KD_){return cont([2, l, _KD_, _KC_]);});
                });
    }
   }
   function class_declaration(copy_scope, s, decl, cont){
    var _Kr_ = decl[8];
    return caml_cps_exact_call3
            (attrs,
             s,
             decl[7],
             function(_Ks_){
              var _Kt_ = loc(s, decl[6]), match = decl[4], _Ku_ = decl[5];
              function _Kv_(_Kx_){
               return caml_cps_exact_call3
                       (type_path,
                        s,
                        decl[3],
                        function(_Ky_){
                         return caml_cps_exact_call4
                                 (_he_,
                                  copy_scope,
                                  s,
                                  decl[2],
                                  function(_Kz_){
                                   return caml_cps_call3
   (Stdlib_List[19],
    function(_KB_, cont){
     return caml_cps_exact_call4
             (typexp, copy_scope, s, _KB_, cont);
    },
    decl[1],
    function(_KA_){
     return cont
             ([0, _KA_, _Kz_, _Ky_, _Kx_, _Ku_, _Kt_, _Ks_, _Kr_]);
    });
                                  });
                        });
              }
              if(! match) return _Kv_(0);
              var ty = match[1];
              return caml_cps_exact_call4
                      (typexp,
                       copy_scope,
                       s,
                       ty,
                       function(_Kw_){return _Kv_([0, _Kw_]);});
             });
   }
   function class_declaration$0(s, decl, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4
                      (class_declaration, copy_scope, s, decl, cont);
             },
             cont);
   }
   function cltype_declaration(copy_scope, s, decl, cont){
    var _Kj_ = decl[7];
    return caml_cps_exact_call3
            (attrs,
             s,
             decl[6],
             function(_Kk_){
              var _Kl_ = loc(s, decl[5]), _Km_ = decl[4];
              return caml_cps_exact_call3
                      (type_path,
                       s,
                       decl[3],
                       function(_Kn_){
                        return caml_cps_exact_call4
                                (_he_,
                                 copy_scope,
                                 s,
                                 decl[2],
                                 function(_Ko_){
                                  return caml_cps_call3
  (Stdlib_List[19],
   function(_Kq_, cont){
    return caml_cps_exact_call4
            (typexp, copy_scope, s, _Kq_, cont);
   },
   decl[1],
   function(_Kp_){
    return cont([0, _Kp_, _Ko_, _Kn_, _Km_, _Kl_, _Kk_, _Kj_]);
   });
                                 });
                       });
             });
   }
   function cltype_declaration$0(s, decl, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4
                      (cltype_declaration, copy_scope, s, decl, cont);
             },
             cont);
   }
   function class_type$2(s, cty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4(_he_, copy_scope, s, cty, cont);
             },
             cont);
   }
   function value_description(copy_scope, s, descr, cont){
    var _Ke_ = descr[5];
    return caml_cps_exact_call3
            (attrs,
             s,
             descr[4],
             function(_Kf_){
              var _Kg_ = loc(s, descr[3]), _Kh_ = descr[2];
              return caml_cps_exact_call4
                      (typexp,
                       copy_scope,
                       s,
                       descr[1],
                       function(_Ki_){
                        return cont([0, _Ki_, _Kh_, _Kg_, _Kf_, _Ke_]);
                       });
             });
   }
   function value_description$0(s, descr, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4
                      (value_description, copy_scope, s, descr, cont);
             },
             cont);
   }
   function extension_constructor$0(copy_scope, s, ext, cont){
    var _J6_ = ext[8];
    return caml_cps_exact_call3
            (attrs,
             s,
             ext[7],
             function(_J7_){
              var
               _J8_ = s[4] ? Dynlink_compilerlibs_Location[1] : ext[6],
               _J9_ = ext[5];
              return caml_cps_call3
                      (Stdlib_Option[7],
                       function(_Kd_, cont){
                        return caml_cps_exact_call4
                                (typexp, copy_scope, s, _Kd_, cont);
                       },
                       ext[4],
                       function(_J__){
                        return caml_cps_exact_call4
                                (constructor_arguments,
                                 copy_scope,
                                 s,
                                 ext[3],
                                 function(_J$_){
                                  return caml_cps_call3
  (Stdlib_List[19],
   function(_Kc_, cont){
    return caml_cps_exact_call4
            (typexp, copy_scope, s, _Kc_, cont);
   },
   ext[2],
   function(_Ka_){
    return caml_cps_exact_call3
            (type_path,
             s,
             ext[1],
             function(_Kb_){
              return cont
                      ([0, _Kb_, _Ka_, _J$_, _J__, _J9_, _J8_, _J7_, _J6_]);
             });
   });
                                 });
                       });
             });
   }
   function extension_constructor$1(s, ext, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call4
                      (extension_constructor$0, copy_scope, s, ext, cont);
             },
             cont);
   }
   function merge_path_maps(f, m1, m2, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][13],
             function(k, d, accu, cont){
              return caml_cps_exact_call2
                      (f,
                       d,
                       function(_J5_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Path[15][4], k, _J5_, accu, cont);
                       });
             },
             m1,
             m2,
             cont);
   }
   function lazy_module_decl(md, cont){
    var _J1_ = md[4], _J2_ = md[3], _J3_ = md[2];
    return caml_cps_exact_call2
            (lazy_modtype,
             md[1],
             function(_J4_){return cont([0, _J4_, _J3_, _J2_, _J1_]);});
   }
   function subst_lazy_module_decl(scoping, s, md, cont){
    return caml_cps_exact_call4
            (subst_lazy_modtype,
             scoping,
             s,
             md[1],
             function(mdl_type){
              var _JY_ = md[4], _JZ_ = loc(s, md[3]);
              return caml_cps_exact_call3
                      (attrs,
                       s,
                       md[2],
                       function(_J0_){
                        return cont([0, mdl_type, _J0_, _JZ_, _JY_]);
                       });
             });
   }
   function force_module_decl(md, cont){
    return caml_cps_exact_call2
            (force_modtype,
             md[1],
             function(md_type){
              return cont([0, md_type, md[2], md[3], md[4]]);
             });
   }
   function lazy_modtype(param, cont){
    switch(param[0]){
      case 0:
       var p = param[1]; return cont([0, p]);
      case 1:
       var sg = param[1];
       return caml_cps_call2
               (Dynlink_compilerlibs_Lazy_back[5],
                [0, sg],
                function(_JX_){return cont([1, _JX_]);});
      case 2:
       var match = param[1];
       if(match){
        var res = param[2], arg = match[2], id = match[1];
        return caml_cps_exact_call2
                (lazy_modtype,
                 res,
                 function(_JV_){
                  return caml_cps_exact_call2
                          (lazy_modtype,
                           arg,
                           function(_JW_){return cont([2, [0, id, _JW_], _JV_]);});
                 });
       }
       var mty = param[2];
       return caml_cps_exact_call2
               (lazy_modtype, mty, function(_JU_){return cont([2, 0, _JU_]);});
      default: var p$0 = param[1]; return cont([3, p$0]);
    }
   }
   function subst_lazy_modtype(scoping, s, param, cont){
    switch(param[0]){
      case 0:
       var p = param[1];
       caml_push_trap
        (function(_JS_){
          if(_JS_ === Stdlib[8])
           switch(p[0]){
             case 0:
              return cont([0, p]);
             case 1:
              var n = p[2], p$0 = p[1];
              return caml_cps_exact_call3
                      (module_path,
                       s,
                       p$0,
                       function(_JT_){return cont([0, [1, _JT_, n]]);});
             default:
              return caml_cps_call2
                      (Dynlink_compilerlibs_Misc[1], cst_Subst_modtype, cont);
           }
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_JS_, 0));
         });
       return caml_cps_call3
               (Dynlink_compilerlibs_Path[15][28],
                p,
                s[3],
                function(mty){
                 caml_pop_trap();
                 return caml_cps_exact_call2(lazy_modtype, mty, cont);
                });
      case 1:
       var sg = param[1];
       return caml_cps_exact_call4
               (subst_lazy_signature,
                scoping,
                s,
                sg,
                function(_JR_){return cont([1, _JR_]);});
      case 2:
       var _JJ_ = param[1];
       if(! _JJ_){
        var res$1 = param[2];
        return caml_cps_exact_call4
                (subst_lazy_modtype,
                 scoping,
                 s,
                 res$1,
                 function(_JQ_){return cont([2, 0, _JQ_]);});
       }
       var match = _JJ_[1];
       if(match){
        var res = param[2], arg = _JJ_[2], id = match[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Ident[14],
                 id,
                 function(id$0){
                  return caml_cps_exact_call4
                          (add_module$0,
                           id,
                           [0, id$0],
                           s,
                           function(_JN_){
                            return caml_cps_exact_call4
                                    (subst_lazy_modtype,
                                     scoping,
                                     _JN_,
                                     res,
                                     function(_JO_){
                                      return caml_cps_exact_call4
      (subst_lazy_modtype,
       scoping,
       s,
       arg,
       function(_JP_){
        return cont([2, [0, [0, id$0], _JP_], _JO_]);
       });
                                     });
                           });
                 });
       }
       var res$0 = param[2], arg$0 = _JJ_[2];
       return caml_cps_exact_call4
               (subst_lazy_modtype,
                scoping,
                s,
                res$0,
                function(_JL_){
                 return caml_cps_exact_call4
                         (subst_lazy_modtype,
                          scoping,
                          s,
                          arg$0,
                          function(_JM_){return cont([2, [0, 0, _JM_], _JL_]);});
                });
      default:
       var p$0 = param[1];
       return caml_cps_exact_call3
               (module_path, s, p$0, function(_JK_){return cont([3, _JK_]);});
    }
   }
   function force_modtype(param, cont){
    switch(param[0]){
      case 0:
       var p = param[1]; return cont([0, p]);
      case 1:
       var sg = param[1];
       return caml_cps_exact_call2
               (force_signature, sg, function(_JI_){return cont([1, _JI_]);});
      case 2:
       var
        res = param[2],
        param$0 = param[1],
        _JF_ =
          function(param){
           return caml_cps_exact_call2
                   (force_modtype,
                    res,
                    function(_JH_){return cont([2, param, _JH_]);});
          };
       if(! param$0) return _JF_(0);
       var mty = param$0[2], id = param$0[1];
       return caml_cps_exact_call2
               (force_modtype,
                mty,
                function(_JG_){return _JF_([0, id, _JG_]);});
      default: var p$0 = param[1]; return cont([3, p$0]);
    }
   }
   function lazy_modtype_decl(mtd, cont){
    return caml_cps_call3
            (Stdlib_Option[7],
             lazy_modtype,
             mtd[1],
             function(mtdl_type){
              return cont([0, mtdl_type, mtd[2], mtd[3], mtd[4]]);
             });
   }
   function subst_lazy_modtype_decl(scoping, s, mtd, cont){
    var _JA_ = mtd[4], _JB_ = loc(s, mtd[3]);
    return caml_cps_exact_call3
            (attrs,
             s,
             mtd[2],
             function(_JC_){
              return caml_cps_call3
                      (Stdlib_Option[7],
                       function(_JE_, cont){
                        return caml_cps_exact_call4
                                (subst_lazy_modtype, scoping, s, _JE_, cont);
                       },
                       mtd[1],
                       function(_JD_){return cont([0, _JD_, _JC_, _JB_, _JA_]);});
             });
   }
   function force_modtype_decl(mtd, cont){
    return caml_cps_call3
            (Stdlib_Option[7],
             force_modtype,
             mtd[1],
             function(mtd_type){
              return cont([0, mtd_type, mtd[2], mtd[3], mtd[4]]);
             });
   }
   function subst_lazy_signature(scoping, s, sg, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Lazy_back[4],
             sg,
             function(match){
              if(0 === match[0]){
               var
                match$0 = match[1],
                sg = match$0[3],
                s$0 = match$0[2],
                scoping$0 = match$0[1],
                scoping$1 =
                  typeof scoping === "number" ? scoping || scoping$0 : scoping;
               return caml_cps_exact_call3
                       (compose,
                        s$0,
                        s,
                        function(s){
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Lazy_back[2],
                                  [0, scoping$1, s, sg],
                                  cont);
                        });
              }
              var sg$0 = match[1];
              return caml_cps_call2
                      (Dynlink_compilerlibs_Lazy_back[2],
                       [0, scoping, s, sg$0],
                       cont);
             });
   }
   function force_signature(sg, cont){
    return caml_cps_exact_call2
            (force_signature_once,
             sg,
             function(_Jz_){
              return caml_cps_call3
                      (Stdlib_List[19], force_signature_item, _Jz_, cont);
             });
   }
   function force_signature_once(sg, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Lazy_back[1],
             force_signature_once$0,
             sg,
             function(_Jy_){
              return caml_cps_exact_call2(lazy_signature, _Jy_, cont);
             });
   }
   function lazy_signature(param, cont){
    if(0 === param[0]){
     var sg = param[1];
     return caml_cps_call3(Stdlib_List[19], lazy_signature_item, sg, cont);
    }
    var sg$0 = param[1];
    return cont(sg$0);
   }
   function force_signature_once$0(param, cont){
    var sg = param[3], s = param[2], scoping = param[1];
    return caml_cps_exact_call2
            (lazy_signature,
             sg,
             function(sg){
              if(typeof scoping === "number")
               var
                rename =
                  scoping
                   ? Dynlink_compilerlibs_Ident[14]
                   : function
                    (id, cont){
                     return caml_cps_call2
                             (Dynlink_compilerlibs_Ident[15],
                              id,
                              function(_Jv_){
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[23],
id,
function(_Jw_){
 return caml_cps_call3
         (Dynlink_compilerlibs_Ident[10], _Jw_, _Jv_, cont);
});
                              });
                    };
              else
               var
                scope = scoping[1],
                rename =
                  function(id, cont){
                   return caml_cps_call2
                           (Dynlink_compilerlibs_Ident[15],
                            id,
                            function(_Jx_){
                             return caml_cps_call3
                                     (Dynlink_compilerlibs_Ident[10], scope, _Jx_, cont);
                            });
                  };
              function _Js_(param, sg, s){
               if(! param)
                return caml_cps_call2
                        (Dynlink_compilerlibs_Btype[38][2],
                         function(copy_scope, cont){
                          return caml_cps_call3
                                  (Stdlib_List[21],
                                   function(_Ju_, cont){
                                    return caml_cps_exact_call5
    (subst_lazy_signature_item,
     copy_scope,
     scoping,
     s,
     _Ju_,
     cont);
                                   },
                                   sg,
                                   function(_Jt_){return cont([1, _Jt_]);});
                         },
                         cont);
               var match = param[1];
               switch(match[0]){
                 case 0:
                  var
                   rest = param[2],
                   vis = match[3],
                   vd = match[2],
                   id = match[1];
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Ident[14],
                           id,
                           function(id){
                            var sg$0 = [0, [0, id, vd, vis], sg];
                            return caml_cps_exact_call3(_Js_, rest, sg$0, s);
                           });
                 case 1:
                  var
                   rest$0 = param[2],
                   vis$0 = match[4],
                   rs = match[3],
                   td = match[2],
                   id$0 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$0,
                           function(id){
                            var sg$0 = [0, [1, id, td, rs, vis$0], sg];
                            return caml_cps_exact_call4
                                    (add_type$0,
                                     id$0,
                                     [0, id],
                                     s,
                                     function(s){
                                      return caml_cps_exact_call3(_Js_, rest$0, sg$0, s);
                                     });
                           });
                 case 2:
                  var
                   rest$1 = param[2],
                   vis$1 = match[4],
                   es = match[3],
                   ec = match[2],
                   id$1 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$1,
                           function(id){
                            var sg$0 = [0, [2, id, ec, es, vis$1], sg];
                            return caml_cps_exact_call3(_Js_, rest$1, sg$0, s);
                           });
                 case 3:
                  var
                   rest$2 = param[2],
                   vis$2 = match[5],
                   rs$0 = match[4],
                   md = match[3],
                   pres = match[2],
                   id$2 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$2,
                           function(id){
                            var sg$0 = [0, [3, id, pres, md, rs$0, vis$2], sg];
                            return caml_cps_exact_call4
                                    (add_module$0,
                                     id$2,
                                     [0, id],
                                     s,
                                     function(s){
                                      return caml_cps_exact_call3(_Js_, rest$2, sg$0, s);
                                     });
                           });
                 case 4:
                  var
                   rest$3 = param[2],
                   vis$3 = match[3],
                   mtd = match[2],
                   id$3 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$3,
                           function(id){
                            var sg$0 = [0, [4, id, mtd, vis$3], sg];
                            return caml_cps_exact_call4
                                    (add_modtype,
                                     id$3,
                                     [0, [0, id]],
                                     s,
                                     function(s){
                                      return caml_cps_exact_call3(_Js_, rest$3, sg$0, s);
                                     });
                           });
                 case 5:
                  var
                   rest$4 = param[2],
                   vis$4 = match[4],
                   rs$1 = match[3],
                   cd = match[2],
                   id$4 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$4,
                           function(id){
                            var sg$0 = [0, [5, id, cd, rs$1, vis$4], sg];
                            return caml_cps_exact_call4
                                    (add_type$0,
                                     id$4,
                                     [0, id],
                                     s,
                                     function(s){
                                      return caml_cps_exact_call3(_Js_, rest$4, sg$0, s);
                                     });
                           });
                 default:
                  var
                   rest$5 = param[2],
                   vis$5 = match[4],
                   rs$2 = match[3],
                   ctd = match[2],
                   id$5 = match[1];
                  return caml_cps_call2
                          (rename,
                           id$5,
                           function(id){
                            var sg$0 = [0, [6, id, ctd, rs$2, vis$5], sg];
                            return caml_cps_exact_call4
                                    (add_type$0,
                                     id$5,
                                     [0, id],
                                     s,
                                     function(s){
                                      return caml_cps_exact_call3(_Js_, rest$5, sg$0, s);
                                     });
                           });
               }
              }
              return _Js_(sg, 0, s);
             });
   }
   function lazy_signature_item(param, cont){
    switch(param[0]){
      case 0:
       var vis = param[3], d = param[2], id = param[1];
       return cont([0, id, d, vis]);
      case 1:
       var vis$0 = param[4], rs = param[3], d$0 = param[2], id$0 = param[1];
       return cont([1, id$0, d$0, rs, vis$0]);
      case 2:
       var vis$1 = param[4], es = param[3], ext = param[2], id$1 = param[1];
       return cont([2, id$1, ext, es, vis$1]);
      case 3:
       var
        vis$2 = param[5],
        rs$0 = param[4],
        d$1 = param[3],
        res = param[2],
        id$2 = param[1];
       return caml_cps_exact_call2
               (lazy_module_decl,
                d$1,
                function(_Jr_){
                 return cont([3, id$2, res, _Jr_, rs$0, vis$2]);
                });
      case 4:
       var vis$3 = param[3], d$2 = param[2], id$3 = param[1];
       return caml_cps_exact_call2
               (lazy_modtype_decl,
                d$2,
                function(_Jq_){return cont([4, id$3, _Jq_, vis$3]);});
      case 5:
       var vis$4 = param[4], rs$1 = param[3], d$3 = param[2], id$4 = param[1];
       return cont([5, id$4, d$3, rs$1, vis$4]);
      default:
       var vis$5 = param[4], rs$2 = param[3], d$4 = param[2], id$5 = param[1];
       return cont([6, id$5, d$4, rs$2, vis$5]);
    }
   }
   function subst_lazy_signature_item(copy_scope, scoping, s, comp, cont){
    switch(comp[0]){
      case 0:
       var vis = comp[3], d = comp[2], id = comp[1];
       return caml_cps_exact_call4
               (value_description,
                copy_scope,
                s,
                d,
                function(_Jp_){return cont([0, id, _Jp_, vis]);});
      case 1:
       var vis$0 = comp[4], rs = comp[3], d$0 = comp[2], id$0 = comp[1];
       return caml_cps_exact_call4
               (type_declaration,
                copy_scope,
                s,
                d$0,
                function(_Jo_){return cont([1, id$0, _Jo_, rs, vis$0]);});
      case 2:
       var vis$1 = comp[4], es = comp[3], ext = comp[2], id$1 = comp[1];
       return caml_cps_exact_call4
               (extension_constructor$0,
                copy_scope,
                s,
                ext,
                function(_Jn_){return cont([2, id$1, _Jn_, es, vis$1]);});
      case 3:
       var
        vis$2 = comp[5],
        rs$0 = comp[4],
        d$1 = comp[3],
        pres = comp[2],
        id$2 = comp[1];
       return caml_cps_exact_call4
               (subst_lazy_module_decl,
                scoping,
                s,
                d$1,
                function(_Jm_){
                 return cont([3, id$2, pres, _Jm_, rs$0, vis$2]);
                });
      case 4:
       var vis$3 = comp[3], d$2 = comp[2], id$3 = comp[1];
       return caml_cps_exact_call4
               (subst_lazy_modtype_decl,
                scoping,
                s,
                d$2,
                function(_Jl_){return cont([4, id$3, _Jl_, vis$3]);});
      case 5:
       var vis$4 = comp[4], rs$1 = comp[3], d$3 = comp[2], id$4 = comp[1];
       return caml_cps_exact_call4
               (class_declaration,
                copy_scope,
                s,
                d$3,
                function(_Jk_){return cont([5, id$4, _Jk_, rs$1, vis$4]);});
      default:
       var vis$5 = comp[4], rs$2 = comp[3], d$4 = comp[2], id$5 = comp[1];
       return caml_cps_exact_call4
               (cltype_declaration,
                copy_scope,
                s,
                d$4,
                function(_Jj_){return cont([6, id$5, _Jj_, rs$2, vis$5]);});
    }
   }
   function force_signature_item(param, cont){
    switch(param[0]){
      case 0:
       var vis = param[3], vd = param[2], id = param[1];
       return cont([0, id, vd, vis]);
      case 1:
       var vis$0 = param[4], rs = param[3], d = param[2], id$0 = param[1];
       return cont([1, id$0, d, rs, vis$0]);
      case 2:
       var vis$1 = param[4], es = param[3], ext = param[2], id$1 = param[1];
       return cont([2, id$1, ext, es, vis$1]);
      case 3:
       var
        vis$2 = param[5],
        rs$0 = param[4],
        d$0 = param[3],
        pres = param[2],
        id$2 = param[1];
       return caml_cps_exact_call2
               (force_module_decl,
                d$0,
                function(_Ji_){
                 return cont([3, id$2, pres, _Ji_, rs$0, vis$2]);
                });
      case 4:
       var vis$3 = param[3], d$1 = param[2], id$3 = param[1];
       return caml_cps_exact_call2
               (force_modtype_decl,
                d$1,
                function(_Jh_){return cont([4, id$3, _Jh_, vis$3]);});
      case 5:
       var vis$4 = param[4], rs$1 = param[3], d$2 = param[2], id$4 = param[1];
       return cont([5, id$4, d$2, rs$1, vis$4]);
      default:
       var vis$5 = param[4], rs$2 = param[3], d$3 = param[2], id$5 = param[1];
       return cont([6, id$5, d$3, rs$2, vis$5]);
    }
   }
   function modtype$1(scoping, s, t, cont){
    return caml_cps_exact_call2
            (lazy_modtype,
             t,
             function(_Jf_){
              return caml_cps_exact_call4
                      (subst_lazy_modtype,
                       scoping,
                       s,
                       _Jf_,
                       function(_Jg_){
                        return caml_cps_exact_call2(force_modtype, _Jg_, cont);
                       });
             });
   }
   function compose(s1, s2, cont){
    if(s1 === identity) return cont(s2);
    if(s2 === identity) return cont(s1);
    var
     l2 = s2[5],
     l1 = s1[5],
     _I6_ = l2 || l1,
     _I7_ = s1[4],
     _I8_ = _I7_ || s2[4],
     _I9_ = 0;
    return caml_cps_exact_call4
            (merge_path_maps,
             function(_Je_, cont){
              return caml_cps_exact_call4(modtype$1, _I9_, s2, _Je_, cont);
             },
             s1[3],
             s2[3],
             function(_I__){
              return caml_cps_exact_call4
                      (merge_path_maps,
                       function(_Jd_, cont){
                        return caml_cps_exact_call3(module_path, s2, _Jd_, cont);
                       },
                       s1[2],
                       s2[2],
                       function(_I$_){
                        return caml_cps_exact_call4
                                (merge_path_maps,
                                 function(param, cont){
                                  if(0 === param[0]){
                                   var p = param[1];
                                   return caml_cps_exact_call3
   (type_path, s2, p, function(_Jc_){return cont([0, _Jc_]);});
                                  }
                                  var body = param[2], params = param[1];
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Btype[38][2],
   function(copy_scope, cont){
    return caml_cps_call3
            (Stdlib_List[19],
             function(_Jb_, cont){
              return caml_cps_exact_call4
                      (typexp, copy_scope, s2, _Jb_, cont);
             },
             params,
             function(params){
              return caml_cps_exact_call4
                      (typexp,
                       copy_scope,
                       s2,
                       body,
                       function(body){return cont([1, params, body]);});
             });
   },
   cont);
                                 },
                                 s1[1],
                                 s2[1],
                                 function(_Ja_){
                                  return cont([0, _Ja_, _I$_, _I__, _I8_, _I6_]);
                                 });
                       });
             });
   }
   function subst_lazy_signature_item$0(scoping, s, comp, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[38][2],
             function(copy_scope, cont){
              return caml_cps_exact_call5
                      (subst_lazy_signature_item,
                       copy_scope,
                       scoping,
                       s,
                       comp,
                       cont);
             },
             cont);
   }
   function of_signature(sg, cont){
    return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [0, sg], cont);
   }
   function of_signature_items(sg, cont){
    return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [1, sg], cont);
   }
   var
    Lazy =
      [0,
       lazy_module_decl,
       lazy_modtype,
       lazy_modtype_decl,
       of_signature,
       of_signature_items,
       lazy_signature_item,
       subst_lazy_module_decl,
       subst_lazy_modtype,
       subst_lazy_modtype_decl,
       subst_lazy_signature,
       subst_lazy_signature_item$0,
       force_module_decl,
       force_modtype,
       force_modtype_decl,
       force_signature,
       force_signature_once,
       force_signature_item];
   function signature$1(sc, s, sg, cont){
    return caml_cps_call2
            (Lazy[4],
             sg,
             function(_I3_){
              return caml_cps_call3
                      (Lazy[10],
                       sc,
                       s,
                       function(_I4_){
                        return caml_cps_call2
                                (_I4_,
                                 _I3_,
                                 function(_I5_){return caml_cps_call2(Lazy[15], _I5_, cont);});
                       });
             });
   }
   function signature_item(sc, s, comp, cont){
    return caml_cps_call2
            (Lazy[6],
             comp,
             function(_I0_){
              return caml_cps_call3
                      (Lazy[11],
                       sc,
                       s,
                       function(_I1_){
                        return caml_cps_call2
                                (_I1_,
                                 _I0_,
                                 function(_I2_){return caml_cps_call2(Lazy[17], _I2_, cont);});
                       });
             });
   }
   function modtype_declaration(sc, s, decl, cont){
    return caml_cps_call2
            (Lazy[3],
             decl,
             function(_IX_){
              return caml_cps_call3
                      (Lazy[9],
                       sc,
                       s,
                       function(_IY_){
                        return caml_cps_call2
                                (_IY_,
                                 _IX_,
                                 function(_IZ_){return caml_cps_call2(Lazy[14], _IZ_, cont);});
                       });
             });
   }
   function module_declaration(scoping, s, decl, cont){
    return caml_cps_call2
            (Lazy[1],
             decl,
             function(_IU_){
              return caml_cps_call3
                      (Lazy[7],
                       scoping,
                       s,
                       function(_IV_){
                        return caml_cps_call2
                                (_IV_,
                                 _IU_,
                                 function(_IW_){return caml_cps_call2(Lazy[12], _IW_, cont);});
                       });
             });
   }
   var
    Dynlink_compilerlibs_Subst =
      [0,
       identity,
       add_type$0,
       add_type_path,
       add_type_function,
       add_module$0,
       add_module_path,
       add_modtype,
       add_modtype_path,
       for_saving,
       reset_for_saving,
       change_locs,
       module_path,
       type_path,
       modtype_path,
       type_expr$0,
       class_type$2,
       value_description$0,
       type_declaration$0,
       extension_constructor$1,
       class_declaration$0,
       cltype_declaration$0,
       modtype$1,
       signature$1,
       signature_item,
       modtype_declaration,
       module_declaration,
       compose,
       ctype_apply_env_empty,
       Lazy];
   caml_register_global
    (1428, Dynlink_compilerlibs_Subst, "Dynlink_compilerlibs.Subst");
   var builtin_idents = [0, 0], create$6 = Dynlink_compilerlibs_Ident[13];
   function ident_create(s, cont){
    return caml_cps_call2
            (create$6,
             s,
             function(id){
              builtin_idents[1] = [0, [0, s, id], builtin_idents[1]];
              return cont(id);
             });
   }
   var
    ident_int = caml_callback(ident_create, [cst_int]),
    ident_char = caml_callback(ident_create, [cst_char]),
    ident_bytes = caml_callback(ident_create, [cst_bytes]),
    ident_float = caml_callback(ident_create, [cst_float]),
    ident_bool = caml_callback(ident_create, [cst_bool]),
    ident_unit = caml_callback(ident_create, [cst_unit]),
    ident_exn = caml_callback(ident_create, [cst_exn]),
    ident_array = caml_callback(ident_create, [cst_array]),
    ident_list = caml_callback(ident_create, [cst_list]),
    ident_option = caml_callback(ident_create, [cst_option]),
    ident_nativeint = caml_callback(ident_create, [cst_nativeint]),
    ident_int32 = caml_callback(ident_create, [cst_int32]),
    ident_int64 = caml_callback(ident_create, [cst_int64]),
    ident_lazy_t = caml_callback(ident_create, [cst_lazy_t]),
    ident_string = caml_callback(ident_create, [cst_string]),
    ident_extension_constructor =
      caml_callback(ident_create, [cst_extension_constructor$1]),
    ident_floatarray = caml_callback(ident_create, [cst_floatarray]),
    path_int = [0, ident_int],
    path_char = [0, ident_char],
    path_bytes = [0, ident_bytes],
    path_float = [0, ident_float],
    path_bool = [0, ident_bool],
    path_unit = [0, ident_unit],
    path_exn = [0, ident_exn],
    path_array = [0, ident_array],
    path_list = [0, ident_list],
    path_option = [0, ident_option],
    path_nativeint = [0, ident_nativeint],
    path_int32 = [0, ident_int32],
    path_int64 = [0, ident_int64],
    path_lazy_t = [0, ident_lazy_t],
    path_string = [0, ident_string],
    path_extension_constructor = [0, ident_extension_constructor],
    path_floatarray = [0, ident_floatarray],
    type_int =
      caml_callback(Dynlink_compilerlibs_Btype[7], [[3, path_int, 0, [0, 0]]]),
    type_char =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_char, 0, [0, 0]]]),
    type_bytes =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_bytes, 0, [0, 0]]]),
    type_float =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_float, 0, [0, 0]]]),
    type_bool =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_bool, 0, [0, 0]]]),
    type_unit =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_unit, 0, [0, 0]]]),
    type_exn =
      caml_callback(Dynlink_compilerlibs_Btype[7], [[3, path_exn, 0, [0, 0]]]);
   function type_array(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [3, path_array, [0, t, 0], [0, 0]],
             cont);
   }
   function type_list(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [3, path_list, [0, t, 0], [0, 0]],
             cont);
   }
   function type_option(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [3, path_option, [0, t, 0], [0, 0]],
             cont);
   }
   var
    type_nativeint =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_nativeint, 0, [0, 0]]]),
    type_int32 =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_int32, 0, [0, 0]]]),
    type_int64 =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_int64, 0, [0, 0]]]);
   function type_lazy_t(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [3, path_lazy_t, [0, t, 0], [0, 0]],
             cont);
   }
   var
    type_string =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_string, 0, [0, 0]]]),
    type_extension_constructor =
      caml_callback
       (Dynlink_compilerlibs_Btype[7],
        [[3, path_extension_constructor, 0, [0, 0]]]),
    type_floatarray =
      caml_callback
       (Dynlink_compilerlibs_Btype[7], [[3, path_floatarray, 0, [0, 0]]]),
    ident_match_failure = caml_callback(ident_create, [cst_Match_failure]),
    ident_out_of_memory = caml_callback(ident_create, [cst_Out_of_memory]),
    ident_invalid_argument =
      caml_callback(ident_create, [cst_Invalid_argument]),
    ident_failure = caml_callback(ident_create, [cst_Failure]),
    ident_not_found = caml_callback(ident_create, [cst_Not_found]),
    ident_sys_error = caml_callback(ident_create, [cst_Sys_error]),
    ident_end_of_file = caml_callback(ident_create, [cst_End_of_file]),
    ident_division_by_zero =
      caml_callback(ident_create, [cst_Division_by_zero]),
    ident_stack_overflow = caml_callback(ident_create, [cst_Stack_overflow]),
    ident_sys_blocked_io = caml_callback(ident_create, [cst_Sys_blocked_io]),
    ident_assert_failure = caml_callback(ident_create, [cst_Assert_failure]),
    ident_undefined_recursive_modu =
      caml_callback(ident_create, [cst_Undefined_recursive_module]),
    all_predef_exns =
      [0,
       ident_match_failure,
       [0,
        ident_out_of_memory,
        [0,
         ident_invalid_argument,
         [0,
          ident_failure,
          [0,
           ident_not_found,
           [0,
            ident_sys_error,
            [0,
             ident_end_of_file,
             [0,
              ident_division_by_zero,
              [0,
               ident_stack_overflow,
               [0,
                ident_sys_blocked_io,
                [0,
                 ident_assert_failure,
                 [0, ident_undefined_recursive_modu, 0]]]]]]]]]]]],
    path_match_failure = [0, ident_match_failure],
    path_assert_failure = [0, ident_assert_failure],
    path_undefined_recursive_modul = [0, ident_undefined_recursive_modu];
   function cstr(id, args, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Shape[1][4],
             id,
             function(_IT_){
              return cont
                      ([0,
                        id,
                        [0, args],
                        0,
                        Dynlink_compilerlibs_Location[1],
                        0,
                        _IT_]);
             });
   }
   var
    ident_false = caml_callback(ident_create, [cst_false$0]),
    ident_true = caml_callback(ident_create, [cst_true$0]),
    ident_void = caml_callback(ident_create, [cst$92]),
    ident_nil = caml_callback(ident_create, [cst$93]),
    ident_cons = caml_callback(ident_create, [cst$94]),
    ident_none = caml_callback(ident_create, [cst_None$1]),
    ident_some = caml_callback(ident_create, [cst_Some$0]);
   function build_initial_env(add_type, add_extension, empty_env, cont){
    function add_type$0(type_ident, manifest, opt, _IR_, env, cont){
     if(opt) var sth = opt[1], immediate = sth; else var immediate = 0;
     if(_IR_) var sth$0 = _IR_[1], kind = sth$0; else var kind = 0;
     return caml_cps_call2
             (Dynlink_compilerlibs_Shape[1][4],
              type_ident,
              function(_IS_){
               var
                decl =
                  [0,
                   0,
                   0,
                   kind,
                   1,
                   manifest,
                   0,
                   0,
                   0,
                   Dynlink_compilerlibs_Btype[39],
                   Dynlink_compilerlibs_Location[1],
                   0,
                   immediate,
                   0,
                   _IS_];
               return caml_cps_call4(add_type, type_ident, decl, env, cont);
              });
    }
    function add_type1(type_ident, variance, separability, opt, env, cont){
     if(opt)
      var sth = opt[1], kind = sth;
     else
      var kind = function(param, cont){return cont(0);};
     return caml_cps_call3
             (Dynlink_compilerlibs_Btype[8],
              0,
              0,
              function(param){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Shape[1][4],
                        type_ident,
                        function(_IF_){
                         var
                          _IG_ = 0,
                          _IH_ = 0,
                          _II_ = 0,
                          _IJ_ = Dynlink_compilerlibs_Location[1],
                          _IK_ = Dynlink_compilerlibs_Btype[39],
                          _IL_ = 0,
                          _IM_ = [0, separability, 0],
                          _IN_ = [0, variance, 0],
                          _IO_ = 0,
                          _IP_ = 1;
                         return caml_cps_exact_call2
                                 (kind,
                                  param,
                                  function(_IQ_){
                                   var
                                    decl =
                                      [0,
                                       [0, param, 0],
                                       1,
                                       _IQ_,
                                       _IP_,
                                       _IO_,
                                       _IN_,
                                       _IM_,
                                       _IL_,
                                       _IK_,
                                       _IJ_,
                                       _II_,
                                       _IH_,
                                       _IG_,
                                       _IF_];
                                   return caml_cps_call4(add_type, type_ident, decl, env, cont);
                                  });
                        });
              });
    }
    function add_extension$0(id, l, cont){
     return caml_cps_call2
             (Dynlink_compilerlibs_Shape[1][4],
              id,
              function(_IB_){
               var _IC_ = 0;
               return caml_cps_call2
                       (Dynlink_compilerlibs_Location[11],
                        cst_ocaml_warn_on_literal_patt,
                        function(_ID_){
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ast_helpe[4][1],
                                  0,
                                  _ID_,
                                  _hf_,
                                  function(_IE_){
                                   return caml_cps_call3
   (add_extension,
    id,
    [0,
     path_exn,
     0,
     [0, l],
     0,
     1,
     Dynlink_compilerlibs_Location[1],
     [0, _IE_, _IC_],
     _IB_],
    cont);
                                  });
                        });
              });
    }
    function variant(constrs){return [1, constrs, 0];}
    return caml_cps_exact_call6
            (add_type1,
             ident_array,
             Dynlink_compilerlibs_Types[41][2],
             0,
             0,
             empty_env,
             function(_HD_){
              var _HB_ = 0, _HC_ = 0;
              return caml_cps_exact_call3
                      (cstr,
                       ident_true,
                       0,
                       function(_HE_){
                        var _HF_ = [0, _HE_, _HC_];
                        return caml_cps_exact_call3
                                (cstr,
                                 ident_false,
                                 0,
                                 function(_HG_){
                                  return caml_cps_exact_call6
  (add_type$0,
   ident_bool,
   _HB_,
   _hg_,
   [0, variant([0, _HG_, _HF_])],
   _HD_,
   function(_HH_){
    return caml_cps_exact_call6
            (add_type$0,
             ident_char,
             0,
             _hh_,
             0,
             _HH_,
             function(_HI_){
              return caml_cps_exact_call6
                      (add_type$0,
                       ident_exn,
                       0,
                       0,
                       _hi_,
                       _HI_,
                       function(_HJ_){
                        return caml_cps_exact_call6
                                (add_type$0,
                                 ident_extension_constructor,
                                 0,
                                 0,
                                 0,
                                 _HJ_,
                                 function(_HK_){
                                  return caml_cps_exact_call6
  (add_type$0,
   ident_float,
   0,
   0,
   0,
   _HK_,
   function(_HL_){
    return caml_cps_exact_call6
            (add_type$0,
             ident_floatarray,
             0,
             0,
             0,
             _HL_,
             function(_HM_){
              return caml_cps_exact_call6
                      (add_type$0,
                       ident_int,
                       0,
                       _hj_,
                       0,
                       _HM_,
                       function(_HN_){
                        return caml_cps_exact_call6
                                (add_type$0,
                                 ident_int32,
                                 0,
                                 0,
                                 0,
                                 _HN_,
                                 function(_HO_){
                                  return caml_cps_exact_call6
  (add_type$0,
   ident_int64,
   0,
   0,
   0,
   _HO_,
   function(_HP_){
    return caml_cps_exact_call6
            (add_type1,
             ident_lazy_t,
             Dynlink_compilerlibs_Types[41][3],
             0,
             0,
             _HP_,
             function(_HQ_){
              return caml_cps_exact_call6
                      (add_type1,
                       ident_list,
                       Dynlink_compilerlibs_Types[41][3],
                       0,
                       [0,
                        function(tvar, cont){
                         var _Iv_ = 0, _Iw_ = 0;
                         return caml_cps_exact_call2
                                 (type_list,
                                  tvar,
                                  function(_Ix_){
                                   return caml_cps_exact_call3
   (cstr,
    ident_cons,
    [0, tvar, [0, _Ix_, _Iw_]],
    function(_Iy_){
     var _Iz_ = [0, _Iy_, _Iv_];
     return caml_cps_exact_call3
             (cstr,
              ident_nil,
              0,
              function(_IA_){return cont(variant([0, _IA_, _Iz_]));});
    });
                                  });
                        }],
                       _HQ_,
                       function(_HR_){
                        return caml_cps_exact_call6
                                (add_type$0,
                                 ident_nativeint,
                                 0,
                                 0,
                                 0,
                                 _HR_,
                                 function(_HS_){
                                  return caml_cps_exact_call6
  (add_type1,
   ident_option,
   Dynlink_compilerlibs_Types[41][3],
   0,
   [0,
    function(tvar, cont){
     var _Ir_ = 0;
     return caml_cps_exact_call3
             (cstr,
              ident_some,
              [0, tvar, 0],
              function(_Is_){
               var _It_ = [0, _Is_, _Ir_];
               return caml_cps_exact_call3
                       (cstr,
                        ident_none,
                        0,
                        function(_Iu_){return cont(variant([0, _Iu_, _It_]));});
              });
    }],
   _HS_,
   function(_HT_){
    return caml_cps_exact_call6
            (add_type$0,
             ident_string,
             0,
             0,
             0,
             _HT_,
             function(_HU_){
              return caml_cps_exact_call6
                      (add_type$0,
                       ident_bytes,
                       0,
                       0,
                       0,
                       _HU_,
                       function(_HX_){
                        var _HV_ = 0, _HW_ = 0;
                        return caml_cps_exact_call3
                                (cstr,
                                 ident_void,
                                 0,
                                 function(_HY_){
                                  return caml_cps_exact_call6
  (add_type$0,
   ident_unit,
   _HV_,
   _hk_,
   [0, variant([0, _HY_, _HW_])],
   _HX_,
   function(_H0_){
    var _HZ_ = 0;
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
             function(_H1_){
              return caml_cps_exact_call3
                      (add_extension$0,
                       ident_assert_failure,
                       [0, _H1_, _HZ_],
                       function(_H2_){
                        return caml_cps_call2
                                (_H2_,
                                 _H0_,
                                 function(_H3_){
                                  return caml_cps_exact_call3
  (add_extension$0,
   ident_division_by_zero,
   0,
   function(_H4_){
    return caml_cps_call2
            (_H4_,
             _H3_,
             function(_H5_){
              return caml_cps_exact_call3
                      (add_extension$0,
                       ident_end_of_file,
                       0,
                       function(_H6_){
                        return caml_cps_call2
                                (_H6_,
                                 _H5_,
                                 function(_H7_){
                                  return caml_cps_exact_call3
  (add_extension$0,
   ident_failure,
   [0, type_string, 0],
   function(_H8_){
    return caml_cps_call2
            (_H8_,
             _H7_,
             function(_H9_){
              return caml_cps_exact_call3
                      (add_extension$0,
                       ident_invalid_argument,
                       [0, type_string, 0],
                       function(_H__){
                        return caml_cps_call2
                                (_H__,
                                 _H9_,
                                 function(_H$_){
                                  var _Ia_ = 0;
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Btype[7],
   [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
   function(_Ib_){
    return caml_cps_exact_call3
            (add_extension$0,
             ident_match_failure,
             [0, _Ib_, _Ia_],
             function(_Ic_){
              return caml_cps_call2
                      (_Ic_,
                       _H$_,
                       function(_Id_){
                        return caml_cps_exact_call3
                                (add_extension$0,
                                 ident_not_found,
                                 0,
                                 function(_Ie_){
                                  return caml_cps_call2
  (_Ie_,
   _Id_,
   function(_If_){
    return caml_cps_exact_call3
            (add_extension$0,
             ident_out_of_memory,
             0,
             function(_Ig_){
              return caml_cps_call2
                      (_Ig_,
                       _If_,
                       function(_Ih_){
                        return caml_cps_exact_call3
                                (add_extension$0,
                                 ident_stack_overflow,
                                 0,
                                 function(_Ii_){
                                  return caml_cps_call2
  (_Ii_,
   _Ih_,
   function(_Ij_){
    return caml_cps_exact_call3
            (add_extension$0,
             ident_sys_blocked_io,
             0,
             function(_Ik_){
              return caml_cps_call2
                      (_Ik_,
                       _Ij_,
                       function(_Il_){
                        return caml_cps_exact_call3
                                (add_extension$0,
                                 ident_sys_error,
                                 [0, type_string, 0],
                                 function(_Im_){
                                  return caml_cps_call2
  (_Im_,
   _Il_,
   function(_In_){
    var _Io_ = 0;
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7],
             [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
             function(_Ip_){
              return caml_cps_exact_call3
                      (add_extension$0,
                       ident_undefined_recursive_modu,
                       [0, _Ip_, _Io_],
                       function(_Iq_){return caml_cps_call2(_Iq_, _In_, cont);});
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   var
    builtin_values =
      caml_callback
       (Stdlib_List[19],
        [function(id, cont){
          return caml_cps_call2
                  (Dynlink_compilerlibs_Ident[15],
                   id,
                   function(_HA_){return cont([0, _HA_, id]);});
         },
         all_predef_exns]),
    builtin_idents$0 = caml_callback(Stdlib_List[9], [builtin_idents[1]]),
    Dynlink_compilerlibs_Predef =
      [0,
       type_int,
       type_char,
       type_string,
       type_bytes,
       type_float,
       type_bool,
       type_unit,
       type_exn,
       type_array,
       type_list,
       type_option,
       type_nativeint,
       type_int32,
       type_int64,
       type_lazy_t,
       type_extension_constructor,
       type_floatarray,
       path_int,
       path_char,
       path_string,
       path_bytes,
       path_float,
       path_bool,
       path_unit,
       path_exn,
       path_array,
       path_list,
       path_option,
       path_nativeint,
       path_int32,
       path_int64,
       path_lazy_t,
       path_extension_constructor,
       path_floatarray,
       path_match_failure,
       path_assert_failure,
       path_undefined_recursive_modul,
       ident_false,
       ident_true,
       ident_void,
       ident_nil,
       ident_cons,
       ident_none,
       ident_some,
       build_initial_env,
       builtin_values,
       builtin_idents$0,
       ident_division_by_zero,
       all_predef_exns];
   caml_register_global
    (1429, Dynlink_compilerlibs_Predef, "Dynlink_compilerlibs.Predef");
   function free_vars(opt, ty, cont){
    if(opt) var sth = opt[1], param = sth; else var param = 0;
    var ret = [0, Dynlink_compilerlibs_Btype[1][1]];
    function loop(ty, cont){
     function _Hs_(ty){
      return caml_cps_call2
              (Dynlink_compilerlibs_Btype[44],
               ty,
               function(_Ht_){
                return _Ht_
                        ? caml_cps_call2
                          (Dynlink_compilerlibs_Types[9],
                           ty,
                           function(match){
                            if(typeof match !== "number")
                             switch(match[0]){
                               case 0:
                                return caml_cps_call3
(Dynlink_compilerlibs_Btype[1][38],
 ty,
 ret[1],
 function(_Hz_){ret[1] = _Hz_; return cont(0);});
                               case 8:
                                var row = match[1];
                                return caml_cps_call3
(Dynlink_compilerlibs_Btype[28],
 loop,
 row,
 function(_Hu_){
  return caml_cps_call2
          (Dynlink_compilerlibs_Btype[18],
           row,
           function(_Hv_){
            var _Hw_ = 1 - _Hv_;
            return _Hw_
                    ? caml_cps_call2
                      (Dynlink_compilerlibs_Types[22],
                       row,
                       function(_Hx_){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[9],
                                 _Hx_,
                                 function(match){
                                  if(typeof match !== "number" && 0 === match[0] && param)
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Btype[1][38],
    ty,
    ret[1],
    function(_Hy_){ret[1] = _Hy_; return cont(0);});
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Types[22], row, _Hs_);
                                 });
                       })
                    : cont(_Hw_);
           });
 });
                             }
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Btype[26], loop, ty, cont);
                           })
                        : cont(_Ht_);
               });
     }
     return _Hs_(ty);
    }
    return caml_cps_exact_call2
            (loop,
             ty,
             function(_Hq_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Btype[47],
                       ty,
                       function(_Hr_){return cont(ret[1]);});
             });
   }
   function newgenconstr(path, tyl, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[7], [3, path, tyl, [0, 0]], cont);
   }
   function constructor_existentials(cd_args, cd_res, cont){
    function _Hm_(tyl){
     function _Hn_(existentials){return cont([0, tyl, existentials]);}
     if(! cd_res) return _Hn_(0);
     var type_ret = cd_res[1];
     return caml_cps_call2
             (Dynlink_compilerlibs_Btype[7],
              [2, tyl],
              function(_Ho_){
               return caml_cps_exact_call3
                       (free_vars,
                        0,
                        _Ho_,
                        function(arg_vars_set){
                         return caml_cps_exact_call3
                                 (free_vars,
                                  0,
                                  type_ret,
                                  function(res_vars){
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Btype[1][7],
    arg_vars_set,
    res_vars,
    function(_Hp_){
     return caml_cps_call2
             (Dynlink_compilerlibs_Btype[1][42], _Hp_, _Hn_);
    });
                                  });
                        });
              });
    }
    if(0 === cd_args[0]){var l = cd_args[1]; return _Hm_(l);}
    var l$0 = cd_args[1];
    return caml_cps_call3
            (Stdlib_List[19],
             function(l, cont){return cont(l[3]);},
             l$0,
             _Hm_);
   }
   function constructor_args
   (current_unit, priv, cd_args, cd_res, path, rep, cont){
    return caml_cps_exact_call3
            (constructor_existentials,
             cd_args,
             cd_res,
             function(match){
              var existentials = match[2], tyl = match[1];
              if(0 === cd_args[0]){
               var l = cd_args[1];
               return cont([0, existentials, l, 0]);
              }
              var lbls = cd_args[1];
              return caml_cps_call2
                      (Dynlink_compilerlibs_Btype[7],
                       [2, tyl],
                       function(_G$_){
                        return caml_cps_exact_call3
                                (free_vars,
                                 _hl_,
                                 _G$_,
                                 function(arg_vars_set){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Btype[1][42],
   arg_vars_set,
   function(type_params){
    return caml_cps_call2
            (Stdlib_List[1],
             type_params,
             function(arity){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[1][2],
                       current_unit,
                       function(_Ha_){
                        var
                         _Hb_ = 0,
                         _Hc_ = 0,
                         _Hd_ = 0,
                         _He_ = Dynlink_compilerlibs_Location[1],
                         _Hf_ = Dynlink_compilerlibs_Btype[39],
                         _Hg_ = 0;
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Types[42][7],
                                 arity,
                                 function(_Hh_){
                                  return caml_cps_call3
  (Dynlink_compilerlibs_Types[41][14],
   1,
   arity,
   function(_Hi_){
    var
     tdecl =
       [0,
        type_params,
        arity,
        [0, lbls, rep],
        priv,
        0,
        _Hi_,
        _Hh_,
        _Hg_,
        _Hf_,
        _He_,
        _Hd_,
        _Hc_,
        _Hb_,
        _Ha_],
     _Hj_ = [0, tdecl],
     _Hk_ = 0;
    return caml_cps_exact_call3
            (newgenconstr,
             path,
             type_params,
             function(_Hl_){
              return cont([0, existentials, [0, _Hl_, _Hk_], _Hj_]);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function extension_descr(current_unit, path_ext, ext, cont){
    var match = ext[4];
    function _G0_(ty_res){
     return caml_cps_exact_call7
             (constructor_args,
              current_unit,
              ext[5],
              ext[3],
              ext[4],
              path_ext,
              [2, path_ext],
              function(match){
               var
                cstr_inlined = match[3],
                cstr_args = match[2],
                existentials = match[1],
                _G1_ = ext[8],
                _G2_ = ext[7],
                _G3_ = ext[6],
                _G4_ = ext[5],
                _G5_ = 0 !== ext[4] ? 1 : 0,
                _G6_ = -1,
                _G7_ = -1,
                _G8_ = [2, path_ext, 0 === cstr_args ? 1 : 0];
               return caml_cps_call2
                       (Stdlib_List[1],
                        cstr_args,
                        function(_G9_){
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Path[11],
                                  path_ext,
                                  function(_G__){
                                   return cont
   ([0,
     _G__,
     ty_res,
     existentials,
     cstr_args,
     _G9_,
     _G8_,
     _G7_,
     _G6_,
     _G5_,
     _G4_,
     _G3_,
     _G2_,
     cstr_inlined,
     _G1_]);
                                  });
                        });
              });
    }
    if(! match)
     return caml_cps_exact_call3(newgenconstr, ext[1], ext[2], _G0_);
    var type_ret = match[1];
    return _G0_(type_ret);
   }
   var
    none$0 =
      caml_callback
       (Dynlink_compilerlibs_Types[14],
        [_hp_, -1, Dynlink_compilerlibs_Btype[6], -1]),
    dummy_label =
      [0,
       cst$95,
       none$0,
       none$0,
       0,
       -1,
       [0],
       0,
       1,
       Dynlink_compilerlibs_Location[1],
       0,
       Dynlink_compilerlibs_Shape[1][5]],
    Constr_not_found =
      [248, cst_Dynlink_compilerlibs_Datar, caml_fresh_oo_id(0)];
   function find_constr_by_tag(tag, cstrlist, cont){
    var num_const = 0, num_nonconst = 0, param = cstrlist;
    for(;;){
     if(! param){
      var
       raise = caml_pop_trap(),
       Constr_not_found$0 = caml_maybe_attach_backtrace(Constr_not_found, 1);
      return raise(Constr_not_found$0);
     }
     var c = param[1], _GZ_ = c[2];
     if(0 === _GZ_[0] && ! _GZ_[1]){
      var rem$0 = param[2];
      if(caml_equal(tag, [0, num_const])) return cont(c);
      var
       num_const$0 = num_const + 1 | 0,
       num_const = num_const$0,
       param = rem$0;
      continue;
     }
     var rem = param[2];
     if(! caml_equal(tag, [1, num_nonconst]) && 0 !== tag){
      var
       num_nonconst$0 = num_nonconst + 1 | 0,
       num_nonconst = num_nonconst$0,
       param = rem;
      continue;
     }
     return cont(c);
    }
   }
   function constructors_of_type(current_unit, ty_path, decl, cont){
    var match = decl[3];
    if(typeof match !== "number" && 1 === match[0]){
     var rep = match[2], cstrs = match[1];
     return caml_cps_exact_call3
             (newgenconstr,
              ty_path,
              decl[1],
              function(ty_res){
               var num_consts = [0, 0], num_nonconsts = [0, 0];
               return caml_cps_call3
                       (Stdlib_List[17],
                        function(param, cont){
                         var cd_args = param[2];
                         return caml_equal(cd_args, _hm_)
                                 ? (num_consts[1]++, cont(0))
                                 : (num_nonconsts[1]++, cont(0));
                        },
                        cstrs,
                        function(_GR_){
                         function describe_constructors
                         (idx_const, idx_nonconst, param, cont){
                          if(! param) return cont(0);
                          var
                           rem = param[2],
                           match = param[1],
                           cd_uid = match[6],
                           cd_attributes = match[5],
                           cd_loc = match[4],
                           cd_res = match[3],
                           cd_args = match[2],
                           cd_id = match[1];
                          if(cd_res)
                           var ty_res$0 = cd_res[1], ty_res$1 = ty_res$0;
                          else
                           var ty_res$1 = ty_res;
                          function _GS_(tag, descr_rem){
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Ident[15],
                                    cd_id,
                                    function(cstr_name){
                                     var representation = rep ? _hn_ : [1, idx_nonconst];
                                     return caml_cps_exact_call7
     (constructor_args,
      current_unit,
      decl[4],
      cd_args,
      cd_res,
      [1, ty_path, cstr_name],
      representation,
      function(match){
       var
        cstr_inlined = match[3],
        cstr_args = match[2],
        existentials = match[1],
        _GU_ = decl[4],
        _GV_ = 0 !== cd_res ? 1 : 0,
        _GW_ = num_nonconsts[1],
        _GX_ = num_consts[1];
       return caml_cps_call2
               (Stdlib_List[1],
                cstr_args,
                function(_GY_){
                 var
                  cstr =
                    [0,
                     cstr_name,
                     ty_res$1,
                     existentials,
                     cstr_args,
                     _GY_,
                     tag,
                     _GX_,
                     _GW_,
                     _GV_,
                     _GU_,
                     cd_loc,
                     cd_attributes,
                     cstr_inlined,
                     cd_uid];
                 return cont([0, [0, cd_id, cstr], descr_rem]);
                });
      });
                                    });
                          }
                          if(rep){
                           if(0 === rem) return _GS_(0, 0);
                           var raise = caml_pop_trap();
                           return raise
                                   (caml_maybe_attach_backtrace([0, Assert_failure, _ho_], 1));
                          }
                          if(0 === cd_args[0] && ! cd_args[1])
                           return caml_cps_exact_call4
                                   (describe_constructors,
                                    idx_const + 1 | 0,
                                    idx_nonconst,
                                    rem,
                                    function(_GT_){return _GS_([0, idx_const], _GT_);});
                          return caml_cps_exact_call4
                                  (describe_constructors,
                                   idx_const,
                                   idx_nonconst + 1 | 0,
                                   rem,
                                   function(descr_rem){
                                    var tag = [1, idx_nonconst];
                                    return _GS_(tag, descr_rem);
                                   });
                         }
                         return caml_cps_exact_call4
                                 (describe_constructors, 0, 0, cstrs, cont);
                        });
              });
    }
    return cont(0);
   }
   function labels_of_type(ty_path, decl, cont){
    var match = decl[3];
    if(typeof match !== "number" && 0 === match[0]){
     var repres = match[2], labels = match[1], priv = decl[4];
     return caml_cps_exact_call3
             (newgenconstr,
              ty_path,
              decl[1],
              function(ty_res){
               return caml_cps_call2
                       (Stdlib_List[1],
                        labels,
                        function(_GJ_){
                         var all_labels = caml_make_vect(_GJ_, dummy_label);
                         function describe_labels(num, param, cont){
                          if(! param) return cont(0);
                          var
                           rest = param[2],
                           l = param[1],
                           _GK_ = l[6],
                           _GL_ = l[5],
                           _GM_ = l[4],
                           _GN_ = l[2],
                           _GO_ = l[3];
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Ident[15],
                                   l[1],
                                   function(_GP_){
                                    var
                                     lbl =
                                       [0,
_GP_,
ty_res,
_GO_,
_GN_,
num,
all_labels,
repres,
priv,
_GM_,
_GL_,
_GK_];
                                    caml_check_bound(all_labels, num)[1 + num] = lbl;
                                    return caml_cps_exact_call3
    (describe_labels,
     num + 1 | 0,
     rest,
     function(_GQ_){return cont([0, [0, l[1], lbl], _GQ_]);});
                                   });
                         }
                         return caml_cps_exact_call3
                                 (describe_labels, 0, labels, cont);
                        });
              });
    }
    return cont(0);
   }
   var
    Dynlink_compilerlibs_Datarepr =
      [0,
       extension_descr,
       labels_of_type,
       constructors_of_type,
       Constr_not_found,
       find_constr_by_tag,
       constructor_existentials];
   caml_register_global
    (1430, Dynlink_compilerlibs_Datarepr, "Dynlink_compilerlibs.Datarepr");
   var Error$4 = [248, cst_Dynlink_compilerlibs_Cmi_f, caml_fresh_oo_id(0)];
   function input_cmi(ic, cont){
    return caml_cps_call2
            (Stdlib[89],
             ic,
             function(match){
              var sign = match[2], name = match[1];
              return caml_cps_call2
                      (Stdlib[89],
                       ic,
                       function(crcs){
                        return caml_cps_call2
                                (Stdlib[89],
                                 ic,
                                 function(flags){return cont([0, name, sign, crcs, flags]);});
                       });
             });
   }
   function read_cmi(filename, cont){
    return caml_cps_call2
            (Stdlib[80],
             filename,
             function(ic){
              caml_push_trap
               (function(exn){
                 if(exn !== Stdlib[12] && exn[1] !== Stdlib[7]){
                  if(exn[1] === Error$4){
                   var e = exn[2];
                   return caml_cps_call2
                           (Stdlib[93],
                            ic,
                            function(_GI_){
                             var raise = caml_pop_trap();
                             return raise
                                     (caml_maybe_attach_backtrace([0, Error$4, e], 1));
                            });
                  }
                  var
                   raise = caml_pop_trap(),
                   exn$0 = caml_maybe_attach_backtrace(exn, 0);
                  return raise(exn$0);
                 }
                 return caml_cps_call2
                         (Stdlib[93],
                          ic,
                          function(_GH_){
                           var raise = caml_pop_trap();
                           return raise
                                   (caml_maybe_attach_backtrace([0, Error$4, [2, filename]], 1));
                          });
                });
              return caml_cps_call3
                      (Stdlib[86],
                       ic,
                       caml_ml_string_length(Dynlink_compilerlibs_Config[24]),
                       function(buffer){
                        return caml_string_notequal
                                 (buffer, Dynlink_compilerlibs_Config[24])
                                ? caml_cps_call2
                                  (Stdlib[93],
                                   ic,
                                   function(_GD_){
                                    var
                                     pre_len =
                                       caml_ml_string_length(Dynlink_compilerlibs_Config[24]) - 3
                                       | 0;
                                    return caml_cps_call4
    (Stdlib_String[15],
     Dynlink_compilerlibs_Config[24],
     0,
     pre_len,
     function(_GE_){
      return caml_cps_call4
              (Stdlib_String[15],
               buffer,
               0,
               pre_len,
               function(_GF_){
                if(caml_string_equal(_GF_, _GE_)){
                 var
                  msg =
                    runtime.caml_string_lessthan
                      (buffer, Dynlink_compilerlibs_Config[24])
                     ? cst_an_older$0
                     : cst_a_newer$0,
                  raise = caml_pop_trap();
                 return raise
                         (caml_maybe_attach_backtrace
                           ([0, Error$4, [1, filename, msg]], 1));
                }
                var raise$0 = caml_pop_trap();
                return raise$0
                        (caml_maybe_attach_backtrace([0, Error$4, [0, filename]], 1));
               });
     });
                                   })
                                : caml_cps_exact_call2
                                  (input_cmi,
                                   ic,
                                   function(cmi){
                                    return caml_cps_call2
    (Stdlib[93],
     ic,
     function(_GG_){caml_pop_trap(); return cont(cmi);});
                                   });
                       });
             });
   }
   function output_cmi(filename, oc, cmi, cont){
    return caml_cps_call3
            (Stdlib[66],
             oc,
             Dynlink_compilerlibs_Config[24],
             function(_Gy_){
              return caml_cps_call3
                      (Stdlib[72],
                       oc,
                       [0, cmi[1], cmi[2]],
                       function(_Gz_){
                        return caml_cps_call2
                                (Stdlib[63],
                                 oc,
                                 function(_GA_){
                                  return caml_cps_call2
  (Stdlib_Digest[7],
   filename,
   function(crc){
    var crcs = [0, [0, cmi[1], [0, crc]], cmi[3]];
    return caml_cps_call3
            (Stdlib[72],
             oc,
             crcs,
             function(_GB_){
              return caml_cps_call3
                      (Stdlib[72], oc, cmi[4], function(_GC_){return cont(crc);});
             });
   });
                                 });
                       });
             });
   }
   function report_error$1(ppf, param, cont){
    switch(param[0]){
      case 0:
       var filename = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _hq_,
                Dynlink_compilerlibs_Location[21],
                filename,
                cont);
      case 1:
       var older_newer = param[2], filename$0 = param[1];
       return caml_cps_call6
               (Stdlib_Format[135],
                ppf,
                _hr_,
                Dynlink_compilerlibs_Location[21],
                filename$0,
                older_newer,
                cont);
      default:
       var filename$1 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _hs_,
                Dynlink_compilerlibs_Location[21],
                filename$1,
                cont);
    }
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$4) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Dynlink_compilerlibs_Location[50],
                report_error$1,
                err,
                function(_Gx_){return cont([0, _Gx_]);});
      }]);
   var
    Dynlink_compilerlibs_Cmi_forma =
      [0, output_cmi, input_cmi, read_cmi, Error$4, report_error$1];
   caml_register_global
    (1432, Dynlink_compilerlibs_Cmi_forma, "Dynlink_compilerlibs.Cmi_format");
   var
    _ht_ = Dynlink_compilerlibs_Misc[13][4],
    Consistbl =
      caml_callback
       (Dynlink_compilerlibs_Consistbl[1],
        [[0, _ht_[64], _ht_[65], _ht_[66], _ht_[9]]]),
    add_delayed_check_forward =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _hu_], 1));
       }],
    Error$5 = [248, cst_Dynlink_compilerlibs_Persi, caml_fresh_oo_id(0)];
   function error$0(err){
    throw caml_maybe_attach_backtrace([0, Error$5, err], 1);
   }
   var
    load =
      [0,
       function(unit_name, cont){
        caml_push_trap
         (function(_Gw_){
           if(_Gw_ === Stdlib[8]) return cont(0);
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_Gw_, 0));
          });
        return caml_cps_call3
                (Stdlib[28],
                 unit_name,
                 cst_cmi$0,
                 function(_Gu_){
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Load_path[10],
                           _Gu_,
                           function(filename){
                            caml_pop_trap();
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Cmi_forma[3],
                                     filename,
                                     function(_Gv_){return cont([0, [0, filename, _Gv_]]);});
                           });
                 });
       }],
    Persistent_signature = [0, load];
   function empty$3(param, cont){
    var _Gp_ = [0, 0];
    return caml_cps_call2
            (Consistbl[1],
             0,
             function(_Gq_){
              var
               _Gr_ = [0, Dynlink_compilerlibs_Misc[13][4][64][1]],
               _Gs_ = [0, Dynlink_compilerlibs_Misc[13][4][64][1]];
              return caml_cps_call3
                      (Stdlib_Hashtbl[1],
                       0,
                       17,
                       function(_Gt_){
                        return cont([0, _Gt_, _Gs_, _Gr_, _Gq_, _Gp_]);
                       });
             });
   }
   function clear$1(penv, cont){
    var
     can_load_cmis = penv[5],
     crc_units = penv[4],
     imported_opaque_units = penv[3],
     imported_units = penv[2],
     persistent_structures = penv[1];
    return caml_cps_call2
            (Stdlib_Hashtbl[2],
             persistent_structures,
             function(_Gn_){
              imported_units[1] = Dynlink_compilerlibs_Misc[13][4][64][1];
              imported_opaque_units[1] =
               Dynlink_compilerlibs_Misc[13][4][64][1];
              return caml_cps_call2
                      (Consistbl[2],
                       crc_units,
                       function(_Go_){can_load_cmis[1] = 0; return cont(0);});
             });
   }
   function clear_missing(param, cont){
    var persistent_structures = param[1];
    return caml_cps_call4
            (Stdlib_Hashtbl[14],
             function(name, r, acc, cont){
              return 0 === r ? cont([0, name, acc]) : cont(acc);
             },
             persistent_structures,
             0,
             function(missing_entries){
              return caml_cps_call2
                      (Stdlib_Hashtbl[10],
                       persistent_structures,
                       function(_Gm_){
                        return caml_cps_call3
                                (Stdlib_List[17], _Gm_, missing_entries, cont);
                       });
             });
   }
   function add_import(param, s, cont){
    var imported_units = param[2];
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][64][4],
             s,
             imported_units[1],
             function(_Gl_){imported_units[1] = _Gl_; return cont(0);});
   }
   function register_import_as_opaque(param, s, cont){
    var imported_opaque_units = param[3];
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][64][4],
             s,
             imported_opaque_units[1],
             function(_Gk_){imported_opaque_units[1] = _Gk_; return cont(0);});
   }
   function find_in_cache(param, s, cont){
    var persistent_structures = param[1];
    caml_push_trap
     (function(_Gj_){
       if(_Gj_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Gj_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             persistent_structures,
             s,
             function(val){
              caml_pop_trap();
              if(! val) return cont(0);
              var pm = val[2];
              return cont([0, pm]);
             });
   }
   function import_crcs(penv, source, crcs, cont){
    var crc_units = penv[4];
    function import_crc(param, cont){
     var crco = param[2], name = param[1];
     if(! crco) return cont(0);
     var crc = crco[1];
     return caml_cps_exact_call3
             (add_import,
              penv,
              name,
              function(_Gi_){
               return caml_cps_call5
                       (Consistbl[3], crc_units, name, crc, source, cont);
              });
    }
    return caml_cps_call3(Stdlib_List[17], import_crc, crcs, cont);
   }
   function can_load_cmis(penv, cont){return cont(penv[5][1]);}
   function set_can_load_cmis(penv, setting, cont){penv[5][1] = setting; return cont(0);
   }
   function without_cmis(penv, f, x, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Lazy_back[7],
             0,
             function(log){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[12],
                       [0, [0, penv[5], [0, log]], 0],
                       function(param, cont){return caml_cps_call2(f, x, cont);},
                       function(res){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Lazy_back[9],
                                 log,
                                 function(_Gh_){return cont(res);});
                       });
             });
   }
   function fold$2(param, f, x, cont){
    var persistent_structures = param[1];
    return caml_cps_call4
            (Stdlib_Hashtbl[14],
             function(modname, pso, x, cont){
              if(! pso) return cont(x);
              var pm = pso[2];
              return caml_cps_call4(f, modname, pm, x, cont);
             },
             persistent_structures,
             x,
             cont);
   }
   function acknowledge_pers_struct(penv, check, modname, pers_sig, pm, cont){
    var
     cmi = pers_sig[2],
     filename = pers_sig[1],
     name = cmi[1],
     crcs = cmi[3],
     flags = cmi[4],
     ps = [0, name, crcs, filename, flags];
    if(caml_string_notequal(ps[1], modname))
     error$0([0, modname, ps[1], filename]);
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              if(typeof param !== "number") return cont(0);
              if(param)
               return caml_cps_exact_call3
                       (register_import_as_opaque, penv, modname, cont);
              var _Gg_ = 1 - Dynlink_compilerlibs_Clflags[53][1];
              return _Gg_ ? cont(error$0([2, ps[1]])) : cont(_Gg_);
             },
             ps[4],
             function(_Gc_){
              function _Gd_(){
               var persistent_structures = penv[1];
               return caml_cps_call4
                       (Stdlib_Hashtbl[5],
                        persistent_structures,
                        modname,
                        [0, ps, pm],
                        function(_Gf_){return cont(ps);});
              }
              return check
                      ? (caml_push_trap
                         (function(exn){
                           if(exn[1] === Consistbl[10]){
                            var auth = exn[4], source = exn[3], name = exn[2];
                            error$0([1, name, auth, source]);
                            return _Gd_();
                           }
                           var
                            raise = caml_pop_trap(),
                            exn$0 = caml_maybe_attach_backtrace(exn, 0);
                           return raise(exn$0);
                          }),
                        caml_cps_exact_call4
                         (import_crcs,
                          penv,
                          ps[3],
                          ps[2],
                          function(_Ge_){caml_pop_trap(); return _Gd_();}))
                      : _Gd_();
             });
   }
   function find_pers_struct(penv, val_of_pers_sig, check, name, cont){
    var persistent_structures = penv[1];
    if(caml_string_equal(name, cst_predef)){
     var _F7_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_F7_, 1));
    }
    caml_push_trap
     (function(_F9_){
       if(_F9_ === Stdlib[8])
        return caml_cps_exact_call2
                (can_load_cmis,
                 penv,
                 function(match){
                  if(! match)
                   return caml_cps_call2
                           (Persistent_signature[1][1],
                            name,
                            function(match){
                             if(! match)
                              return caml_cps_call4
                                      (Stdlib_Hashtbl[5],
                                       persistent_structures,
                                       name,
                                       0,
                                       function(_Ga_){
var _Gb_ = Stdlib[8], raise = caml_pop_trap();
return raise(caml_maybe_attach_backtrace(_Gb_, 1));
                                       });
                             var psig = match[1];
                             return caml_cps_exact_call3
                                     (add_import,
                                      penv,
                                      name,
                                      function(_F$_){
                                       return caml_cps_call2
       (val_of_pers_sig,
        psig,
        function(pm){
         return caml_cps_exact_call6
                 (acknowledge_pers_struct,
                  penv,
                  check,
                  name,
                  psig,
                  pm,
                  function(ps){return cont([0, ps, pm]);});
        });
                                      });
                            });
                  var _F__ = Stdlib[8], raise = caml_pop_trap();
                  return raise(caml_maybe_attach_backtrace(_F__, 1));
                 });
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_F9_, 0));
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             persistent_structures,
             name,
             function(val){
              caml_pop_trap();
              if(val){var pm = val[2], ps = val[1]; return cont([0, ps, pm]);}
              var _F8_ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_F8_, 1));
             });
   }
   function read$0(penv, val_of_pers_sig, modname, filename, cont){
    var check = 1;
    return caml_cps_exact_call3
            (add_import,
             penv,
             modname,
             function(_F6_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Cmi_forma[3],
                       filename,
                       function(cmi){
                        var pers_sig = [0, filename, cmi];
                        return caml_cps_call2
                                (val_of_pers_sig,
                                 pers_sig,
                                 function(pm){
                                  return caml_cps_exact_call6
  (acknowledge_pers_struct,
   penv,
   check,
   modname,
   pers_sig,
   pm,
   function(ps){return cont(pm);});
                                 });
                       });
             });
   }
   function find$4(penv, f, name, cont){
    return caml_cps_exact_call5
            (find_pers_struct,
             penv,
             f,
             1,
             name,
             function(_F5_){return cont(_F5_[2]);});
   }
   function check$0(penv, f, loc, name, cont){
    var persistent_structures = penv[1];
    return caml_cps_call3
            (Stdlib_Hashtbl[9],
             persistent_structures,
             name,
             function(_FX_){
              var _FY_ = 1 - _FX_;
              function _FZ_(_F4_){return cont(_F4_);}
              return _FY_
                      ? caml_cps_exact_call3
                        (add_import,
                         penv,
                         name,
                         function(_F0_){
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Warnings[5],
                                   _hz_,
                                   function(_F1_){
                                    return _F1_
    ? caml_cps_call2
      (add_delayed_check_forward[1],
       function(param, cont){
        caml_push_trap
         (function(exn){
           if(exn === Stdlib[8]){
            var warn = [32, name, 0];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Location[37], loc, warn, cont);
           }
           if(exn[1] === Dynlink_compilerlibs_Cmi_forma[4]){
            var err = exn[2];
            return caml_cps_call4
                    (Stdlib_Format[139],
                     _hv_,
                     Dynlink_compilerlibs_Cmi_forma[5],
                     err,
                     function(msg){
                      var warn = [32, name, [0, msg]];
                      return caml_cps_call3
                              (Dynlink_compilerlibs_Location[37], loc, warn, cont);
                     });
           }
           if(exn[1] === Error$5){
            var
             err$0 = exn[2],
             _F3_ =
               function(msg){
                var warn = [32, name, [0, msg]];
                return caml_cps_call3
                        (Dynlink_compilerlibs_Location[37], loc, warn, cont);
               };
            switch(err$0[0]){
              case 0:
               var
                filename = err$0[3],
                ps_name = err$0[2],
                name$0 = err$0[1];
               return caml_cps_call6
                       (Stdlib_Format[139],
                        _hw_,
                        Dynlink_compilerlibs_Location[21],
                        filename,
                        ps_name,
                        name$0,
                        _F3_);
              case 1:
               var raise = caml_pop_trap();
               return raise
                       (caml_maybe_attach_backtrace([0, Assert_failure, _hx_], 1));
              default:
               var name$1 = err$0[1];
               return caml_cps_call3
                       (Stdlib_Format[138], _hy_, name$1, _F3_);
            }
           }
           var
            raise$0 = caml_pop_trap(),
            exn$0 = caml_maybe_attach_backtrace(exn, 0);
           return raise$0(exn$0);
          });
        return caml_cps_exact_call5
                (find_pers_struct,
                 penv,
                 f,
                 0,
                 name,
                 function(_F2_){caml_pop_trap(); return cont(0);});
       },
       cont)
    : _FZ_(_F1_);
                                   });
                         })
                      : _FZ_(_FY_);
             });
   }
   function crc_of_unit(penv, f, name, cont){
    return caml_cps_exact_call5
            (find_pers_struct,
             penv,
             f,
             1,
             name,
             function(match){
              var ps = match[1];
              caml_push_trap
               (function(_FW_){
                 if(_FW_ === Stdlib[8]){
                  var raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace([0, Assert_failure, _hA_], 1));
                 }
                 var raise$0 = caml_pop_trap();
                 return raise$0(caml_maybe_attach_backtrace(_FW_, 0));
                });
              return caml_cps_call3
                      (Stdlib_List[46],
                       name,
                       ps[2],
                       function(crco){
                        caml_pop_trap();
                        if(crco){var crc = crco[1]; return cont(crc);}
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace([0, Assert_failure, _hB_], 1));
                       });
             });
   }
   function imports(param, cont){
    var crc_units = param[4], imported_units = param[2];
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[13][4][64][23],
             imported_units[1],
             function(_FV_){
              return caml_cps_call3(Consistbl[7], _FV_, crc_units, cont);
             });
   }
   function looked_up(param, modname, cont){
    var persistent_structures = param[1];
    return caml_cps_call3
            (Stdlib_Hashtbl[9], persistent_structures, modname, cont);
   }
   function is_imported(param, s, cont){
    var imported_units = param[2];
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][64][3],
             s,
             imported_units[1],
             cont);
   }
   function is_imported_opaque(param, s, cont){
    var imported_opaque_units = param[3];
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][64][3],
             s,
             imported_opaque_units[1],
             cont);
   }
   function make_cmi(penv, modname, sign, alerts, cont){
    var
     _FR_ = [0, [0, [0, alerts], 0], 0],
     _FS_ = Dynlink_compilerlibs_Clflags[134][1] ? _hC_ : 0,
     _FT_ = [0, _FS_, _FR_],
     _FU_ = Dynlink_compilerlibs_Clflags[53][1] ? _hD_ : 0;
    return caml_cps_call2
            (Stdlib_List[13],
             [0, _FU_, _FT_],
             function(flags){
              return caml_cps_exact_call2
                      (imports,
                       penv,
                       function(crcs){
                        return cont([0, modname, sign, crcs, flags]);
                       });
             });
   }
   function save_cmi(penv, psig, pm, cont){
    var cmi = psig[2], filename = psig[1];
    return caml_cps_call4
            (Dynlink_compilerlibs_Misc[4],
             0,
             [0,
              function(param, cont){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Misc[17], filename, cont);
              }],
             function(param, cont){
              var flags = cmi[4], imports = cmi[3], modname = cmi[1];
              return caml_cps_call4
                      (Dynlink_compilerlibs_Misc[24],
                       _hE_,
                       filename,
                       function(temp_filename, oc, cont){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Cmi_forma[1],
                                 temp_filename,
                                 oc,
                                 cmi,
                                 cont);
                       },
                       function(crc){
                        var
                         ps =
                           [0,
                            modname,
                            [0, [0, cmi[1], [0, crc]], imports],
                            filename,
                            flags],
                         crc_units = penv[4],
                         persistent_structures = penv[1],
                         modname$0 = ps[1];
                        return caml_cps_call4
                                (Stdlib_Hashtbl[5],
                                 persistent_structures,
                                 modname$0,
                                 [0, ps, pm],
                                 function(_FO_){
                                  return caml_cps_call3
  (Stdlib_List[17],
   function(param, cont){
    return typeof param === "number"
            ? param
              ? caml_cps_exact_call3
                (register_import_as_opaque, penv, modname$0, cont)
              : cont(0)
            : cont(0);
   },
   ps[4],
   function(_FP_){
    return caml_cps_call5
            (Consistbl[5],
             crc_units,
             modname$0,
             crc,
             ps[3],
             function(_FQ_){
              return caml_cps_exact_call3
                      (add_import, penv, modname$0, cont);
             });
   });
                                 });
                       });
             },
             cont);
   }
   function report_error$2(ppf, cont){
    return cont
            (function(param, cont){
              switch(param[0]){
                case 0:
                 var
                  filename = param[3],
                  ps_name = param[2],
                  modname = param[1];
                 return caml_cps_call7
                         (Stdlib_Format[135],
                          ppf,
                          _hF_,
                          Dynlink_compilerlibs_Location[21],
                          filename,
                          ps_name,
                          modname,
                          cont);
                case 1:
                 var source2 = param[3], source1 = param[2], name = param[1];
                 return caml_cps_call8
                         (Stdlib_Format[135],
                          ppf,
                          _hG_,
                          Dynlink_compilerlibs_Location[21],
                          source1,
                          Dynlink_compilerlibs_Location[21],
                          source2,
                          name,
                          cont);
                default:
                 var import$0 = param[1];
                 return caml_cps_call5
                         (Stdlib_Format[135],
                          ppf,
                          _hH_,
                          import$0,
                          cst_The_compilation_flag_recty,
                          cont);
              }
             });
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$5) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Dynlink_compilerlibs_Location[50],
                report_error$2,
                err,
                function(_FN_){return cont([0, _FN_]);});
      }]);
   var
    Dynlink_compilerlibs_Persisten =
      [0,
       Consistbl,
       Error$5,
       report_error$2,
       Persistent_signature,
       empty$3,
       clear$1,
       clear_missing,
       fold$2,
       read$0,
       find$4,
       find_in_cache,
       check$0,
       looked_up,
       is_imported,
       is_imported_opaque,
       register_import_as_opaque,
       make_cmi,
       save_cmi,
       can_load_cmis,
       set_can_load_cmis,
       without_cmis,
       import_crcs,
       imports,
       crc_of_unit,
       add_delayed_check_forward];
   caml_register_global
    (1433,
     Dynlink_compilerlibs_Persisten,
     "Dynlink_compilerlibs.Persistent_env");
   var
    add_delayed_check_forward$0 =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _hI_], 1));
       }],
    value_declarations =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]),
    type_declarations =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]),
    module_declarations =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]),
    uid_to_loc =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]);
   function register_uid(uid, loc, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Shape[1][15][5],
             uid_to_loc[1],
             uid,
             loc,
             cont);
   }
   function get_uid_to_loc_tbl(param, cont){return cont(uid_to_loc[1]);}
   function add_constructor_usage(cu, usage){
    switch(usage){
      case 0:
       cu[1] = 1; return 0;
      case 1:
       cu[2] = 1; return 0;
      case 2:
       cu[3] = 1; return 0;
      default: cu[1] = 1; cu[2] = 1; cu[3] = 1; return 0;
    }
   }
   function constructor_usages(param){return [0, 0, 0, 0];}
   function constructor_usage_complaint(rebind, priv, cu){
    if(priv && ! rebind){
     var _FL_ = cu[2], _FM_ = cu[3];
     return cu[1] ? 0 : _FL_ ? _hK_ : _FM_ ? _hL_ : _hM_;
    }
    if(! cu[1] && ! cu[2] && ! cu[3]) return _hJ_;
    return 0;
   }
   var
    used_constructors =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]),
    used_labels =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Shape[1][15][1], 16]);
   function map_summary(f, param, cont){
    if(typeof param === "number") return cont(0);
    switch(param[0]){
      case 0:
       var d = param[3], id = param[2], s = param[1];
       return caml_cps_exact_call2
               (f, s, function(_FK_){return cont([0, _FK_, id, d]);});
      case 1:
       var d$0 = param[3], id$0 = param[2], s$0 = param[1];
       return caml_cps_exact_call2
               (f, s$0, function(_FJ_){return cont([1, _FJ_, id$0, d$0]);});
      case 2:
       var d$1 = param[3], id$1 = param[2], s$1 = param[1];
       return caml_cps_exact_call2
               (f, s$1, function(_FI_){return cont([2, _FI_, id$1, d$1]);});
      case 3:
       var d$2 = param[4], p = param[3], id$2 = param[2], s$2 = param[1];
       return caml_cps_exact_call2
               (f, s$2, function(_FH_){return cont([3, _FH_, id$2, p, d$2]);});
      case 4:
       var d$3 = param[3], id$3 = param[2], s$3 = param[1];
       return caml_cps_exact_call2
               (f, s$3, function(_FG_){return cont([4, _FG_, id$3, d$3]);});
      case 5:
       var d$4 = param[3], id$4 = param[2], s$4 = param[1];
       return caml_cps_exact_call2
               (f, s$4, function(_FF_){return cont([5, _FF_, id$4, d$4]);});
      case 6:
       var d$5 = param[3], id$5 = param[2], s$5 = param[1];
       return caml_cps_exact_call2
               (f, s$5, function(_FE_){return cont([6, _FE_, id$5, d$5]);});
      case 7:
       var p$0 = param[2], s$6 = param[1];
       return caml_cps_exact_call2
               (f, s$6, function(_FD_){return cont([7, _FD_, p$0]);});
      case 8:
       var id$6 = param[2], s$7 = param[1];
       return caml_cps_exact_call2
               (f, s$7, function(_FC_){return cont([8, _FC_, id$6]);});
      case 9:
       var m = param[2], s$8 = param[1];
       return caml_cps_exact_call2
               (f, s$8, function(_FB_){return cont([9, _FB_, m]);});
      case 10:
       var s$9 = param[1];
       return caml_cps_exact_call2
               (f, s$9, function(_FA_){return cont([10, _FA_]);});
      case 11:
       var id$7 = param[2], s$10 = param[1];
       return caml_cps_exact_call2
               (f, s$10, function(_Fz_){return cont([11, _Fz_, id$7]);});
      case 12:
       var r = param[3], u = param[2], s$11 = param[1];
       return caml_cps_exact_call2
               (f, s$11, function(_Fy_){return cont([12, _Fy_, u, r]);});
      default:
       var r$0 = param[3], u$0 = param[2], s$12 = param[1];
       return caml_cps_exact_call2
               (f, s$12, function(_Fx_){return cont([13, _Fx_, u$0, r$0]);});
    }
   }
   var empty$4 = [0, Dynlink_compilerlibs_Ident[27], 0];
   function add$7(id, x, tbl, cont){
    var _Fv_ = tbl[2];
    return caml_cps_call4
            (Dynlink_compilerlibs_Ident[28],
             id,
             x,
             tbl[1],
             function(_Fw_){return cont([0, _Fw_, _Fv_]);});
   }
   function find_same$0(id, tbl, cont){
    function _Fs_(tbl){
     caml_push_trap
      (function(exn){
        if(exn !== Stdlib[8]){
         var
          raise$0 = caml_pop_trap(),
          exn$1 = caml_maybe_attach_backtrace(exn, 0);
         return raise$0(exn$1);
        }
        var _Fu_ = tbl[2];
        if(_Fu_){
         var next = _Fu_[1][4];
         return caml_cps_exact_call1(_Fs_, next);
        }
        var
         raise = caml_pop_trap(),
         exn$0 = caml_maybe_attach_backtrace(exn, 0);
        return raise(exn$0);
       });
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[29],
              id,
              tbl[1],
              function(_Ft_){caml_pop_trap(); return cont(_Ft_);});
    }
    return _Fs_(tbl);
   }
   function nothing(param, cont){return cont(0);}
   function find_all$1(mark, name, tbl, cont){
    var _Fl_ = tbl[2];
    function _Fm_(rest){
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[31],
              name,
              tbl[1],
              function(_Fq_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(param, cont){
                         var desc = param[2];
                         return cont([0, desc, nothing]);
                        },
                        _Fq_,
                        function(_Fr_){
                         return caml_cps_call3(Stdlib[37], _Fr_, rest, cont);
                        });
              });
    }
    if(! _Fl_) return _Fm_(0);
    var
     match = _Fl_[1],
     next = match[4],
     using = match[3],
     components = match[1];
    return caml_cps_exact_call4
            (find_all$1,
             mark,
             name,
             next,
             function(rest){
              var using$0 = mark ? using : 0;
              caml_push_trap
               (function(_Fp_){
                 if(_Fp_ === Stdlib[8]) return _Fm_(rest);
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_Fp_, 0));
                });
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][28],
                       name,
                       components,
                       function(opened){
                        caml_pop_trap();
                        return caml_cps_call3
                                (Stdlib_List[19],
                                 function(desc, cont){
                                  if(using$0)
                                   var
                                    f = using$0[1],
                                    _Fo_ =
                                      function(param, cont){
                                       if(! rest) return caml_cps_call3(f, name, 0, cont);
                                       var hidden = rest[1][1];
                                       return caml_cps_call3(f, name, [0, [0, desc, hidden]], cont);
                                      };
                                  else
                                   var _Fo_ = nothing;
                                  return cont([0, desc, _Fo_]);
                                 },
                                 opened,
                                 function(_Fn_){
                                  return caml_cps_call3(Stdlib[37], _Fn_, rest, _Fm_);
                                 });
                       });
             });
   }
   var empty$5 = [0, Dynlink_compilerlibs_Ident[27], 0];
   function add$8(id, x, tbl, cont){
    var _Fj_ = tbl[2];
    return caml_cps_call4
            (Dynlink_compilerlibs_Ident[28],
             id,
             x,
             tbl[1],
             function(_Fk_){return cont([0, _Fk_, _Fj_]);});
   }
   function find_same$1(id, tbl, cont){
    function _Fg_(tbl){
     caml_push_trap
      (function(exn){
        if(exn !== Stdlib[8]){
         var
          raise$0 = caml_pop_trap(),
          exn$1 = caml_maybe_attach_backtrace(exn, 0);
         return raise$0(exn$1);
        }
        var match = tbl[2];
        if(typeof match === "number"){
         var
          raise = caml_pop_trap(),
          exn$0 = caml_maybe_attach_backtrace(exn, 0);
         return raise(exn$0);
        }
        if(0 === match[0]){
         var next = match[4];
         return caml_cps_exact_call1(_Fg_, next);
        }
        var next$0 = match[2], f = match[1];
        return caml_cps_exact_call3
                (find_same$1,
                 id,
                 next$0,
                 function(_Fi_){return caml_cps_call2(f, _Fi_, cont);});
       });
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[29],
              id,
              tbl[1],
              function(_Fh_){caml_pop_trap(); return cont(_Fh_);});
    }
    return _Fg_(tbl);
   }
   function find_name$0(wrap, mark, name, tbl, cont){
    function _E$_(tbl){
     caml_push_trap
      (function(exn){
        if(exn !== Stdlib[8]){
         var
          raise$0 = caml_pop_trap(),
          exn$1 = caml_maybe_attach_backtrace(exn, 0);
         return raise$0(exn$1);
        }
        var match = tbl[2];
        if(typeof match === "number"){
         var
          raise = caml_pop_trap(),
          exn$0 = caml_maybe_attach_backtrace(exn, 0);
         return raise(exn$0);
        }
        if(0 === match[0]){
         var
          next = match[4],
          using = match[3],
          components = match[2],
          root = match[1];
         caml_push_trap
          (function(_Ff_){
            if(_Ff_ === Stdlib[8]) return caml_cps_exact_call1(_E$_, next);
            var raise = caml_pop_trap();
            return raise(caml_maybe_attach_backtrace(_Ff_, 0));
           });
         return caml_cps_call3
                 (Dynlink_compilerlibs_Misc[13][4][65][28],
                  name,
                  components,
                  function(_Fb_){
                   var descr = wrap(_Fb_), res = [0, [1, root, name], descr];
                   function _Fc_(_Fe_){caml_pop_trap(); return cont(res);}
                   if(! mark) return _Fc_(0);
                   if(! using) return _Fc_(0);
                   var f = using[1];
                   caml_push_trap
                    (function(_Fd_){
                      if(_Fd_ === Stdlib[8])
                       return caml_cps_call3(f, name, 0, _Fc_);
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_Fd_, 0));
                     });
                   return caml_cps_exact_call5
                           (find_name$0,
                            wrap,
                            0,
                            name,
                            next,
                            function(val){
                             caml_pop_trap();
                             var descr$0 = val[2];
                             return caml_cps_call3
                                     (f, name, [0, [0, descr$0, descr]], _Fc_);
                            });
                  });
        }
        var next$0 = match[2], f = match[1];
        return caml_cps_exact_call5
                (find_name$0,
                 wrap,
                 mark,
                 name,
                 next$0,
                 function(match){
                  var desc = match[2], p = match[1];
                  return caml_cps_call2
                          (f, desc, function(_Fa_){return cont([0, p, _Fa_]);});
                 });
       });
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[30],
              name,
              tbl[1],
              function(match){
               var desc = match[2], id = match[1];
               caml_pop_trap();
               return cont([0, [0, id], desc]);
              });
    }
    return _E$_(tbl);
   }
   function find_all$2(wrap, name, tbl, cont){
    var match = tbl[2];
    function _E2_(_E8_){
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[31],
              name,
              tbl[1],
              function(_E9_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(param, cont){
                         var desc = param[2], id = param[1];
                         return cont([0, [0, id], desc]);
                        },
                        _E9_,
                        function(_E__){
                         return caml_cps_call3(Stdlib[37], _E__, _E8_, cont);
                        });
              });
    }
    if(typeof match === "number") return _E2_(0);
    if(0 === match[0]){
     var next = match[4], components = match[2], root = match[1];
     caml_push_trap
      (function(_E7_){
        if(_E7_ === Stdlib[8])
         return caml_cps_exact_call4(find_all$2, wrap, name, next, _E2_);
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_E7_, 0));
       });
     return caml_cps_call3
             (Dynlink_compilerlibs_Misc[13][4][65][28],
              name,
              components,
              function(_E5_){
               var desc = wrap(_E5_);
               return caml_cps_exact_call4
                       (find_all$2,
                        wrap,
                        name,
                        next,
                        function(_E6_){
                         caml_pop_trap();
                         return _E2_([0, [0, [1, root, name], desc], _E6_]);
                        });
              });
    }
    var next$0 = match[2], f = match[1];
    return caml_cps_exact_call4
            (find_all$2,
             wrap,
             name,
             next$0,
             function(_E3_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(param, cont){
                        var desc = param[2], p = param[1];
                        return caml_cps_call2
                                (f, desc, function(_E4_){return cont([0, p, _E4_]);});
                       },
                       _E3_,
                       _E2_);
             });
   }
   function fold_name$0(wrap, f, tbl, acc, cont){
    function _EX_(acc, tbl, f){
     return caml_cps_call4
             (Dynlink_compilerlibs_Ident[32],
              function(id, d, cont){
               var _E0_ = [0, [0, id], d];
               return caml_cps_call2
                       (Dynlink_compilerlibs_Ident[15],
                        id,
                        function(_E1_){return caml_cps_call3(f, _E1_, _E0_, cont);});
              },
              tbl[1],
              acc,
              function(acc){
               var match = tbl[2];
               if(typeof match === "number") return cont(acc);
               if(0 === match[0]){
                var next = match[4], components = match[2], root = match[1];
                return caml_cps_call3
                        (Dynlink_compilerlibs_Misc[13][4][65][13],
                         function(name, desc, cont){
                          return caml_cps_call3
                                  (f, name, [0, [1, root, name], wrap(desc)], cont);
                         },
                         components,
                         function(_EZ_){
                          return caml_cps_call2
                                  (_EZ_,
                                   acc,
                                   function(acc){
                                    return caml_cps_exact_call3(_EX_, acc, next, f);
                                   });
                         });
               }
               var next$0 = match[2], g = match[1];
               function f$0(name, param, cont){
                var desc = param[2], path = param[1];
                return caml_cps_call2
                        (g,
                         desc,
                         function(_EY_){
                          return caml_cps_call3(f, name, [0, path, _EY_], cont);
                         });
               }
               return caml_cps_exact_call3(_EX_, acc, next$0, f$0);
              });
    }
    return _EX_(acc, tbl, f);
   }
   function iter$5(wrap, f, tbl, cont){
    function _ER_(tbl, f){
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[34],
              function(id, desc, cont){
               return caml_cps_exact_call3(f, id, [0, [0, id], desc], cont);
              },
              tbl[1],
              function(_ES_){
               var match = tbl[2];
               if(typeof match === "number") return cont(0);
               if(0 === match[0]){
                var next = match[4], components = match[2], root = match[1];
                return caml_cps_call3
                        (Dynlink_compilerlibs_Misc[13][4][65][12],
                         function(s, x, cont){
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Path[5],
                                   root,
                                   function(root_scope){
                                    var _EV_ = [0, [1, root, s], wrap(x)];
                                    return caml_cps_call3
    (Dynlink_compilerlibs_Ident[10],
     root_scope,
     s,
     function(_EW_){
      return caml_cps_exact_call3(f, _EW_, _EV_, cont);
     });
                                   });
                         },
                         components,
                         function(_EU_){return caml_cps_exact_call2(_ER_, next, f);});
               }
               var next$0 = match[2], g = match[1];
               function f$0(id, param, cont){
                var desc = param[2], path = param[1];
                return caml_cps_call2
                        (g,
                         desc,
                         function(_ET_){
                          return caml_cps_exact_call3(f, id, [0, path, _ET_], cont);
                         });
               }
               return caml_cps_exact_call2(_ER_, next$0, f$0);
              });
    }
    return _ER_(tbl, f);
   }
   function diff_keys(tbl1, tbl2, cont){
    function _EN_(acc, tbl){
     return caml_cps_call4
             (Dynlink_compilerlibs_Ident[33],
              function(k, param, accu, cont){return cont([0, k, accu]);},
              tbl[1],
              acc,
              function(keys2){
               var _EO_ = tbl[2];
               return typeof _EO_ === "number"
                       ? caml_cps_call3
                         (Stdlib_List[41],
                          function(id, cont){
                           caml_push_trap
                            (function(_EQ_){
                              if(_EQ_ === Stdlib[8]) return cont(1);
                              var raise = caml_pop_trap();
                              return raise(caml_maybe_attach_backtrace(_EQ_, 0));
                             });
                           return caml_cps_exact_call3
                                   (find_same$1,
                                    id,
                                    tbl1,
                                    function(_EP_){caml_pop_trap(); return cont(0);});
                          },
                          keys2,
                          cont)
                       : 0
                         === _EO_[0]
                         ? caml_cps_exact_call2(_EN_, keys2, _EO_[4])
                         : caml_cps_exact_call2(_EN_, keys2, _EO_[2]);
              });
    }
    return _EN_(0, tbl2);
   }
   var
    empty_structure =
      [0,
       [0,
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1],
        Dynlink_compilerlibs_Misc[13][4][65][1]]],
    Error$6 = [248, cst_Dynlink_compilerlibs_Env_E, caml_fresh_oo_id(0)];
   function error$1(err){
    throw caml_maybe_attach_backtrace([0, Error$6, err], 1);
   }
   function lookup_error(loc, env, err, cont){return cont(error$1([2, loc, env, err]));
   }
   var
    same_constr =
      [0,
       function(param, _EM_, _EL_, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _hV_], 1));
       }],
    check_well_formed_module =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _hW_], 1));
       }],
    empty$6 =
      [0,
       empty$5,
       empty$4,
       empty$4,
       empty$5,
       empty$5,
       empty$5,
       empty$5,
       empty$5,
       Dynlink_compilerlibs_Ident[27],
       0,
       Dynlink_compilerlibs_Path[15][1],
       0],
    in_signature_flag = 1;
   function in_signature(b, env, cont){
    function _EJ_(flags){
     return cont
             ([0,
               env[1],
               env[2],
               env[3],
               env[4],
               env[5],
               env[6],
               env[7],
               env[8],
               env[9],
               env[10],
               env[11],
               flags]);
    }
    return b
            ? _EJ_(env[12] | 1)
            : caml_cps_call2
              (Stdlib[21],
               in_signature_flag,
               function(_EK_){return _EJ_(env[12] & _EK_);});
   }
   function is_in_signature(env, cont){
    return cont(0 !== (env[12] & 1) ? 1 : 0);
   }
   function has_local_constraints(env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Path[15][2],
             env[11],
             function(_EI_){return cont(1 - _EI_);});
   }
   function is_ext(cda, cont){
    var _EH_ = cda[1][6];
    if(typeof _EH_ !== "number" && 2 === _EH_[0]) return cont(1);
    return cont(0);
   }
   function diff$0(env1, env2, cont){
    return caml_cps_exact_call3
            (diff_keys,
             env1[7],
             env2[7],
             function(_Ex_){
              return caml_cps_exact_call3
                      (diff_keys,
                       env1[5],
                       env2[5],
                       function(_Ey_){
                        return caml_cps_call3
                                (Stdlib[37],
                                 _Ey_,
                                 _Ex_,
                                 function(_Ez_){
                                  var tbl2 = env2[2], tbl1 = env1[2];
                                  function _EA_(acc, tbl){
                                   return caml_cps_call4
   (Dynlink_compilerlibs_Ident[33],
    function(k, param, accu, cont){return cont([0, k, accu]);},
    tbl[1],
    acc,
    function(keys2){
     var match = tbl[2];
     if(! match)
      return caml_cps_call3
              (Stdlib_List[41],
               function(id, cont){
                return caml_cps_exact_call3
                        (find_same$0,
                         id,
                         tbl2,
                         function(cda){
                          var match = cda[1][6];
                          a:
                          {
                           if(typeof match !== "number" && 2 === match[0]){
                            var p = match[1];
                            if(0 === p[0]){var _EE_ = 1; break a;}
                            var _EE_ = 0;
                            break a;
                           }
                           var _EE_ = 0;
                          }
                          return _EE_
                                  ? (caml_push_trap
                                     (function(_EF_){
                                       if(_EF_ === Stdlib[8]) return cont(1);
                                       var raise = caml_pop_trap();
                                       return raise(caml_maybe_attach_backtrace(_EF_, 0));
                                      }),
                                    caml_cps_exact_call3
                                     (find_same$0,
                                      id,
                                      tbl1,
                                      function(_EG_){caml_pop_trap(); return cont(0);}))
                                  : cont(_EE_);
                         });
               },
               keys2,
               function(_EB_){
                return caml_cps_call3
                        (Stdlib[37],
                         _EB_,
                         _Ez_,
                         function(_EC_){
                          return caml_cps_exact_call3
                                  (diff_keys,
                                   env1[1],
                                   env2[1],
                                   function(_ED_){
                                    return caml_cps_call3(Stdlib[37], _ED_, _EC_, cont);
                                   });
                         });
               });
     var o = match[1], tbl$0 = o[4];
     return caml_cps_exact_call2(_EA_, keys2, tbl$0);
    });
                                  }
                                  return _EA_(0, tbl2);
                                 });
                       });
             });
   }
   function wrap_identity(x){return x;}
   function wrap_value(vda){return [0, vda];}
   function wrap_module(mda){return [0, mda];}
   var
    components_of_module_maker =
      [0,
       function(param, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _h5_], 1));
       }],
    components_of_functor_appl =
      [0,
       function(param, _Ew_, _Ev_, _Eu_, env, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _h6_], 1));
       }],
    check_functor_application =
      [0,
       function(param, _Et_, _Es_, _Er_, _Eq_, _Ep_, _Eo_, _En_, env, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _h7_], 1));
       }],
    strengthen =
      [0,
       function(param, env, mty, path, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _h8_], 1));
       }];
   function md(md_type){
    return [0,
            md_type,
            0,
            Dynlink_compilerlibs_Location[1],
            Dynlink_compilerlibs_Shape[1][5]];
   }
   function print_address(ppf, param, cont){
    if(0 === param[0]){
     var id = param[1];
     return caml_cps_call2
             (Dynlink_compilerlibs_Ident[15],
              id,
              function(_Em_){
               return caml_cps_call4
                       (Stdlib_Format[135], ppf, _h9_, _Em_, cont);
              });
    }
    var pos = param[2], a = param[1];
    return caml_cps_call6
            (Stdlib_Format[135], ppf, _h__, print_address, a, pos, cont);
   }
   var current_unit = [0, cst$96];
   function get_unit_name(param, cont){return cont(current_unit[1]);}
   function set_unit_name(name, cont){current_unit[1] = name; return cont(0);}
   function is(name){return caml_string_equal(current_unit[1], name);}
   function is_ident(id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[18],
             id,
             function(_Ek_){
              return _Ek_
                      ? caml_cps_call2
                        (Dynlink_compilerlibs_Ident[15],
                         id,
                         function(_El_){return cont(is(_El_));})
                      : cont(_Ek_);
             });
   }
   function add_persistent_structure(id, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[18],
             id,
             function(_Ea_){
              function _Eb_(_Ec_){
               return caml_cps_exact_call2
                       (is_ident,
                        id,
                        function(_Ed_){
                         if(_Ed_) return cont(env);
                         function _Eg_(material){
                          var summary = material ? [11, env[10], id] : env[10];
                          function _Ej_(modules){
                           return cont
                                   ([0,
                                     env[1],
                                     env[2],
                                     env[3],
                                     env[4],
                                     modules,
                                     env[6],
                                     env[7],
                                     env[8],
                                     env[9],
                                     summary,
                                     env[11],
                                     env[12]]);
                          }
                          if(! material && Dynlink_compilerlibs_Clflags[65][1])
                           return _Ej_(env[5]);
                          return caml_cps_exact_call4(add$8, id, 0, env[5], _Ej_);
                         }
                         function _Ef_(){return _Eg_(0);}
                         caml_push_trap
                          (function(_Ei_){
                            if(_Ei_ === Stdlib[8]) return _Ef_();
                            var raise = caml_pop_trap();
                            return raise(caml_maybe_attach_backtrace(_Ei_, 0));
                           });
                         var _Ee_ = env[5];
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Ident[15],
                                  id,
                                  function(_Eh_){
                                   return caml_cps_exact_call5
   (find_name$0,
    wrap_module,
    0,
    _Eh_,
    _Ee_,
    function(val){
     caml_pop_trap();
     return typeof val[2] === "number" ? _Ef_() : _Eg_(1);
    });
                                  });
                        });
              }
              return 1 - _Ea_
                      ? caml_cps_call2
                        (Stdlib[1], cst_Env_add_persistent_structu, _Eb_)
                      : _Eb_(0);
             });
   }
   function components_of_module
   (alerts, uid, env, ps, path, addr, mty, shape, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Lazy_back[2],
             [0, env, ps, path, addr, mty, shape],
             function(_D$_){return cont([0, alerts, uid, _D$_]);});
   }
   function sign_of_cmi(freshen, param, cont){
    var cmi = param[2], name = cmi[1], sign = cmi[2], flags = cmi[4];
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[12],
             name,
             function(id){
              var path = [0, id];
              return caml_cps_call4
                      (Stdlib_List[25],
                       function(acc, param, cont){
                        if(typeof param === "number") return cont(acc);
                        var s = param[1];
                        return cont(s);
                       },
                       Dynlink_compilerlibs_Misc[13][4][65][1],
                       flags,
                       function(alerts){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[1][3],
                                 id,
                                 function(_D6_){
                                  var
                                   md =
                                     [0, [1, sign], 0, Dynlink_compilerlibs_Location[1], _D6_];
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Lazy_back[5],
   [0, id],
   function(mda_address){
    return caml_cps_call2
            (Dynlink_compilerlibs_Subst[29][1],
             md,
             function(_D7_){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Subst[29][7],
                       1,
                       Dynlink_compilerlibs_Subst[1],
                       _D7_,
                       function(mda_declaration){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[14],
                                 name,
                                 function(mda_shape){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Subst[29][2],
   [1, sign],
   function(mty){
    function _D9_(mty){
     return caml_cps_exact_call9
             (components_of_module,
              alerts,
              md[4],
              empty$6,
              Dynlink_compilerlibs_Subst[1],
              path,
              mda_address,
              mty,
              mda_shape,
              function(mda_components){
               return cont
                       ([0,
                         mda_declaration,
                         mda_components,
                         mda_address,
                         mda_shape]);
              });
    }
    if(! freshen) return _D9_(mty);
    var _D8_ = Dynlink_compilerlibs_Subst[1];
    return caml_cps_call2
            (Dynlink_compilerlibs_Path[5],
             path,
             function(_D__){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Subst[29][8],
                       [0, _D__],
                       _D8_,
                       mty,
                       _D9_);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   var _h$_ = 1;
   function read_sign_of_cmi(_D5_, cont){
    return caml_cps_exact_call3(sign_of_cmi, _h$_, _D5_, cont);
   }
   var
    persistent_env =
      caml_callback
       (Dynlink_compilerlibs_Local_sto[2],
        [Dynlink_compilerlibs_Persisten[5], 0]);
   function without_cmis$0(f, x, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Persisten[21],
             persistent_env[1],
             f,
             x,
             cont);
   }
   function imports$0(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Persisten[23], persistent_env[1], cont);
   }
   function import_crcs$0(source, crcs, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Persisten[22],
             persistent_env[1],
             source,
             crcs,
             cont);
   }
   function find_pers_mod(name, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Persisten[10],
             persistent_env[1],
             read_sign_of_cmi,
             name,
             cont);
   }
   function crc_of_unit$0(name, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Persisten[24],
             persistent_env[1],
             read_sign_of_cmi,
             name,
             cont);
   }
   function is_imported_opaque$0(modname, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Persisten[15],
             persistent_env[1],
             modname,
             cont);
   }
   function register_import_as_opaque$0(modname, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Persisten[16],
             persistent_env[1],
             modname,
             cont);
   }
   function reset_declaration_caches(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Shape[1][15][2],
             value_declarations[1],
             function(_DZ_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[1][15][2],
                       type_declarations[1],
                       function(_D0_){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[1][15][2],
                                 module_declarations[1],
                                 function(_D1_){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Shape[1][15][2],
   used_constructors[1],
   function(_D2_){
    return caml_cps_call2
            (Dynlink_compilerlibs_Shape[1][15][2],
             used_labels[1],
             function(_D3_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[1][15][2],
                       uid_to_loc[1],
                       function(_D4_){return cont(undef);});
             });
   });
                                 });
                       });
             });
   }
   function reset_cache(param, cont){
    return caml_cps_exact_call2
            (set_unit_name,
             cst$97,
             function(_DW_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Persisten[6],
                       persistent_env[1],
                       function(_DX_){
                        return caml_cps_exact_call2
                                (reset_declaration_caches,
                                 undef,
                                 function(_DY_){return cont(0);});
                       });
             });
   }
   function reset_cache_toplevel(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Persisten[7],
             persistent_env[1],
             function(_DU_){
              return caml_cps_exact_call2
                      (reset_declaration_caches,
                       undef,
                       function(_DV_){return cont(0);});
             });
   }
   function get_components_res(c, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Persisten[19],
             persistent_env[1],
             function(match){
              if(! match)
               return caml_cps_call3
                       (Dynlink_compilerlibs_Lazy_back[1],
                        components_of_module_maker[1],
                        c[3],
                        cont);
              var log = match[1];
              return caml_cps_call4
                      (Dynlink_compilerlibs_Lazy_back[8],
                       log,
                       components_of_module_maker[1],
                       c[3],
                       cont);
             });
   }
   function get_components(c, cont){
    return caml_cps_exact_call2
            (get_components_res,
             c,
             function(match){
              if(0 !== match[0]) return cont(empty_structure);
              var c = match[1];
              return cont(c);
             });
   }
   function modtype_of_functor_appl(fcomp, p1, p2, cont){
    var mty = fcomp[2];
    return 3 === mty[0]
            ? cont(mty)
            : (caml_push_trap
               (function(_DP_){
                 if(_DP_ === Stdlib[8])
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Path[5],
                           [2, p1, p2],
                           function(scope){
                            var _DQ_ = fcomp[1];
                            function _DR_(subst){
                             return caml_cps_call4
                                     (Dynlink_compilerlibs_Subst[22],
                                      [0, scope],
                                      subst,
                                      mty,
                                      function(mty){
                                       return caml_cps_call4
       (Stdlib_Hashtbl[5],
        fcomp[5],
        p2,
        mty,
        function(_DS_){return cont(mty);});
                                      });
                            }
                            if(_DQ_){
                             var match = _DQ_[1];
                             if(match)
                              return caml_cps_call4
                                      (Dynlink_compilerlibs_Subst[5],
                                       match[1],
                                       p2,
                                       Dynlink_compilerlibs_Subst[1],
                                       _DR_);
                            }
                            return _DR_(Dynlink_compilerlibs_Subst[1]);
                           });
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_DP_, 0));
                }),
              caml_cps_call3
               (Stdlib_Hashtbl[6],
                fcomp[5],
                p2,
                function(_DT_){caml_pop_trap(); return cont(_DT_);}));
   }
   function find_ident_module(id, env, cont){
    var tbl = env[5];
    function _DJ_(match){
     if(typeof match === "number")
      return caml_cps_call2
              (Dynlink_compilerlibs_Ident[15],
               id,
               function(_DO_){
                return caml_cps_exact_call2(find_pers_mod, _DO_, cont);
               });
     if(0 === match[0]){var data = match[1]; return cont(data);}
     var _DN_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_DN_, 1));
    }
    caml_push_trap
     (function(exn){
       function _DK_(){
        var
         raise = caml_pop_trap(),
         exn$0 = caml_maybe_attach_backtrace(exn, 0);
        return raise(exn$0);
       }
       return exn === Stdlib[8]
               ? caml_cps_call2
                 (Dynlink_compilerlibs_Ident[18],
                  id,
                  function(_DL_){
                   return _DL_
                           ? caml_cps_exact_call2
                             (is_ident,
                              id,
                              function(_DM_){return _DM_ ? _DK_() : _DJ_(0);})
                           : _DK_();
                  })
               : _DK_();
      });
    return caml_cps_exact_call3
            (find_same$1,
             id,
             tbl,
             function(x){caml_pop_trap(); return _DJ_(x);});
   }
   function find_module_components(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_ident_module,
                id,
                env,
                function(_DI_){return cont(_DI_[2]);});
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          sc[5],
                          function(_DH_){return cont(_DH_[2]);});
                });
      default:
       var arg = path[2], f_path = path[1];
       return caml_cps_exact_call3
               (find_functor_components,
                f_path,
                env,
                function(f_comp){
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Location[3],
                          Dynlink_compilerlibs_Location[13][1],
                          function(loc){
                           return caml_cps_call6
                                   (components_of_functor_appl[1],
                                    loc,
                                    f_path,
                                    f_comp,
                                    arg,
                                    env,
                                    cont);
                          });
                });
    }
   }
   function find_structure_components(path, env, cont){
    return caml_cps_exact_call3
            (find_module_components,
             path,
             env,
             function(_DF_){
              return caml_cps_exact_call2
                      (get_components,
                       _DF_,
                       function(match){
                        if(0 === match[0]){var c = match[1]; return cont(c);}
                        var _DG_ = Stdlib[8], raise = caml_pop_trap();
                        return raise(caml_maybe_attach_backtrace(_DG_, 1));
                       });
             });
   }
   function find_functor_components(path, env, cont){
    return caml_cps_exact_call3
            (find_module_components,
             path,
             env,
             function(_DD_){
              return caml_cps_exact_call2
                      (get_components,
                       _DD_,
                       function(match){
                        if(0 === match[0]){
                         var _DE_ = Stdlib[8], raise = caml_pop_trap();
                         return raise(caml_maybe_attach_backtrace(_DE_, 1));
                        }
                        var f = match[1];
                        return cont(f);
                       });
             });
   }
   function find_module_lazy(alias, path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_ident_module,
                id,
                env,
                function(data){return cont(data[1]);});
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          sc[5],
                          function(data){return cont(data[1]);});
                });
      default:
       var p2 = path[2], p1 = path[1];
       return caml_cps_exact_call3
               (find_functor_components,
                p1,
                env,
                function(fc){
                 function _DB_(md){
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Subst[29][1], md, cont);
                 }
                 return alias
                         ? _DB_(md(fc[2]))
                         : caml_cps_exact_call4
                           (modtype_of_functor_appl,
                            fc,
                            p1,
                            p2,
                            function(_DC_){return _DB_(md(_DC_));});
                });
    }
   }
   function find_strengthened_module(aliasable, path, env, cont){
    return caml_cps_exact_call4
            (find_module_lazy,
             1,
             path,
             env,
             function(md){
              return caml_cps_call5
                      (strengthen[1],
                       aliasable,
                       env,
                       md[1],
                       path,
                       function(mty){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Subst[29][13], mty, cont);
                       });
             });
   }
   function find_value_full(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_same$1,
                id,
                env[1],
                function(match){
                 if(0 === match[0]){var data = match[1]; return cont(data);}
                 var _DA_ = Stdlib[8], raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_DA_, 1));
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28], s, sc[1], cont);
                });
      default:
       var _Dz_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Dz_, 1));
    }
   }
   function find_type_full(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3(find_same$1, id, env[4], cont);
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28], s, sc[4], cont);
                });
      default:
       var _Dy_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Dy_, 1));
    }
   }
   function find_modtype_lazy(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_same$1,
                id,
                env[6],
                function(_Dx_){return cont(_Dx_[1]);});
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          sc[6],
                          function(_Dw_){return cont(_Dw_[1]);});
                });
      default:
       var _Dv_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Dv_, 1));
    }
   }
   function find_modtype(path, env, cont){
    return caml_cps_exact_call3
            (find_modtype_lazy,
             path,
             env,
             function(_Du_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[29][14], _Du_, cont);
             });
   }
   function find_class_full(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3(find_same$1, id, env[7], cont);
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28], s, sc[7], cont);
                });
      default:
       var _Dt_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Dt_, 1));
    }
   }
   function find_cltype(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_same$1,
                id,
                env[8],
                function(_Ds_){return cont(_Ds_[1]);});
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          sc[8],
                          function(_Dr_){return cont(_Dr_[1]);});
                });
      default:
       var _Dq_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Dq_, 1));
    }
   }
   function find_value(path, env, cont){
    return caml_cps_exact_call3
            (find_value_full,
             path,
             env,
             function(_Dp_){return cont(_Dp_[1]);});
   }
   function find_class(path, env, cont){
    return caml_cps_exact_call3
            (find_class_full,
             path,
             env,
             function(_Do_){return cont(_Do_[1]);});
   }
   function find_ident_constructor(id, env, cont){
    return caml_cps_exact_call3
            (find_same$0, id, env[2], function(_Dn_){return cont(_Dn_[1]);});
   }
   function find_ident_label(id, env, cont){
    return caml_cps_exact_call3(find_same$0, id, env[3], cont);
   }
   function type_of_cstr(path, param, cont){
    var match = param[13];
    if(match){
     var decl = match[1];
     return caml_cps_call3
             (Dynlink_compilerlibs_Datarepr[2],
              path,
              decl,
              function(_Dk_){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(_Dm_, cont){return cont(_Dm_[2]);},
                        _Dk_,
                        function(labels){
                         var match = decl[3];
                         if(typeof match !== "number" && 0 === match[0]){
                          var repr = match[2];
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Shape[12],
                                   decl[14],
                                   function(_Dl_){return cont([0, decl, [0, labels, repr]]);});
                         }
                         var raise = caml_pop_trap();
                         return raise
                                 (caml_maybe_attach_backtrace([0, Assert_failure, _ib_], 1));
                        });
              });
    }
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Assert_failure, _ic_], 1));
   }
   function find_type_data(path, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Path[13],
             path,
             function(match){
              switch(match[0]){
                case 0:
                 var p = match[1];
                 caml_push_trap
                  (function(_Dj_){
                    if(_Dj_ === Stdlib[8])
                     return caml_cps_exact_call3(find_type_full, p, env, cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_Dj_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Path[15][28],
                          p,
                          env[11],
                          function(decl){
                           caml_pop_trap();
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Shape[12],
                                    decl[14],
                                    function(_Di_){return cont([0, decl, 0]);});
                          });
                case 1:
                 var s = match[2], mod_path = match[1];
                 caml_push_trap
                  (function(_Dh_){
                    if(_Dh_ === Stdlib[8]){
                     var raise = caml_pop_trap();
                     return raise
                             (caml_maybe_attach_backtrace([0, Assert_failure, _id_], 1));
                    }
                    var raise$0 = caml_pop_trap();
                    return raise$0(caml_maybe_attach_backtrace(_Dh_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_structure_components,
                          mod_path,
                          env,
                          function(comps){
                           caml_pop_trap();
                           caml_push_trap
                            (function(_Dg_){
                              if(_Dg_ === Stdlib[8]){
                               var raise = caml_pop_trap();
                               return raise
                                       (caml_maybe_attach_backtrace([0, Assert_failure, _ie_], 1));
                              }
                              var raise$0 = caml_pop_trap();
                              return raise$0(caml_maybe_attach_backtrace(_Dg_, 0));
                             });
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Misc[13][4][65][28],
                                    s,
                                    comps[2],
                                    function(cstrs){
                                     caml_pop_trap();
                                     return caml_cps_call3
     (Stdlib_List[41],
      is_ext,
      cstrs,
      function(exts){
       if(exts && ! exts[2]){
        var cda = exts[1];
        return caml_cps_exact_call3
                (type_of_cstr, path, cda[1], cont);
       }
       var raise = caml_pop_trap();
       return raise
               (caml_maybe_attach_backtrace([0, Assert_failure, _if_], 1));
      });
                                    });
                          });
                case 2:
                 var id = match[1];
                 caml_push_trap
                  (function(_Df_){
                    if(_Df_ === Stdlib[8]){
                     var raise = caml_pop_trap();
                     return raise
                             (caml_maybe_attach_backtrace([0, Assert_failure, _ig_], 1));
                    }
                    var raise$0 = caml_pop_trap();
                    return raise$0(caml_maybe_attach_backtrace(_Df_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_same$0,
                          id,
                          env[2],
                          function(_De_){
                           var cstr = _De_[1];
                           caml_pop_trap();
                           return caml_cps_exact_call3(type_of_cstr, path, cstr, cont);
                          });
                default:
                 var s$0 = match[2], ty_path = match[1];
                 caml_push_trap
                  (function(_Dd_){
                    if(_Dd_ === Stdlib[8]){
                     var raise = caml_pop_trap();
                     return raise
                             (caml_maybe_attach_backtrace([0, Assert_failure, _ih_], 1));
                    }
                    var raise$0 = caml_pop_trap();
                    return raise$0(caml_maybe_attach_backtrace(_Dd_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_type_full,
                          ty_path,
                          env,
                          function(tda){
                           caml_pop_trap();
                           var match = tda[2];
                           if(typeof match !== "number" && 1 === match[0]){
                            var cstrs = match[1];
                            caml_push_trap
                             (function(_Dc_){
                               if(_Dc_ === Stdlib[8]){
                                var raise = caml_pop_trap();
                                return raise
(caml_maybe_attach_backtrace([0, Assert_failure, _ij_], 1));
                               }
                               var raise$0 = caml_pop_trap();
                               return raise$0(caml_maybe_attach_backtrace(_Dc_, 0));
                              });
                            return caml_cps_call3
                                    (Stdlib_List[38],
                                     function(cstr, cont){
                                      return cont(caml_string_equal(cstr[1], s$0));
                                     },
                                     cstrs,
                                     function(cstr){
                                      caml_pop_trap();
                                      return caml_cps_exact_call3(type_of_cstr, path, cstr, cont);
                                     });
                           }
                           var raise = caml_pop_trap();
                           return raise
                                   (caml_maybe_attach_backtrace([0, Assert_failure, _ii_], 1));
                          });
              }
             });
   }
   function find_type(p, env, cont){
    return caml_cps_exact_call3
            (find_type_data, p, env, function(_Db_){return cont(_Db_[1]);});
   }
   function find_type_descrs(p, env, cont){
    return caml_cps_exact_call3
            (find_type_data, p, env, function(_Da_){return cont(_Da_[2]);});
   }
   function find_module_address(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_ident_module,
                id,
                env,
                function(_C$_){
                 return caml_cps_exact_call2(get_address, _C$_[3], cont);
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(c){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          c[5],
                          function(_C__){
                           return caml_cps_exact_call2(get_address, _C__[3], cont);
                          });
                });
      default:
       var _C9_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_C9_, 1));
    }
   }
   function force_address(param, cont){
    if(0 === param[0]){
     var pos = param[2], parent = param[1];
     return caml_cps_exact_call2
             (get_address,
              parent,
              function(_C8_){return cont([1, _C8_, pos]);});
    }
    var path = param[2], env = param[1];
    return caml_cps_exact_call3(find_module_address, path, env, cont);
   }
   function get_address(a, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Lazy_back[1], force_address, a, cont);
   }
   function find_value_address(path, env, cont){
    return caml_cps_exact_call3
            (find_value_full,
             path,
             env,
             function(_C7_){
              return caml_cps_exact_call2(get_address, _C7_[2], cont);
             });
   }
   function find_class_address(path, env, cont){
    return caml_cps_exact_call3
            (find_class_full,
             path,
             env,
             function(_C6_){
              return caml_cps_exact_call2(get_address, _C6_[2], cont);
             });
   }
   function find_constructor_address(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_same$0,
                id,
                env[2],
                function(cda){
                 var match = cda[2];
                 if(match){
                  var addr = match[1];
                  return caml_cps_exact_call2(get_address, addr, cont);
                 }
                 var _C5_ = Stdlib[8], raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_C5_, 1));
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(c){
                 function _C3_(param){
                  if(! param){
                   var _C4_ = Stdlib[8], raise = caml_pop_trap();
                   return raise(caml_maybe_attach_backtrace(_C4_, 1));
                  }
                  var rest = param[2], cda = param[1], match = cda[2];
                  if(! match) return caml_cps_exact_call1(_C3_, rest);
                  var a = match[1];
                  return caml_cps_exact_call2(get_address, a, cont);
                 }
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28], s, c[2], _C3_);
                });
      default:
       var _C2_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_C2_, 1));
    }
   }
   function find_hash_type(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[15],
                id,
                function(_C1_){
                 return caml_cps_call3
                         (Stdlib[28],
                          cst$98,
                          _C1_,
                          function(name){
                           return caml_cps_exact_call5
                                   (find_name$0,
                                    wrap_identity,
                                    0,
                                    name,
                                    env[4],
                                    function(match){var tda = match[2]; return cont(tda[1]);});
                          });
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(c){
                 return caml_cps_call3
                         (Stdlib[28],
                          cst$99,
                          s,
                          function(name){
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Misc[13][4][65][28],
                                    name,
                                    c[4],
                                    function(tda){return cont(tda[1]);});
                          });
                });
      default:
       var _C0_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_C0_, 1));
    }
   }
   function shape_of_path(namespace, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[18],
             function(ns, id, cont){
              switch(ns){
                case 0:
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[1],
                          function(match){
                           if(0 === match[0]){var x = match[1]; return cont(x[3]);}
                           var _CZ_ = Stdlib[8], raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_CZ_, 1));
                          });
                case 1:
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[4],
                          function(_CY_){return cont(_CY_[3]);});
                case 2:
                 caml_push_trap
                  (function(exn){
                    function _CU_(){
                     var
                      raise = caml_pop_trap(),
                      exn$0 = caml_maybe_attach_backtrace(exn, 0);
                     return raise(exn$0);
                    }
                    return exn === Stdlib[8]
                            ? caml_cps_call2
                              (Dynlink_compilerlibs_Ident[18],
                               id,
                               function(_CV_){
                                return _CV_
? caml_cps_exact_call2
  (is_ident,
   id,
   function(_CW_){
    return _CW_
            ? _CU_()
            : caml_cps_call2
              (Dynlink_compilerlibs_Ident[15],
               id,
               function(_CX_){
                return caml_cps_call2
                        (Dynlink_compilerlibs_Shape[14], _CX_, cont);
               });
   })
: _CU_();
                               })
                            : _CU_();
                   });
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[5],
                          function(val){
                           caml_pop_trap();
                           if(typeof val === "number")
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Ident[15],
                                     id,
                                     function(_CT_){
                                      return caml_cps_call2
      (Dynlink_compilerlibs_Shape[14], _CT_, cont);
                                     });
                           if(0 === val[0]){
                            var mda_shape = val[1][4];
                            return cont(mda_shape);
                           }
                           var raise = caml_pop_trap();
                           return raise
                                   (caml_maybe_attach_backtrace([0, Assert_failure, _ik_], 1));
                          });
                case 3:
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[6],
                          function(_CS_){return cont(_CS_[2]);});
                case 4:
                 return caml_cps_exact_call3
                         (find_same$0,
                          id,
                          env[2],
                          function(_CR_){return cont(_CR_[3]);});
                case 5:
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[7],
                          function(_CQ_){return cont(_CQ_[3]);});
                default:
                 return caml_cps_exact_call3
                         (find_same$1,
                          id,
                          env[8],
                          function(_CP_){return cont(_CP_[2]);});
              }
             },
             namespace,
             cont);
   }
   function shape_or_leaf(uid, param, cont){
    if(! param)
     return caml_cps_call2(Dynlink_compilerlibs_Shape[12], uid, cont);
    var shape = param[1];
    return cont(shape);
   }
   var
    required_globals = caml_callback(Dynlink_compilerlibs_Local_sto[1], [0]);
   function reset_required_globals(param, cont){required_globals[1] = 0; return cont(0);
   }
   function get_required_globals(param, cont){return cont(required_globals[1]);
   }
   function add_required_global(id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[21],
             id,
             function(_CH_){
              function _CK_(_CN_){
               var
                _CO_ =
                  _CN_
                   ? (required_globals[1] = [0, id, required_globals[1]], 0)
                   : _CN_;
               return cont(_CO_);
              }
              if(! _CH_) return _CK_(_CH_);
              var _CI_ = 1 - Dynlink_compilerlibs_Clflags[65][1];
              if(! _CI_) return _CK_(_CI_);
              var _CJ_ = required_globals[1];
              return caml_cps_call2
                      (Dynlink_compilerlibs_Ident[19],
                       id,
                       function(_CL_){
                        return caml_cps_call3
                                (Stdlib_List[33],
                                 _CL_,
                                 _CJ_,
                                 function(_CM_){return _CK_(1 - _CM_);});
                       });
             });
   }
   function _il_(lax, env, path, cont){
    switch(path[0]){
      case 0:
       var
        id = path[1],
        _CF_ =
          function(){
           return caml_cps_exact_call4
                   (expand_module_path, lax, env, path, cont);
          };
       return lax
               ? caml_cps_call2
                 (Dynlink_compilerlibs_Ident[18],
                  id,
                  function(_CG_){return _CG_ ? cont(path) : _CF_();})
               : _CF_();
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call4
               (_il_,
                lax,
                env,
                p,
                function(p$0){
                 return p === p$0
                         ? caml_cps_exact_call4
                           (expand_module_path, lax, env, path, cont)
                         : caml_cps_exact_call4
                           (expand_module_path, lax, env, [1, p$0, s], cont);
                });
      default:
       var p2 = path[2], p1 = path[1];
       return caml_cps_exact_call4
               (_il_,
                lax,
                env,
                p1,
                function(p1$0){
                 return caml_cps_exact_call4
                         (_il_,
                          1,
                          env,
                          p2,
                          function(p2$0){
                           if(p1 === p1$0 && p2 === p2$0)
                            return caml_cps_exact_call4
                                    (expand_module_path, lax, env, path, cont);
                           return caml_cps_exact_call4
                                   (expand_module_path, lax, env, [2, p1$0, p2$0], cont);
                          });
                });
    }
   }
   function expand_module_path(lax, env, path, cont){
    caml_push_trap
     (function(exn){
       function _CC_(){
        var
         raise = caml_pop_trap(),
         exn$0 = caml_maybe_attach_backtrace(exn, 0);
        return raise(exn$0);
       }
       if(exn !== Stdlib[8]) return _CC_();
       function _CA_(){return cont(path);}
       if(lax) return _CA_();
       function _CB_(_CE_){return _CE_ ? _CA_() : _CC_();}
       if(0 !== path[0]) return _CB_(1);
       var id = path[1];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[18],
                id,
                function(_CD_){return _CB_(1 - _CD_);});
      });
    return caml_cps_exact_call4
            (find_module_lazy,
             1,
             path,
             env,
             function(_Cs_){
              var match = _Cs_[1];
              function _Ct_(path){caml_pop_trap(); return cont(path);}
              if(3 !== match[0]) return _Ct_(path);
              var path1 = match[1];
              return caml_cps_exact_call4
                      (_il_,
                       lax,
                       env,
                       path1,
                       function(path$0){
                        return lax
                                ? _Ct_(path$0)
                                : Dynlink_compilerlibs_Clflags
                                    [65]
                                   [1]
                                  ? _Ct_(path$0)
                                  : caml_cps_call2
                                    (Dynlink_compilerlibs_Path[8],
                                     path,
                                     function(id){
                                      return caml_cps_call2
      (Dynlink_compilerlibs_Ident[21],
       id,
       function(_Cu_){
        function _Cv_(_Cy_){
         return _Cy_
                 ? caml_cps_exact_call2
                   (add_required_global,
                    id,
                    function(_Cz_){return _Ct_(path$0);})
                 : _Ct_(path$0);
        }
        return _Cu_
                ? caml_cps_call2
                  (Dynlink_compilerlibs_Path[8],
                   path$0,
                   function(_Cw_){
                    return caml_cps_call3
                            (Dynlink_compilerlibs_Ident[19],
                             id,
                             _Cw_,
                             function(_Cx_){return _Cv_(1 - _Cx_);});
                   })
                : _Cv_(_Cu_);
       });
                                     });
                       });
             });
   }
   function normalize_module_path(oloc, env, path, cont){
    caml_push_trap
     (function(_Cq_){
       if(_Cq_ !== Stdlib[8]){
        var raise$0 = caml_pop_trap();
        return raise$0(caml_maybe_attach_backtrace(_Cq_, 0));
       }
       if(oloc){
        var loc = oloc[1];
        return caml_cps_exact_call4
                (_il_,
                 1,
                 env,
                 path,
                 function(_Cr_){return cont(error$1([0, loc, path, _Cr_]));});
       }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _im_], 1));
      });
    return caml_cps_exact_call4
            (_il_,
             0 === oloc ? 1 : 0,
             env,
             path,
             function(_Cp_){caml_pop_trap(); return cont(_Cp_);});
   }
   function normalize_path_prefix(oloc, env, path, cont){
    switch(path[0]){
      case 0:
       return cont(path);
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call4
               (normalize_module_path,
                oloc,
                env,
                p,
                function(p2){return p === p2 ? cont(path) : cont([1, p2, s]);});
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _in_], 1));
    }
   }
   function normalize_type_path(oloc, env, path, cont){
    switch(path[0]){
      case 0:
       return cont(path);
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_call2
               (Dynlink_compilerlibs_Path[12],
                s,
                function(_Ck_){
                 function _Cm_(p2){
                  return p === p2 ? cont(path) : cont([1, p2, s]);
                 }
                 function _Cl_(){
                  return caml_cps_exact_call4
                          (normalize_module_path, oloc, env, p, _Cm_);
                 }
                 return _Ck_
                         ? caml_cps_call2
                           (Dynlink_compilerlibs_Path[11],
                            p,
                            function(_Cn_){
                             return caml_cps_call2
                                     (Dynlink_compilerlibs_Path[12],
                                      _Cn_,
                                      function(_Co_){
                                       return _Co_
       ? _Cl_()
       : caml_cps_exact_call4
         (normalize_path_prefix, oloc, env, p, _Cm_);
                                      });
                            })
                         : _Cl_();
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _io_], 1));
    }
   }
   function normalize_modtype_path(env, path, cont){
    function _Cf_(path){
     return caml_cps_exact_call4
             (normalize_path_prefix,
              0,
              env,
              path,
              function(path){
               function _Cg_(){return cont(path);}
               caml_push_trap
                (function(_Cj_){
                  if(_Cj_ === Stdlib[8]) return _Cg_();
                  var raise = caml_pop_trap();
                  return raise(caml_maybe_attach_backtrace(_Cj_, 0));
                 });
               return caml_cps_exact_call3
                       (find_modtype_lazy,
                        path,
                        env,
                        function(_Ch_){
                         var _Ci_ = _Ch_[1];
                         caml_pop_trap();
                         if(! _Ci_) return _Cg_();
                         var match = _Ci_[1];
                         if(0 !== match[0]) return _Cg_();
                         var path = match[1];
                         return caml_cps_exact_call1(_Cf_, path);
                        });
              });
    }
    return _Cf_(path);
   }
   function find_module(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1];
       return caml_cps_exact_call3
               (find_ident_module,
                id,
                env,
                function(data){
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Subst[29][12], data[1], cont);
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_structure_components,
                p,
                env,
                function(sc){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          sc[5],
                          function(data){
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Subst[29][12], data[1], cont);
                          });
                });
      default:
       var p2 = path[2], p1 = path[1];
       return caml_cps_exact_call3
               (find_functor_components,
                p1,
                env,
                function(fc){
                 return caml_cps_exact_call4
                         (modtype_of_functor_appl,
                          fc,
                          p1,
                          p2,
                          function(_Ce_){return cont(md(_Ce_));});
                });
    }
   }
   function find_module_lazy$0(path, env, cont){
    return caml_cps_exact_call4(find_module_lazy, 0, path, env, cont);
   }
   function find_type_expansion(path, env, cont){
    return caml_cps_exact_call3
            (find_type,
             path,
             env,
             function(decl){
              var match = decl[5];
              function _Ca_(){
               var _Cd_ = Stdlib[8], raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_Cd_, 1));
              }
              if(! match) return _Ca_();
              var body = match[1];
              function _Cb_(){return cont([0, decl[1], body, decl[9]]);}
              return 1 === decl[4]
                      ? _Cb_()
                      : 0
                        === decl[3]
                        ? caml_cps_call2
                          (Dynlink_compilerlibs_Btype[22],
                           body,
                           function(_Cc_){return _Cc_ ? _Cb_() : _Ca_();})
                        : _Cb_();
             });
   }
   function find_type_expansion_opt(path, env, cont){
    return caml_cps_exact_call3
            (find_type,
             path,
             env,
             function(decl){
              var match = decl[5];
              if(match){
               var body = match[1];
               return cont([0, decl[1], body, decl[9]]);
              }
              var _B$_ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_B$_, 1));
             });
   }
   function find_modtype_expansion_lazy(path, env, cont){
    return caml_cps_exact_call3
            (find_modtype_lazy,
             path,
             env,
             function(_B9_){
              var match = _B9_[1];
              if(match){var mty = match[1]; return cont(mty);}
              var _B__ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_B__, 1));
             });
   }
   function find_modtype_expansion(path, env, cont){
    return caml_cps_exact_call3
            (find_modtype_expansion_lazy,
             path,
             env,
             function(_B8_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[29][13], _B8_, cont);
             });
   }
   function is_functor_arg(path, env, cont){
    var path$0 = path;
    for(;;)
     switch(path$0[0]){
       case 0:
        var id = path$0[1];
        caml_push_trap
         (function(_B7_){
           if(_B7_ === Stdlib[8]) return cont(0);
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_B7_, 0));
          });
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[29],
                 id,
                 env[9],
                 function(_B6_){caml_pop_trap(); return cont(1);});
       case 1:
        var path$1 = path$0[1], path$0 = path$1; break;
       default: return cont(1);
     }
   }
   function make_copy_of_types(env0, cont){
    return caml_cps_call3
            (Stdlib_Hashtbl[1],
             0,
             16,
             function(memo){
              function f(entry, cont){
               if(0 !== entry[0]) return cont(entry);
               var
                vda = entry[1],
                desc = vda[1],
                t = desc[1],
                _BV_ = desc[5],
                _BW_ = desc[4],
                _BX_ = desc[3],
                _BY_ = desc[2];
               function _BZ_(_B5_){
                var desc = [0, _B5_, _BY_, _BX_, _BW_, _BV_];
                return cont([0, [0, desc, vda[2], vda[3]]]);
               }
               caml_push_trap
                (function(_B2_){
                  if(_B2_ === Stdlib[8])
                   return caml_cps_call3
                           (Dynlink_compilerlibs_Subst[15],
                            Dynlink_compilerlibs_Subst[1],
                            t,
                            function(t2){
                             return caml_cps_call2
                                     (Dynlink_compilerlibs_Types[12],
                                      t,
                                      function(_B3_){
                                       return caml_cps_call4
       (Stdlib_Hashtbl[5],
        memo,
        _B3_,
        t2,
        function(_B4_){return _BZ_(t2);});
                                      });
                            });
                  var raise = caml_pop_trap();
                  return raise(caml_maybe_attach_backtrace(_B2_, 0));
                 });
               return caml_cps_call2
                       (Dynlink_compilerlibs_Types[12],
                        t,
                        function(_B0_){
                         return caml_cps_call3
                                 (Stdlib_Hashtbl[6],
                                  memo,
                                  _B0_,
                                  function(_B1_){caml_pop_trap(); return _BZ_(_B1_);});
                        });
              }
              var
               next = env0[1],
               values = [0, Dynlink_compilerlibs_Ident[27], [1, f, next]];
              return cont
                      (function(env, cont){
                        return cont
                                ([0,
                                  values,
                                  env[2],
                                  env[3],
                                  env[4],
                                  env[5],
                                  env[6],
                                  env[7],
                                  env[8],
                                  env[9],
                                  [10, env[10]],
                                  env[11],
                                  env[12]]);
                       });
             });
   }
   var iter_env_cont = [0, 0];
   function scrape_alias_for_visit(env, mty, cont){
    if(3 !== mty[0]) return cont(1);
    var path = mty[1];
    function _BO_(){
     caml_push_trap
      (function(_BU_){
        if(_BU_ === Stdlib[8]) return cont(0);
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_BU_, 0));
       });
     return caml_cps_exact_call3
             (find_module_lazy$0,
              path,
              env,
              function(_BS_){
               return caml_cps_exact_call3
                       (scrape_alias_for_visit,
                        env,
                        _BS_[1],
                        function(_BT_){caml_pop_trap(); return cont(_BT_);});
              });
    }
    if(0 !== path[0]) return _BO_();
    var id = path[1];
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[18],
             id,
             function(_BP_){
              return _BP_
                      ? caml_cps_call2
                        (Dynlink_compilerlibs_Ident[15],
                         id,
                         function(_BQ_){
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Persisten[13],
                                   persistent_env[1],
                                   _BQ_,
                                   function(_BR_){return _BR_ ? _BO_() : cont(0);});
                         })
                      : _BO_();
             });
   }
   function run_iter_cont(l, cont){
    iter_env_cont[1] = 0;
    return caml_cps_call3
            (Stdlib_List[17],
             function(c, cont){return caml_cps_call2(c, 0, cont);},
             l,
             function(_BN_){
              return caml_cps_call2
                      (Stdlib_List[9],
                       iter_env_cont[1],
                       function(cont$0){iter_env_cont[1] = 0; return cont(cont$0);});
             });
   }
   function iter_types(f, cont){
    function f$0(p1, param, cont){
     var tda = param[2], p2 = param[1];
     return caml_cps_call3(f, p1, [0, p2, tda[1]], cont);
    }
    return cont
            (function(env, _BJ_, cont){
              return caml_cps_exact_call4
                      (iter$5,
                       wrap_identity,
                       function(id, x, cont){
                        return caml_cps_exact_call3(f$0, [0, id], x, cont);
                       },
                       env[4],
                       function(_BK_){
                        function iter_components(path$0, path, mcomps){
                         function cont(param, cont){
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Lazy_back[3],
                                   mcomps[3],
                                   function(match){
                                    function _BL_(visit){
                                     return visit
     ? caml_cps_exact_call2
       (get_components,
        mcomps,
        function(match){
         if(0 !== match[0]) return cont(0);
         var comps = match[1];
         return caml_cps_call3
                 (Dynlink_compilerlibs_Misc[13][4][65][12],
                  function(s, d, cont){
                   return caml_cps_exact_call3
                           (f$0, [1, path$0, s], [0, [1, path, s], d], cont);
                  },
                  comps[4],
                  function(_BM_){
                   return caml_cps_call3
                           (Dynlink_compilerlibs_Misc[13][4][65][12],
                            function(s, mda, cont){
                             return cont
                                     (iter_components([1, path$0, s], [1, path, s], mda[2]));
                            },
                            comps[5],
                            cont);
                  });
        })
     : cont(0);
                                    }
                                    if(! match) return _BL_(1);
                                    var cm_mty = match[1][5];
                                    return caml_cps_exact_call3
    (scrape_alias_for_visit, env, cm_mty, _BL_);
                                   });
                         }
                         iter_env_cont[1] = [0, [0, path$0, cont], iter_env_cont[1]];
                         return 0;
                        }
                        return caml_cps_exact_call4
                                (iter$5,
                                 wrap_module,
                                 function(id, param, cont){
                                  var entry = param[2], path = param[1];
                                  if(typeof entry === "number")
                                   return caml_cps_call2
   (Dynlink_compilerlibs_Ident[15],
    id,
    function(modname){
     return caml_cps_call3
             (Dynlink_compilerlibs_Persisten[11],
              persistent_env[1],
              modname,
              function(match){
               if(! match) return cont(0);
               var data = match[1];
               return cont(iter_components([0, id], path, data[2]));
              });
    });
                                  if(0 !== entry[0]) return cont(0);
                                  var data = entry[1];
                                  return cont(iter_components([0, id], path, data[2]));
                                 },
                                 env[5],
                                 cont);
                       });
             });
   }
   function same_types(env1, env2, cont){
    var
     _BH_ = env1[4] === env2[4] ? 1 : 0,
     _BI_ = _BH_ ? env1[5] === env2[5] ? 1 : 0 : _BH_;
    return cont(_BI_);
   }
   function used_persistent(param, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Persisten[8],
             persistent_env[1],
             function(s, m, r, cont){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][64][4], s, r, cont);
             },
             Dynlink_compilerlibs_Misc[13][4][64][1],
             cont);
   }
   function find_all_comps(wrap, proj, s, param, cont){
    var mda = param[2], p = param[1];
    return caml_cps_exact_call2
            (get_components,
             mda[2],
             function(match){
              if(0 !== match[0]) return cont(0);
              var comps = match[1];
              caml_push_trap
               (function(_BG_){
                 if(_BG_ === Stdlib[8]) return cont(0);
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_BG_, 0));
                });
              var _BE_ = proj(comps);
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][28],
                       s,
                       _BE_,
                       function(c){
                        var _BF_ = [0, [0, [1, p, s], wrap(c)], 0];
                        caml_pop_trap();
                        return cont(_BF_);
                       });
             });
   }
   function find_shadowed_comps(path, env, cont){
    switch(path[0]){
      case 0:
       var id = path[1], _Bz_ = env[5];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[15],
                id,
                function(_BC_){
                 return caml_cps_exact_call4
                         (find_all$2,
                          wrap_module,
                          _BC_,
                          _Bz_,
                          function(_BD_){
                           return caml_cps_call3
                                   (Stdlib_List[22],
                                    function(param, cont){
                                     var data = param[2], p = param[1];
                                     if(typeof data !== "number" && 0 === data[0]){
                                      var x = data[1];
                                      return cont([0, [0, p, x]]);
                                     }
                                     return cont(0);
                                    },
                                    _BD_,
                                    cont);
                          });
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_shadowed_comps,
                p,
                env,
                function(l){
                 function _BA_(comps){return comps[5];}
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(_BB_, cont){
                           return caml_cps_exact_call5
                                   (find_all_comps, wrap_identity, _BA_, s, _BB_, cont);
                          },
                          l,
                          function(l){
                           return caml_cps_call2(Stdlib_List[14], l, cont);
                          });
                });
      default: return cont(0);
    }
   }
   function find_shadowed_types(path, env, cont){
    function proj2(comps){return comps[4];}
    function _Bu_(_Bx_){
     return caml_cps_call3
             (Stdlib_List[19],
              function(_By_, cont){return cont(_By_[1]);},
              _Bx_,
              cont);
    }
    switch(path[0]){
      case 0:
       var id = path[1], _Bt_ = env[4];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[15],
                id,
                function(_Bw_){
                 return caml_cps_exact_call4
                         (find_all$2, wrap_identity, _Bw_, _Bt_, _Bu_);
                });
      case 1:
       var s = path[2], p = path[1];
       return caml_cps_exact_call3
               (find_shadowed_comps,
                p,
                env,
                function(l){
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(_Bv_, cont){
                           return caml_cps_exact_call5
                                   (find_all_comps, wrap_identity, proj2, s, _Bv_, cont);
                          },
                          l,
                          function(l){
                           return caml_cps_call2(Stdlib_List[14], l, _Bu_);
                          });
                });
      default: return _Bu_(0);
    }
   }
   function _ip_(env, path, mty, cont){
    switch(mty[0]){
      case 0:
       var p = mty[1];
       caml_push_trap
        (function(_Bs_){
          if(_Bs_ === Stdlib[8]) return cont(mty);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_Bs_, 0));
         });
       return caml_cps_exact_call3
               (find_modtype_expansion_lazy,
                p,
                env,
                function(_Bq_){
                 return caml_cps_exact_call4
                         (_ip_,
                          env,
                          path,
                          _Bq_,
                          function(_Br_){caml_pop_trap(); return cont(_Br_);});
                });
      case 3:
       var path$1 = mty[1];
       caml_push_trap
        (function(_Bp_){
          if(_Bp_ === Stdlib[8]) return cont(mty);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_Bp_, 0));
         });
       return caml_cps_exact_call3
               (find_module_lazy$0,
                path$1,
                env,
                function(_Bn_){
                 return caml_cps_exact_call4
                         (_ip_,
                          env,
                          [0, path$1],
                          _Bn_[1],
                          function(_Bo_){caml_pop_trap(); return cont(_Bo_);});
                });
      default:
       if(! path) return cont(mty);
       var path$0 = path[1];
       return caml_cps_call5(strengthen[1], 1, env, mty, path$0, cont);
    }
   }
   function add_to_tbl(id, decl, tbl, cont){
    function _Bk_(decls){
     return caml_cps_call4
             (Dynlink_compilerlibs_Misc[13][4][65][4],
              id,
              [0, decl, decls],
              tbl,
              cont);
    }
    caml_push_trap
     (function(_Bm_){
       if(_Bm_ === Stdlib[8]) return _Bk_(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_Bm_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][65][28],
             id,
             tbl,
             function(_Bl_){caml_pop_trap(); return _Bk_(_Bl_);});
   }
   function value_declaration_address(param, id, decl, cont){
    var _Bj_ = decl[2];
    if(typeof _Bj_ !== "number" && 0 === _Bj_[0])
     return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[6], Stdlib[8], cont);
    return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [0, id], cont);
   }
   function extension_declaration_address(param, id, _Bi_, cont){
    return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [0, id], cont);
   }
   function class_declaration_address(param, id, _Bh_, cont){
    return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [0, id], cont);
   }
   function module_declaration_address(env, id, presence, md, cont){
    if(! presence)
     return caml_cps_call2(Dynlink_compilerlibs_Lazy_back[5], [0, id], cont);
    var match = md[1];
    if(3 === match[0]){
     var path = match[1];
     return caml_cps_call2
             (Dynlink_compilerlibs_Lazy_back[2], [1, env, path], cont);
    }
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iq_], 1));
   }
   function components_of_module_maker$0(param, cont){
    var
     cm_shape = param[6],
     cm_mty = param[5],
     cm_addr = param[4],
     cm_path = param[3],
     cm_prefixing_subst = param[2],
     cm_env = param[1];
    return caml_cps_exact_call4
            (_ip_,
             cm_env,
             0,
             cm_mty,
             function(match){
              switch(match[0]){
                case 0:
                 return cont(_ir_);
                case 1:
                 var
                  sg = match[1],
                  c =
                    [0,
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1],
                     Dynlink_compilerlibs_Misc[13][4][65][1]];
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Subst[29][16],
                          sg,
                          function(sg){
                           function _Af_(param, prefixing_sub, items_and_paths){
                            if(! param)
                             return caml_cps_call2
                                     (Stdlib_List[9],
                                      items_and_paths,
                                      function(items_and_paths){
                                       var env = [0, cm_env], pos = [0, 0];
                                       function next_address(param, cont){
var addr = [0, cm_addr, pos[1]];
pos[1]++;
return caml_cps_call2
        (Dynlink_compilerlibs_Lazy_back[2], addr, cont);
                                       }
                                       return caml_cps_call3
       (Stdlib_List[17],
        function(param, cont){
         var path = param[2], item = param[1];
         switch(item[0]){
           case 0:
            var decl = item[2], id = item[1];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Subst[17],
                     prefixing_sub,
                     decl,
                     function(decl$0){
                      var _Bb_ = decl[2];
                      function _Bc_(addr){
                       return caml_cps_call2
                               (Dynlink_compilerlibs_Shape[3][2],
                                id,
                                function(_Bd_){
                                 return caml_cps_call4
 (Dynlink_compilerlibs_Shape[11],
  0,
  cm_shape,
  _Bd_,
  function(vda_shape){
   var vda = [0, decl$0, addr, vda_shape], _Be_ = c[1];
   return caml_cps_call2
           (Dynlink_compilerlibs_Ident[15],
            id,
            function(_Bf_){
             return caml_cps_call4
                     (Dynlink_compilerlibs_Misc[13][4][65][4],
                      _Bf_,
                      vda,
                      _Be_,
                      function(_Bg_){c[1] = _Bg_; return cont(0);});
            });
  });
                                });
                      }
                      if(typeof _Bb_ !== "number" && 0 === _Bb_[0])
                       return caml_cps_call2
                               (Dynlink_compilerlibs_Lazy_back[6], Stdlib[8], _Bc_);
                      return caml_cps_exact_call2(next_address, undef, _Bc_);
                     });
           case 1:
            var decl$0 = item[2], id$0 = item[1];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Subst[18],
                     prefixing_sub,
                     decl$0,
                     function(final_decl){
                      return caml_cps_call3
                              (Dynlink_compilerlibs_Subst[13],
                               prefixing_sub,
                               [0, id$0],
                               function(_AO_){
                                return caml_cps_call3
(Dynlink_compilerlibs_Btype[25],
 final_decl,
 _AO_,
 function(_AP_){
  var match = decl$0[3];
  function _AQ_(descrs){
   return caml_cps_call2
           (Dynlink_compilerlibs_Shape[3][3],
            id$0,
            function(_A0_){
             return caml_cps_call4
                     (Dynlink_compilerlibs_Shape[11],
                      0,
                      cm_shape,
                      _A0_,
                      function(tda_shape){
                       var tda = [0, final_decl, descrs, tda_shape], _A1_ = c[4];
                       return caml_cps_call2
                               (Dynlink_compilerlibs_Ident[15],
                                id$0,
                                function(_A2_){
                                 return caml_cps_call4
 (Dynlink_compilerlibs_Misc[13][4][65][4],
  _A2_,
  tda,
  _A1_,
  function(_A3_){
   c[4] = _A3_;
   var
    env$0 = env[1],
    tda = [0, decl$0, 0, tda_shape],
    _A4_ = env$0[12],
    _A5_ = env$0[11],
    _A6_ = [1, env$0[10], id$0, decl$0],
    _A7_ = env$0[9],
    _A8_ = env$0[8],
    _A9_ = env$0[7],
    _A__ = env$0[6],
    _A$_ = env$0[5];
   return caml_cps_exact_call4
           (add$8,
            id$0,
            tda,
            env$0[4],
            function(_Ba_){
             env[1] =
              [0,
               env$0[1],
               env$0[2],
               env$0[3],
               _Ba_,
               _A$_,
               _A__,
               _A9_,
               _A8_,
               _A7_,
               _A6_,
               _A5_,
               _A4_];
             return cont(0);
            });
  });
                                });
                      });
            });
  }
  if(typeof match === "number")
   return 0 === match ? _AQ_(0) : _AQ_(1);
  if(0 === match[0]){
   var repr = match[2];
   return caml_cps_call3
           (Dynlink_compilerlibs_Datarepr[2],
            path,
            final_decl,
            function(_AW_){
             return caml_cps_call3
                     (Stdlib_List[19],
                      function(_AZ_, cont){return cont(_AZ_[2]);},
                      _AW_,
                      function(lbls){
                       return caml_cps_call3
                               (Stdlib_List[17],
                                function(descr, cont){
                                 return caml_cps_exact_call4
 (add_to_tbl,
  descr[1],
  descr,
  c[3],
  function(_AY_){c[3] = _AY_; return cont(0);});
                                },
                                lbls,
                                function(_AX_){return _AQ_([0, lbls, repr]);});
                      });
            });
  }
  var repr$0 = match[2];
  return caml_cps_exact_call2
          (get_unit_name,
           undef,
           function(_AR_){
            return caml_cps_call4
                    (Dynlink_compilerlibs_Datarepr[3],
                     _AR_,
                     path,
                     final_decl,
                     function(_AS_){
                      return caml_cps_call3
                              (Stdlib_List[19],
                               function(_AV_, cont){return cont(_AV_[2]);},
                               _AS_,
                               function(cstrs){
                                return caml_cps_call3
(Stdlib_List[17],
 function(descr, cont){
  return caml_cps_call2
          (Dynlink_compilerlibs_Shape[12],
           descr[14],
           function(cda_shape){
            var cda = [0, descr, 0, cda_shape];
            return caml_cps_exact_call4
                    (add_to_tbl,
                     descr[1],
                     cda,
                     c[2],
                     function(_AU_){c[2] = _AU_; return cont(0);});
           });
 },
 cstrs,
 function(_AT_){return _AQ_([1, cstrs, repr$0]);});
                               });
                     });
           });
 });
                               });
                     });
           case 2:
            var ext = item[2], id$1 = item[1];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Subst[19],
                     prefixing_sub,
                     ext,
                     function(ext){
                      return caml_cps_exact_call2
                              (get_unit_name,
                               undef,
                               function(_AJ_){
                                return caml_cps_call4
(Dynlink_compilerlibs_Datarepr[1],
 _AJ_,
 path,
 ext,
 function(descr){
  return caml_cps_exact_call2
          (next_address,
           undef,
           function(addr){
            return caml_cps_call2
                    (Dynlink_compilerlibs_Shape[3][6],
                     id$1,
                     function(_AK_){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Shape[11],
                               0,
                               cm_shape,
                               _AK_,
                               function(cda_shape){
                                var cda = [0, descr, [0, addr], cda_shape], _AL_ = c[2];
                                return caml_cps_call2
(Dynlink_compilerlibs_Ident[15],
 id$1,
 function(_AM_){
  return caml_cps_exact_call4
          (add_to_tbl,
           _AM_,
           cda,
           _AL_,
           function(_AN_){c[2] = _AN_; return cont(0);});
 });
                               });
                     });
           });
 });
                               });
                     });
           case 3:
            var md = item[3], pres = item[2], id$2 = item[1];
            return caml_cps_call2
                    (Dynlink_compilerlibs_Path[5],
                     cm_path,
                     function(_AC_){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Subst[29][7],
                               [0, _AC_],
                               prefixing_sub,
                               md,
                               function(md$0){
                                function _AD_(addr){
                                 return caml_cps_call2
 (Dynlink_compilerlibs_Builtin_a[3],
  md[2],
  function(alerts){
   return caml_cps_call2
           (Dynlink_compilerlibs_Shape[3][4],
            id$2,
            function(_AE_){
             return caml_cps_call4
                     (Dynlink_compilerlibs_Shape[11],
                      0,
                      cm_shape,
                      _AE_,
                      function(shape){
                       return caml_cps_exact_call9
                               (components_of_module,
                                alerts,
                                md[4],
                                env[1],
                                prefixing_sub,
                                path,
                                addr,
                                md[1],
                                shape,
                                function(comps){
                                 var mda = [0, md$0, comps, addr, shape], _AF_ = c[5];
                                 return caml_cps_call2
 (Dynlink_compilerlibs_Ident[15],
  id$2,
  function(_AG_){
   return caml_cps_call4
           (Dynlink_compilerlibs_Misc[13][4][65][4],
            _AG_,
            mda,
            _AF_,
            function(_AH_){
             c[5] = _AH_;
             return caml_cps_exact_call9
                     (store_module,
                      _it_,
                      0,
                      id$2,
                      addr,
                      pres,
                      md,
                      shape,
                      env[1],
                      function(_AI_){env[1] = _AI_; return cont(0);});
            });
  });
                                });
                      });
            });
  });
                                }
                                if(! pres)
                                 return caml_cps_exact_call2(next_address, undef, _AD_);
                                var match = md[1];
                                if(3 === match[0]){
                                 var path$0 = match[1];
                                 return caml_cps_call2
 (Dynlink_compilerlibs_Lazy_back[2],
  [1, env[1], path$0],
  _AD_);
                                }
                                var raise = caml_pop_trap();
                                return raise
(caml_maybe_attach_backtrace([0, Assert_failure, _is_], 1));
                               });
                     });
           case 4:
            var decl$1 = item[2], id$3 = item[1];
            return caml_cps_call2
                    (Dynlink_compilerlibs_Path[5],
                     cm_path,
                     function(_Aw_){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Subst[29][9],
                               [0, _Aw_],
                               prefixing_sub,
                               decl$1,
                               function(final_decl){
                                return caml_cps_call2
(Dynlink_compilerlibs_Shape[3][5],
 id$3,
 function(_Ax_){
  return caml_cps_call4
          (Dynlink_compilerlibs_Shape[11],
           0,
           cm_shape,
           _Ax_,
           function(shape){
            var mtda = [0, final_decl, shape], _Ay_ = c[6];
            return caml_cps_call2
                    (Dynlink_compilerlibs_Ident[15],
                     id$3,
                     function(_Az_){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Misc[13][4][65][4],
                               _Az_,
                               mtda,
                               _Ay_,
                               function(_AA_){
                                c[6] = _AA_;
                                return caml_cps_exact_call6
(store_modtype,
 _iu_,
 id$3,
 decl$1,
 shape,
 env[1],
 function(_AB_){env[1] = _AB_; return cont(0);});
                               });
                     });
           });
 });
                               });
                     });
           case 5:
            var decl$2 = item[2], id$4 = item[1];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Subst[20],
                     prefixing_sub,
                     decl$2,
                     function(decl){
                      return caml_cps_exact_call2
                              (next_address,
                               undef,
                               function(addr){
                                return caml_cps_call2
(Dynlink_compilerlibs_Shape[3][7],
 id$4,
 function(_As_){
  return caml_cps_call4
          (Dynlink_compilerlibs_Shape[11],
           0,
           cm_shape,
           _As_,
           function(shape){
            var clda = [0, decl, addr, shape], _At_ = c[7];
            return caml_cps_call2
                    (Dynlink_compilerlibs_Ident[15],
                     id$4,
                     function(_Au_){
                      return caml_cps_call4
                              (Dynlink_compilerlibs_Misc[13][4][65][4],
                               _Au_,
                               clda,
                               _At_,
                               function(_Av_){c[7] = _Av_; return cont(0);});
                     });
           });
 });
                               });
                     });
           default:
            var decl$3 = item[2], id$5 = item[1];
            return caml_cps_call3
                    (Dynlink_compilerlibs_Subst[21],
                     prefixing_sub,
                     decl$3,
                     function(decl){
                      return caml_cps_call2
                              (Dynlink_compilerlibs_Shape[3][8],
                               id$5,
                               function(_Ao_){
                                return caml_cps_call4
(Dynlink_compilerlibs_Shape[11],
 0,
 cm_shape,
 _Ao_,
 function(shape){
  var cltda = [0, decl, shape], _Ap_ = c[8];
  return caml_cps_call2
          (Dynlink_compilerlibs_Ident[15],
           id$5,
           function(_Aq_){
            return caml_cps_call4
                    (Dynlink_compilerlibs_Misc[13][4][65][4],
                     _Aq_,
                     cltda,
                     _Ap_,
                     function(_Ar_){c[8] = _Ar_; return cont(0);});
           });
 });
                               });
                     });
         }
        },
        items_and_paths,
        function(_An_){return cont([0, [0, c]]);});
                                      });
                            var item = param[1];
                            switch(item[0]){
                              case 0:
                               var rem = param[2], id = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id,
function(_Am_){
 var
  p = [1, cm_path, _Am_],
  items_and_paths$0 = [0, [0, item, p], items_and_paths];
 return caml_cps_exact_call3
         (_Af_, rem, prefixing_sub, items_and_paths$0);
});
                              case 1:
                               var
                                rem$0 = param[2],
                                vis = item[4],
                                rs = item[3],
                                td = item[2],
                                id$0 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$0,
function(_Al_){
 var p = [1, cm_path, _Al_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[2],
          id$0,
          p,
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0, [0, [1, id$0, td, rs, vis], p], items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$0, prefixing_sub, items_and_paths$0);
          });
});
                              case 2:
                               var
                                rem$1 = param[2],
                                vis$0 = item[4],
                                es = item[3],
                                ec = item[2],
                                id$1 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$1,
function(_Ak_){
 var p = [1, cm_path, _Ak_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[2],
          id$1,
          p,
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0, [0, [2, id$1, ec, es, vis$0], p], items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$1, prefixing_sub, items_and_paths$0);
          });
});
                              case 3:
                               var
                                rem$2 = param[2],
                                vis$1 = item[5],
                                rs$0 = item[4],
                                md = item[3],
                                pres = item[2],
                                id$2 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$2,
function(_Aj_){
 var p = [1, cm_path, _Aj_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[5],
          id$2,
          p,
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0,
               [0, [3, id$2, pres, md, rs$0, vis$1], p],
               items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$2, prefixing_sub, items_and_paths$0);
          });
});
                              case 4:
                               var
                                rem$3 = param[2],
                                vis$2 = item[3],
                                mtd = item[2],
                                id$3 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$3,
function(_Ai_){
 var p = [1, cm_path, _Ai_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[7],
          id$3,
          [0, p],
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0, [0, [4, id$3, mtd, vis$2], p], items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$3, prefixing_sub, items_and_paths$0);
          });
});
                              case 5:
                               var
                                rem$4 = param[2],
                                vis$3 = item[4],
                                rs$1 = item[3],
                                cd = item[2],
                                id$4 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$4,
function(_Ah_){
 var p = [1, cm_path, _Ah_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[2],
          id$4,
          p,
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0, [0, [5, id$4, cd, rs$1, vis$3], p], items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$4, prefixing_sub, items_and_paths$0);
          });
});
                              default:
                               var
                                rem$5 = param[2],
                                vis$4 = item[4],
                                rs$2 = item[3],
                                ctd = item[2],
                                id$5 = item[1];
                               return caml_cps_call2
                                       (Dynlink_compilerlibs_Ident[15],
id$5,
function(_Ag_){
 var p = [1, cm_path, _Ag_];
 return caml_cps_call4
         (Dynlink_compilerlibs_Subst[2],
          id$5,
          p,
          prefixing_sub,
          function(prefixing_sub){
           var
            items_and_paths$0 =
              [0, [0, [6, id$5, ctd, rs$2, vis$4], p], items_and_paths];
           return caml_cps_exact_call3
                   (_Af_, rem$5, prefixing_sub, items_and_paths$0);
          });
});
                            }
                           }
                           return _Af_(sg, cm_prefixing_subst, 0);
                          });
                case 2:
                 var ty_res = match[2], arg = match[1];
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Path[5],
                          cm_path,
                          function(_z8_){
                           var scoping = [0, _z8_];
                           return caml_cps_call3
                                   (Stdlib_Hashtbl[1],
                                    0,
                                    17,
                                    function(_z9_){
                                     return caml_cps_call3
     (Stdlib_Hashtbl[1],
      0,
      17,
      function(_z__){
       return caml_cps_call4
               (Dynlink_compilerlibs_Subst[29][8],
                scoping,
                cm_prefixing_subst,
                ty_res,
                function(_z$_){
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Subst[29][13],
                          _z$_,
                          function(_Aa_){
                           function _Ab_(_Ae_){
                            return cont([0, [1, [0, _Ae_, _Aa_, cm_shape, _z__, _z9_]]]);
                           }
                           if(! arg) return _Ab_(0);
                           var ty_arg = arg[2], param = arg[1];
                           return caml_cps_call4
                                   (Dynlink_compilerlibs_Subst[29][8],
                                    scoping,
                                    cm_prefixing_subst,
                                    ty_arg,
                                    function(_Ac_){
                                     return caml_cps_call2
     (Dynlink_compilerlibs_Subst[29][13],
      _Ac_,
      function(_Ad_){return _Ab_([0, param, _Ad_]);});
                                    });
                          });
                });
      });
                                    });
                          });
                default: var p = match[1]; return cont([1, [0, p]]);
              }
             });
   }
   function check_usage(loc, id, uid, warn, tbl, cont){
    var _zT_ = 1 - loc[3];
    function _zU_(_zX_){
     function _zY_(_z7_){return cont(_z7_);}
     return _zX_
             ? caml_cps_call2
               (Dynlink_compilerlibs_Ident[15],
                id,
                function(name){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Shape[1][15][11],
                          tbl,
                          uid,
                          function(_zZ_){
                           if(_zZ_) return cont(0);
                           var used = [0, 0];
                           return caml_cps_call4
                                   (Dynlink_compilerlibs_Shape[1][15][5],
                                    tbl,
                                    uid,
                                    function(param, cont){used[1] = 1; return cont(0);},
                                    function(_z0_){
                                     var _z1_ = caml_string_equal(name, cst$117);
                                     if(_z1_)
                                      var _z2_ = _z1_;
                                     else
                                      var
                                       _z4_ = 95 === caml_string_get(name, 0) ? 1 : 0,
                                       _z2_ = _z4_ || (35 === caml_string_get(name, 0) ? 1 : 0);
                                     var _z3_ = 1 - _z2_;
                                     return _z3_
     ? caml_cps_call2
       (add_delayed_check_forward$0[1],
        function(param, cont){
         var _z5_ = 1 - used[1];
         return _z5_
                 ? caml_cps_call2
                   (warn,
                    name,
                    function(_z6_){
                     return caml_cps_call3
                             (Dynlink_compilerlibs_Location[37], loc, _z6_, cont);
                    })
                 : cont(_z5_);
        },
        cont)
     : _zY_(_z3_);
                                    });
                          });
                })
             : _zY_(_zX_);
    }
    return _zT_
            ? caml_cps_call2
              (Dynlink_compilerlibs_Shape[1][6],
               uid,
               function(_zV_){
                return _zV_
                        ? caml_cps_call2
                          (warn,
                           cst$100,
                           function(_zW_){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Warnings[5], _zW_, _zU_);
                           })
                        : _zU_(_zV_);
               })
            : _zU_(_zT_);
   }
   function check_value_name(name, loc, cont){
    var _zM_ = 0 < caml_ml_string_length(name) ? 1 : 0;
    if(_zM_){
     var c = caml_string_get(name, 0);
     a:
     {
      b:
      {
       if(96 <= c){
        if(215 <= c){
         if(247 === c || 216 > c) break b;
        }
        else
         if(123 <= c){if(192 > c) break b;} else if(97 > c) break b;
       }
       else
        if(58 <= c){
         if(91 <= c){if(95 > c) break b;} else if(65 > c) break b;
        }
        else if(39 !== c && 48 > c) break b;
       var _zN_ = 1;
       break a;
      }
      var _zN_ = 0;
     }
     var _zO_ = 1 - _zN_;
    }
    else
     var _zO_ = _zM_;
    if(_zO_){
     var _zQ_ = caml_ml_string_length(name) - 1 | 0, _zP_ = 1;
     if(_zQ_ >= 1){
      var i = _zP_;
      for(;;){
       if(35 === caml_string_get(name, i)) error$1([1, loc, name]);
       var _zS_ = i + 1 | 0;
       if(_zQ_ === i) break;
       var i = _zS_;
      }
     }
     var _zR_ = 0;
    }
    else
     var _zR_ = _zO_;
    return cont(_zR_);
   }
   function store_value(check, id, addr, decl, shape, env, cont){
    var _zw_ = decl[3];
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_zx_){
              return caml_cps_exact_call3
                      (check_value_name,
                       _zx_,
                       _zw_,
                       function(_zy_){
                        return caml_cps_call3
                                (Stdlib_Option[9],
                                 function(f, cont){
                                  return caml_cps_exact_call6
  (check_usage,
   decl[3],
   id,
   decl[5],
   f,
   value_declarations[1],
   cont);
                                 },
                                 check,
                                 function(_zz_){
                                  var
                                   vda = [0, decl, addr, shape],
                                   _zA_ = env[12],
                                   _zB_ = env[11],
                                   _zC_ = [0, env[10], id, decl],
                                   _zD_ = env[9],
                                   _zE_ = env[8],
                                   _zF_ = env[7],
                                   _zG_ = env[6],
                                   _zH_ = env[5],
                                   _zI_ = env[4],
                                   _zJ_ = env[3],
                                   _zK_ = env[2];
                                  return caml_cps_exact_call4
  (add$8,
   id,
   [0, vda],
   env[1],
   function(_zL_){
    return cont
            ([0,
              _zL_,
              _zK_,
              _zJ_,
              _zI_,
              _zH_,
              _zG_,
              _zF_,
              _zE_,
              _zD_,
              _zC_,
              _zB_,
              _zA_]);
   });
                                 });
                       });
             });
   }
   function store_type(check, type_id, type_decl, shape, env, cont){
    var loc = type_decl[10];
    function _yt_(_yu_){
     var path = [0, type_id], match = type_decl[3];
     function _yv_(descrs, env){
      var
       tda = [0, type_decl, descrs, shape],
       _zn_ = env[12],
       _zo_ = env[11],
       _zp_ = [1, env[10], type_id, type_decl],
       _zq_ = env[9],
       _zr_ = env[8],
       _zs_ = env[7],
       _zt_ = env[6],
       _zu_ = env[5];
      return caml_cps_exact_call4
              (add$8,
               type_id,
               tda,
               env[4],
               function(_zv_){
                return cont
                        ([0,
                          env[1],
                          env[2],
                          env[3],
                          _zv_,
                          _zu_,
                          _zt_,
                          _zs_,
                          _zr_,
                          _zq_,
                          _zp_,
                          _zo_,
                          _zn_]);
               });
     }
     if(typeof match === "number")
      return 0 === match ? _yv_(0, env) : _yv_(1, env);
     if(0 === match[0]){
      var repr = match[2];
      return caml_cps_call3
              (Dynlink_compilerlibs_Datarepr[2],
               path,
               type_decl,
               function(labels){
                return caml_cps_call4
                        (Stdlib_List[25],
                         function(env, param, cont){
                          var lbl = param[2], lbl_id = param[1];
                          function _y0_(_y1_){
                           function _y2_(_zc_){
                            var
                             _zd_ = env[12],
                             _ze_ = env[11],
                             _zf_ = env[10],
                             _zg_ = env[9],
                             _zh_ = env[8],
                             _zi_ = env[7],
                             _zj_ = env[6],
                             _zk_ = env[5],
                             _zl_ = env[4];
                            return caml_cps_exact_call4
                                    (add$7,
                                     lbl_id,
                                     lbl,
                                     env[3],
                                     function(_zm_){
                                      return cont
      ([0,
        env[1],
        env[2],
        _zm_,
        _zl_,
        _zk_,
        _zj_,
        _zi_,
        _zh_,
        _zg_,
        _zf_,
        _ze_,
        _zd_]);
                                     });
                           }
                           return _y1_
                                   ? caml_cps_call2
                                     (Dynlink_compilerlibs_Ident[15],
                                      type_id,
                                      function(ty_name){
                                       var
priv = type_decl[4],
name = lbl[1],
loc = lbl[9],
mut = lbl[4],
k = lbl[11];
                                       return caml_cps_call3
       (Dynlink_compilerlibs_Shape[1][15][11],
        used_labels[1],
        k,
        function(_y3_){
         if(! (1 - _y3_)) return _y2_(0);
         var used = [0, 0, 0, 0];
         return caml_cps_call4
                 (Dynlink_compilerlibs_Shape[1][15][5],
                  used_labels[1],
                  k,
                  function(usage, cont){
                   switch(usage){
                     case 0:
                      used[1] = 1; return cont(0);
                     case 1:
                      used[2] = 1; return cont(0);
                     case 2:
                      used[3] = 1; return cont(0);
                     case 3:
                      used[1] = 1; return cont(0);
                     default:
                      used[1] = 1; used[2] = 1; used[3] = 1; return cont(0);
                   }
                  },
                  function(_y4_){
                   var _y5_ = caml_string_equal(ty_name, cst$117);
                   if(_y5_)
                    var _y6_ = _y5_;
                   else
                    var
                     _y7_ = 95 === caml_string_get(ty_name, 0) ? 1 : 0,
                     _y6_ = _y7_ || (95 === caml_string_get(name, 0) ? 1 : 0);
                   return 1 - _y6_
                           ? caml_cps_call2
                             (add_delayed_check_forward$0[1],
                              function(param, cont){
                               if(priv)
                                if(mut)
                                 var
                                  _y8_ = used[2],
                                  _y9_ = used[3],
                                  _y$_ =
                                    used[1] ? _y8_ ? 0 : _hN_ : _y8_ ? _hO_ : _y9_ ? _hO_ : _hP_;
                                else
                                 var _y__ = used[3], _y$_ = used[1] ? 0 : _y__ ? _hQ_ : _hR_;
                               else
                                var _y$_ = used[1] ? 0 : _hS_;
                               return caml_cps_call3
                                       (Stdlib_Option[9],
function(complaint, cont){
 return caml_cps_exact_call2
         (is_in_signature,
          env,
          function(_za_){
           var _zb_ = 1 - _za_;
           return _zb_
                   ? caml_cps_call3
                     (Dynlink_compilerlibs_Location[37],
                      loc,
                      [46, name, complaint],
                      cont)
                   : cont(_zb_);
          });
},
_y$_,
cont);
                              },
                              _y2_)
                           : _y2_(0);
                  });
        });
                                      })
                                   : _y2_(0);
                          }
                          if(! check) return _y0_(check);
                          var _yZ_ = 1 - type_decl[10][3];
                          return _yZ_
                                  ? caml_cps_call2
                                    (Dynlink_compilerlibs_Warnings[5], _iw_, _y0_)
                                  : _y0_(_yZ_);
                         },
                         env,
                         labels,
                         function(env){
                          return caml_cps_call3
                                  (Stdlib_List[19],
                                   function(_yY_, cont){return cont(_yY_[2]);},
                                   labels,
                                   function(_yX_){return _yv_([0, _yX_, repr], env);});
                         });
               });
     }
     var repr$0 = match[2];
     return caml_cps_exact_call2
             (get_unit_name,
              undef,
              function(_yw_){
               return caml_cps_call4
                       (Dynlink_compilerlibs_Datarepr[3],
                        _yw_,
                        path,
                        type_decl,
                        function(constructors){
                         return caml_cps_call4
                                 (Stdlib_List[25],
                                  function(env, param, cont){
                                   var cstr = param[2], cstr_id = param[1];
                                   function _yA_(_yB_){
                                    function _yC_(_yL_){
                                     return caml_cps_call2
     (Dynlink_compilerlibs_Shape[12],
      cstr[14],
      function(cda_shape){
       var
        _yM_ = env[12],
        _yN_ = env[11],
        _yO_ = env[10],
        _yP_ = env[9],
        _yQ_ = env[8],
        _yR_ = env[7],
        _yS_ = env[6],
        _yT_ = env[5],
        _yU_ = env[4],
        _yV_ = env[3];
       return caml_cps_exact_call4
               (add$7,
                cstr_id,
                [0, cstr, 0, cda_shape],
                env[2],
                function(_yW_){
                 return cont
                         ([0,
                           env[1],
                           _yW_,
                           _yV_,
                           _yU_,
                           _yT_,
                           _yS_,
                           _yR_,
                           _yQ_,
                           _yP_,
                           _yO_,
                           _yN_,
                           _yM_]);
                });
      });
                                    }
                                    return _yB_
    ? caml_cps_call2
      (Dynlink_compilerlibs_Ident[15],
       type_id,
       function(ty_name){
        var
         name = cstr[1],
         loc = cstr[11],
         k = cstr[14],
         priv = type_decl[4];
        return caml_cps_call3
                (Dynlink_compilerlibs_Shape[1][15][11],
                 used_constructors[1],
                 k,
                 function(_yD_){
                  if(! (1 - _yD_)) return _yC_(0);
                  var used = constructor_usages(undef);
                  return caml_cps_call4
                          (Dynlink_compilerlibs_Shape[1][15][5],
                           used_constructors[1],
                           k,
                           function(_yK_, cont){
                            return cont(add_constructor_usage(used, _yK_));
                           },
                           function(_yE_){
                            var
                             _yF_ = caml_string_equal(ty_name, cst$117),
                             _yG_ = _yF_ || (95 === caml_string_get(ty_name, 0) ? 1 : 0);
                            return 1 - _yG_
                                    ? caml_cps_call2
                                      (add_delayed_check_forward$0[1],
                                       function(param, cont){
var _yH_ = constructor_usage_complaint(0, priv, used);
return caml_cps_call3
        (Stdlib_Option[9],
         function(complaint, cont){
          return caml_cps_exact_call2
                  (is_in_signature,
                   env,
                   function(_yI_){
                    var _yJ_ = 1 - _yI_;
                    return _yJ_
                            ? caml_cps_call3
                              (Dynlink_compilerlibs_Location[37],
                               loc,
                               [21, name, complaint],
                               cont)
                            : cont(_yJ_);
                   });
         },
         _yH_,
         cont);
                                       },
                                       _yC_)
                                    : _yC_(0);
                           });
                 });
       })
    : _yC_(0);
                                   }
                                   if(! check) return _yA_(check);
                                   var _yz_ = 1 - type_decl[10][3];
                                   return _yz_
   ? caml_cps_call2
     (Dynlink_compilerlibs_Warnings[5], _iv_, _yA_)
   : _yA_(_yz_);
                                  },
                                  env,
                                  constructors,
                                  function(env){
                                   return caml_cps_call3
   (Stdlib_List[19],
    function(_yy_, cont){return cont(_yy_[2]);},
    constructors,
    function(_yx_){
     var descrs = [1, _yx_, repr$0];
     return _yv_(descrs, env);
    });
                                  });
                        });
              });
    }
    return check
            ? caml_cps_exact_call6
              (check_usage,
               loc,
               type_id,
               type_decl[14],
               function(s, cont){return cont([18, s]);},
               type_declarations[1],
               _yt_)
            : _yt_(0);
   }
   function store_extension(check, rebind, id, addr, ext, shape, env, cont){
    var loc = ext[6], _x7_ = [0, id];
    return caml_cps_exact_call2
            (get_unit_name,
             undef,
             function(_x8_){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Datarepr[1],
                       _x8_,
                       _x7_,
                       ext,
                       function(cstr){
                        var cda = [0, cstr, [0, addr], shape];
                        function _x__(_x$_){
                         function _ya_(_yh_){
                          var
                           _yi_ = env[12],
                           _yj_ = env[11],
                           _yk_ = [2, env[10], id, ext],
                           _yl_ = env[9],
                           _ym_ = env[8],
                           _yn_ = env[7],
                           _yo_ = env[6],
                           _yp_ = env[5],
                           _yq_ = env[4],
                           _yr_ = env[3];
                          return caml_cps_exact_call4
                                  (add$7,
                                   id,
                                   cda,
                                   env[2],
                                   function(_ys_){
                                    return cont
    ([0,
      env[1],
      _ys_,
      _yr_,
      _yq_,
      _yp_,
      _yo_,
      _yn_,
      _ym_,
      _yl_,
      _yk_,
      _yj_,
      _yi_]);
                                   });
                         }
                         if(! _x$_) return _ya_(0);
                         var priv = ext[5];
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Path[1],
                                  ext[1],
                                  Dynlink_compilerlibs_Predef[25],
                                  function(is_exception){
                                   var name = cstr[1], k = cstr[14];
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Shape[1][15][11],
    used_constructors[1],
    k,
    function(_yb_){
     if(! (1 - _yb_)) return _ya_(0);
     var used = constructor_usages(undef);
     return caml_cps_call4
             (Dynlink_compilerlibs_Shape[1][15][5],
              used_constructors[1],
              k,
              function(_yg_, cont){
               return cont(add_constructor_usage(used, _yg_));
              },
              function(_yc_){
               return caml_cps_call2
                       (add_delayed_check_forward$0[1],
                        function(param, cont){
                         var _yd_ = constructor_usage_complaint(rebind, priv, used);
                         return caml_cps_call3
                                 (Stdlib_Option[9],
                                  function(complaint, cont){
                                   return caml_cps_exact_call2
   (is_in_signature,
    env,
    function(_ye_){
     var _yf_ = 1 - _ye_;
     return _yf_
             ? caml_cps_call3
               (Dynlink_compilerlibs_Location[37],
                loc,
                [22, name, is_exception, complaint],
                cont)
             : cont(_yf_);
    });
                                  },
                                  _yd_,
                                  cont);
                        },
                        _ya_);
              });
    });
                                  });
                        }
                        if(! check) return _x__(check);
                        var _x9_ = 1 - loc[3];
                        return _x9_
                                ? caml_cps_call2
                                  (Dynlink_compilerlibs_Warnings[5], _ix_, _x__)
                                : _x__(_x9_);
                       });
             });
   }
   function store_module(opt, check, id, addr, presence, md, shape, env, cont){
    if(opt)
     var sth = opt[1], update_summary = sth;
    else
     var update_summary = 1;
    var loc = md[3];
    return caml_cps_call3
            (Stdlib_Option[9],
             function(f, cont){
              return caml_cps_exact_call6
                      (check_usage,
                       loc,
                       id,
                       md[4],
                       f,
                       module_declarations[1],
                       cont);
             },
             check,
             function(_xX_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Builtin_a[3],
                       md[2],
                       function(alerts){
                        return caml_cps_exact_call9
                                (components_of_module,
                                 alerts,
                                 md[4],
                                 env,
                                 Dynlink_compilerlibs_Subst[1],
                                 [0, id],
                                 addr,
                                 md[1],
                                 shape,
                                 function(comps){
                                  var mda = [0, md, comps, addr, shape];
                                  function _xY_(summary){
                                   var
                                    _x0_ = env[12],
                                    _x1_ = env[11],
                                    _x2_ = env[9],
                                    _x3_ = env[8],
                                    _x4_ = env[7],
                                    _x5_ = env[6];
                                   return caml_cps_exact_call4
   (add$8,
    id,
    [0, mda],
    env[5],
    function(_x6_){
     return cont
             ([0,
               env[1],
               env[2],
               env[3],
               env[4],
               _x6_,
               _x5_,
               _x4_,
               _x3_,
               _x2_,
               summary,
               _x1_,
               _x0_]);
    });
                                  }
                                  return update_summary
  ? caml_cps_call2
    (Dynlink_compilerlibs_Subst[29][12],
     md,
     function(_xZ_){
      return _xY_([3, env[10], id, presence, _xZ_]);
     })
  : _xY_(env[10]);
                                 });
                       });
             });
   }
   function store_modtype(opt, id, info, shape, env, cont){
    if(opt)
     var sth = opt[1], update_summary = sth;
    else
     var update_summary = 1;
    var mtda = [0, info, shape];
    function _xP_(summary){
     var
      _xR_ = env[12],
      _xS_ = env[11],
      _xT_ = env[9],
      _xU_ = env[8],
      _xV_ = env[7];
     return caml_cps_exact_call4
             (add$8,
              id,
              mtda,
              env[6],
              function(_xW_){
               return cont
                       ([0,
                         env[1],
                         env[2],
                         env[3],
                         env[4],
                         env[5],
                         _xW_,
                         _xV_,
                         _xU_,
                         _xT_,
                         summary,
                         _xS_,
                         _xR_]);
              });
    }
    return update_summary
            ? caml_cps_call2
              (Dynlink_compilerlibs_Subst[29][14],
               info,
               function(_xQ_){return _xP_([4, env[10], id, _xQ_]);})
            : _xP_(env[10]);
   }
   function store_class(id, addr, desc, shape, env, cont){
    var
     clda = [0, desc, addr, shape],
     _xJ_ = env[12],
     _xK_ = env[11],
     _xL_ = [5, env[10], id, desc],
     _xM_ = env[9],
     _xN_ = env[8];
    return caml_cps_exact_call4
            (add$8,
             id,
             clda,
             env[7],
             function(_xO_){
              return cont
                      ([0,
                        env[1],
                        env[2],
                        env[3],
                        env[4],
                        env[5],
                        env[6],
                        _xO_,
                        _xN_,
                        _xM_,
                        _xL_,
                        _xK_,
                        _xJ_]);
             });
   }
   function store_cltype(id, desc, shape, env, cont){
    var
     cltda = [0, desc, shape],
     _xE_ = env[12],
     _xF_ = env[11],
     _xG_ = [6, env[10], id, desc],
     _xH_ = env[9];
    return caml_cps_exact_call4
            (add$8,
             id,
             cltda,
             env[8],
             function(_xI_){
              return cont
                      ([0,
                        env[1],
                        env[2],
                        env[3],
                        env[4],
                        env[5],
                        env[6],
                        env[7],
                        _xI_,
                        _xH_,
                        _xG_,
                        _xF_,
                        _xE_]);
             });
   }
   function components_of_functor_appl$0(loc, f_path, f_comp, arg, env, cont){
    caml_push_trap
     (function(_xt_){
       if(_xt_ !== Stdlib[8]){
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_xt_, 0));
       }
       var p = [2, f_path, arg], _xu_ = f_comp[1];
       function _xv_(sub){
        var _xw_ = f_comp[2];
        return caml_cps_call2
                (Dynlink_compilerlibs_Path[5],
                 p,
                 function(_xx_){
                  return caml_cps_call4
                          (Dynlink_compilerlibs_Subst[22],
                           [0, _xx_],
                           sub,
                           _xw_,
                           function(mty){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Lazy_back[6],
                                     Stdlib[8],
                                     function(addr){
                                      return caml_cps_call3
      (Dynlink_compilerlibs_Path[7],
       0,
       p,
       function(_xy_){
        return caml_cps_call3
                (Stdlib[28],
                 cst_the_signature_of,
                 _xy_,
                 function(_xz_){
                  return caml_cps_call5
                          (check_well_formed_module[1],
                           env,
                           loc,
                           _xz_,
                           mty,
                           function(_xA_){
                            return caml_cps_exact_call3
                                    (shape_of_path,
                                     2,
                                     env,
                                     function(_xB_){
                                      return caml_cps_call2
      (_xB_,
       arg,
       function(shape_arg){
        return caml_cps_call4
                (Dynlink_compilerlibs_Shape[9],
                 0,
                 f_comp[3],
                 shape_arg,
                 function(shape){
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Subst[29][2],
                           mty,
                           function(_xC_){
                            return caml_cps_exact_call9
                                    (components_of_module,
                                     Dynlink_compilerlibs_Misc[13][4][65][1],
                                     Dynlink_compilerlibs_Shape[1][5],
                                     env,
                                     Dynlink_compilerlibs_Subst[1],
                                     p,
                                     addr,
                                     _xC_,
                                     shape,
                                     function(comps){
                                      return caml_cps_call4
      (Stdlib_Hashtbl[5],
       f_comp[4],
       arg,
       comps,
       function(_xD_){return cont(comps);});
                                     });
                           });
                 });
       });
                                     });
                           });
                 });
       });
                                     });
                           });
                 });
       }
       if(_xu_){
        var match = _xu_[1];
        if(match)
         return caml_cps_call4
                 (Dynlink_compilerlibs_Subst[5],
                  match[1],
                  arg,
                  Dynlink_compilerlibs_Subst[1],
                  _xv_);
       }
       return _xv_(Dynlink_compilerlibs_Subst[1]);
      });
    return caml_cps_call3
            (Stdlib_Hashtbl[6],
             f_comp[4],
             arg,
             function(c){caml_pop_trap(); return cont(c);});
   }
   components_of_functor_appl[1] = components_of_functor_appl$0;
   components_of_module_maker[1] = components_of_module_maker$0;
   function add_functor_arg(id, env, cont){
    var _xp_ = env[12], _xq_ = env[11], _xr_ = [8, env[10], id];
    return caml_cps_call4
            (Dynlink_compilerlibs_Ident[28],
             id,
             0,
             env[9],
             function(_xs_){
              return cont
                      ([0,
                        env[1],
                        env[2],
                        env[3],
                        env[4],
                        env[5],
                        env[6],
                        env[7],
                        env[8],
                        _xs_,
                        _xr_,
                        _xq_,
                        _xp_]);
             });
   }
   function add_value$0(check, shape, id, desc, env, cont){
    return caml_cps_exact_call4
            (value_declaration_address,
             env,
             id,
             desc,
             function(addr){
              return caml_cps_exact_call3
                      (shape_or_leaf,
                       desc[5],
                       shape,
                       function(shape){
                        return caml_cps_exact_call7
                                (store_value, check, id, addr, desc, shape, env, cont);
                       });
             });
   }
   function add_type$1(check, shape, id, info, env, cont){
    return caml_cps_exact_call3
            (shape_or_leaf,
             info[14],
             shape,
             function(shape){
              return caml_cps_exact_call6
                      (store_type, check, id, info, shape, env, cont);
             });
   }
   function add_extension(check, shape, rebind, id, ext, env, cont){
    return caml_cps_exact_call4
            (extension_declaration_address,
             env,
             id,
             ext,
             function(addr){
              return caml_cps_exact_call3
                      (shape_or_leaf,
                       ext[8],
                       shape,
                       function(shape){
                        return caml_cps_exact_call8
                                (store_extension,
                                 check,
                                 rebind,
                                 id,
                                 addr,
                                 ext,
                                 shape,
                                 env,
                                 cont);
                       });
             });
   }
   function add_module_declaration
   (opt, shape, check, id, presence, md, env, cont){
    if(opt) var sth = opt[1], arg = sth; else var arg = 0;
    function _xm_(check){
     return caml_cps_call2
             (Dynlink_compilerlibs_Subst[29][1],
              md,
              function(md){
               return caml_cps_exact_call5
                       (module_declaration_address,
                        env,
                        id,
                        presence,
                        md,
                        function(addr){
                         return caml_cps_exact_call3
                                 (shape_or_leaf,
                                  md[4],
                                  shape,
                                  function(shape){
                                   return caml_cps_exact_call9
   (store_module,
    0,
    check,
    id,
    addr,
    presence,
    md,
    shape,
    env,
    function(env){
     return arg
             ? caml_cps_exact_call3(add_functor_arg, id, env, cont)
             : cont(env);
    });
                                  });
                        });
              });
    }
    if(! check) return _xm_(0);
    function _xn_(){
     return _xm_([0, function(s, cont){return cont([40, s]);}]);
    }
    return arg
            ? caml_cps_exact_call2
              (is_in_signature,
               env,
               function(_xo_){
                return _xo_
                        ? _xm_([0, function(s, cont){return cont([45, s]);}])
                        : _xn_();
               })
            : _xn_();
   }
   function add_module_declaration_lazy
   (update_summary, id, presence, md, env, cont){
    return caml_cps_exact_call5
            (module_declaration_address,
             env,
             id,
             presence,
             md,
             function(addr){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[12],
                       md[4],
                       function(shape){
                        return caml_cps_exact_call9
                                (store_module,
                                 [0, update_summary],
                                 0,
                                 id,
                                 addr,
                                 presence,
                                 md,
                                 shape,
                                 env,
                                 cont);
                       });
             });
   }
   function add_modtype$0(shape, id, info, env, cont){
    return caml_cps_exact_call3
            (shape_or_leaf,
             info[4],
             shape,
             function(shape){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[29][3],
                       info,
                       function(_xl_){
                        return caml_cps_exact_call6
                                (store_modtype, 0, id, _xl_, shape, env, cont);
                       });
             });
   }
   function add_modtype_lazy(update_summary, id, info, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Shape[12],
             info[4],
             function(shape){
              return caml_cps_exact_call6
                      (store_modtype,
                       [0, update_summary],
                       id,
                       info,
                       shape,
                       env,
                       cont);
             });
   }
   function add_class$0(shape, id, ty, env, cont){
    return caml_cps_exact_call4
            (class_declaration_address,
             env,
             id,
             ty,
             function(addr){
              return caml_cps_exact_call3
                      (shape_or_leaf,
                       ty[8],
                       shape,
                       function(shape){
                        return caml_cps_exact_call6
                                (store_class, id, addr, ty, shape, env, cont);
                       });
             });
   }
   function add_cltype(shape, id, ty, env, cont){
    return caml_cps_exact_call3
            (shape_or_leaf,
             ty[7],
             shape,
             function(shape){
              return caml_cps_exact_call5
                      (store_cltype, id, ty, shape, env, cont);
             });
   }
   function add_module$1(arg, shape, id, presence, mty, env, cont){
    return caml_cps_exact_call8
            (add_module_declaration,
             arg,
             shape,
             0,
             id,
             presence,
             md(mty),
             env,
             cont);
   }
   function add_module_lazy(update_summary, id, presence, mty, env, cont){
    var
     md =
       [0,
        mty,
        0,
        Dynlink_compilerlibs_Location[1],
        Dynlink_compilerlibs_Shape[1][5]];
    return caml_cps_exact_call6
            (add_module_declaration_lazy,
             update_summary,
             id,
             presence,
             md,
             env,
             cont);
   }
   function add_local_type(path, info, env, cont){
    var _xj_ = env[12];
    return caml_cps_call4
            (Dynlink_compilerlibs_Path[15][4],
             path,
             info,
             env[11],
             function(_xk_){
              return cont
                      ([0,
                        env[1],
                        env[2],
                        env[3],
                        env[4],
                        env[5],
                        env[6],
                        env[7],
                        env[8],
                        env[9],
                        env[10],
                        _xk_,
                        _xj_]);
             });
   }
   function scrape_alias(env, mty, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Subst[29][2],
             mty,
             function(mty){
              return caml_cps_exact_call4
                      (_ip_,
                       env,
                       0,
                       mty,
                       function(_xi_){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Subst[29][13], _xi_, cont);
                       });
             });
   }
   function enter_value(check, name, desc, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[11],
             name,
             function(id){
              return caml_cps_exact_call4
                      (value_declaration_address,
                       env,
                       id,
                       desc,
                       function(addr){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[12],
                                 desc[5],
                                 function(_xh_){
                                  return caml_cps_exact_call7
  (store_value,
   check,
   id,
   addr,
   desc,
   _xh_,
   env,
   function(env){return cont([0, id, env]);});
                                 });
                       });
             });
   }
   function enter_type(scope, name, info, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             name,
             function(id){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[12],
                       info[14],
                       function(_xg_){
                        return caml_cps_exact_call6
                                (store_type,
                                 1,
                                 id,
                                 info,
                                 _xg_,
                                 env,
                                 function(env){return cont([0, id, env]);});
                       });
             });
   }
   function enter_extension(scope, rebind, name, ext, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             name,
             function(id){
              return caml_cps_exact_call4
                      (extension_declaration_address,
                       env,
                       id,
                       ext,
                       function(addr){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[12],
                                 ext[8],
                                 function(shape){
                                  return caml_cps_exact_call8
  (store_extension,
   1,
   rebind,
   id,
   addr,
   ext,
   shape,
   env,
   function(env){return cont([0, id, env]);});
                                 });
                       });
             });
   }
   function enter_module_declaration
   (scope, arg, shape, s, presence, md, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             s,
             function(id){
              return caml_cps_exact_call8
                      (add_module_declaration,
                       arg,
                       shape,
                       1,
                       id,
                       presence,
                       md,
                       env,
                       function(_xf_){return cont([0, id, _xf_]);});
             });
   }
   function enter_modtype(scope, name, mtd, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             name,
             function(id){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[12],
                       mtd[4],
                       function(shape){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Subst[29][3],
                                 mtd,
                                 function(_xe_){
                                  return caml_cps_exact_call6
  (store_modtype,
   0,
   id,
   _xe_,
   shape,
   env,
   function(env){return cont([0, id, env]);});
                                 });
                       });
             });
   }
   function enter_class(scope, name, desc, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             name,
             function(id){
              return caml_cps_exact_call4
                      (class_declaration_address,
                       env,
                       id,
                       desc,
                       function(addr){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Shape[12],
                                 desc[8],
                                 function(_xd_){
                                  return caml_cps_exact_call6
  (store_class,
   id,
   addr,
   desc,
   _xd_,
   env,
   function(env){return cont([0, id, env]);});
                                 });
                       });
             });
   }
   function enter_cltype(scope, name, desc, env, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[10],
             scope,
             name,
             function(id){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Shape[12],
                       desc[7],
                       function(_xc_){
                        return caml_cps_exact_call5
                                (store_cltype,
                                 id,
                                 desc,
                                 _xc_,
                                 env,
                                 function(env){return cont([0, id, env]);});
                       });
             });
   }
   function enter_module(scope, arg, s, presence, mty, env, cont){
    return caml_cps_exact_call8
            (enter_module_declaration,
             scope,
             arg,
             0,
             s,
             presence,
             md(mty),
             env,
             cont);
   }
   function add_signature(param, sg, env, cont){
    function _wW_(env, sg, param){
     var mod_shape = param[2], map = param[1];
     if(! sg) return cont([0, map, env]);
     var rem = sg[2], comp = sg[1];
     function proj_shape(item, cont){
      if(! mod_shape) return cont([0, map, 0]);
      var mod_shape$0 = mod_shape[1];
      return caml_cps_call4
              (Dynlink_compilerlibs_Shape[11],
               0,
               mod_shape$0,
               item,
               function(shape){
                var _xa_ = [0, shape];
                return caml_cps_call4
                        (Dynlink_compilerlibs_Shape[16][2],
                         map,
                         item,
                         shape,
                         function(_xb_){return cont([0, _xb_, _xa_]);});
               });
     }
     function _wX_(match){
      var env = match[2], map = match[1];
      return caml_cps_exact_call3(_wW_, env, rem, [0, map, mod_shape]);
     }
     switch(comp[0]){
       case 0:
        var decl = comp[2], id = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][2],
                 id,
                 function(_w__){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w__,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call6
                                    (add_value$0,
                                     0,
                                     shape,
                                     id,
                                     decl,
                                     env,
                                     function(_w$_){return _wX_([0, map, _w$_]);});
                           });
                 });
       case 1:
        var decl$0 = comp[2], id$0 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][3],
                 id$0,
                 function(_w8_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w8_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call6
                                    (add_type$1,
                                     0,
                                     shape,
                                     id$0,
                                     decl$0,
                                     env,
                                     function(_w9_){return _wX_([0, map, _w9_]);});
                           });
                 });
       case 2:
        var ext = comp[2], id$1 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][6],
                 id$1,
                 function(_w6_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w6_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call7
                                    (add_extension,
                                     0,
                                     shape,
                                     0,
                                     id$1,
                                     ext,
                                     env,
                                     function(_w7_){return _wX_([0, map, _w7_]);});
                           });
                 });
       case 3:
        var md = comp[3], presence = comp[2], id$2 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][4],
                 id$2,
                 function(_w4_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w4_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call8
                                    (add_module_declaration,
                                     0,
                                     shape,
                                     0,
                                     id$2,
                                     presence,
                                     md,
                                     env,
                                     function(_w5_){return _wX_([0, map, _w5_]);});
                           });
                 });
       case 4:
        var decl$1 = comp[2], id$3 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][5],
                 id$3,
                 function(_w2_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w2_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call5
                                    (add_modtype$0,
                                     shape,
                                     id$3,
                                     decl$1,
                                     env,
                                     function(_w3_){return _wX_([0, map, _w3_]);});
                           });
                 });
       case 5:
        var decl$2 = comp[2], id$4 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][7],
                 id$4,
                 function(_w0_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _w0_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call5
                                    (add_class$0,
                                     shape,
                                     id$4,
                                     decl$2,
                                     env,
                                     function(_w1_){return _wX_([0, map, _w1_]);});
                           });
                 });
       default:
        var decl$3 = comp[2], id$5 = comp[1];
        return caml_cps_call2
                (Dynlink_compilerlibs_Shape[3][8],
                 id$5,
                 function(_wY_){
                  return caml_cps_exact_call2
                          (proj_shape,
                           _wY_,
                           function(match){
                            var shape = match[2], map = match[1];
                            return caml_cps_exact_call5
                                    (add_cltype,
                                     shape,
                                     id$5,
                                     decl$3,
                                     env,
                                     function(_wZ_){return _wX_([0, map, _wZ_]);});
                           });
                 });
     }
    }
    return _wW_(env, sg, param);
   }
   function _iy_(scope, parent_shape, mod_shape, sg, env, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Subst[23],
             [0, scope],
             Dynlink_compilerlibs_Subst[1],
             sg,
             function(sg){
              return caml_cps_exact_call4
                      (add_signature,
                       [0, parent_shape, mod_shape],
                       sg,
                       env,
                       function(match){
                        var env = match[2], shape = match[1];
                        return cont([0, sg, shape, env]);
                       });
             });
   }
   function enter_signature(mod_shape, scope, sg, env, cont){
    return caml_cps_exact_call6
            (_iy_,
             scope,
             Dynlink_compilerlibs_Shape[16][1],
             mod_shape,
             sg,
             env,
             function(match){
              var env = match[3], sg = match[1];
              return cont([0, sg, env]);
             });
   }
   function enter_signature_and_shape
   (scope, parent_shape, mod_shape, sg, env, cont){
    return caml_cps_exact_call6
            (_iy_, scope, parent_shape, [0, mod_shape], sg, env, cont);
   }
   function add_value$1(_wR_, cont){
    var _wS_ = 0;
    return cont
            (function(_wT_, _wU_, _wV_, cont){
              return caml_cps_exact_call6
                      (add_value$0, _wR_, _wS_, _wT_, _wU_, _wV_, cont);
             });
   }
   function add_type$2(_wM_, cont){
    var _wN_ = 0;
    return cont
            (function(_wO_, _wP_, _wQ_, cont){
              return caml_cps_exact_call6
                      (add_type$1, _wM_, _wN_, _wO_, _wP_, _wQ_, cont);
             });
   }
   function add_extension$0(_wG_, cont){
    var _wH_ = 0;
    return cont
            (function(_wI_, _wJ_, _wK_, _wL_, cont){
              return caml_cps_exact_call7
                      (add_extension, _wG_, _wH_, _wI_, _wJ_, _wK_, _wL_, cont);
             });
   }
   var _iz_ = 0;
   function add_class$1(_wD_, _wE_, _wF_, cont){
    return caml_cps_exact_call5(add_class$0, _iz_, _wD_, _wE_, _wF_, cont);
   }
   var _iA_ = 0;
   function add_cltype$0(_wA_, _wB_, _wC_, cont){
    return caml_cps_exact_call5(add_cltype, _iA_, _wA_, _wB_, _wC_, cont);
   }
   var _ia_ = 0, _iB_ = 0;
   function add_modtype$1(_wx_, _wy_, _wz_, cont){
    return caml_cps_exact_call5(add_modtype$0, _iB_, _wx_, _wy_, _wz_, cont);
   }
   function add_signature$0(sg, env, cont){
    return caml_cps_exact_call4
            (add_signature,
             [0, Dynlink_compilerlibs_Shape[16][1], 0],
             sg,
             env,
             function(match){var env = match[2]; return cont(env);});
   }
   function enter_unbound_value(name, reason, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[11],
             name,
             function(id){
              var
               _wl_ = env[12],
               _wm_ = env[11],
               _wn_ = [12, env[10], name, reason],
               _wo_ = env[9],
               _wp_ = env[8],
               _wq_ = env[7],
               _wr_ = env[6],
               _ws_ = env[5],
               _wt_ = env[4],
               _wu_ = env[3],
               _wv_ = env[2];
              return caml_cps_exact_call4
                      (add$8,
                       id,
                       [1, reason],
                       env[1],
                       function(_ww_){
                        return cont
                                ([0,
                                  _ww_,
                                  _wv_,
                                  _wu_,
                                  _wt_,
                                  _ws_,
                                  _wr_,
                                  _wq_,
                                  _wp_,
                                  _wo_,
                                  _wn_,
                                  _wm_,
                                  _wl_]);
                       });
             });
   }
   function enter_unbound_module(name, reason, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[11],
             name,
             function(id){
              var
               _wd_ = env[12],
               _we_ = env[11],
               _wf_ = [13, env[10], name, reason],
               _wg_ = env[9],
               _wh_ = env[8],
               _wi_ = env[7],
               _wj_ = env[6];
              return caml_cps_exact_call4
                      (add$8,
                       id,
                       [1, reason],
                       env[5],
                       function(_wk_){
                        return cont
                                ([0,
                                  env[1],
                                  env[2],
                                  env[3],
                                  env[4],
                                  _wk_,
                                  _wj_,
                                  _wi_,
                                  _wh_,
                                  _wg_,
                                  _wf_,
                                  _we_,
                                  _wd_]);
                       });
             });
   }
   function _iC_(slot, root, env0, cont){
    caml_push_trap
     (function(_wc_){
       if(_wc_ === Stdlib[8]) return cont(_iD_);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_wc_, 0));
      });
    return caml_cps_exact_call3
            (find_module_components,
             root,
             env0,
             function(_wb_){
              return caml_cps_exact_call2
                      (get_components_res,
                       _wb_,
                       function(val){
                        caml_pop_trap();
                        if(0 !== val[0]) return cont(_iF_);
                        var match = val[1];
                        if(0 !== match[0]) return cont(_iE_);
                        var comps = match[1];
                        function add_l(wrap, components, env0){
                         if(slot)
                          var
                           f = slot[1],
                           using =
                             [0,
                              function(s, x, cont){
                               return caml_cps_exact_call3(f, s, wrap(x), cont);
                              }];
                         else
                          var using = 0;
                         return [0,
                                 Dynlink_compilerlibs_Ident[27],
                                 [0, [0, components, root, using, env0]]];
                        }
                        function add(wrap, components, env0){
                         if(slot)
                          var
                           f = slot[1],
                           using =
                             [0,
                              function(s, x, cont){
                               return caml_cps_exact_call3(f, s, wrap(x), cont);
                              }];
                         else
                          var using = 0;
                         return [0,
                                 Dynlink_compilerlibs_Ident[27],
                                 [0, root, components, using, env0]];
                        }
                        var
                         constrs =
                           add_l
                            (function(x){return [0, -67648294, x];}, comps[2], env0[2]),
                         labels =
                           add_l
                            (function(x){return [0, 48004564, x];}, comps[3], env0[3]),
                         values =
                           add
                            (function(x){return [0, -991563951, x];}, comps[1], env0[1]),
                         types =
                           add
                            (function(x){return [0, 937565914, x];}, comps[4], env0[4]),
                         modtypes =
                           add
                            (function(x){return [0, 448725581, x];}, comps[6], env0[6]),
                         classes =
                           add
                            (function(x){return [0, -611981288, x];}, comps[7], env0[7]),
                         cltypes =
                           add
                            (function(x){return [0, 649842561, x];}, comps[8], env0[8]),
                         modules =
                           add
                            (function(x){return [0, -177755956, x];}, comps[5], env0[5]);
                        return cont
                                ([0,
                                  [0,
                                   values,
                                   constrs,
                                   labels,
                                   types,
                                   modules,
                                   modtypes,
                                   classes,
                                   cltypes,
                                   env0[9],
                                   [7, env0[10], root],
                                   env0[11],
                                   env0[12]]]);
                       });
             });
   }
   function remove_last_open(root, env0, cont){
    function filter_summary(summary, cont){
     if(typeof summary === "number"){
      var _v__ = Stdlib[3], raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace(_v__, 1));
     }
     if(7 !== summary[0])
      return caml_cps_exact_call3(map_summary, filter_summary, summary, cont);
     var p = summary[2], s = summary[1];
     return caml_cps_call3
             (Dynlink_compilerlibs_Path[1],
              p,
              root,
              function(_v$_){
               if(_v$_) return cont(s);
               var _wa_ = Stdlib[3], raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_wa_, 1));
              });
    }
    caml_push_trap
     (function(_v9_){
       if(_v9_ === Stdlib[3]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_v9_, 0));
      });
    return caml_cps_exact_call2
            (filter_summary,
             env0[10],
             function(summary){
              caml_pop_trap();
              function rem_l(tbl, cont){
               var _v4_ = tbl[2];
               function _v5_(){
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _hT_], 1));
               }
               if(! _v4_) return _v5_();
               var match = _v4_[1], next = match[4], root$0 = match[2];
               return caml_cps_call3
                       (Dynlink_compilerlibs_Path[1],
                        root,
                        root$0,
                        function(_v6_){
                         if(! _v6_) return _v5_();
                         var _v7_ = next[2];
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ident[33],
                                  Dynlink_compilerlibs_Ident[28],
                                  tbl[1],
                                  next[1],
                                  function(_v8_){return cont([0, _v8_, _v7_]);});
                        });
              }
              function rem(tbl, cont){
               var match = tbl[2];
               function _v0_(){
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _hU_], 1));
               }
               if(typeof match === "number") return _v0_();
               if(0 !== match[0]) return _v0_();
               var next = match[4], root$0 = match[1];
               return caml_cps_call3
                       (Dynlink_compilerlibs_Path[1],
                        root,
                        root$0,
                        function(_v1_){
                         if(! _v1_) return _v0_();
                         var _v2_ = next[2];
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Ident[33],
                                  Dynlink_compilerlibs_Ident[28],
                                  tbl[1],
                                  next[1],
                                  function(_v3_){return cont([0, _v3_, _v2_]);});
                        });
              }
              var _vP_ = env0[12], _vQ_ = env0[11], _vR_ = env0[9];
              return caml_cps_exact_call2
                      (rem,
                       env0[8],
                       function(_vS_){
                        return caml_cps_exact_call2
                                (rem,
                                 env0[7],
                                 function(_vT_){
                                  return caml_cps_exact_call2
  (rem,
   env0[6],
   function(_vU_){
    return caml_cps_exact_call2
            (rem,
             env0[5],
             function(_vV_){
              return caml_cps_exact_call2
                      (rem,
                       env0[4],
                       function(_vW_){
                        return caml_cps_exact_call2
                                (rem_l,
                                 env0[3],
                                 function(_vX_){
                                  return caml_cps_exact_call2
  (rem_l,
   env0[2],
   function(_vY_){
    return caml_cps_exact_call2
            (rem,
             env0[1],
             function(_vZ_){
              return cont
                      ([0,
                        [0,
                         _vZ_,
                         _vY_,
                         _vX_,
                         _vW_,
                         _vV_,
                         _vU_,
                         _vT_,
                         _vS_,
                         _vR_,
                         summary,
                         _vQ_,
                         _vP_]]);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function open_pers_signature(name, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[12],
             name,
             function(_vO_){
              return caml_cps_exact_call4
                      (_iC_,
                       0,
                       [0, _vO_],
                       env,
                       function(res){
                        if(1 === res[0] && 1048315315 <= res[1]){
                         var raise = caml_pop_trap();
                         return raise
                                 (caml_maybe_attach_backtrace([0, Assert_failure, _iG_], 1));
                        }
                        return cont(res);
                       });
             });
   }
   function open_signature(opt, _vx_, _vw_, ovf, root, env, cont){
    if(opt) var sth = opt[1], used_slot = sth; else var used_slot = [0, 0];
    if(_vx_)
     var sth$0 = _vx_[1], loc = sth$0;
    else
     var loc = Dynlink_compilerlibs_Location[1];
    if(_vw_) var sth$1 = _vw_[1], toplevel = sth$1; else var toplevel = 0;
    function _vy_(unused){
     return caml_cps_call2
             (Dynlink_compilerlibs_Warnings[5],
              unused,
              function(warn_unused){
               return caml_cps_call2
                       (Dynlink_compilerlibs_Warnings[5],
                        _iH_,
                        function(warn_shadow_id){
                         return caml_cps_call2
                                 (Dynlink_compilerlibs_Warnings[5],
                                  _iI_,
                                  function(warn_shadow_lc){
                                   a:
                                   if(! toplevel && ! loc[3]){
                                    if(! warn_unused && ! warn_shadow_id && ! warn_shadow_lc)
                                     break a;
                                    var
                                     _vB_ =
                                       function(_vD_){
var shadowed = [0, 0];
function slot(s, b, cont){
 var _vE_ = b[1];
 function _vI_(){return _vH_(0);}
 function _vH_(match){
  function _vL_(_vN_){used_slot[1] = 1; return cont(0);}
  if(! match) return _vL_(0);
  var kind = match[1];
  return 1 === ovf
          ? caml_cps_call3
            (Stdlib_List[36],
             [0, kind, s],
             shadowed[1],
             function(_vM_){
              if(_vM_) return _vL_(0);
              shadowed[1] = [0, [0, kind, s], shadowed[1]];
              a:
              {
               if
                (caml_string_notequal(kind, cst_constructor$2)
                 && caml_string_notequal(kind, cst_label$0)){var w = [27, kind, s]; break a;}
               var w = [28, kind, s];
              }
              return caml_cps_call3
                      (Dynlink_compilerlibs_Location[37], loc, w, _vL_);
             })
          : _vL_(0);
 }
 if(48004564 <= _vE_){
  if(448725581 === _vE_) return b[2] ? _vH_(_hX_) : _vI_();
  if(824627357 > _vE_){
   if(649842561 <= _vE_) return b[2] ? _vH_(_h0_) : _vI_();
   var _vF_ = b[2];
   if(! _vF_) return _vI_();
   var match = _vF_[1], l2 = match[2], l1 = match[1];
   return caml_cps_call4
           (same_constr[1],
            env,
            l1[2],
            l2[2],
            function(_vJ_){return _vJ_ ? _vI_() : _vH_(_h1_);});
  }
  if(937565914 <= _vE_) return b[2] ? _vH_(_hY_) : _vI_();
 }
 else{
  if(-177755956 > _vE_)
   return -611981288 <= _vE_
           ? b[2] ? _vH_(_h3_) : _vI_()
           : b[2] ? _vH_(_h4_) : _vI_();
  if(-67648294 <= _vE_){
   var _vG_ = b[2];
   if(! _vG_) return _vI_();
   var match$0 = _vG_[1], cda2 = match$0[2], cda1 = match$0[1];
   return caml_cps_call4
           (same_constr[1],
            env,
            cda1[1][2],
            cda2[1][2],
            function(_vK_){return _vK_ ? _vI_() : _vH_(_h2_);});
  }
 }
 return b[2] ? _vH_(_hZ_) : _vI_();
}
return caml_cps_exact_call4
        (_iC_, [0, slot], root, env, cont);
                                       };
                                    return warn_unused
    ? caml_cps_call2
      (add_delayed_check_forward$0[1],
       function(param, cont){
        var _vC_ = 1 - used_slot[1];
        return _vC_
                ? (used_slot
                   [1]
                  = 1,
                  caml_cps_call3
                   (Dynlink_compilerlibs_Location[37], loc, unused, cont))
                : cont(_vC_);
       },
       _vB_)
    : _vB_(0);
                                   }
                                   return caml_cps_exact_call4(_iC_, 0, root, env, cont);
                                  });
                        });
              });
    }
    return ovf
            ? caml_cps_call3
              (Dynlink_compilerlibs_Path[7],
               0,
               root,
               function(_vz_){return _vy_([17, _vz_]);})
            : caml_cps_call3
              (Dynlink_compilerlibs_Path[7],
               0,
               root,
               function(_vA_){return _vy_([44, _vA_]);});
   }
   function read_signature(modname, filename, cont){
    return caml_cps_call5
            (Dynlink_compilerlibs_Persisten[9],
             persistent_env[1],
             read_sign_of_cmi,
             modname,
             filename,
             function(mda){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[29][12],
                       mda[1],
                       function(md){
                        var match = md[1];
                        if(1 === match[0]){var sg = match[1]; return cont(sg);}
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace([0, Assert_failure, _iJ_], 1));
                       });
             });
   }
   function is_identchar_latin1(param, cont){
    a:
    {
     if(96 <= param){
      if(215 <= param){
       if(247 === param || 216 > param) break a;
      }
      else
       if(123 <= param){if(192 > param) break a;} else if(97 > param) break a;
     }
     else
      if(58 <= param){
       if(91 <= param){if(95 > param) break a;} else if(65 > param) break a;
      }
      else if(39 !== param && 48 > param) break a;
     return cont(1);
    }
    return cont(0);
   }
   function unit_name_of_filename(fn, cont){
    return caml_cps_call2
            (Stdlib_Filename[10],
             fn,
             function(match){
              return caml_string_notequal(match, cst_cmi$1)
                      ? cont(0)
                      : caml_cps_call2
                        (Stdlib_Filename[11],
                         fn,
                         function(_vu_){
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Misc[13][4][26],
                                   _vu_,
                                   function(unit){
                                    return caml_cps_call3
    (Dynlink_compilerlibs_Misc[13][4][68],
     is_identchar_latin1,
     unit,
     function(_vv_){return _vv_ ? cont([0, unit]) : cont(0);});
                                   });
                         });
             });
   }
   function persistent_structures_of_dir(dir, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Load_path[4][3],
             dir,
             function(_vq_){
              return caml_cps_call2
                      (Stdlib_List[61],
                       _vq_,
                       function(_vr_){
                        return caml_cps_call2
                                (Stdlib_Seq[30],
                                 unit_name_of_filename,
                                 function(_vs_){
                                  return caml_cps_call2
  (_vs_,
   _vr_,
   function(_vt_){
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[13][4][64][42], _vt_, cont);
   });
                                 });
                       });
             });
   }
   function save_signature_with_transform
   (cmi_transform, alerts, sg, modname, filename, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Btype[53],
             0,
             function(_vl_){
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[10],
                       0,
                       function(_vm_){
                        return caml_cps_call2
                                (Dynlink_compilerlibs_Subst[9],
                                 Dynlink_compilerlibs_Subst[1],
                                 function(_vn_){
                                  return caml_cps_call4
  (Dynlink_compilerlibs_Subst[23],
   1,
   _vn_,
   sg,
   function(sg){
    return caml_cps_call5
            (Dynlink_compilerlibs_Persisten[17],
             persistent_env[1],
             modname,
             sg,
             alerts,
             function(_vo_){
              var cmi = cmi_transform(_vo_);
              return caml_cps_exact_call3
                      (sign_of_cmi,
                       _ia_,
                       [0, , cmi],
                       function(pm){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Persisten[18],
                                 persistent_env[1],
                                 [0, filename, cmi],
                                 pm,
                                 function(_vp_){return cont(cmi);});
                       });
             });
   });
                                 });
                       });
             });
   }
   function save_signature(alerts, sg, modname, filename, cont){
    return caml_cps_exact_call6
            (save_signature_with_transform,
             function(cmi){return cmi;},
             alerts,
             sg,
             modname,
             filename,
             cont);
   }
   function save_signature_with_imports
   (alerts, sg, modname, filename, imports, cont){
    function with_imports(cmi){return [0, cmi[1], cmi[2], imports, cmi[4]];}
    return caml_cps_exact_call6
            (save_signature_with_transform,
             with_imports,
             alerts,
             sg,
             modname,
             filename,
             cont);
   }
   var
    _iK_ = caml_callback(caml_callback(add_extension$0, [0]), [0]),
    _iL_ = caml_callback(add_type$2, [0]),
    initial =
      caml_callback(Dynlink_compilerlibs_Predef[45], [_iL_, _iK_, empty$6]);
   function mark_module_used(uid, cont){
    caml_push_trap
     (function(_vk_){
       if(_vk_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vk_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             module_declarations[1],
             uid,
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, 0, cont);
             });
   }
   function mark_value_used(uid, cont){
    caml_push_trap
     (function(_vj_){
       if(_vj_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vj_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             value_declarations[1],
             uid,
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, 0, cont);
             });
   }
   function mark_type_used(uid, cont){
    caml_push_trap
     (function(_vi_){
       if(_vi_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vi_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             type_declarations[1],
             uid,
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, 0, cont);
             });
   }
   function mark_type_path_used(env, path, cont){
    caml_push_trap
     (function(_vh_){
       if(_vh_ === Stdlib[8]) return cont(undef);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vh_, 0));
      });
    return caml_cps_exact_call3
            (find_type,
             path,
             env,
             function(decl){
              caml_pop_trap();
              return caml_cps_exact_call2(mark_type_used, decl[14], cont);
             });
   }
   function mark_constructor_used(usage, cd, cont){
    caml_push_trap
     (function(_vg_){
       if(_vg_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vg_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             used_constructors[1],
             cd[6],
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, usage, cont);
             });
   }
   function mark_extension_used(usage, ext, cont){
    caml_push_trap
     (function(_vf_){
       if(_vf_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_vf_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             used_constructors[1],
             ext[8],
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, usage, cont);
             });
   }
   function mark_label_used(usage, ld, cont){
    caml_push_trap
     (function(_ve_){
       if(_ve_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_ve_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             used_labels[1],
             ld[6],
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, usage, cont);
             });
   }
   function set_value_used_callback(vd, callback, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Shape[1][15][5],
             value_declarations[1],
             vd[5],
             callback,
             cont);
   }
   function set_type_used_callback(td, callback, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Shape[1][6],
             td[14],
             function(_u$_){
              if(! _u$_) return cont(_u$_);
              function _va_(old){
               return caml_cps_call4
                       (Dynlink_compilerlibs_Shape[1][15][10],
                        type_declarations[1],
                        td[14],
                        function(param, cont){
                         return caml_cps_call2(callback, old, cont);
                        },
                        cont);
              }
              caml_push_trap
               (function(_vc_){
                 if(_vc_ === Stdlib[8])
                  return _va_(function(_vd_, cont){return cont(0);});
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_vc_, 0));
                });
              return caml_cps_call3
                      (Dynlink_compilerlibs_Shape[1][15][7],
                       type_declarations[1],
                       td[14],
                       function(_vb_){caml_pop_trap(); return _va_(_vb_);});
             });
   }
   function may_lookup_error(report_errors, loc, env, err, cont){
    if(report_errors)
     return caml_cps_exact_call4(lookup_error, loc, env, err, cont);
    var _u__ = Stdlib[8], raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace(_u__, 1));
   }
   function use_module(use, loc, path, mda, cont){
    if(! use) return cont(use);
    var comps = mda[2];
    return caml_cps_exact_call2
            (mark_module_used,
             comps[2],
             function(_u6_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][12],
                       function(kind, message, cont){
                        function _u7_(message){
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Path[7],
                                  0,
                                  path,
                                  function(_u8_){
                                   return caml_cps_call4
   (Stdlib_Printf[4],
    _iN_,
    _u8_,
    message,
    function(_u9_){
     return caml_cps_call6
             (Dynlink_compilerlibs_Location[44],
              0,
              0,
              kind,
              loc,
              _u9_,
              cont);
    });
                                  });
                        }
                        return caml_string_equal(message, cst$117)
                                ? _u7_(cst$101)
                                : caml_cps_call3(Stdlib[28], cst$102, message, _u7_);
                       },
                       comps[1],
                       cont);
             });
   }
   function use_value(use, loc, path, vda, cont){
    if(! use) return cont(use);
    var desc = vda[1];
    return caml_cps_exact_call2
            (mark_value_used,
             desc[5],
             function(_u4_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Path[7],
                       0,
                       path,
                       function(_u5_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Builtin_a[1],
                                 loc,
                                 desc[4],
                                 _u5_,
                                 cont);
                       });
             });
   }
   function use_type(use, loc, path, tda, cont){
    if(! use) return cont(use);
    var decl = tda[1];
    return caml_cps_exact_call2
            (mark_type_used,
             decl[14],
             function(_u2_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Path[7],
                       0,
                       path,
                       function(_u3_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Builtin_a[1],
                                 loc,
                                 decl[11],
                                 _u3_,
                                 cont);
                       });
             });
   }
   function use_modtype(use, loc, path, desc, cont){
    return use
            ? caml_cps_call3
              (Dynlink_compilerlibs_Path[7],
               0,
               path,
               function(_u1_){
                return caml_cps_call4
                        (Dynlink_compilerlibs_Builtin_a[1],
                         loc,
                         desc[2],
                         _u1_,
                         cont);
               })
            : cont(use);
   }
   function use_class(use, loc, path, clda, cont){
    if(! use) return cont(use);
    var desc = clda[1], uid = desc[8];
    function _uX_(_uZ_){
     return caml_cps_call3
             (Dynlink_compilerlibs_Path[7],
              0,
              path,
              function(_u0_){
               return caml_cps_call4
                       (Dynlink_compilerlibs_Builtin_a[1],
                        loc,
                        desc[7],
                        _u0_,
                        cont);
              });
    }
    caml_push_trap
     (function(_uY_){
       if(_uY_ === Stdlib[8]) return _uX_(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_uY_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             type_declarations[1],
             uid,
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, 0, _uX_);
             });
   }
   function use_cltype(use, loc, path, desc, cont){
    if(! use) return cont(use);
    var uid = desc[7];
    function _uT_(_uV_){
     return caml_cps_call3
             (Dynlink_compilerlibs_Path[7],
              0,
              path,
              function(_uW_){
               return caml_cps_call4
                       (Dynlink_compilerlibs_Builtin_a[1],
                        loc,
                        desc[6],
                        _uW_,
                        cont);
              });
    }
    caml_push_trap
     (function(_uU_){
       if(_uU_ === Stdlib[8]) return _uT_(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_uU_, 0));
      });
    return caml_cps_call3
            (Dynlink_compilerlibs_Shape[1][15][7],
             type_declarations[1],
             uid,
             function(mark){
              caml_pop_trap();
              return caml_cps_call2(mark, 0, _uT_);
             });
   }
   function use_label(use, loc, usage, env, lbl, cont){
    function _uL_(_uS_){return cont(_uS_);}
    return use
            ? caml_cps_call2
              (Dynlink_compilerlibs_Types[9],
               lbl[2],
               function(match){
                if(typeof match !== "number" && 3 === match[0]){
                 var ty_path = match[1];
                 return caml_cps_exact_call3
                         (mark_type_path_used,
                          env,
                          ty_path,
                          function(_uM_){
                           function _uN_(_uP_){
                            return caml_cps_call4
                                    (Dynlink_compilerlibs_Builtin_a[1],
                                     loc,
                                     lbl[10],
                                     lbl[1],
                                     function(_uQ_){
                                      var _uR_ = 1 === usage ? 1 : 0;
                                      return _uR_
      ? caml_cps_call4
        (Dynlink_compilerlibs_Builtin_a[6],
         loc,
         lbl[10],
         lbl[1],
         cont)
      : _uL_(_uR_);
                                     });
                           }
                           caml_push_trap
                            (function(_uO_){
                              if(_uO_ === Stdlib[8]) return _uN_(0);
                              var raise = caml_pop_trap();
                              return raise(caml_maybe_attach_backtrace(_uO_, 0));
                             });
                           return caml_cps_call3
                                   (Dynlink_compilerlibs_Shape[1][15][7],
                                    used_labels[1],
                                    lbl[11],
                                    function(mark){
                                     caml_pop_trap();
                                     return caml_cps_call2(mark, usage, _uN_);
                                    });
                          });
                }
                var raise = caml_pop_trap();
                return raise
                        (caml_maybe_attach_backtrace([0, Assert_failure, _iM_], 1));
               })
            : _uL_(use);
   }
   function use_constructor_desc(use, loc, usage, env, cstr, cont){
    return use
            ? caml_cps_call2
              (Dynlink_compilerlibs_Btype[79],
               cstr,
               function(ty_path){
                return caml_cps_exact_call3
                        (mark_type_path_used,
                         env,
                         ty_path,
                         function(_uH_){
                          function _uI_(_uK_){
                           return caml_cps_call4
                                   (Dynlink_compilerlibs_Builtin_a[1],
                                    loc,
                                    cstr[12],
                                    cstr[1],
                                    cont);
                          }
                          caml_push_trap
                           (function(_uJ_){
                             if(_uJ_ === Stdlib[8]) return _uI_(0);
                             var raise = caml_pop_trap();
                             return raise(caml_maybe_attach_backtrace(_uJ_, 0));
                            });
                          return caml_cps_call3
                                  (Dynlink_compilerlibs_Shape[1][15][7],
                                   used_constructors[1],
                                   cstr[14],
                                   function(mark){
                                    caml_pop_trap();
                                    return caml_cps_call2(mark, usage, _uI_);
                                   });
                         });
               })
            : cont(use);
   }
   function use_constructor(use, loc, usage, env, cda, cont){
    return caml_cps_exact_call6
            (use_constructor_desc, use, loc, usage, env, cda[1], cont);
   }
   function lookup_ident_module(load, errors, mark, loc, name, env, cont){
    function _uz_(match){
     var data = match[2], path = match[1];
     if(typeof data === "number")
      return load
              ? caml_cps_call5
                (Dynlink_compilerlibs_Persisten[12],
                 persistent_env[1],
                 read_sign_of_cmi,
                 loc,
                 name,
                 function(_uE_){return cont([0, path, 0]);})
              : (caml_push_trap
                 (function(_uF_){
                   if(_uF_ === Stdlib[8])
                    return caml_cps_exact_call5
                            (may_lookup_error, errors, loc, env, [4, [0, name]], cont);
                   var raise = caml_pop_trap();
                   return raise(caml_maybe_attach_backtrace(_uF_, 0));
                  }),
                caml_cps_exact_call2
                 (find_pers_mod,
                  name,
                  function(mda){
                   caml_pop_trap();
                   return caml_cps_exact_call5
                           (use_module,
                            mark,
                            loc,
                            path,
                            mda,
                            function(_uG_){return cont([0, path, mda]);});
                  }));
     if(0 !== data[0])
      return caml_cps_exact_call5(may_lookup_error, errors, loc, env, 0, cont);
     var mda = data[1];
     return caml_cps_exact_call5
             (use_module,
              mark,
              loc,
              path,
              mda,
              function(_uD_){
               return load ? cont([0, path, 0]) : cont([0, path, mda]);
              });
    }
    caml_push_trap
     (function(_uC_){
       if(_uC_ === Stdlib[8])
        return caml_cps_exact_call5
                (may_lookup_error, errors, loc, env, [4, [0, name]], _uz_);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_uC_, 0));
      });
    var tbl = env[5];
    function _uA_(res){caml_pop_trap(); return _uz_(res);}
    caml_push_trap
     (function(exn){
       if(exn === Stdlib[8] && ! is(name))
        return caml_cps_call2
                (Dynlink_compilerlibs_Ident[12],
                 name,
                 function(_uB_){
                  var path = [0, _uB_];
                  return _uA_([0, path, 0]);
                 });
       var
        raise = caml_pop_trap(),
        exn$0 = caml_maybe_attach_backtrace(exn, 0);
       return raise(exn$0);
      });
    return caml_cps_exact_call5
            (find_name$0,
             wrap_module,
             mark,
             name,
             tbl,
             function(x){caml_pop_trap(); return _uA_(x);});
   }
   function lookup_all_ident_constructors
   (errors, use, loc, usage, s, env, cont){
    return caml_cps_exact_call4
            (find_all$1,
             use,
             s,
             env[2],
             function(cstrs){
              return cstrs
                      ? caml_cps_call3
                        (Stdlib_List[19],
                         function(param, cont){
                          var use_fn = param[2], cda = param[1];
                          function use_fn$0(param, cont){
                           return caml_cps_exact_call6
                                   (use_constructor,
                                    use,
                                    loc,
                                    usage,
                                    env,
                                    cda,
                                    function(_uy_){return caml_cps_call2(use_fn, 0, cont);});
                          }
                          return cont([0, cda[1], use_fn$0]);
                         },
                         cstrs,
                         cont)
                      : caml_cps_exact_call5
                        (may_lookup_error, errors, loc, env, [2, [0, s]], cont);
             });
   }
   function lookup_module_components(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return caml_cps_exact_call7
               (lookup_ident_module,
                0,
                errors,
                use,
                loc,
                s,
                env,
                function(match){
                 var data = match[2], path = match[1];
                 return cont([0, path, data[2]]);
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call7
               (lookup_dot_module,
                errors,
                use,
                loc,
                l,
                s$0,
                env,
                function(match){
                 var data = match[2], path = match[1];
                 return cont([0, path, data[2]]);
                });
      default:
       return caml_cps_exact_call6
               (lookup_apply,
                errors,
                use,
                loc,
                lid,
                env,
                function(match){
                 var arg = match[3], f_comp = match[2], f_path = match[1];
                 return caml_cps_call6
                         (components_of_functor_appl[1],
                          loc,
                          f_path,
                          f_comp,
                          arg,
                          env,
                          function(comps){return cont([0, [2, f_path, arg], comps]);});
                });
    }
   }
   function lookup_structure_components(errors, use, loc, lid, env, cont){
    return caml_cps_exact_call6
            (lookup_module_components,
             errors,
             use,
             loc,
             lid,
             env,
             function(match){
              var comps = match[2], path = match[1];
              return caml_cps_exact_call2
                      (get_components_res,
                       comps,
                       function(_ux_){
                        if(0 === _ux_[0]){
                         var match = _ux_[1];
                         if(0 !== match[0])
                          return caml_cps_exact_call5
                                  (may_lookup_error, errors, loc, env, [15, lid], cont);
                         var comps = match[1];
                         return cont([0, path, comps]);
                        }
                        var match$0 = _ux_[1];
                        if(! match$0)
                         return caml_cps_exact_call5
                                 (may_lookup_error, errors, loc, env, [16, lid], cont);
                        var p = match$0[1];
                        return caml_cps_exact_call5
                                (may_lookup_error, errors, loc, env, [18, lid, p], cont);
                       });
             });
   }
   function lookup_apply(errors, use, loc, lid_whole_app, env, cont){
    function _up_(f0_lid, args0){
     if(2 !== f0_lid[0])
      return caml_cps_call3
              (Stdlib_List[19],
               function(param, cont){
                var mty = param[3], p = param[2];
                return cont([0, p, mty]);
               },
               args0,
               function(args_for_errors){
                return caml_cps_exact_call6
                        (lookup_module_components,
                         errors,
                         use,
                         loc,
                         f0_lid,
                         env,
                         function(match){
                          var f0_comp = match[2], f0_path = match[1];
                          function check_one_apply
                          (errors, loc, f_lid, f_comp, arg_path, arg_mty, env, cont){
                           return caml_cps_exact_call2
                                   (get_components_res,
                                    f_comp,
                                    function(_us_){
                                     function _ut_(match){
                                      var param_mty = match[2], f_comp = match[1];
                                      return caml_cps_call3
      (Stdlib_Hashtbl[9],
       f_comp[4],
       arg_path,
       function(_uu_){
        function _uv_(_uw_){return cont([0, arg_path, f_comp]);}
        return 1 - _uu_
                ? caml_cps_call10
                  (check_functor_application[1],
                   errors,
                   loc,
                   lid_whole_app,
                   f0_path,
                   args_for_errors,
                   arg_path,
                   arg_mty,
                   param_mty,
                   env,
                   _uv_)
                : _uv_(0);
       });
                                     }
                                     if(0 === _us_[0]){
                                      var match = _us_[1];
                                      if(0 === match[0])
                                       return caml_cps_exact_call5
       (may_lookup_error, errors, loc, env, [13, f_lid], _ut_);
                                      var fcomps = match[1], match$0 = fcomps[1];
                                      if(! match$0)
                                       return caml_cps_exact_call5
       (may_lookup_error, errors, loc, env, [17, f_lid], _ut_);
                                      var arg = match$0[2];
                                      return _ut_([0, fcomps, arg]);
                                     }
                                     var match$1 = _us_[1];
                                     if(! match$1)
                                      return caml_cps_exact_call5
      (may_lookup_error, errors, loc, env, [14, f_lid], _ut_);
                                     var p = match$1[1];
                                     return caml_cps_exact_call5
     (may_lookup_error, errors, loc, env, [18, f_lid, p], _ut_);
                                    });
                          }
                          function _uq_(param, f_comp, f_path){
                           if(! param)
                            return caml_cps_call2
                                    (Stdlib[1], cst_Env_lookup_apply_empty_arg, cont);
                           var _ur_ = param[1], f_lid = _ur_[1];
                           if(param[2]){
                            var args = param[2], arg_mty = _ur_[3], arg_path = _ur_[2];
                            return caml_cps_exact_call8
                                    (check_one_apply,
                                     errors,
                                     loc,
                                     f_lid,
                                     f_comp,
                                     arg_path,
                                     arg_mty,
                                     env,
                                     function(match){
                                      var f_comp = match[2], arg_path = match[1];
                                      return caml_cps_call6
      (components_of_functor_appl[1],
       loc,
       f_path,
       f_comp,
       arg_path,
       env,
       function(f_comp){
        var f_path$0 = [2, f_path, arg_path];
        return caml_cps_exact_call3(_uq_, args, f_comp, f_path$0);
       });
                                     });
                           }
                           var arg_mty$0 = _ur_[3], arg_path$0 = _ur_[2];
                           return caml_cps_exact_call8
                                   (check_one_apply,
                                    errors,
                                    loc,
                                    f_lid,
                                    f_comp,
                                    arg_path$0,
                                    arg_mty$0,
                                    env,
                                    function(match){
                                     var comps = match[2], arg_path = match[1];
                                     return cont([0, f_path, comps, arg_path]);
                                    });
                          }
                          return _uq_(args0, f0_comp, f0_path);
                         });
               });
     var arg_lid = f0_lid[2], f_lid = f0_lid[1];
     return caml_cps_exact_call6
             (_iO_,
              errors,
              use,
              loc,
              arg_lid,
              env,
              function(match){
               var
                arg_md = match[2],
                arg_path = match[1],
                args = [0, [0, f_lid, arg_path, arg_md[1]], args0];
               return caml_cps_exact_call2(_up_, f_lid, args);
              });
    }
    return _up_(lid_whole_app, 0);
   }
   function _iO_(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return caml_cps_exact_call7
               (lookup_ident_module,
                0,
                errors,
                use,
                loc,
                s,
                env,
                function(match){
                 var data = match[2], path = match[1];
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Subst[29][12],
                          data[1],
                          function(md){return cont([0, path, md]);});
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call7
               (lookup_dot_module,
                errors,
                use,
                loc,
                l,
                s$0,
                env,
                function(match){
                 var data = match[2], path = match[1];
                 return caml_cps_call2
                         (Dynlink_compilerlibs_Subst[29][12],
                          data[1],
                          function(md){return cont([0, path, md]);});
                });
      default:
       return caml_cps_exact_call6
               (lookup_apply,
                errors,
                use,
                loc,
                lid,
                env,
                function(match){
                 var
                  path_arg = match[3],
                  comp_f = match[2],
                  path_f = match[1];
                 return caml_cps_exact_call4
                         (modtype_of_functor_appl,
                          comp_f,
                          path_f,
                          path_arg,
                          function(_uo_){
                           var md$0 = md(_uo_);
                           return cont([0, [2, path_f, path_arg], md$0]);
                          });
                });
    }
   }
   function lookup_dot_module(errors, use, loc, l, s, env, cont){
    return caml_cps_exact_call6
            (lookup_structure_components,
             errors,
             use,
             loc,
             l,
             env,
             function(match){
              var comps = match[2], p = match[1];
              caml_push_trap
               (function(_un_){
                 if(_un_ === Stdlib[8])
                  return caml_cps_exact_call5
                          (may_lookup_error, errors, loc, env, [4, [1, l, s]], cont);
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_un_, 0));
                });
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[13][4][65][28],
                       s,
                       comps[5],
                       function(mda){
                        caml_pop_trap();
                        var path = [1, p, s];
                        return caml_cps_exact_call5
                                (use_module,
                                 use,
                                 loc,
                                 path,
                                 mda,
                                 function(_um_){return cont([0, path, mda]);});
                       });
             });
   }
   function _iP_(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var name = lid[1];
       caml_push_trap
        (function(_ul_){
          if(_ul_ === Stdlib[8])
           return caml_cps_exact_call5
                   (may_lookup_error,
                    errors,
                    loc,
                    env,
                    [0, [0, name], 0],
                    cont);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_ul_, 0));
         });
       return caml_cps_exact_call5
               (find_name$0,
                wrap_value,
                use,
                name,
                env[1],
                function(val){
                 caml_pop_trap();
                 var match = val[2], path = val[1];
                 if(0 === match[0]){
                  var vda = match[1];
                  return caml_cps_exact_call5
                          (use_value,
                           use,
                           loc,
                           path,
                           vda,
                           function(_uk_){return cont([0, path, vda[1]]);});
                 }
                 var reason = match[1], lid = [0, name];
                 if(typeof reason === "number")
                  switch(reason){
                    case 0:
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [10, lid], cont);
                    case 1:
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [11, lid], cont);
                    default:
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [12, lid], cont);
                  }
                 var
                  rloc = reason[1],
                  _uj_ = 1 - loc[3],
                  show_hint = _uj_ ? 1 - rloc[3] : _uj_,
                  hint = show_hint ? [0, rloc] : 0;
                 return caml_cps_exact_call5
                         (may_lookup_error, errors, loc, env, [0, lid, hint], cont);
                });
      case 1:
       var s = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2], path = match[1];
                 caml_push_trap
                  (function(_ui_){
                    if(_ui_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (may_lookup_error,
                              errors,
                              loc,
                              env,
                              [0, [1, l, s], 0],
                              cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_ui_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s,
                          comps[1],
                          function(vda){
                           caml_pop_trap();
                           var path$0 = [1, path, s];
                           return caml_cps_exact_call5
                                   (use_value,
                                    use,
                                    loc,
                                    path$0,
                                    vda,
                                    function(_uh_){return cont([0, path$0, vda[1]]);});
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iQ_], 1));
    }
   }
   function _iS_(errors, use, loc, lid, env, cont){
    function _uc_(match){
     var tda = match[2], path = match[1];
     return cont([0, path, tda[1]]);
    }
    switch(lid[0]){
      case 0:
       var s = lid[1];
       caml_push_trap
        (function(_ug_){
          if(_ug_ === Stdlib[8])
           return caml_cps_exact_call5
                   (may_lookup_error, errors, loc, env, [1, [0, s]], _uc_);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_ug_, 0));
         });
       return caml_cps_exact_call5
               (find_name$0,
                wrap_identity,
                use,
                s,
                env[4],
                function(res){
                 caml_pop_trap();
                 var data = res[2], path = res[1];
                 return caml_cps_exact_call5
                         (use_type,
                          use,
                          loc,
                          path,
                          data,
                          function(_uf_){return _uc_(res);});
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2], p = match[1];
                 caml_push_trap
                  (function(_ue_){
                    if(_ue_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [1, [1, l, s$0]], _uc_);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_ue_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[4],
                          function(tda){
                           caml_pop_trap();
                           var path = [1, p, s$0];
                           return caml_cps_exact_call5
                                   (use_type,
                                    use,
                                    loc,
                                    path,
                                    tda,
                                    function(_ud_){return _uc_([0, path, tda]);});
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iR_], 1));
    }
   }
   function lookup_modtype_lazy(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       caml_push_trap
        (function(_ub_){
          if(_ub_ === Stdlib[8])
           return caml_cps_exact_call5
                   (may_lookup_error, errors, loc, env, [6, [0, s]], cont);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_ub_, 0));
         });
       return caml_cps_exact_call5
               (find_name$0,
                wrap_identity,
                use,
                s,
                env[6],
                function(val){
                 caml_pop_trap();
                 var data = val[2], path = val[1];
                 return caml_cps_exact_call5
                         (use_modtype,
                          use,
                          loc,
                          path,
                          data[1],
                          function(_ua_){return cont([0, path, data[1]]);});
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2], p = match[1];
                 caml_push_trap
                  (function(_t$_){
                    if(_t$_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [6, [1, l, s$0]], cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_t$_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[6],
                          function(mta){
                           caml_pop_trap();
                           var path = [1, p, s$0];
                           return caml_cps_exact_call5
                                   (use_modtype,
                                    use,
                                    loc,
                                    path,
                                    mta[1],
                                    function(_t__){return cont([0, path, mta[1]]);});
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iT_], 1));
    }
   }
   function _iU_(errors, use, loc, lid, env, cont){
    return caml_cps_exact_call6
            (lookup_modtype_lazy,
             errors,
             use,
             loc,
             lid,
             env,
             function(match){
              var mt = match[2], path = match[1];
              return caml_cps_call2
                      (Dynlink_compilerlibs_Subst[29][14],
                       mt,
                       function(_t9_){return cont([0, path, _t9_]);});
             });
   }
   function _iV_(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       caml_push_trap
        (function(_t8_){
          if(_t8_ === Stdlib[8])
           return caml_cps_exact_call5
                   (may_lookup_error, errors, loc, env, [5, [0, s]], cont);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_t8_, 0));
         });
       return caml_cps_exact_call5
               (find_name$0,
                wrap_identity,
                use,
                s,
                env[7],
                function(val){
                 caml_pop_trap();
                 var clda = val[2], path = val[1];
                 return caml_cps_exact_call5
                         (use_class,
                          use,
                          loc,
                          path,
                          clda,
                          function(_t7_){return cont([0, path, clda[1]]);});
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2], p = match[1];
                 caml_push_trap
                  (function(_t6_){
                    if(_t6_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [5, [1, l, s$0]], cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_t6_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[7],
                          function(clda){
                           caml_pop_trap();
                           var path = [1, p, s$0];
                           return caml_cps_exact_call5
                                   (use_class,
                                    use,
                                    loc,
                                    path,
                                    clda,
                                    function(_t5_){return cont([0, path, clda[1]]);});
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iW_], 1));
    }
   }
   function _iX_(errors, use, loc, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       caml_push_trap
        (function(_t4_){
          if(_t4_ === Stdlib[8])
           return caml_cps_exact_call5
                   (may_lookup_error, errors, loc, env, [7, [0, s]], cont);
          var raise = caml_pop_trap();
          return raise(caml_maybe_attach_backtrace(_t4_, 0));
         });
       return caml_cps_exact_call5
               (find_name$0,
                wrap_identity,
                use,
                s,
                env[8],
                function(val){
                 caml_pop_trap();
                 var cltda = val[2], path = val[1];
                 return caml_cps_exact_call5
                         (use_cltype,
                          use,
                          loc,
                          path,
                          cltda[1],
                          function(_t3_){return cont([0, path, cltda[1]]);});
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2], p = match[1];
                 caml_push_trap
                  (function(_t2_){
                    if(_t2_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (may_lookup_error, errors, loc, env, [7, [1, l, s$0]], cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_t2_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[8],
                          function(cltda){
                           caml_pop_trap();
                           var path = [1, p, s$0];
                           return caml_cps_exact_call5
                                   (use_cltype,
                                    use,
                                    loc,
                                    path,
                                    cltda[1],
                                    function(_t1_){return cont([0, path, cltda[1]]);});
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _iY_], 1));
    }
   }
   function _iZ_(errors, use, loc, usage, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return caml_cps_exact_call4
               (find_all$1,
                use,
                s,
                env[3],
                function(lbls){
                 return lbls
                         ? caml_cps_call3
                           (Stdlib_List[19],
                            function(param, cont){
                             var use_fn = param[2], lbl = param[1];
                             function use_fn$0(param, cont){
                              return caml_cps_exact_call6
                                      (use_label,
                                       use,
                                       loc,
                                       usage,
                                       env,
                                       lbl,
                                       function(_t0_){return caml_cps_call2(use_fn, 0, cont);});
                             }
                             return cont([0, lbl, use_fn$0]);
                            },
                            lbls,
                            cont)
                         : caml_cps_exact_call5
                           (may_lookup_error, errors, loc, env, [3, [0, s]], cont);
                });
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2];
                 function _tY_(){
                  return caml_cps_exact_call5
                          (may_lookup_error, errors, loc, env, [3, [1, l, s$0]], cont);
                 }
                 caml_push_trap
                  (function(_tZ_){
                    if(_tZ_ === Stdlib[8]) return _tY_();
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_tZ_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[3],
                          function(lbls){
                           caml_pop_trap();
                           return lbls
                                   ? caml_cps_call3
                                     (Stdlib_List[19],
                                      function(lbl, cont){
                                       function use_fun(param, cont){
return caml_cps_exact_call6
        (use_label, use, loc, usage, env, lbl, cont);
                                       }
                                       return cont([0, lbl, use_fun]);
                                      },
                                      lbls,
                                      cont)
                                   : _tY_();
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _i0_], 1));
    }
   }
   function _i1_(errors, use, loc, usage, lid, env, cont){
    return caml_cps_exact_call7
            (_iZ_,
             errors,
             use,
             loc,
             usage,
             lid,
             env,
             function(match){
              if(match){
               var match$0 = match[1], use = match$0[2], desc = match$0[1];
               return caml_cps_call2
                       (use, 0, function(_tX_){return cont(desc);});
              }
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _i2_], 1));
             });
   }
   function _i3_(errors, use, loc, usage, lid, env, cont){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return caml_cps_exact_call7
               (lookup_all_ident_constructors,
                errors,
                use,
                loc,
                usage,
                s,
                env,
                cont);
      case 1:
       var s$0 = lid[2], l = lid[1];
       if(0 === l[0] && ! caml_string_notequal(l[1], cst_predef))
        return caml_cps_exact_call7
                (lookup_all_ident_constructors,
                 errors,
                 use,
                 loc,
                 usage,
                 s$0,
                 initial,
                 cont);
       return caml_cps_exact_call6
               (lookup_structure_components,
                errors,
                use,
                loc,
                l,
                env,
                function(match){
                 var comps = match[2];
                 function _tV_(){
                  return caml_cps_exact_call5
                          (may_lookup_error, errors, loc, env, [2, [1, l, s$0]], cont);
                 }
                 caml_push_trap
                  (function(_tW_){
                    if(_tW_ === Stdlib[8]) return _tV_();
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_tW_, 0));
                   });
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Misc[13][4][65][28],
                          s$0,
                          comps[2],
                          function(cstrs){
                           caml_pop_trap();
                           return cstrs
                                   ? caml_cps_call3
                                     (Stdlib_List[19],
                                      function(cda, cont){
                                       function use_fun(param, cont){
return caml_cps_exact_call6
        (use_constructor, use, loc, usage, env, cda, cont);
                                       }
                                       return cont([0, cda[1], use_fun]);
                                      },
                                      cstrs,
                                      cont)
                                   : _tV_();
                          });
                });
      default:
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _i4_], 1));
    }
   }
   function _i5_(errors, use, loc, usage, lid, env, cont){
    return caml_cps_exact_call7
            (_i3_,
             errors,
             use,
             loc,
             usage,
             lid,
             env,
             function(match){
              if(match){
               var match$0 = match[1], use = match$0[2], desc = match$0[1];
               return caml_cps_call2
                       (use, 0, function(_tU_){return cont(desc);});
              }
              var raise = caml_pop_trap();
              return raise
                      (caml_maybe_attach_backtrace([0, Assert_failure, _i6_], 1));
             });
   }
   function find_module_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iO_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_value_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iP_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_type_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iS_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_modtype_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iU_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_class_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iV_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_cltype_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call6(_iX_, 0, 0, loc, lid, env, cont);
             });
   }
   function find_constructor_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call7(_i5_, 0, 0, loc, 0, lid, env, cont);
             });
   }
   function find_label_by_name(lid, env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[3],
             Dynlink_compilerlibs_Location[13][1],
             function(loc){
              return caml_cps_exact_call7(_i1_, 0, 0, loc, 0, lid, env, cont);
             });
   }
   function lookup_module_path(opt, loc, load, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var errors = 1;
    switch(lid[0]){
      case 0:
       var s = lid[1];
       if(Dynlink_compilerlibs_Clflags[65][1] && ! load)
        return caml_cps_exact_call7
                (lookup_ident_module,
                 1,
                 errors,
                 use,
                 loc,
                 s,
                 env,
                 function(_tT_){return cont(_tT_[1]);});
       return caml_cps_exact_call7
               (lookup_ident_module,
                0,
                errors,
                use,
                loc,
                s,
                env,
                function(_tS_){return cont(_tS_[1]);});
      case 1:
       var s$0 = lid[2], l = lid[1];
       return caml_cps_exact_call7
               (lookup_dot_module,
                errors,
                use,
                loc,
                l,
                s$0,
                env,
                function(_tR_){return cont(_tR_[1]);});
      default:
       return caml_cps_exact_call6
               (lookup_apply,
                errors,
                use,
                loc,
                lid,
                env,
                function(match){
                 var path_arg = match[3], path_f = match[1];
                 return cont([2, path_f, path_arg]);
                });
    }
   }
   function lookup_module(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6(_iO_, 1, use, loc, lid, env, cont);
   }
   function lookup_value(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_call2
            (Dynlink_compilerlibs_Longident[3],
             lid,
             function(_tP_){
              return caml_cps_exact_call3
                      (check_value_name,
                       _tP_,
                       loc,
                       function(_tQ_){
                        return caml_cps_exact_call6
                                (_iP_, 1, use, loc, lid, env, cont);
                       });
             });
   }
   function lookup_type(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6(_iS_, 1, use, loc, lid, env, cont);
   }
   function lookup_modtype(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6(_iU_, 1, use, loc, lid, env, cont);
   }
   function lookup_modtype_path(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6
            (lookup_modtype_lazy,
             1,
             use,
             loc,
             lid,
             env,
             function(_tO_){return cont(_tO_[1]);});
   }
   function lookup_class(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6(_iV_, 1, use, loc, lid, env, cont);
   }
   function lookup_cltype(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return caml_cps_exact_call6(_iX_, 1, use, loc, lid, env, cont);
   }
   function lookup_all_constructors(opt, loc, usage, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    caml_push_trap
     (function(_tN_){
       if(_tN_[1] === Error$6){
        var match = _tN_[2];
        if(2 === match[0]){
         var err = match[3], env = match[2], loc = match[1];
         return cont([1, [0, loc, env, err]]);
        }
       }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tN_, 0));
      });
    return caml_cps_exact_call7
            (_i3_,
             1,
             use,
             loc,
             usage,
             lid,
             env,
             function(cstrs){caml_pop_trap(); return cont([0, cstrs]);});
   }
   function lookup_constructor(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var _tL_ = 1;
    return cont
            (function(_tM_, cont){
              return caml_cps_exact_call7
                      (_i5_, _tL_, use, loc, lid, env, _tM_, cont);
             });
   }
   function lookup_all_constructors_from_t
   (opt, loc, usage, ty_path, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    caml_push_trap
     (function(_tK_){
       if(_tK_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tK_, 0));
      });
    return caml_cps_exact_call3
            (find_type_descrs,
             ty_path,
             env,
             function(val){
              caml_pop_trap();
              if(typeof val !== "number" && 1 === val[0]){
               var cstrs = val[1];
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(cstr, cont){
                         function use_fun(param, cont){
                          return caml_cps_exact_call6
                                  (use_constructor_desc, use, loc, usage, env, cstr, cont);
                         }
                         return cont([0, cstr, use_fun]);
                        },
                        cstrs,
                        cont);
              }
              return cont(0);
             });
   }
   function lookup_all_labels(opt, loc, usage, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    caml_push_trap
     (function(_tJ_){
       if(_tJ_[1] === Error$6){
        var match = _tJ_[2];
        if(2 === match[0]){
         var err = match[3], env = match[2], loc = match[1];
         return cont([1, [0, loc, env, err]]);
        }
       }
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tJ_, 0));
      });
    return caml_cps_exact_call7
            (_iZ_,
             1,
             use,
             loc,
             usage,
             lid,
             env,
             function(lbls){caml_pop_trap(); return cont([0, lbls]);});
   }
   function lookup_label(opt, loc, lid, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var _tH_ = 1;
    return cont
            (function(_tI_, cont){
              return caml_cps_exact_call7
                      (_i1_, _tH_, use, loc, lid, env, _tI_, cont);
             });
   }
   function lookup_all_labels_from_type(opt, loc, usage, ty_path, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    caml_push_trap
     (function(_tG_){
       if(_tG_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tG_, 0));
      });
    return caml_cps_exact_call3
            (find_type_descrs,
             ty_path,
             env,
             function(val){
              caml_pop_trap();
              if(typeof val !== "number" && 0 === val[0]){
               var lbls = val[1];
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(lbl, cont){
                         function use_fun(param, cont){
                          return caml_cps_exact_call6
                                  (use_label, use, loc, usage, env, lbl, cont);
                         }
                         return cont([0, lbl, use_fun]);
                        },
                        lbls,
                        cont);
              }
              return cont(0);
             });
   }
   function lookup_instance_variable(opt, loc, name, env, cont){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    caml_push_trap
     (function(_tF_){
       if(_tF_ === Stdlib[8])
        return caml_cps_exact_call4(lookup_error, loc, env, [8, name], cont);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tF_, 0));
      });
    return caml_cps_exact_call5
            (find_name$0,
             wrap_value,
             use,
             name,
             env[1],
             function(val){
              caml_pop_trap();
              var match = val[2], path = val[1];
              if(0 !== match[0]){
               var _tD_ = match[1];
               if(typeof _tD_ === "number")
                switch(_tD_){
                  case 0:
                   return caml_cps_exact_call4
                           (lookup_error, loc, env, [10, [0, name]], cont);
                  case 1:
                   return caml_cps_exact_call4
                           (lookup_error, loc, env, [9, name], cont);
                  default:
                   return caml_cps_exact_call4
                           (lookup_error, loc, env, [9, name], cont);
                }
               return caml_cps_exact_call4
                       (lookup_error, loc, env, [8, name], cont);
              }
              var vda = match[1], desc = vda[1], match$0 = desc[2];
              if(typeof match$0 !== "number" && 1 === match$0[0]){
               var cl_num = match$0[2], mut = match$0[1];
               return caml_cps_exact_call5
                       (use_value,
                        use,
                        loc,
                        path,
                        vda,
                        function(_tE_){
                         return cont([0, path, mut, cl_num, desc[1]]);
                        });
              }
              return caml_cps_exact_call4
                      (lookup_error, loc, env, [9, name], cont);
             });
   }
   function bound_module(name, env, cont){
    caml_push_trap
     (function(_tB_){
       if(_tB_ === Stdlib[8])
        return is(name)
                ? cont(0)
                : (caml_push_trap
                   (function(_tC_){
                     if(_tC_ === Stdlib[8]) return cont(0);
                     var raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_tC_, 0));
                    }),
                  caml_cps_exact_call2
                   (find_pers_mod,
                    name,
                    function(val){caml_pop_trap(); return cont(1);}));
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tB_, 0));
      });
    return caml_cps_exact_call5
            (find_name$0,
             wrap_module,
             0,
             name,
             env[5],
             function(val){caml_pop_trap(); return cont(1);});
   }
   function bound(wrap, proj, name, env, cont){
    caml_push_trap
     (function(_tA_){
       if(_tA_ === Stdlib[8]) return cont(0);
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_tA_, 0));
      });
    return caml_cps_exact_call5
            (find_name$0,
             wrap,
             0,
             name,
             proj(env),
             function(val){caml_pop_trap(); return cont(1);});
   }
   function bound_value(name, env, cont){
    return caml_cps_exact_call5
            (bound,
             wrap_value,
             function(env){return env[1];},
             name,
             env,
             cont);
   }
   function bound_type(name, env, cont){
    return caml_cps_exact_call5
            (bound,
             wrap_identity,
             function(env){return env[4];},
             name,
             env,
             cont);
   }
   function bound_modtype(name, env, cont){
    return caml_cps_exact_call5
            (bound,
             wrap_identity,
             function(env){return env[6];},
             name,
             env,
             cont);
   }
   function bound_class(name, env, cont){
    return caml_cps_exact_call5
            (bound,
             wrap_identity,
             function(env){return env[7];},
             name,
             env,
             cont);
   }
   function bound_cltype(name, env, cont){
    return caml_cps_exact_call5
            (bound,
             wrap_identity,
             function(env){return env[8];},
             name,
             env,
             cont);
   }
   function find_all$3(wrap, proj1, proj2, f, lid, env, acc, cont){
    if(! lid)
     return caml_cps_exact_call5
             (fold_name$0,
              wrap,
              function(name, param, acc, cont){
               var data = param[2], p = param[1];
               return caml_cps_exact_call5(f, name, p, data, acc, cont);
              },
              proj1(env),
              acc,
              cont);
    var l = lid[1];
    return caml_cps_exact_call6
            (lookup_module_components,
             0,
             0,
             Dynlink_compilerlibs_Location[1],
             l,
             env,
             function(match){
              var desc = match[2], p = match[1];
              return caml_cps_exact_call2
                      (get_components,
                       desc,
                       function(match){
                        if(0 !== match[0]) return cont(acc);
                        var c = match[1], _tz_ = proj2(c);
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[13][4][65][13],
                                 function(s, data, acc, cont){
                                  return caml_cps_exact_call5
  (f, s, [1, p, s], wrap(data), acc, cont);
                                 },
                                 _tz_,
                                 acc,
                                 cont);
                       });
             });
   }
   function find_all_simple_list(proj1, proj2, f, lid, env, acc, cont){
    if(lid){
     var l = lid[1];
     return caml_cps_exact_call6
             (lookup_module_components,
              0,
              0,
              Dynlink_compilerlibs_Location[1],
              l,
              env,
              function(match){
               var desc = match[2];
               return caml_cps_exact_call2
                       (get_components,
                        desc,
                        function(match){
                         if(0 !== match[0]) return cont(acc);
                         var c = match[1], _ty_ = proj2(c);
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Misc[13][4][65][13],
                                  function(s, comps, acc, cont){
                                   if(! comps) return cont(acc);
                                   var data = comps[1];
                                   return caml_cps_call3(f, data, acc, cont);
                                  },
                                  _ty_,
                                  acc,
                                  cont);
                        });
              });
    }
    var tbl = proj1(env);
    function f$0(data, acc, cont){return caml_cps_call3(f, data, acc, cont);}
    function _tu_(acc, tbl){
     return caml_cps_call4
             (Dynlink_compilerlibs_Ident[32],
              function(id, d, cont){
               return cont
                       (function(_tx_, cont){
                         return caml_cps_exact_call3(f$0, d, _tx_, cont);
                        });
              },
              tbl[1],
              acc,
              function(acc){
               var _tv_ = tbl[2];
               if(! _tv_) return cont(acc);
               var match = _tv_[1], next = match[4], components = match[1];
               return caml_cps_call3
                       (Dynlink_compilerlibs_Misc[13][4][65][13],
                        function(name, cont){
                         return caml_cps_call2(Stdlib_List[26], f$0, cont);
                        },
                        components,
                        function(_tw_){
                         return caml_cps_call2
                                 (_tw_,
                                  acc,
                                  function(acc){return caml_cps_exact_call2(_tu_, acc, next);});
                        });
              });
    }
    return _tu_(acc, tbl);
   }
   function fold_modules(f, lid, env, acc, cont){
    if(! lid)
     return caml_cps_exact_call5
             (fold_name$0,
              wrap_module,
              function(name, param, acc, cont){
               var entry = param[2], p = param[1];
               if(typeof entry === "number")
                return caml_cps_call3
                        (Dynlink_compilerlibs_Persisten[11],
                         persistent_env[1],
                         name,
                         function(match){
                          if(! match) return cont(acc);
                          var mda = match[1];
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Subst[29][12],
                                   mda[1],
                                   function(md){
                                    return caml_cps_call5(f, name, p, md, acc, cont);
                                   });
                         });
               if(0 !== entry[0]) return cont(acc);
               var mda = entry[1];
               return caml_cps_call2
                       (Dynlink_compilerlibs_Subst[29][12],
                        mda[1],
                        function(md){
                         return caml_cps_call5(f, name, p, md, acc, cont);
                        });
              },
              env[5],
              acc,
              cont);
    var l = lid[1];
    return caml_cps_exact_call6
            (lookup_module_components,
             0,
             0,
             Dynlink_compilerlibs_Location[1],
             l,
             env,
             function(match){
              var desc = match[2], p = match[1];
              return caml_cps_exact_call2
                      (get_components,
                       desc,
                       function(match){
                        if(0 !== match[0]) return cont(acc);
                        var c = match[1];
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[13][4][65][13],
                                 function(s, mda, acc, cont){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Subst[29][12],
   mda[1],
   function(md){
    return caml_cps_call5(f, s, [1, p, s], md, acc, cont);
   });
                                 },
                                 c[5],
                                 acc,
                                 cont);
                       });
             });
   }
   function fold_values(f, cont){
    function _to_(k, p, ve, acc, cont){
     if(0 !== ve[0]) return cont(acc);
     var vda = ve[1];
     return caml_cps_call5(f, k, p, vda[1], acc, cont);
    }
    function _tp_(sc){return sc[1];}
    function _tq_(env){return env[1];}
    return cont
            (function(_tr_, _ts_, _tt_, cont){
              return caml_cps_exact_call8
                      (find_all$3,
                       wrap_value,
                       _tq_,
                       _tp_,
                       _to_,
                       _tr_,
                       _ts_,
                       _tt_,
                       cont);
             });
   }
   function fold_constructors(f, cont){
    function _ti_(cda, acc, cont){
     return caml_cps_call3(f, cda[1], acc, cont);
    }
    function _tj_(sc){return sc[2];}
    function _tk_(env){return env[2];}
    return cont
            (function(_tl_, _tm_, _tn_, cont){
              return caml_cps_exact_call7
                      (find_all_simple_list,
                       _tk_,
                       _tj_,
                       _ti_,
                       _tl_,
                       _tm_,
                       _tn_,
                       cont);
             });
   }
   function fold_labels(f, cont){
    function _td_(sc){return sc[3];}
    function _te_(env){return env[3];}
    return cont
            (function(_tf_, _tg_, _th_, cont){
              return caml_cps_exact_call7
                      (find_all_simple_list,
                       _te_,
                       _td_,
                       f,
                       _tf_,
                       _tg_,
                       _th_,
                       cont);
             });
   }
   function fold_types(f, cont){
    function _s9_(k, p, tda, acc, cont){
     return caml_cps_call5(f, k, p, tda[1], acc, cont);
    }
    function _s__(sc){return sc[4];}
    function _s$_(env){return env[4];}
    return cont
            (function(_ta_, _tb_, _tc_, cont){
              return caml_cps_exact_call8
                      (find_all$3,
                       wrap_identity,
                       _s$_,
                       _s__,
                       _s9_,
                       _ta_,
                       _tb_,
                       _tc_,
                       cont);
             });
   }
   function fold_modtypes(f, cont){
    function _s2_(k, path, mta, acc, cont){
     var data = mta[1];
     return caml_cps_call2
             (Dynlink_compilerlibs_Subst[29][14],
              data,
              function(_s8_){
               return caml_cps_call5(f, k, path, _s8_, acc, cont);
              });
    }
    function _s3_(sc){return sc[6];}
    function _s4_(env){return env[6];}
    return cont
            (function(_s5_, _s6_, _s7_, cont){
              return caml_cps_exact_call8
                      (find_all$3,
                       wrap_identity,
                       _s4_,
                       _s3_,
                       _s2_,
                       _s5_,
                       _s6_,
                       _s7_,
                       cont);
             });
   }
   function fold_classes(f, cont){
    function _sW_(k, p, clda, acc, cont){
     return caml_cps_call5(f, k, p, clda[1], acc, cont);
    }
    function _sX_(sc){return sc[7];}
    function _sY_(env){return env[7];}
    return cont
            (function(_sZ_, _s0_, _s1_, cont){
              return caml_cps_exact_call8
                      (find_all$3,
                       wrap_identity,
                       _sY_,
                       _sX_,
                       _sW_,
                       _sZ_,
                       _s0_,
                       _s1_,
                       cont);
             });
   }
   function fold_cltypes(f, cont){
    function _sQ_(k, p, cltda, acc, cont){
     return caml_cps_call5(f, k, p, cltda[1], acc, cont);
    }
    function _sR_(sc){return sc[8];}
    function _sS_(env){return env[8];}
    return cont
            (function(_sT_, _sU_, _sV_, cont){
              return caml_cps_exact_call8
                      (find_all$3,
                       wrap_identity,
                       _sS_,
                       _sR_,
                       _sQ_,
                       _sT_,
                       _sU_,
                       _sV_,
                       cont);
             });
   }
   function filter_non_loaded_persistent(f, env, cont){
    return caml_cps_exact_call5
            (fold_name$0,
             wrap_module,
             function(name, param, acc, cont){
              var entry = param[2];
              return typeof entry === "number"
                      ? caml_cps_call3
                        (Dynlink_compilerlibs_Persisten[11],
                         persistent_env[1],
                         name,
                         function(match){
                          return match
                                  ? cont(acc)
                                  : caml_cps_call2
                                    (Dynlink_compilerlibs_Ident[12],
                                     name,
                                     function(_sO_){
                                      return caml_cps_call2
      (f,
       _sO_,
       function(_sP_){
        return _sP_
                ? cont(acc)
                : caml_cps_call3
                  (Dynlink_compilerlibs_Misc[13][4][64][4], name, acc, cont);
       });
                                     });
                         })
                      : 0 === entry[0] ? cont(acc) : cont(acc);
             },
             env[5],
             Dynlink_compilerlibs_Misc[13][4][64][1],
             function(to_remove){
              function filter_summary(summary, ids, cont){
               function _sI_(ids, summary){
                return caml_cps_call2
                        (Dynlink_compilerlibs_Misc[13][4][64][2],
                         ids,
                         function(_sJ_){
                          if(_sJ_) return cont(summary);
                          function _sK_(){
                           return caml_cps_exact_call3
                                   (map_summary,
                                    function(s, cont){
                                     return caml_cps_exact_call3(filter_summary, s, ids, cont);
                                    },
                                    summary,
                                    cont);
                          }
                          if(typeof summary === "number") return _sK_();
                          if(11 !== summary[0]) return _sK_();
                          var summary$0 = summary[1], id = summary[2];
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Ident[15],
                                   id,
                                   function(_sL_){
                                    return caml_cps_call3
    (Dynlink_compilerlibs_Misc[13][4][64][3],
     _sL_,
     ids,
     function(_sM_){
      return _sM_
              ? caml_cps_call2
                (Dynlink_compilerlibs_Ident[15],
                 id,
                 function(_sN_){
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Misc[13][4][64][6],
                           _sN_,
                           ids,
                           function(ids){
                            return caml_cps_exact_call2(_sI_, ids, summary$0);
                           });
                 })
              : _sK_();
     });
                                   });
                         });
               }
               return _sI_(ids, summary);
              }
              var _sy_ = env[12], _sz_ = env[11];
              return caml_cps_exact_call3
                      (filter_summary,
                       env[10],
                       to_remove,
                       function(_sA_){
                        var
                         tbl = env[5],
                         _sB_ = env[9],
                         _sC_ = env[8],
                         _sD_ = env[7],
                         _sE_ = env[6];
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[13][4][64][16],
                                 function(name, tbl, cont){
                                  return caml_cps_call2
  (Dynlink_compilerlibs_Ident[12],
   name,
   function(id){
    var _sG_ = tbl[2];
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[35],
             id,
             tbl[1],
             function(_sH_){return cont([0, _sH_, _sG_]);});
   });
                                 },
                                 to_remove,
                                 tbl,
                                 function(_sF_){
                                  return cont
  ([0,
    env[1],
    env[2],
    env[3],
    env[4],
    _sF_,
    _sE_,
    _sD_,
    _sC_,
    _sB_,
    _sA_,
    _sz_,
    _sy_]);
                                 });
                       });
             });
   }
   function summary(env, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Path[15][2],
             env[11],
             function(_sx_){
              return _sx_ ? cont(env[10]) : cont([9, env[10], env[11]]);
             });
   }
   var
    last_env = caml_callback(Dynlink_compilerlibs_Local_sto[1], [empty$6]),
    last_reduced_env =
      caml_callback(Dynlink_compilerlibs_Local_sto[1], [empty$6]);
   function keep_only_summary(env, cont){
    if(last_env[1] === env) return cont(last_reduced_env[1]);
    var
     new_env =
       [0,
        empty$6[1],
        empty$6[2],
        empty$6[3],
        empty$6[4],
        empty$6[5],
        empty$6[6],
        empty$6[7],
        empty$6[8],
        empty$6[9],
        env[10],
        env[11],
        env[12]];
    last_env[1] = env;
    last_reduced_env[1] = new_env;
    return cont(new_env);
   }
   function env_of_only_summary(env_from_summary, env, cont){
    return caml_cps_call3
            (env_from_summary,
             env[10],
             Dynlink_compilerlibs_Subst[1],
             function(new_env){
              return cont
                      ([0,
                        new_env[1],
                        new_env[2],
                        new_env[3],
                        new_env[4],
                        new_env[5],
                        new_env[6],
                        new_env[7],
                        new_env[8],
                        new_env[9],
                        new_env[10],
                        env[11],
                        env[12]]);
             });
   }
   var
    print_longident =
      [0,
       function(param, _sw_, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _i7_], 1));
       }],
    print_path =
      [0,
       function(param, _sv_, cont){
        var raise = caml_pop_trap();
        return raise
                (caml_maybe_attach_backtrace([0, Assert_failure, _i8_], 1));
       }];
   function spellcheck$0(ppf, extract, env, lid, cont){
    function choices(path, name, cont){
     return caml_cps_exact_call3
             (extract,
              path,
              env,
              function(_su_){
               return caml_cps_call3
                       (Dynlink_compilerlibs_Misc[48], _su_, name, cont);
              });
    }
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return caml_cps_call3
               (Dynlink_compilerlibs_Misc[49],
                ppf,
                function(param, cont){
                 return caml_cps_exact_call3(choices, 0, s, cont);
                },
                cont);
      case 1:
       var s$0 = lid[2], r = lid[1];
       return caml_cps_call3
               (Dynlink_compilerlibs_Misc[49],
                ppf,
                function(param, cont){
                 return caml_cps_exact_call3(choices, [0, r], s$0, cont);
                },
                cont);
      default: return cont(0);
    }
   }
   function spellcheck_name(ppf, extract, env, name, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[49],
             ppf,
             function(param, cont){
              return caml_cps_exact_call2
                      (extract,
                       env,
                       function(_st_){
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Misc[48], _st_, name, cont);
                       });
             },
             cont);
   }
   function extract_values(path, env, cont){
    var _sq_ = 0;
    return caml_cps_exact_call2
            (fold_values,
             function(name, param, _ss_, acc, cont){return cont([0, name, acc]);
             },
             function(_sr_){
              return caml_cps_exact_call4(_sr_, path, env, _sq_, cont);
             });
   }
   function extract_types(path, env, cont){
    var _sn_ = 0;
    return caml_cps_exact_call2
            (fold_types,
             function(name, param, _sp_, acc, cont){return cont([0, name, acc]);
             },
             function(_so_){
              return caml_cps_exact_call4(_so_, path, env, _sn_, cont);
             });
   }
   function extract_modules(path, env, cont){
    return caml_cps_exact_call5
            (fold_modules,
             function(name, param, _sm_, acc, cont){return cont([0, name, acc]);
             },
             path,
             env,
             0,
             cont);
   }
   function extract_constructors(path, env, cont){
    var _sk_ = 0;
    return caml_cps_exact_call2
            (fold_constructors,
             function(desc, acc, cont){return cont([0, desc[1], acc]);},
             function(_sl_){
              return caml_cps_exact_call4(_sl_, path, env, _sk_, cont);
             });
   }
   function extract_labels(path, env, cont){
    var _si_ = 0;
    return caml_cps_exact_call2
            (fold_labels,
             function(desc, acc, cont){return cont([0, desc[1], acc]);},
             function(_sj_){
              return caml_cps_exact_call4(_sj_, path, env, _si_, cont);
             });
   }
   function extract_classes(path, env, cont){
    var _sf_ = 0;
    return caml_cps_exact_call2
            (fold_classes,
             function(name, param, _sh_, acc, cont){return cont([0, name, acc]);
             },
             function(_sg_){
              return caml_cps_exact_call4(_sg_, path, env, _sf_, cont);
             });
   }
   function extract_modtypes(path, env, cont){
    var _sc_ = 0;
    return caml_cps_exact_call2
            (fold_modtypes,
             function(name, param, _se_, acc, cont){return cont([0, name, acc]);
             },
             function(_sd_){
              return caml_cps_exact_call4(_sd_, path, env, _sc_, cont);
             });
   }
   function extract_cltypes(path, env, cont){
    var _r$_ = 0;
    return caml_cps_exact_call2
            (fold_cltypes,
             function(name, param, _sb_, acc, cont){return cont([0, name, acc]);
             },
             function(_sa_){
              return caml_cps_exact_call4(_sa_, path, env, _r$_, cont);
             });
   }
   function extract_instance_variables(env, cont){
    var _r7_ = 0, _r8_ = 0;
    return caml_cps_exact_call2
            (fold_values,
             function(name, param, descr, acc, cont){
              var _r__ = descr[2];
              if(typeof _r__ !== "number" && 1 === _r__[0])
               return cont([0, name, acc]);
              return cont(acc);
             },
             function(_r9_){
              return caml_cps_exact_call4(_r9_, _r8_, env, _r7_, cont);
             });
   }
   function report_lookup_error(loc, env, ppf, param, cont){
    if(typeof param === "number")
     return caml_cps_call3(Stdlib_Format[135], ppf, _i9_, cont);
    switch(param[0]){
      case 0:
       var hint = param[2], lid = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _i__,
                print_longident[1],
                lid,
                function(_r5_){
                 return caml_cps_exact_call5
                         (spellcheck$0,
                          ppf,
                          extract_values,
                          env,
                          lid,
                          function(_r6_){
                           if(! hint) return cont(0);
                           var def_loc = hint[1];
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Location[10],
                                    def_loc[1],
                                    function(match){
                                     var line = match[2];
                                     return caml_cps_call6
     (Stdlib_Format[135],
      ppf,
      _i$_,
      cst_Hint_If_this_is_a_recursiv,
      cst_you_should_add_the_rec_key,
      line,
      cont);
                                    });
                          });
                });
      case 1:
       var lid$0 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _ja_,
                print_longident[1],
                lid$0,
                function(_r4_){
                 return caml_cps_exact_call5
                         (spellcheck$0, ppf, extract_types, env, lid$0, cont);
                });
      case 2:
       var lid$1 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jb_,
                print_longident[1],
                lid$1,
                function(_r3_){
                 return caml_cps_exact_call5
                         (spellcheck$0, ppf, extract_constructors, env, lid$1, cont);
                });
      case 3:
       var lid$2 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jc_,
                print_longident[1],
                lid$2,
                function(_r2_){
                 return caml_cps_exact_call5
                         (spellcheck$0, ppf, extract_labels, env, lid$2, cont);
                });
      case 4:
       var lid$3 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jd_,
                print_longident[1],
                lid$3,
                function(_r0_){
                 caml_push_trap
                  (function(_r1_){
                    if(_r1_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (spellcheck$0, ppf, extract_modules, env, lid$3, cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_r1_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_modtype_by_name,
                          lid$3,
                          env,
                          function(val){
                           caml_pop_trap();
                           return caml_cps_call7
                                   (Stdlib_Format[135],
                                    ppf,
                                    _je_,
                                    cst_Hint_There_is_a_module_typ,
                                    print_longident[1],
                                    lid$3,
                                    cst_but_module_types_are_not_m,
                                    cont);
                          });
                });
      case 5:
       var lid$4 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jf_,
                print_longident[1],
                lid$4,
                function(_rY_){
                 caml_push_trap
                  (function(_rZ_){
                    if(_rZ_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (spellcheck$0, ppf, extract_classes, env, lid$4, cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_rZ_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_cltype_by_name,
                          lid$4,
                          env,
                          function(val){
                           caml_pop_trap();
                           return caml_cps_call7
                                   (Stdlib_Format[135],
                                    ppf,
                                    _jg_,
                                    cst_Hint_There_is_a_class_type,
                                    print_longident[1],
                                    lid$4,
                                    cst_but_classes_are_not_class_,
                                    cont);
                          });
                });
      case 6:
       var lid$5 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jh_,
                print_longident[1],
                lid$5,
                function(_rW_){
                 caml_push_trap
                  (function(_rX_){
                    if(_rX_ === Stdlib[8])
                     return caml_cps_exact_call5
                             (spellcheck$0, ppf, extract_modtypes, env, lid$5, cont);
                    var raise = caml_pop_trap();
                    return raise(caml_maybe_attach_backtrace(_rX_, 0));
                   });
                 return caml_cps_exact_call3
                         (find_module_by_name,
                          lid$5,
                          env,
                          function(val){
                           caml_pop_trap();
                           return caml_cps_call7
                                   (Stdlib_Format[135],
                                    ppf,
                                    _ji_,
                                    cst_Hint_There_is_a_module_nam,
                                    print_longident[1],
                                    lid$5,
                                    cst_but_modules_are_not_module,
                                    cont);
                          });
                });
      case 7:
       var lid$6 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jj_,
                print_longident[1],
                lid$6,
                function(_rV_){
                 return caml_cps_exact_call5
                         (spellcheck$0, ppf, extract_cltypes, env, lid$6, cont);
                });
      case 8:
       var s = param[1];
       return caml_cps_call4
               (Stdlib_Format[135],
                ppf,
                _jk_,
                s,
                function(_rU_){
                 return caml_cps_exact_call5
                         (spellcheck_name,
                          ppf,
                          extract_instance_variables,
                          env,
                          s,
                          cont);
                });
      case 9:
       var s$0 = param[1];
       return caml_cps_call4
               (Stdlib_Format[135],
                ppf,
                _jl_,
                s$0,
                function(_rT_){
                 return caml_cps_exact_call5
                         (spellcheck_name,
                          ppf,
                          extract_instance_variables,
                          env,
                          s$0,
                          cont);
                });
      case 10:
       var lid$7 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jm_,
                print_longident[1],
                lid$7,
                cont);
      case 11:
       var lid$8 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jn_,
                print_longident[1],
                lid$8,
                cont);
      case 12:
       var lid$9 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jo_,
                print_longident[1],
                lid$9,
                cont);
      case 13:
       var lid$10 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jp_,
                print_longident[1],
                lid$10,
                cont);
      case 14:
       var lid$11 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jq_,
                print_longident[1],
                lid$11,
                cont);
      case 15:
       var lid$12 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jr_,
                print_longident[1],
                lid$12,
                cont);
      case 16:
       var lid$13 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _js_,
                print_longident[1],
                lid$13,
                cont);
      case 17:
       var lid$14 = param[1];
       return caml_cps_call5
               (Stdlib_Format[135],
                ppf,
                _jt_,
                print_longident[1],
                lid$14,
                cont);
      default:
       var
        p = param[2],
        lid$15 = param[1],
        _rR_ =
          function(_rS_){
           var cause = _rS_ ? cst_is_the_current_compilation : cst_is_missing;
           return caml_cps_call8
                   (Stdlib_Format[135],
                    ppf,
                    _ju_,
                    print_longident[1],
                    lid$15,
                    print_path[1],
                    p,
                    cause,
                    cont);
          };
       if(0 !== p[0]) return _rR_(0);
       var id = p[1];
       return caml_cps_exact_call2(is_ident, id, _rR_);
    }
   }
   function report_error$3(ppf, param, cont){
    switch(param[0]){
      case 0:
       var path2 = param[3], path1 = param[2];
       return caml_cps_call3
               (Stdlib_Format[135],
                ppf,
                _jv_,
                function(_rI_){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Path[1],
                          path1,
                          path2,
                          function(_rJ_){
                           function _rK_(_rO_){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Path[8],
                                     path2,
                                     function(_rP_){
                                      return caml_cps_call2
      (Dynlink_compilerlibs_Ident[15],
       _rP_,
       function(_rQ_){
        return caml_cps_call6
                (Stdlib_Format[135],
                 ppf,
                 _jx_,
                 cst_The_compiled_interface_for,
                 _rQ_,
                 cst_was_not_found,
                 cont);
       });
                                     });
                           }
                           return _rJ_
                                   ? caml_cps_call3
                                     (Dynlink_compilerlibs_Path[7],
                                      0,
                                      path1,
                                      function(_rL_){
                                       return caml_cps_call4
       (Stdlib_Format[135], ppf, _jw_, _rL_, _rK_);
                                      })
                                   : caml_cps_call3
                                     (Dynlink_compilerlibs_Path[7],
                                      0,
                                      path2,
                                      function(_rM_){
                                       return caml_cps_call3
       (Dynlink_compilerlibs_Path[7],
        0,
        path1,
        function(_rN_){
         return caml_cps_call5
                 (Stdlib_Format[135], ppf, _jy_, _rN_, _rM_, _rK_);
        });
                                      });
                          });
                });
      case 1:
       var name = param[2];
       return caml_cps_call4(Stdlib_Format[135], ppf, _jz_, name, cont);
      default:
       var err = param[3], t = param[2];
       return caml_cps_exact_call5
               (report_lookup_error, undef, t, ppf, err, cont);
    }
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$6) return cont(0);
       var err = param[2], loc = err[1];
       function _rG_(error_of_printer){
        return caml_cps_call3
                (error_of_printer,
                 report_error$3,
                 err,
                 function(_rH_){return cont([0, _rH_]);});
       }
       return caml_equal(loc, Dynlink_compilerlibs_Location[1])
               ? _rG_(Dynlink_compilerlibs_Location[50])
               : caml_cps_call3
                 (Dynlink_compilerlibs_Location[49], [0, loc], 0, _rG_);
      }]);
   var
    Dynlink_compilerlibs_Env =
      [0,
       register_uid,
       get_uid_to_loc_tbl,
       empty$6,
       initial,
       diff$0,
       iter_types,
       run_iter_cont,
       same_types,
       used_persistent,
       find_shadowed_types,
       without_cmis$0,
       find_value,
       find_type,
       find_type_descrs,
       find_module,
       find_modtype,
       find_class,
       find_cltype,
       find_strengthened_module,
       find_ident_constructor,
       find_ident_label,
       find_type_expansion,
       find_type_expansion_opt,
       find_modtype_expansion,
       find_modtype_expansion_lazy,
       find_hash_type,
       find_value_address,
       find_module_address,
       find_class_address,
       find_constructor_address,
       shape_of_path,
       add_functor_arg,
       is_functor_arg,
       normalize_module_path,
       normalize_type_path,
       normalize_path_prefix,
       normalize_modtype_path,
       reset_required_globals,
       get_required_globals,
       add_required_global,
       has_local_constraints,
       mark_value_used,
       mark_module_used,
       mark_type_used,
       mark_constructor_used,
       mark_extension_used,
       mark_label_used,
       lookup_error,
       lookup_value,
       lookup_type,
       lookup_module,
       lookup_modtype,
       lookup_class,
       lookup_cltype,
       lookup_module_path,
       lookup_modtype_path,
       lookup_constructor,
       lookup_all_constructors,
       lookup_all_constructors_from_t,
       lookup_label,
       lookup_all_labels,
       lookup_all_labels_from_type,
       lookup_instance_variable,
       find_value_by_name,
       find_type_by_name,
       find_module_by_name,
       find_modtype_by_name,
       find_class_by_name,
       find_cltype_by_name,
       find_constructor_by_name,
       find_label_by_name,
       bound_value,
       bound_module,
       bound_type,
       bound_modtype,
       bound_class,
       bound_cltype,
       make_copy_of_types,
       add_value$1,
       add_type$2,
       add_extension$0,
       add_module$1,
       add_module_lazy,
       add_module_declaration,
       add_module_declaration_lazy,
       add_modtype$1,
       add_modtype_lazy,
       add_class$1,
       add_cltype$0,
       add_local_type,
       add_persistent_structure,
       persistent_structures_of_dir,
       filter_non_loaded_persistent,
       add_signature$0,
       open_signature,
       open_pers_signature,
       remove_last_open,
       enter_value,
       enter_type,
       enter_extension,
       enter_module,
       enter_module_declaration,
       enter_modtype,
       enter_class,
       enter_cltype,
       enter_signature,
       enter_signature_and_shape,
       enter_unbound_value,
       enter_unbound_module,
       reset_cache,
       reset_cache_toplevel,
       set_unit_name,
       get_unit_name,
       read_signature,
       save_signature,
       save_signature_with_imports,
       crc_of_unit$0,
       imports$0,
       import_crcs$0,
       is_imported_opaque$0,
       register_import_as_opaque$0,
       summary,
       keep_only_summary,
       env_of_only_summary,
       Error$6,
       report_error$3,
       report_lookup_error,
       in_signature,
       is_in_signature,
       set_value_used_callback,
       set_type_used_callback,
       check_functor_application,
       check_well_formed_module,
       add_delayed_check_forward$0,
       strengthen,
       same_constr,
       print_longident,
       print_path,
       fold_values,
       fold_types,
       fold_constructors,
       fold_labels,
       fold_modules,
       fold_modtypes,
       fold_classes,
       fold_cltypes,
       scrape_alias,
       check_value_name,
       print_address];
   caml_register_global
    (1435, Dynlink_compilerlibs_Env, "Dynlink_compilerlibs.Env");
   function cons(item, str, cont){
    return caml_cps_call3
            (Stdlib[28],
             str,
             cst_fun$0,
             function(_rF_){return cont([0, item, str, _rF_]);});
   }
   function dot(opt, scopes, s, cont){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$106;
    function _rC_(s){
     if(! scopes) return cont(s);
     var str = scopes[2];
     return caml_cps_call3
             (Stdlib[28],
              sep,
              s,
              function(_rE_){
               return caml_cps_call3(Stdlib[28], str, _rE_, cont);
              });
    }
    if(! caml_string_notequal(s, cst$117)) return _rC_(cst$105);
    var match = caml_string_get(s, 0);
    if(91 <= match){
     if(97 <= match){
      if(123 > match) return _rC_(s);
     }
     else if(95 === match) return _rC_(s);
    }
    else
     if(58 <= match){
      if(65 <= match) return _rC_(s);
     }
     else if(48 <= match) return _rC_(s);
    return caml_cps_call3
            (Stdlib[28],
             s,
             cst$103,
             function(_rD_){
              return caml_cps_call3(Stdlib[28], cst$104, _rD_, _rC_);
             });
   }
   function enter_anonymous_function(scopes, cont){
    var str = scopes ? scopes[3] : cst_fun;
    return cont([0, 0, str, str]);
   }
   function enter_value_definition(scopes, id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_rA_){
              return caml_cps_exact_call4
                      (dot,
                       0,
                       scopes,
                       _rA_,
                       function(_rB_){
                        return caml_cps_exact_call3(cons, 1, _rB_, cont);
                       });
             });
   }
   function enter_module_definition(scopes, id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_ry_){
              return caml_cps_exact_call4
                      (dot,
                       0,
                       scopes,
                       _ry_,
                       function(_rz_){
                        return caml_cps_exact_call3(cons, 2, _rz_, cont);
                       });
             });
   }
   function enter_class_definition(scopes, id, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[15],
             id,
             function(_rw_){
              return caml_cps_exact_call4
                      (dot,
                       0,
                       scopes,
                       _rw_,
                       function(_rx_){
                        return caml_cps_exact_call3(cons, 3, _rx_, cont);
                       });
             });
   }
   function enter_method_definition(scopes, s, cont){
    function _rv_(str){return caml_cps_exact_call3(cons, 4, str, cont);}
    if(scopes && 3 === scopes[1])
     return caml_cps_exact_call4(dot, _jA_, scopes, s, _rv_);
    return caml_cps_exact_call4(dot, 0, scopes, s, _rv_);
   }
   function string_of_scopes(param, cont){
    if(! param) return cont(cst_unknown);
    var str = param[2];
    return cont(str);
   }
   function of_location(scopes, loc, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[2],
             loc,
             function(_ru_){return _ru_ ? cont(0) : cont([0, loc, scopes]);});
   }
   function to_location(param, cont){
    if(! param) return cont(Dynlink_compilerlibs_Location[1]);
    var loc = param[1];
    return cont(loc);
   }
   function string_of_scoped_location(param, cont){
    if(! param) return cont(cst$107);
    var scopes = param[2];
    return caml_cps_exact_call2(string_of_scopes, scopes, cont);
   }
   function is_none$0(param, cont){return param ? cont(0) : cont(1);}
   function to_string$2(dbg, cont){
    return dbg
            ? caml_cps_call3
              (Stdlib_List[19],
               function(d, cont){
                return caml_cps_call6
                        (Stdlib_Printf[4], _jB_, d[1], d[2], d[3], d[4], cont);
               },
               dbg,
               function(items){
                return caml_cps_call3
                        (Stdlib_String[6],
                         cst$109,
                         items,
                         function(_rs_){
                          return caml_cps_call3
                                  (Stdlib[28],
                                   _rs_,
                                   cst$108,
                                   function(_rt_){
                                    return caml_cps_call3(Stdlib[28], cst$110, _rt_, cont);
                                   });
                         });
               })
            : cont(cst$111);
   }
   function from_location(param, cont){
    if(! param) return cont(0);
    var scopes = param[2], loc = param[1];
    return caml_cps_call2
            (Dynlink_compilerlibs_Location[2],
             loc,
             function(_rm_){
              if(_rm_){
               var raise = caml_pop_trap();
               return raise
                       (caml_maybe_attach_backtrace([0, Assert_failure, _jC_], 1));
              }
              var _rn_ = 0;
              return caml_cps_call3
                      (Stdlib_String[8],
                       loc[2][1],
                       loc[1][1],
                       function(valid_endpos){
                        var
                         _ro_ = valid_endpos ? loc[2][2] : loc[1][2],
                         _rp_ = valid_endpos ? loc[2][3] : loc[1][3],
                         _rq_ = loc[1][3],
                         _rr_ =
                           valid_endpos
                            ? loc[2][4] - loc[1][3] | 0
                            : loc[1][4] - loc[1][3] | 0;
                        return cont
                                ([0,
                                  [0,
                                   loc[1][1],
                                   loc[1][2],
                                   loc[1][4] - loc[1][3] | 0,
                                   _rr_,
                                   _rq_,
                                   _rp_,
                                   _ro_,
                                   scopes],
                                  _rn_]);
                       });
             });
   }
   function to_location$0(param, cont){
    if(! param) return cont(Dynlink_compilerlibs_Location[1]);
    var
     d = param[1],
     loc_start = [0, d[1], d[2], d[5], d[5] + d[3] | 0],
     loc_end = [0, d[1], d[7], d[6], d[5] + d[4] | 0];
    return cont([0, loc_start, loc_end, 0]);
   }
   function inline(dbg1, dbg2, cont){
    return caml_cps_call3(Stdlib[37], dbg1, dbg2, cont);
   }
   function compare$17(dbg1, dbg2, cont){
    return caml_cps_call2
            (Stdlib_List[9],
             dbg2,
             function(ds2){
              return caml_cps_call2
                      (Stdlib_List[9],
                       dbg1,
                       function(ds1){
                        function _re_(ds2, ds1){
                         if(! ds1) return ds2 ? cont(-1) : cont(0);
                         var ds1$0 = ds1[2], d1 = ds1[1];
                         if(! ds2) return cont(1);
                         var ds2$0 = ds2[2], d2 = ds2[1];
                         return caml_cps_call3
                                 (Stdlib_String[9],
                                  d1[1],
                                  d2[1],
                                  function(c){
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Int_repla[2],
    c,
    0,
    function(_rf_){
     return _rf_
             ? cont(c)
             : caml_cps_call3
               (Dynlink_compilerlibs_Int_repla[7],
                d1[2],
                d2[2],
                function(c){
                 return caml_cps_call3
                         (Dynlink_compilerlibs_Int_repla[2],
                          c,
                          0,
                          function(_rg_){
                           return _rg_
                                   ? cont(c)
                                   : caml_cps_call3
                                     (Dynlink_compilerlibs_Int_repla[7],
                                      d1[4],
                                      d2[4],
                                      function(c){
                                       return caml_cps_call3
       (Dynlink_compilerlibs_Int_repla[2],
        c,
        0,
        function(_rh_){
         return _rh_
                 ? cont(c)
                 : caml_cps_call3
                   (Dynlink_compilerlibs_Int_repla[7],
                    d1[3],
                    d2[3],
                    function(c){
                     return caml_cps_call3
                             (Dynlink_compilerlibs_Int_repla[2],
                              c,
                              0,
                              function(_ri_){
                               return _ri_
                                       ? cont(c)
                                       : caml_cps_call3
 (Dynlink_compilerlibs_Int_repla[7],
  d1[5],
  d2[5],
  function(c){
   return caml_cps_call3
           (Dynlink_compilerlibs_Int_repla[2],
            c,
            0,
            function(_rj_){
             return _rj_
                     ? cont(c)
                     : caml_cps_call3
                       (Dynlink_compilerlibs_Int_repla[7],
                        d1[6],
                        d2[6],
                        function(c){
                         return caml_cps_call3
                                 (Dynlink_compilerlibs_Int_repla[2],
                                  c,
                                  0,
                                  function(_rk_){
                                   return _rk_
   ? cont(c)
   : caml_cps_call3
     (Dynlink_compilerlibs_Int_repla[7],
      d1[7],
      d2[7],
      function(c){
       return caml_cps_call3
               (Dynlink_compilerlibs_Int_repla[2],
                c,
                0,
                function(_rl_){
                 return _rl_
                         ? cont(c)
                         : caml_cps_exact_call2(_re_, ds2$0, ds1$0);
                });
      });
                                  });
                        });
            });
  });
                              });
                    });
        });
                                      });
                          });
                });
    });
                                  });
                        }
                        return _re_(ds2, ds1);
                       });
             });
   }
   function hash$11(t, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(hash, item, cont){
              return caml_cps_call2(Stdlib_Hashtbl[28], [0, hash, item], cont);
             },
             0,
             t,
             cont);
   }
   function print_compact(ppf, t, cont){
    function _q$_(t){
     function print_item(item, cont){
      return caml_cps_call6
              (Stdlib_Format[135],
               ppf,
               _jD_,
               Dynlink_compilerlibs_Location[21],
               item[1],
               item[2],
               function(_rc_){
                return caml_cps_call3
                        (Dynlink_compilerlibs_Int_repla[6],
                         item[3],
                         0,
                         function(_rd_){
                          return _rd_
                                  ? caml_cps_call5
                                    (Stdlib_Format[135], ppf, _jE_, item[3], item[4], cont)
                                  : cont(_rd_);
                         });
               });
     }
     if(! t) return cont(0);
     var item = t[1];
     if(! t[2]) return caml_cps_exact_call2(print_item, item, cont);
     var t$0 = t[2];
     return caml_cps_exact_call2
             (print_item,
              item,
              function(_ra_){
               return caml_cps_call3
                       (Stdlib_Format[135],
                        ppf,
                        _jF_,
                        function(_rb_){return caml_cps_exact_call1(_q$_, t$0);});
              });
    }
    return _q$_(t);
   }
   var
    Dynlink_compilerlibs_Debuginfo =
      [0,
       [0,
        string_of_scopes,
        0,
        enter_anonymous_function,
        enter_value_definition,
        enter_module_definition,
        enter_class_definition,
        enter_method_definition,
        of_location,
        to_location,
        string_of_scoped_location],
       0,
       is_none$0,
       to_string$2,
       from_location,
       to_location$0,
       inline,
       compare$17,
       hash$11,
       print_compact];
   caml_register_global
    (1436, Dynlink_compilerlibs_Debuginfo, "Dynlink_compilerlibs.Debuginfo");
   var equal_boxed_integer$0 = Dynlink_compilerlibs_Primitive[7];
   function equal_primitive(_q__, _q9_, cont){return cont(caml_equal(_q__, _q9_));
   }
   function equal_value_kind(x, y, cont){
    if(typeof x === "number")
     switch(x){
       case 0:
        if(typeof y === "number" && ! y) return cont(1); break;
       case 1:
        if(typeof y === "number" && 1 === y) return cont(1); break;
       default: if(typeof y === "number" && 2 <= y) return cont(1);
     }
    else{
     var bi1 = x[1];
     if(typeof y !== "number"){
      var bi2 = y[1];
      return caml_cps_call3(equal_boxed_integer$0, bi1, bi2, cont);
     }
    }
    return cont(0);
   }
   function equal_inline_attribute(x, y, cont){
    a:
    {
     if(typeof x === "number"){
      switch(x){
        case 0:
         if(typeof y !== "number" || y) break a; break;
        case 1:
         if(typeof y !== "number" || 1 !== y) break a; break;
        case 2:
         if(typeof y !== "number" || 2 !== y) break a; break;
        default: if(typeof y !== "number" || 3 > y) break a;
      }
      return cont(1);
     }
     var u = x[1];
     if(typeof y !== "number"){var v = y[1]; return cont(u === v ? 1 : 0);}
    }
    return cont(0);
   }
   function equal_specialise_attribute(x, y, cont){
    a:
    {
     switch(x){
       case 0:
        if(y) break a; break;
       case 1:
        if(1 !== y) break a; break;
       default: if(2 > y) break a;
     }
     return cont(1);
    }
    return cont(0);
   }
   function equal_meth_kind(x, y, cont){
    switch(x){
      case 0:
       if(! y) return cont(1); break;
      case 1:
       if(1 === y) return cont(1); break;
      default: if(2 <= y) return cont(1);
    }
    return cont(0);
   }
   function const_int(n, cont){return cont([0, [0, n]]);}
   var const_unit = caml_callback(const_int, [0]);
   function max_arity(param, cont){
    return Dynlink_compilerlibs_Clflags[98][1] ? cont(126) : cont(Stdlib[19]);
   }
   function lfunction(kind, params, return$0, body, attr, loc, cont){
    return caml_cps_exact_call2
            (max_arity,
             undef,
             function(_q7_){
              return caml_cps_call2
                      (Stdlib_List[1],
                       params,
                       function(_q8_){
                        if(_q8_ <= _q7_)
                         return cont
                                 ([4, [0, kind, params, return$0, body, attr, loc]]);
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace([0, Assert_failure, _jG_], 1));
                       });
             });
   }
   var
    lambda_unit = [2, const_unit],
    default_stub_attribute =
      [0,
       default_function_attribute[1],
       default_function_attribute[2],
       default_function_attribute[3],
       default_function_attribute[4],
       default_function_attribute[5],
       1,
       default_function_attribute[7]];
   function make_key(e, cont){
    var
     Not_simple = [248, cst_Not_simple, caml_fresh_oo_id(0)],
     count = [0, 0];
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[36],
             0,
             function(make_key){
              function tr_rec(env, e, cont){
               function _qm_(e, env){
                count[1]++;
                if(32 < count[1]){
                 var
                  raise = caml_pop_trap(),
                  Not_simple$0 = caml_maybe_attach_backtrace(Not_simple, 1);
                 return raise(Not_simple$0);
                }
                switch(e[0]){
                  case 2:
                   var _qn_ = e[1];
                   if(0 === _qn_[0] && 2 === _qn_[1][0]){
                    var
                     raise$1 = caml_pop_trap(),
                     Not_simple$2 = caml_maybe_attach_backtrace(Not_simple, 1);
                    return raise$1(Not_simple$2);
                   }
                   return cont(e);
                  case 3:
                   var
                    ap = e[1],
                    _qo_ = ap[6],
                    _qp_ = ap[5],
                    _qq_ = ap[4],
                    _qr_ = 0;
                   return caml_cps_exact_call3
                           (tr_recs,
                            env,
                            ap[2],
                            function(_q5_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      ap[1],
                                      function(_q6_){
                                       return cont([3, [0, _q6_, _q5_, _qr_, _qq_, _qp_, _qo_]]);
                                      });
                            });
                  case 5:
                   var str = e[1];
                   if(1 === str){
                    var e$0 = e[5], ex = e[4], x = e[3];
                    return caml_cps_exact_call3
                            (tr_rec,
                             env,
                             ex,
                             function(ex){
                              return caml_cps_call4
                                      (Dynlink_compilerlibs_Ident[28],
                                       x,
                                       ex,
                                       env,
                                       function(env){return caml_cps_exact_call2(_qm_, e$0, env);});
                             });
                   }
                   var
                    match = e[5],
                    _qv_ =
                      function(){
                       var e$0 = e[5], ex = e[4], x = e[3], k = e[2];
                       return caml_cps_exact_call3
                               (tr_rec,
                                env,
                                ex,
                                function(ex){
                                 return caml_cps_call2
 (make_key,
  x,
  function(y){
   return caml_cps_call4
           (Dynlink_compilerlibs_Ident[28],
            x,
            [0, y],
            env,
            function(_q3_){
             return caml_cps_exact_call3
                     (tr_rec,
                      _q3_,
                      e$0,
                      function(_q4_){return cont([5, str, k, y, ex, _q4_]);});
            });
  });
                                });
                      };
                   if(0 !== match[0]) return _qv_();
                   var v = match[1], ex$0 = e[4], x$0 = e[3];
                   return caml_cps_call3
                           (Dynlink_compilerlibs_Ident[19],
                            v,
                            x$0,
                            function(_q2_){
                             return _q2_ ? caml_cps_exact_call2(_qm_, ex$0, env) : _qv_();
                            });
                  case 6:
                   var e$1 = e[4], ex$1 = e[3], x$1 = e[2], k = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            ex$1,
                            function(ex){
                             return caml_cps_call2
                                     (make_key,
                                      x$1,
                                      function(y){
                                       return caml_cps_call4
       (Dynlink_compilerlibs_Ident[28],
        x$1,
        [1, y],
        env,
        function(_q0_){
         return caml_cps_exact_call3
                 (tr_rec,
                  _q0_,
                  e$1,
                  function(_q1_){return cont([6, k, y, ex, _q1_]);});
        });
                                      });
                            });
                  case 8:
                   var es = e[2], p = e[1], _qs_ = 0;
                   return caml_cps_exact_call3
                           (tr_recs,
                            env,
                            es,
                            function(_qZ_){return cont([8, p, _qZ_, _qs_]);});
                  case 9:
                   var loc = e[3], sw = e[2], e$2 = e[1];
                   return caml_cps_exact_call3
                           (tr_opt,
                            env,
                            sw[5],
                            function(_qR_){
                             return caml_cps_call3
                                     (Stdlib_List[19],
                                      function(param, cont){
                                       var e = param[2], i = param[1];
                                       return caml_cps_exact_call3
       (tr_rec, env, e, function(_qY_){return cont([0, i, _qY_]);});
                                      },
                                      sw[4],
                                      function(_qS_){
                                       var _qT_ = sw[3];
                                       return caml_cps_call3
       (Stdlib_List[19],
        function(param, cont){
         var e = param[2], i = param[1];
         return caml_cps_exact_call3
                 (tr_rec, env, e, function(_qX_){return cont([0, i, _qX_]);});
        },
        sw[2],
        function(_qU_){
         var _qV_ = [0, sw[1], _qU_, _qT_, _qS_, _qR_];
         return caml_cps_exact_call3
                 (tr_rec,
                  env,
                  e$2,
                  function(_qW_){return cont([9, _qW_, _qV_, loc]);});
        });
                                      });
                            });
                  case 10:
                   var d = e[3], sw$0 = e[2], e$3 = e[1], _qt_ = 0;
                   return caml_cps_exact_call3
                           (tr_opt,
                            env,
                            d,
                            function(_qN_){
                             return caml_cps_call3
                                     (Stdlib_List[19],
                                      function(param, cont){
                                       var e = param[2], s = param[1];
                                       return caml_cps_exact_call3
       (tr_rec, env, e, function(_qQ_){return cont([0, s, _qQ_]);});
                                      },
                                      sw$0,
                                      function(_qO_){
                                       return caml_cps_exact_call3
       (tr_rec,
        env,
        e$3,
        function(_qP_){return cont([10, _qP_, _qO_, _qN_, _qt_]);});
                                      });
                            });
                  case 11:
                   var es$0 = e[2], i = e[1];
                   return caml_cps_exact_call3
                           (tr_recs,
                            env,
                            es$0,
                            function(_qM_){return cont([11, i, _qM_]);});
                  case 12:
                   var e2 = e[3], xs = e[2], e1 = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            e2,
                            function(_qK_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      e1,
                                      function(_qL_){return cont([12, _qL_, xs, _qK_]);});
                            });
                  case 13:
                   var e2$0 = e[3], x$2 = e[2], e1$0 = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            e2$0,
                            function(_qI_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      e1$0,
                                      function(_qJ_){return cont([13, _qJ_, x$2, _qI_]);});
                            });
                  case 14:
                   var ifnot = e[3], ifso = e[2], cond = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            ifnot,
                            function(_qF_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      ifso,
                                      function(_qG_){
                                       return caml_cps_exact_call3
       (tr_rec,
        env,
        cond,
        function(_qH_){return cont([14, _qH_, _qG_, _qF_]);});
                                      });
                            });
                  case 15:
                   var e2$1 = e[2], e1$1 = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            e2$1,
                            function(_qD_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      e1$1,
                                      function(_qE_){return cont([15, _qE_, _qD_]);});
                            });
                  case 18:
                   var e$4 = e[2], x$3 = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            e$4,
                            function(_qC_){return cont([18, x$3, _qC_]);});
                  case 19:
                   var
                    es$1 = e[4],
                    e2$2 = e[3],
                    e1$2 = e[2],
                    m = e[1],
                    _qu_ = 0;
                   return caml_cps_exact_call3
                           (tr_recs,
                            env,
                            es$1,
                            function(_qz_){
                             return caml_cps_exact_call3
                                     (tr_rec,
                                      env,
                                      e2$2,
                                      function(_qA_){
                                       return caml_cps_exact_call3
       (tr_rec,
        env,
        e1$2,
        function(_qB_){
         return cont([19, m, _qB_, _qA_, _qz_, _qu_]);
        });
                                      });
                            });
                  case 21:
                   var e$5 = e[2], id$0 = e[1];
                   return caml_cps_exact_call3
                           (tr_rec,
                            env,
                            e$5,
                            function(_qy_){return cont([21, id$0, _qy_]);});
                  case 0:
                  case 1:
                   var id = e[1];
                   caml_push_trap
                    (function(_qx_){
                      if(_qx_ === Stdlib[8]) return cont(e);
                      var raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_qx_, 0));
                     });
                   return caml_cps_call3
                           (Dynlink_compilerlibs_Ident[29],
                            id,
                            env,
                            function(_qw_){caml_pop_trap(); return cont(_qw_);});
                  default:
                   var
                    raise$0 = caml_pop_trap(),
                    Not_simple$1 = caml_maybe_attach_backtrace(Not_simple, 1);
                   return raise$0(Not_simple$1);
                }
               }
               return _qm_(e, env);
              }
              function tr_recs(env, es, cont){
               return caml_cps_call3
                       (Stdlib_List[19],
                        function(_ql_, cont){
                         return caml_cps_exact_call3(tr_rec, env, _ql_, cont);
                        },
                        es,
                        cont);
              }
              function tr_opt(env, param, cont){
               if(! param) return cont(0);
               var e = param[1];
               return caml_cps_exact_call3
                       (tr_rec, env, e, function(_qk_){return cont([0, _qk_]);});
              }
              caml_push_trap
               (function(_qj_){
                 if(_qj_ === Not_simple) return cont(0);
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_qj_, 0));
                });
              return caml_cps_exact_call3
                      (tr_rec,
                       Dynlink_compilerlibs_Ident[27],
                       e,
                       function(_qi_){caml_pop_trap(); return cont([0, _qi_]);});
             });
   }
   function name_lambda(strict, arg, fn, cont){
    if(0 !== arg[0])
     return caml_cps_call2
             (Dynlink_compilerlibs_Ident[11],
              cst_let,
              function(id){
               return caml_cps_call2
                       (fn,
                        id,
                        function(_qh_){return cont([5, strict, 0, id, arg, _qh_]);});
              });
    var id = arg[1];
    return caml_cps_call2(fn, id, cont);
   }
   function name_lambda_list(args, fn, cont){
    function name_list(names, param, cont){
     var names$0 = names, param$0 = param;
     for(;;){
      if(! param$0)
       return caml_cps_call2
               (Stdlib_List[9],
                names$0,
                function(_qg_){return caml_cps_call2(fn, _qg_, cont);});
      var arg = param$0[1];
      if(0 !== arg[0]){
       var rem$0 = param$0[2];
       return caml_cps_call2
               (Dynlink_compilerlibs_Ident[11],
                cst_let$0,
                function(id){
                 return caml_cps_exact_call3
                         (name_list,
                          [0, [0, id], names$0],
                          rem$0,
                          function(_qf_){return cont([5, 0, 0, id, arg, _qf_]);});
                });
      }
      var
       rem = param$0[2],
       names$1 = [0, arg, names$0],
       names$0 = names$1,
       param$0 = rem;
     }
    }
    return caml_cps_exact_call3(name_list, 0, args, cont);
   }
   function iter_opt(f, param, cont){
    if(! param) return cont(0);
    var e = param[1];
    return caml_cps_call2(f, e, cont);
   }
   function shallow_iter(tail, f, param, cont){
    switch(param[0]){
      case 3:
       var match = param[1], args = match[2], fn = match[1];
       return caml_cps_call2
               (f,
                fn,
                function(_qe_){
                 return caml_cps_call3(Stdlib_List[17], f, args, cont);
                });
      case 4:
       var body = param[1][4]; return caml_cps_call2(f, body, cont);
      case 5:
       var body$0 = param[5], arg = param[4]; break;
      case 6:
       var body$0 = param[4], arg = param[3]; break;
      case 7:
       var body$1 = param[2], decl = param[1];
       return caml_cps_call2
               (tail,
                body$1,
                function(_qd_){
                 return caml_cps_call3
                         (Stdlib_List[17],
                          function(param, cont){
                           var exp = param[2];
                           return caml_cps_call2(f, exp, cont);
                          },
                          decl,
                          cont);
                });
      case 8:
       var _pX_ = param[1];
       if(typeof _pX_ === "number" && 1 >= _pX_ - 8 >>> 0){
        var _pY_ = param[2];
        if(_pY_){
         var _pZ_ = _pY_[2];
         if(_pZ_ && ! _pZ_[2]){
          var l2 = _pZ_[1], l1 = _pY_[1];
          return caml_cps_call2
                  (f,
                   l1,
                   function(_qc_){return caml_cps_call2(tail, l2, cont);});
         }
        }
       }
       var args$0 = param[2];
       return caml_cps_call3(Stdlib_List[17], f, args$0, cont);
      case 9:
       var sw = param[2], arg$0 = param[1];
       return caml_cps_call2
               (f,
                arg$0,
                function(_p$_){
                 return caml_cps_call3
                         (Stdlib_List[17],
                          function(param, cont){
                           var case$0 = param[2];
                           return caml_cps_call2(tail, case$0, cont);
                          },
                          sw[2],
                          function(_qa_){
                           return caml_cps_call3
                                   (Stdlib_List[17],
                                    function(param, cont){
                                     var case$0 = param[2];
                                     return caml_cps_call2(tail, case$0, cont);
                                    },
                                    sw[4],
                                    function(_qb_){
                                     return caml_cps_exact_call3(iter_opt, tail, sw[5], cont);
                                    });
                          });
                });
      case 10:
       var default$0 = param[3], cases = param[2], arg$1 = param[1];
       return caml_cps_call2
               (f,
                arg$1,
                function(_p9_){
                 return caml_cps_call3
                         (Stdlib_List[17],
                          function(param, cont){
                           var act = param[2];
                           return caml_cps_call2(tail, act, cont);
                          },
                          cases,
                          function(_p__){
                           return caml_cps_exact_call3(iter_opt, tail, default$0, cont);
                          });
                });
      case 11:
       var args$1 = param[2];
       return caml_cps_call3(Stdlib_List[17], f, args$1, cont);
      case 12:
       var e2 = param[3], e1 = param[1];
       return caml_cps_call2
               (tail,
                e1,
                function(_p8_){return caml_cps_call2(tail, e2, cont);});
      case 13:
       var e2$0 = param[3], e1$0 = param[1];
       return caml_cps_call2
               (f,
                e1$0,
                function(_p7_){return caml_cps_call2(tail, e2$0, cont);});
      case 14:
       var e3 = param[3], e2$1 = param[2], e1$1 = param[1];
       return caml_cps_call2
               (f,
                e1$1,
                function(_p5_){
                 return caml_cps_call2
                         (tail,
                          e2$1,
                          function(_p6_){return caml_cps_call2(tail, e3, cont);});
                });
      case 15:
       var e2$2 = param[2], e1$2 = param[1];
       return caml_cps_call2
               (f,
                e1$2,
                function(_p4_){return caml_cps_call2(tail, e2$2, cont);});
      case 16:
       var e2$3 = param[2], e1$3 = param[1];
       return caml_cps_call2
               (f,
                e1$3,
                function(_p3_){return caml_cps_call2(f, e2$3, cont);});
      case 17:
       var e3$0 = param[5], e2$4 = param[3], e1$4 = param[2];
       return caml_cps_call2
               (f,
                e1$4,
                function(_p1_){
                 return caml_cps_call2
                         (f,
                          e2$4,
                          function(_p2_){return caml_cps_call2(f, e3$0, cont);});
                });
      case 18:
       var e = param[2]; return caml_cps_call2(f, e, cont);
      case 19:
       var args$2 = param[4], obj = param[3], met = param[2];
       return caml_cps_call3
               (Stdlib_List[17], f, [0, met, [0, obj, args$2]], cont);
      case 20:
       var e$0 = param[1]; return caml_cps_call2(tail, e$0, cont);
      case 21:
       var e$1 = param[2]; return caml_cps_call2(tail, e$1, cont);
      default: return cont(0);
    }
    return caml_cps_call2
            (f,
             arg,
             function(_p0_){return caml_cps_call2(tail, body$0, cont);});
   }
   function iter_head_constructor(f, l, cont){
    return caml_cps_exact_call4(shallow_iter, f, f, l, cont);
   }
   function free_variables(param, cont){
    var param$0 = param;
    for(;;){
     switch(param$0[0]){
       case 2:
        return cont(Dynlink_compilerlibs_Ident[6][1]);
       case 3:
        var match = param$0[1], args = match[2], fn = match[1];
        return caml_cps_exact_call2
                (free_variables,
                 fn,
                 function(_pW_){
                  return caml_cps_exact_call3
                          (free_variables_list, _pW_, args, cont);
                 });
       case 4:
        var match$0 = param$0[1], body = match$0[4], params = match$0[2];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_pV_, cont){return cont(_pV_[1]);},
                 params,
                 function(_pS_){
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Ident[6][44],
                           _pS_,
                           function(_pT_){
                            return caml_cps_exact_call2
                                    (free_variables,
                                     body,
                                     function(_pU_){
                                      return caml_cps_call3
      (Dynlink_compilerlibs_Ident[6][10], _pU_, _pT_, cont);
                                     });
                           });
                 });
       case 5:
        var body$0 = param$0[5], arg = param$0[4], id$0 = param$0[3]; break;
       case 6:
        var body$0 = param$0[4], arg = param$0[3], id$0 = param$0[2]; break;
       case 7:
        var body$1 = param$0[2], decl = param$0[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_pR_, cont){return cont(_pR_[2]);},
                 decl,
                 function(_pM_){
                  return caml_cps_exact_call2
                          (free_variables,
                           body$1,
                           function(_pN_){
                            return caml_cps_exact_call3
                                    (free_variables_list,
                                     _pN_,
                                     _pM_,
                                     function(set){
                                      return caml_cps_call3
      (Stdlib_List[19],
       function(_pQ_, cont){return cont(_pQ_[1]);},
       decl,
       function(_pO_){
        return caml_cps_call2
                (Dynlink_compilerlibs_Ident[6][44],
                 _pO_,
                 function(_pP_){
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[6][10], set, _pP_, cont);
                 });
       });
                                     });
                           });
                 });
       case 8:
        var args$0 = param$0[2];
        return caml_cps_exact_call3
                (free_variables_list,
                 Dynlink_compilerlibs_Ident[6][1],
                 args$0,
                 cont);
       case 9:
        var sw = param$0[2], arg$0 = param$0[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_pL_, cont){return cont(_pL_[2]);},
                 sw[4],
                 function(_pF_){
                  return caml_cps_call3
                          (Stdlib_List[19],
                           function(_pK_, cont){return cont(_pK_[2]);},
                           sw[2],
                           function(_pG_){
                            return caml_cps_exact_call2
                                    (free_variables,
                                     arg$0,
                                     function(_pH_){
                                      return caml_cps_exact_call3
      (free_variables_list,
       _pH_,
       _pG_,
       function(_pI_){
        return caml_cps_exact_call3
                (free_variables_list,
                 _pI_,
                 _pF_,
                 function(set){
                  var match = sw[5];
                  if(! match) return cont(set);
                  var failaction = match[1];
                  return caml_cps_exact_call2
                          (free_variables,
                           failaction,
                           function(_pJ_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][7], set, _pJ_, cont);
                           });
                 });
       });
                                     });
                           });
                 });
       case 10:
        var default$0 = param$0[3], cases = param$0[2], arg$1 = param$0[1];
        return caml_cps_call3
                (Stdlib_List[19],
                 function(_pE_, cont){return cont(_pE_[2]);},
                 cases,
                 function(_pB_){
                  return caml_cps_exact_call2
                          (free_variables,
                           arg$1,
                           function(_pC_){
                            return caml_cps_exact_call3
                                    (free_variables_list,
                                     _pC_,
                                     _pB_,
                                     function(set){
                                      if(! default$0) return cont(set);
                                      var default$1 = default$0[1];
                                      return caml_cps_exact_call2
      (free_variables,
       default$1,
       function(_pD_){
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[6][7], set, _pD_, cont);
       });
                                     });
                           });
                 });
       case 11:
        var args$1 = param$0[2];
        return caml_cps_exact_call3
                (free_variables_list,
                 Dynlink_compilerlibs_Ident[6][1],
                 args$1,
                 cont);
       case 12:
        var
         handler = param$0[3],
         params$0 = param$0[2][2],
         body$2 = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 body$2,
                 function(_pv_){
                  return caml_cps_call3
                          (Stdlib_List[19],
                           function(_pA_, cont){return cont(_pA_[1]);},
                           params$0,
                           function(_pw_){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Ident[6][44],
                                     _pw_,
                                     function(_px_){
                                      return caml_cps_exact_call2
      (free_variables,
       handler,
       function(_py_){
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[6][10],
                 _py_,
                 _px_,
                 function(_pz_){
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[6][7], _pz_, _pv_, cont);
                 });
       });
                                     });
                           });
                 });
       case 13:
        var handler$0 = param$0[3], body$3 = param$0[1], param$1 = param$0[2];
        return caml_cps_exact_call2
                (free_variables,
                 body$3,
                 function(_ps_){
                  return caml_cps_exact_call2
                          (free_variables,
                           handler$0,
                           function(_pt_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][6],
                                     param$1,
                                     _pt_,
                                     function(_pu_){
                                      return caml_cps_call3
      (Dynlink_compilerlibs_Ident[6][7], _pu_, _ps_, cont);
                                     });
                           });
                 });
       case 14:
        var e3 = param$0[3], e2 = param$0[2], e1 = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 e3,
                 function(_po_){
                  return caml_cps_exact_call2
                          (free_variables,
                           e2,
                           function(_pp_){
                            return caml_cps_exact_call2
                                    (free_variables,
                                     e1,
                                     function(_pq_){
                                      return caml_cps_call3
      (Dynlink_compilerlibs_Ident[6][7],
       _pq_,
       _pp_,
       function(_pr_){
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[6][7], _pr_, _po_, cont);
       });
                                     });
                           });
                 });
       case 15:
        var e2$0 = param$0[2], e1$0 = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 e2$0,
                 function(_pm_){
                  return caml_cps_exact_call2
                          (free_variables,
                           e1$0,
                           function(_pn_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][7], _pn_, _pm_, cont);
                           });
                 });
       case 16:
        var e2$1 = param$0[2], e1$1 = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 e2$1,
                 function(_pk_){
                  return caml_cps_exact_call2
                          (free_variables,
                           e1$1,
                           function(_pl_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][7], _pl_, _pk_, cont);
                           });
                 });
       case 17:
        var
         body$4 = param$0[5],
         hi = param$0[3],
         lo = param$0[2],
         v = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 hi,
                 function(_pg_){
                  return caml_cps_exact_call2
                          (free_variables,
                           lo,
                           function(_ph_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][7],
                                     _ph_,
                                     _pg_,
                                     function(set){
                                      return caml_cps_exact_call2
      (free_variables,
       body$4,
       function(_pi_){
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[6][6],
                 v,
                 _pi_,
                 function(_pj_){
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[6][7], set, _pj_, cont);
                 });
       });
                                     });
                           });
                 });
       case 18:
        var e = param$0[2], id$1 = param$0[1];
        return caml_cps_exact_call2
                (free_variables,
                 e,
                 function(_pf_){
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[6][4], id$1, _pf_, cont);
                 });
       case 19:
        var args$2 = param$0[4], obj = param$0[3], met = param$0[2];
        return caml_cps_exact_call2
                (free_variables,
                 obj,
                 function(_pc_){
                  return caml_cps_exact_call2
                          (free_variables,
                           met,
                           function(_pd_){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Ident[6][7],
                                     _pd_,
                                     _pc_,
                                     function(_pe_){
                                      return caml_cps_exact_call3
      (free_variables_list, _pe_, args$2, cont);
                                     });
                           });
                 });
       case 20:
        var lam = param$0[1], param$0 = lam; continue;
       case 21:
        var e$0 = param$0[2], param$0 = e$0; continue;
       default:
        var id = param$0[1];
        return caml_cps_call2(Dynlink_compilerlibs_Ident[6][5], id, cont);
     }
     return caml_cps_exact_call2
             (free_variables,
              body$0,
              function(_o$_){
               return caml_cps_call3
                       (Dynlink_compilerlibs_Ident[6][6],
                        id$0,
                        _o$_,
                        function(_pa_){
                         return caml_cps_exact_call2
                                 (free_variables,
                                  arg,
                                  function(_pb_){
                                   return caml_cps_call3
   (Dynlink_compilerlibs_Ident[6][7], _pb_, _pa_, cont);
                                  });
                        });
              });
    }
   }
   function free_variables_list(set, exprs, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(set, expr, cont){
              return caml_cps_exact_call2
                      (free_variables,
                       expr,
                       function(_o__){
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Ident[6][7], _o__, set, cont);
                       });
             },
             set,
             exprs,
             cont);
   }
   var raise_count = [0, 0];
   function next_raise_count(param, cont){
    raise_count[1]++;
    return cont(raise_count[1]);
   }
   function is_guarded(param, cont){
    var param$0 = param;
    for(;;){
     switch(param$0[0]){
       case 5:
        var body = param$0[5], param$0 = body; continue;
       case 14:
        var _o9_ = param$0[3];
        if(11 === _o9_[0] && 0 === _o9_[1] && ! _o9_[2]) return cont(1);
        break;
       case 20:
        var lam = param$0[1], param$0 = lam; continue;
     }
     return cont(0);
    }
   }
   function patch_guarded(patch, param, cont){
    switch(param[0]){
      case 5:
       var
        body = param[5],
        lam = param[4],
        id = param[3],
        k = param[2],
        str = param[1];
       return caml_cps_exact_call3
               (patch_guarded,
                patch,
                body,
                function(_o8_){return cont([5, str, k, id, lam, _o8_]);});
      case 14:
       var _o6_ = param[3];
       if(11 === _o6_[0] && 0 === _o6_[1] && ! _o6_[2]){
        var body$0 = param[2], cond = param[1];
        return cont([14, cond, body$0, patch]);
       }
       break;
      case 20:
       var ev = param[2], lam$0 = param[1];
       return caml_cps_exact_call3
               (patch_guarded,
                patch,
                lam$0,
                function(_o7_){return cont([20, _o7_, ev]);});
    }
    return caml_cps_call2
            (Dynlink_compilerlibs_Misc[1], cst_Lambda_patch_guarded, cont);
   }
   function transl_address(loc, param, cont){
    if(0 === param[0]){
     var id = param[1];
     return caml_cps_call2
             (Dynlink_compilerlibs_Ident[21],
              id,
              function(_o5_){
               return _o5_ ? cont([8, [0, id], 0, loc]) : cont([0, id]);
              });
    }
    var pos = param[2], addr = param[1], _o3_ = 0;
    return caml_cps_exact_call3
            (transl_address,
             loc,
             addr,
             function(_o4_){
              return cont([8, [3, pos, 1, 0], [0, _o4_, _o3_], loc]);
             });
   }
   function transl_path(find, loc, env, path, cont){
    caml_push_trap
     (function(_o0_){
       if(_o0_ === Stdlib[8])
        return caml_cps_call3
                (Dynlink_compilerlibs_Path[7],
                 0,
                 path,
                 function(_o1_){
                  return caml_cps_call3
                          (Stdlib[28],
                           cst_Cannot_find_address_for,
                           _o1_,
                           function(_o2_){
                            return caml_cps_call2
                                    (Dynlink_compilerlibs_Misc[1], _o2_, cont);
                           });
                 });
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_o0_, 0));
      });
    return caml_cps_call3
            (find,
             path,
             env,
             function(addr){
              caml_pop_trap();
              return caml_cps_exact_call3(transl_address, loc, addr, cont);
             });
   }
   function transl_module_path(loc, env, path, cont){
    return caml_cps_exact_call5
            (transl_path, Dynlink_compilerlibs_Env[28], loc, env, path, cont);
   }
   function transl_value_path(loc, env, path, cont){
    return caml_cps_exact_call5
            (transl_path, Dynlink_compilerlibs_Env[27], loc, env, path, cont);
   }
   function transl_extension_path(loc, env, path, cont){
    return caml_cps_exact_call5
            (transl_path, Dynlink_compilerlibs_Env[30], loc, env, path, cont);
   }
   function transl_class_path(loc, env, path, cont){
    return caml_cps_exact_call5
            (transl_path, Dynlink_compilerlibs_Env[29], loc, env, path, cont);
   }
   function transl_prim(mod_name, name, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs_Ident[12],
             mod_name,
             function(pers){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Env[91],
                       pers,
                       Dynlink_compilerlibs_Env[3],
                       function(env){
                        var lid = [1, [0, mod_name], name];
                        caml_push_trap
                         (function(_oX_){
                           if(_oX_ === Stdlib[8])
                            return caml_cps_call3
                                    (Stdlib[28],
                                     name,
                                     cst_not_found,
                                     function(_oY_){
                                      return caml_cps_call3
      (Stdlib[28],
       cst_Primitive,
       _oY_,
       function(_oZ_){
        return caml_cps_call2
                (Dynlink_compilerlibs_Misc[1], _oZ_, cont);
       });
                                     });
                           var raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_oX_, 0));
                          });
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Env[64],
                                 lid,
                                 env,
                                 function(val){
                                  caml_pop_trap();
                                  var path = val[1];
                                  return caml_cps_exact_call4
  (transl_value_path, 0, env, path, cont);
                                 });
                       });
             });
   }
   function make_sequence(fn, param, cont){
    if(! param) return cont(lambda_unit);
    var x = param[1];
    if(! param[2]) return caml_cps_call2(fn, x, cont);
    var rem = param[2];
    return caml_cps_call2
            (fn,
             x,
             function(lam){
              return caml_cps_exact_call3
                      (make_sequence,
                       fn,
                       rem,
                       function(_oW_){return cont([15, lam, _oW_]);});
             });
   }
   function subst(update_env, opt, s, input_lam, cont){
    if(opt)
     var sth = opt[1], freshen_bound_variables = sth;
    else
     var freshen_bound_variables = 0;
    function bind(id, l, cont){
     function _oU_(id$0){
      return caml_cps_call4
              (Dynlink_compilerlibs_Ident[7][4],
               id,
               id$0,
               l,
               function(_oV_){return cont([0, id$0, _oV_]);});
     }
     return freshen_bound_variables
             ? caml_cps_call2(Dynlink_compilerlibs_Ident[14], id, _oU_)
             : _oU_(id);
    }
    function bind_many(ids, l, cont){
     return caml_cps_call4
             (Stdlib_List[26],
              function(param, _oT_, cont){
               var l = _oT_[2], ids = _oT_[1], rhs = param[2], id = param[1];
               return caml_cps_exact_call3
                       (bind,
                        id,
                        l,
                        function(match){
                         var l = match[2], id = match[1];
                         return cont([0, [0, [0, id, rhs], ids], l]);
                        });
              },
              ids,
              [0, 0, l],
              cont);
    }
    function subst(s, l, lam, cont){
     switch(lam[0]){
       case 0:
        var id = lam[1];
        caml_push_trap
         (function(_oQ_){
           if(_oQ_ === Stdlib[8]){
            caml_push_trap
             (function(_oS_){
               if(_oS_ === Stdlib[8]) return cont(lam);
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_oS_, 0));
              });
            return caml_cps_call3
                    (Dynlink_compilerlibs_Ident[7][28],
                     id,
                     s,
                     function(_oR_){caml_pop_trap(); return cont(_oR_);});
           }
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_oQ_, 0));
          });
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[7][28],
                 id,
                 l,
                 function(id){caml_pop_trap(); return cont([0, id]);});
       case 1:
        var id$0 = lam[1];
        caml_push_trap
         (function(_oN_){
           if(_oN_ === Stdlib[8]){
            caml_push_trap
             (function(_oP_){
               if(_oP_ === Stdlib[8]) return cont(lam);
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_oP_, 0));
              });
            return caml_cps_call3
                    (Dynlink_compilerlibs_Ident[7][28],
                     id$0,
                     s,
                     function(_oO_){caml_pop_trap(); return cont(_oO_);});
           }
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_oN_, 0));
          });
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[7][28],
                 id$0,
                 l,
                 function(id){caml_pop_trap(); return cont([1, id]);});
       case 2:
        return cont(lam);
       case 3:
        var
         ap = lam[1],
         _nP_ = ap[6],
         _nQ_ = ap[5],
         _nR_ = ap[4],
         _nS_ = ap[3];
        return caml_cps_exact_call4
                (subst_list,
                 s,
                 l,
                 ap[2],
                 function(_oL_){
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           ap[1],
                           function(_oM_){
                            return cont([3, [0, _oM_, _oL_, _nS_, _nR_, _nQ_, _nP_]]);
                           });
                 });
       case 4:
        var lf = lam[1];
        return caml_cps_exact_call3
                (bind_many,
                 lf[2],
                 l,
                 function(match){
                  var
                   l = match[2],
                   params = match[1],
                   _oI_ = lf[6],
                   _oJ_ = lf[5];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           lf[4],
                           function(_oK_){
                            return cont
                                    ([4, [0, lf[1], params, lf[3], _oK_, _oJ_, _oI_]]);
                           });
                 });
       case 5:
        var
         body = lam[5],
         arg = lam[4],
         id$1 = lam[3],
         k = lam[2],
         str = lam[1];
        return caml_cps_exact_call3
                (bind,
                 id$1,
                 l,
                 function(match){
                  var l$0 = match[2], id = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l$0,
                           body,
                           function(_oG_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     arg,
                                     function(_oH_){return cont([5, str, k, id, _oH_, _oG_]);});
                           });
                 });
       case 6:
        var body$0 = lam[4], arg$0 = lam[3], id$2 = lam[2], k$0 = lam[1];
        return caml_cps_exact_call3
                (bind,
                 id$2,
                 l,
                 function(match){
                  var l$0 = match[2], id = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l$0,
                           body$0,
                           function(_oE_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     arg$0,
                                     function(_oF_){return cont([6, k$0, id, _oF_, _oE_]);});
                           });
                 });
       case 7:
        var body$1 = lam[2], decl = lam[1];
        return caml_cps_exact_call3
                (bind_many,
                 decl,
                 l,
                 function(match){
                  var l = match[2], decl = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           body$1,
                           function(_oB_){
                            return caml_cps_call3
                                    (Stdlib_List[19],
                                     function(param, cont){
                                      var exp = param[2], id = param[1];
                                      return caml_cps_exact_call4
      (subst,
       s,
       l,
       exp,
       function(_oD_){return cont([0, id, _oD_]);});
                                     },
                                     decl,
                                     function(_oC_){return cont([7, _oC_, _oB_]);});
                           });
                 });
       case 8:
        var loc = lam[3], args = lam[2], p = lam[1];
        return caml_cps_exact_call4
                (subst_list,
                 s,
                 l,
                 args,
                 function(_oA_){return cont([8, p, _oA_, loc]);});
       case 9:
        var loc$0 = lam[3], sw = lam[2], arg$1 = lam[1];
        return caml_cps_exact_call4
                (subst_opt,
                 s,
                 l,
                 sw[5],
                 function(_os_){
                  return caml_cps_call3
                          (Stdlib_List[19],
                           function(_oz_, cont){
                            return caml_cps_exact_call4(subst_case, s, l, _oz_, cont);
                           },
                           sw[4],
                           function(_ot_){
                            var _ou_ = sw[3];
                            return caml_cps_call3
                                    (Stdlib_List[19],
                                     function(_oy_, cont){
                                      return caml_cps_exact_call4(subst_case, s, l, _oy_, cont);
                                     },
                                     sw[2],
                                     function(_ov_){
                                      var _ow_ = [0, sw[1], _ov_, _ou_, _ot_, _os_];
                                      return caml_cps_exact_call4
      (subst,
       s,
       l,
       arg$1,
       function(_ox_){return cont([9, _ox_, _ow_, loc$0]);});
                                     });
                           });
                 });
       case 10:
        var
         loc$1 = lam[4],
         default$0 = lam[3],
         cases = lam[2],
         arg$2 = lam[1];
        return caml_cps_exact_call4
                (subst_opt,
                 s,
                 l,
                 default$0,
                 function(_oo_){
                  return caml_cps_call3
                          (Stdlib_List[19],
                           function(param, cont){
                            var case$0 = param[2], key = param[1];
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     case$0,
                                     function(_or_){return cont([0, key, _or_]);});
                           },
                           cases,
                           function(_op_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     arg$2,
                                     function(_oq_){return cont([10, _oq_, _op_, _oo_, loc$1]);});
                           });
                 });
       case 11:
        var args$0 = lam[2], i = lam[1];
        return caml_cps_exact_call4
                (subst_list,
                 s,
                 l,
                 args$0,
                 function(_on_){return cont([11, i, _on_]);});
       case 12:
        var
         handler = lam[3],
         match = lam[2],
         params = match[2],
         id$3 = match[1],
         body$2 = lam[1];
        return caml_cps_exact_call3
                (bind_many,
                 params,
                 l,
                 function(match){
                  var l$0 = match[2], params = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l$0,
                           handler,
                           function(_ok_){
                            var _ol_ = [0, id$3, params];
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     body$2,
                                     function(_om_){return cont([12, _om_, _ol_, _ok_]);});
                           });
                 });
       case 13:
        var handler$0 = lam[3], exn = lam[2], body$3 = lam[1];
        return caml_cps_exact_call3
                (bind,
                 exn,
                 l,
                 function(match){
                  var l$0 = match[2], exn = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l$0,
                           handler$0,
                           function(_oi_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     body$3,
                                     function(_oj_){return cont([13, _oj_, exn, _oi_]);});
                           });
                 });
       case 14:
        var e3 = lam[3], e2 = lam[2], e1 = lam[1];
        return caml_cps_exact_call4
                (subst,
                 s,
                 l,
                 e3,
                 function(_of_){
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           e2,
                           function(_og_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     e1,
                                     function(_oh_){return cont([14, _oh_, _og_, _of_]);});
                           });
                 });
       case 15:
        var e2$0 = lam[2], e1$0 = lam[1];
        return caml_cps_exact_call4
                (subst,
                 s,
                 l,
                 e2$0,
                 function(_od_){
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           e1$0,
                           function(_oe_){return cont([15, _oe_, _od_]);});
                 });
       case 16:
        var e2$1 = lam[2], e1$1 = lam[1];
        return caml_cps_exact_call4
                (subst,
                 s,
                 l,
                 e2$1,
                 function(_ob_){
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           e1$1,
                           function(_oc_){return cont([16, _oc_, _ob_]);});
                 });
       case 17:
        var
         body$4 = lam[5],
         dir = lam[4],
         hi = lam[3],
         lo = lam[2],
         v = lam[1];
        return caml_cps_exact_call3
                (bind,
                 v,
                 l,
                 function(match){
                  var l$0 = match[2], v = match[1];
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l$0,
                           body$4,
                           function(_n__){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     hi,
                                     function(_n$_){
                                      return caml_cps_exact_call4
      (subst,
       s,
       l,
       lo,
       function(_oa_){return cont([17, v, _oa_, _n$_, dir, _n__]);});
                                     });
                           });
                 });
       case 18:
        var e = lam[2], id$4 = lam[1];
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[7][3],
                 id$4,
                 s,
                 function(_n5_){
                  if(_n5_){
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace([0, Assert_failure, _jH_], 1));
                  }
                  function _n6_(id){
                   return caml_cps_exact_call4
                           (subst,
                            s,
                            l,
                            e,
                            function(_n9_){return cont([18, id, _n9_]);});
                  }
                  caml_push_trap
                   (function(_n8_){
                     if(_n8_ === Stdlib[8]) return _n6_(id$4);
                     var raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_n8_, 0));
                    });
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[7][28],
                           id$4,
                           l,
                           function(_n7_){caml_pop_trap(); return _n6_(_n7_);});
                 });
       case 19:
        var
         loc$2 = lam[5],
         args$1 = lam[4],
         obj = lam[3],
         met = lam[2],
         k$1 = lam[1];
        return caml_cps_exact_call4
                (subst_list,
                 s,
                 l,
                 args$1,
                 function(_n2_){
                  return caml_cps_exact_call4
                          (subst,
                           s,
                           l,
                           obj,
                           function(_n3_){
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     met,
                                     function(_n4_){
                                      return cont([19, k$1, _n4_, _n3_, _n2_, loc$2]);
                                     });
                           });
                 });
       case 20:
        var
         evt = lam[2],
         lam$0 = lam[1],
         old_env = evt[4],
         find_in_old =
           function(id, cont){
            return caml_cps_call3
                    (Dynlink_compilerlibs_Env[12], [0, id], old_env, cont);
           };
        return caml_cps_call4
                (Dynlink_compilerlibs_Ident[7][8],
                 function(id, bound, free, cont){
                  if(! bound)
                   return free
                           ? cont
                             ([0,
                               function(new_env, cont){
                                caml_push_trap
                                 (function(_n1_){
                                   if(_n1_ === Stdlib[8]) return cont(new_env);
                                   var raise = caml_pop_trap();
                                   return raise(caml_maybe_attach_backtrace(_n1_, 0));
                                  });
                                return caml_cps_exact_call2
(find_in_old,
 id,
 function(vd){
  caml_pop_trap();
  return caml_cps_call4(update_env, id, vd, new_env, cont);
 });
                               }])
                           : cont(0);
                  var id$0 = bound[1];
                  return caml_cps_call3
                          (Dynlink_compilerlibs_Ident[2],
                           id,
                           id$0,
                           function(_nZ_){
                            return _nZ_
                                    ? cont(0)
                                    : cont
                                      ([0,
function(new_env, cont){
 caml_push_trap
  (function(_n0_){
    if(_n0_ === Stdlib[8]) return cont(new_env);
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace(_n0_, 0));
   });
 return caml_cps_exact_call2
         (find_in_old,
          id,
          function(vd){
           caml_pop_trap();
           return caml_cps_call5
                   (Dynlink_compilerlibs_Env[79], 0, id$0, vd, new_env, cont);
          });
}]);
                           });
                 },
                 l,
                 s,
                 function(env_updates){
                  return caml_cps_call4
                          (Dynlink_compilerlibs_Ident[7][13],
                           function(id, update, env, cont){
                            return caml_cps_call2(update, env, cont);
                           },
                           env_updates,
                           old_env,
                           function(new_env){
                            var _nX_ = [0, evt[1], evt[2], evt[3], new_env];
                            return caml_cps_exact_call4
                                    (subst,
                                     s,
                                     l,
                                     lam$0,
                                     function(_nY_){return cont([20, _nY_, _nX_]);});
                           });
                 });
       default:
        var
         e$0 = lam[2],
         id$5 = lam[1],
         _nT_ =
           function(id){
            return caml_cps_exact_call4
                    (subst,
                     s,
                     l,
                     e$0,
                     function(_nW_){return cont([21, id, _nW_]);});
           };
        caml_push_trap
         (function(_nV_){
           if(_nV_ === Stdlib[8]) return _nT_(id$5);
           var raise = caml_pop_trap();
           return raise(caml_maybe_attach_backtrace(_nV_, 0));
          });
        return caml_cps_call3
                (Dynlink_compilerlibs_Ident[7][28],
                 id$5,
                 l,
                 function(_nU_){caml_pop_trap(); return _nT_(_nU_);});
     }
    }
    function subst_list(s, l, li, cont){
     return caml_cps_call3
             (Stdlib_List[19],
              function(_nO_, cont){
               return caml_cps_exact_call4(subst, s, l, _nO_, cont);
              },
              li,
              cont);
    }
    function subst_case(s, l, param, cont){
     var case$0 = param[2], key = param[1];
     return caml_cps_exact_call4
             (subst,
              s,
              l,
              case$0,
              function(_nN_){return cont([0, key, _nN_]);});
    }
    function subst_opt(s, l, param, cont){
     if(! param) return cont(0);
     var e = param[1];
     return caml_cps_exact_call4
             (subst, s, l, e, function(_nM_){return cont([0, _nM_]);});
    }
    return caml_cps_exact_call4
            (subst, s, Dynlink_compilerlibs_Ident[7][1], input_lam, cont);
   }
   function rename$0(idmap, lam, cont){
    function update_env(oldid, vd, env, cont){
     return caml_cps_call3
             (Dynlink_compilerlibs_Ident[7][28],
              oldid,
              idmap,
              function(newid){
               return caml_cps_call5
                       (Dynlink_compilerlibs_Env[79], 0, newid, vd, env, cont);
              });
    }
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[7][34],
             function(new_id, cont){return cont([0, new_id]);},
             idmap,
             function(s){
              return caml_cps_exact_call5(subst, update_env, 0, s, lam, cont);
             });
   }
   function duplicate(lam, cont){
    return caml_cps_exact_call5
            (subst,
             function(param, _nL_, env, cont){return cont(env);},
             _jI_,
             Dynlink_compilerlibs_Ident[7][1],
             lam,
             cont);
   }
   function shallow_map(f, lam, cont){
    switch(lam[0]){
      case 3:
       var
        match = lam[1],
        ap_specialised = match[6],
        ap_inlined = match[5],
        ap_tailcall = match[4],
        ap_loc = match[3],
        ap_args = match[2],
        ap_func = match[1];
       return caml_cps_call3
               (Stdlib_List[19],
                f,
                ap_args,
                function(_nJ_){
                 return caml_cps_call2
                         (f,
                          ap_func,
                          function(_nK_){
                           return cont
                                   ([3,
                                     [0,
                                      _nK_,
                                      _nJ_,
                                      ap_loc,
                                      ap_tailcall,
                                      ap_inlined,
                                      ap_specialised]]);
                          });
                });
      case 4:
       var
        match$0 = lam[1],
        loc = match$0[6],
        attr = match$0[5],
        body = match$0[4],
        return$0 = match$0[3],
        params = match$0[2],
        kind = match$0[1];
       return caml_cps_call2
               (f,
                body,
                function(_nI_){
                 return cont
                         ([4, [0, kind, params, return$0, _nI_, attr, loc]]);
                });
      case 5:
       var e2 = lam[5], e1 = lam[4], v = lam[3], k = lam[2], str = lam[1];
       return caml_cps_call2
               (f,
                e2,
                function(_nG_){
                 return caml_cps_call2
                         (f,
                          e1,
                          function(_nH_){return cont([5, str, k, v, _nH_, _nG_]);});
                });
      case 6:
       var e2$0 = lam[4], e1$0 = lam[3], v$0 = lam[2], k$0 = lam[1];
       return caml_cps_call2
               (f,
                e2$0,
                function(_nE_){
                 return caml_cps_call2
                         (f,
                          e1$0,
                          function(_nF_){return cont([6, k$0, v$0, _nF_, _nE_]);});
                });
      case 7:
       var e2$1 = lam[2], idel = lam[1];
       return caml_cps_call2
               (f,
                e2$1,
                function(_nB_){
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(param, cont){
                           var e = param[2], v = param[1];
                           return caml_cps_call2
                                   (f, e, function(_nD_){return cont([0, v, _nD_]);});
                          },
                          idel,
                          function(_nC_){return cont([7, _nC_, _nB_]);});
                });
      case 8:
       var loc$0 = lam[3], el = lam[2], p = lam[1];
       return caml_cps_call3
               (Stdlib_List[19],
                f,
                el,
                function(_nA_){return cont([8, p, _nA_, loc$0]);});
      case 9:
       var loc$1 = lam[3], sw = lam[2], e = lam[1];
       return caml_cps_call3
               (Stdlib_Option[7],
                f,
                sw[5],
                function(_ns_){
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(param, cont){
                           var e = param[2], n = param[1];
                           return caml_cps_call2
                                   (f, e, function(_nz_){return cont([0, n, _nz_]);});
                          },
                          sw[4],
                          function(_nt_){
                           var _nu_ = sw[3];
                           return caml_cps_call3
                                   (Stdlib_List[19],
                                    function(param, cont){
                                     var e = param[2], n = param[1];
                                     return caml_cps_call2
     (f, e, function(_ny_){return cont([0, n, _ny_]);});
                                    },
                                    sw[2],
                                    function(_nv_){
                                     var _nw_ = [0, sw[1], _nv_, _nu_, _nt_, _ns_];
                                     return caml_cps_call2
     (f, e, function(_nx_){return cont([9, _nx_, _nw_, loc$1]);});
                                    });
                          });
                });
      case 10:
       var loc$2 = lam[4], default$0 = lam[3], sw$0 = lam[2], e$0 = lam[1];
       return caml_cps_call3
               (Stdlib_Option[7],
                f,
                default$0,
                function(_no_){
                 return caml_cps_call3
                         (Stdlib_List[19],
                          function(param, cont){
                           var e = param[2], s = param[1];
                           return caml_cps_call2
                                   (f, e, function(_nr_){return cont([0, s, _nr_]);});
                          },
                          sw$0,
                          function(_np_){
                           return caml_cps_call2
                                   (f,
                                    e$0,
                                    function(_nq_){return cont([10, _nq_, _np_, _no_, loc$2]);});
                          });
                });
      case 11:
       var args = lam[2], i = lam[1];
       return caml_cps_call3
               (Stdlib_List[19],
                f,
                args,
                function(_nn_){return cont([11, i, _nn_]);});
      case 12:
       var handler = lam[3], id = lam[2], body$0 = lam[1];
       return caml_cps_call2
               (f,
                handler,
                function(_nl_){
                 return caml_cps_call2
                         (f,
                          body$0,
                          function(_nm_){return cont([12, _nm_, id, _nl_]);});
                });
      case 13:
       var e2$2 = lam[3], v$1 = lam[2], e1$1 = lam[1];
       return caml_cps_call2
               (f,
                e2$2,
                function(_nj_){
                 return caml_cps_call2
                         (f,
                          e1$1,
                          function(_nk_){return cont([13, _nk_, v$1, _nj_]);});
                });
      case 14:
       var e3 = lam[3], e2$3 = lam[2], e1$2 = lam[1];
       return caml_cps_call2
               (f,
                e3,
                function(_ng_){
                 return caml_cps_call2
                         (f,
                          e2$3,
                          function(_nh_){
                           return caml_cps_call2
                                   (f,
                                    e1$2,
                                    function(_ni_){return cont([14, _ni_, _nh_, _ng_]);});
                          });
                });
      case 15:
       var e2$4 = lam[2], e1$3 = lam[1];
       return caml_cps_call2
               (f,
                e2$4,
                function(_ne_){
                 return caml_cps_call2
                         (f, e1$3, function(_nf_){return cont([15, _nf_, _ne_]);});
                });
      case 16:
       var e2$5 = lam[2], e1$4 = lam[1];
       return caml_cps_call2
               (f,
                e2$5,
                function(_nc_){
                 return caml_cps_call2
                         (f, e1$4, function(_nd_){return cont([16, _nd_, _nc_]);});
                });
      case 17:
       var
        e3$0 = lam[5],
        dir = lam[4],
        e2$6 = lam[3],
        e1$5 = lam[2],
        v$2 = lam[1];
       return caml_cps_call2
               (f,
                e3$0,
                function(_m$_){
                 return caml_cps_call2
                         (f,
                          e2$6,
                          function(_na_){
                           return caml_cps_call2
                                   (f,
                                    e1$5,
                                    function(_nb_){
                                     return cont([17, v$2, _nb_, _na_, dir, _m$_]);
                                    });
                          });
                });
      case 18:
       var e$1 = lam[2], v$3 = lam[1];
       return caml_cps_call2
               (f, e$1, function(_m__){return cont([18, v$3, _m__]);});
      case 19:
       var
        loc$3 = lam[5],
        el$0 = lam[4],
        o = lam[3],
        m = lam[2],
        k$1 = lam[1];
       return caml_cps_call3
               (Stdlib_List[19],
                f,
                el$0,
                function(_m7_){
                 return caml_cps_call2
                         (f,
                          o,
                          function(_m8_){
                           return caml_cps_call2
                                   (f,
                                    m,
                                    function(_m9_){
                                     return cont([19, k$1, _m9_, _m8_, _m7_, loc$3]);
                                    });
                          });
                });
      case 20:
       var ev = lam[2], l = lam[1];
       return caml_cps_call2
               (f, l, function(_m6_){return cont([20, _m6_, ev]);});
      case 21:
       var e$2 = lam[2], v$4 = lam[1];
       return caml_cps_call2
               (f, e$2, function(_m5_){return cont([21, v$4, _m5_]);});
      default: return cont(lam);
    }
   }
   function map$10(f, cont){
    function g(lam, cont){
     return caml_cps_exact_call3
             (shallow_map,
              g,
              lam,
              function(_m4_){return caml_cps_call2(f, _m4_, cont);});
    }
    return cont(g);
   }
   function bind_with_value_kind(str, param, exp, body, cont){
    var kind = param[2], var$0 = param[1];
    function _m2_(){return cont([5, str, kind, var$0, exp, body]);}
    if(0 !== exp[0]) return _m2_();
    var var$1 = exp[1];
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[19],
             var$0,
             var$1,
             function(_m3_){return _m3_ ? cont(body) : _m2_();});
   }
   function bind(str, var$0, exp, body, cont){
    return caml_cps_exact_call5
            (bind_with_value_kind, str, [0, var$0, 0], exp, body, cont);
   }
   function negate_integer_comparison(param, cont){
    switch(param){
      case 0:
       return cont(1);
      case 1:
       return cont(0);
      case 2:
       return cont(5);
      case 3:
       return cont(4);
      case 4:
       return cont(3);
      default: return cont(2);
    }
   }
   function swap_integer_comparison(param, cont){
    switch(param){
      case 0:
       return cont(0);
      case 1:
       return cont(1);
      case 2:
       return cont(3);
      case 3:
       return cont(2);
      case 4:
       return cont(5);
      default: return cont(4);
    }
   }
   function negate_float_comparison(param, cont){
    switch(param){
      case 0:
       return cont(1);
      case 1:
       return cont(0);
      case 2:
       return cont(3);
      case 3:
       return cont(2);
      case 4:
       return cont(5);
      case 5:
       return cont(4);
      case 6:
       return cont(7);
      case 7:
       return cont(6);
      case 8:
       return cont(9);
      default: return cont(8);
    }
   }
   function swap_float_comparison(param, cont){
    switch(param){
      case 0:
       return cont(0);
      case 1:
       return cont(1);
      case 2:
       return cont(4);
      case 3:
       return cont(5);
      case 4:
       return cont(2);
      case 5:
       return cont(3);
      case 6:
       return cont(8);
      case 7:
       return cont(9);
      case 8:
       return cont(6);
      default: return cont(7);
    }
   }
   function raise_kind(param, cont){
    switch(param){
      case 0:
       return cont(cst_raise);
      case 1:
       return cont(cst_reraise);
      default: return cont(cst_raise_notrace);
    }
   }
   function merge_inline_attributes(attr1, attr2, cont){
    if(typeof attr1 === "number" && 3 <= attr1) return cont([0, attr2]);
    if(typeof attr2 === "number" && 3 <= attr2) return cont([0, attr1]);
    return caml_equal(attr1, attr2) ? cont([0, attr1]) : cont(0);
   }
   function function_is_curried(func, cont){return func[1] ? cont(0) : cont(1);
   }
   function find_exact_application(kind, arity, args, cont){
    if(! kind)
     return caml_cps_call2
             (Stdlib_List[1],
              args,
              function(_m1_){
               return arity !== _m1_ ? cont(0) : cont([0, args]);
              });
    if(args){
     var _mV_ = args[1];
     switch(_mV_[0]){
       case 2:
        var _mW_ = _mV_[1];
        if(1 === _mW_[0] && ! args[2]){
         var const_args = _mW_[2];
         return caml_cps_call2
                 (Stdlib_List[1],
                  const_args,
                  function(_mZ_){
                   return arity !== _mZ_
                           ? cont(0)
                           : caml_cps_call3
                             (Stdlib_List[19],
                              function(cst, cont){return cont([2, cst]);},
                              const_args,
                              function(_m0_){return cont([0, _m0_]);});
                  });
        }
        break;
       case 8:
        var _mX_ = _mV_[1];
        if(typeof _mX_ !== "number" && 2 === _mX_[0] && ! args[2]){
         var tupled_args = _mV_[2];
         return caml_cps_call2
                 (Stdlib_List[1],
                  tupled_args,
                  function(_mY_){
                   return arity !== _mY_ ? cont(0) : cont([0, tupled_args]);
                  });
        }
        break;
     }
    }
    return cont(0);
   }
   function reset$4(param, cont){raise_count[1] = 0; return cont(0);}
   var
    Dynlink_compilerlibs_Lambda =
      [0,
       equal_primitive,
       equal_value_kind,
       equal_boxed_integer$0,
       equal_inline_attribute,
       equal_specialise_attribute,
       equal_meth_kind,
       make_key,
       const_unit,
       const_int,
       lambda_unit,
       name_lambda,
       name_lambda_list,
       lfunction,
       iter_head_constructor,
       shallow_iter,
       transl_prim,
       free_variables,
       transl_module_path,
       transl_value_path,
       transl_extension_path,
       transl_class_path,
       make_sequence,
       subst,
       rename$0,
       duplicate,
       map$10,
       shallow_map,
       bind,
       bind_with_value_kind,
       negate_integer_comparison,
       swap_integer_comparison,
       negate_float_comparison,
       swap_float_comparison,
       default_function_attribute,
       default_stub_attribute,
       function_is_curried,
       find_exact_application,
       max_arity,
       next_raise_count,
       staticfail,
       is_guarded,
       patch_guarded,
       raise_kind,
       merge_inline_attributes,
       reset$4];
   caml_register_global
    (1437, Dynlink_compilerlibs_Lambda, "Dynlink_compilerlibs.Lambda");
   var
    builtin_exceptions = _jJ_.slice(),
    builtin_primitives = _jK_.slice(),
    Dynlink_compilerlibs_Runtimede =
      [0, builtin_exceptions, builtin_primitives];
   caml_register_global
    (1438, Dynlink_compilerlibs_Runtimede, "Dynlink_compilerlibs.Runtimedef");
   var Dynlink_compilerlibs_Instruct = [0, -1073741824, 1073741823];
   caml_register_global
    (1439, Dynlink_compilerlibs_Instruct, "Dynlink_compilerlibs.Instruct");
   var
    Dynlink_compilerlibs_Opcodes =
      [0,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38,
       39,
       40,
       41,
       42,
       43,
       44,
       45,
       46,
       47,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       58,
       59,
       60,
       61,
       62,
       63,
       64,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       91,
       92,
       93,
       94,
       95,
       96,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       123,
       124,
       125,
       126,
       127,
       128,
       129,
       130,
       131,
       132,
       133,
       134,
       135,
       136,
       137,
       138,
       139,
       140,
       141,
       142,
       143,
       144,
       145,
       146,
       147,
       148,
       149,
       150,
       151,
       152];
   caml_register_global
    (1440, Dynlink_compilerlibs_Opcodes, "Dynlink_compilerlibs.Opcodes");
   var section_table = [0, 0], section_beginning = [0, 0];
   function init_record(outchan, cont){
    return caml_cps_call2
            (Stdlib[74],
             outchan,
             function(_mU_){
              section_beginning[1] = _mU_;
              section_table[1] = 0;
              return cont(0);
             });
   }
   function record$2(outchan, name, cont){
    return caml_cps_call2
            (Stdlib[74],
             outchan,
             function(pos){
              section_table[1] =
               [0,
                [0, name, pos - section_beginning[1] | 0],
                section_table[1]];
              section_beginning[1] = pos;
              return cont(0);
             });
   }
   function write_toc_and_trailer(outchan, cont){
    return caml_cps_call2
            (Stdlib_List[9],
             section_table[1],
             function(_mO_){
              return caml_cps_call3
                      (Stdlib_List[17],
                       function(param, cont){
                        var len = param[2], name = param[1];
                        return caml_cps_call3
                                (Stdlib[66],
                                 outchan,
                                 name,
                                 function(_mT_){
                                  return caml_cps_call3(Stdlib[71], outchan, len, cont);
                                 });
                       },
                       _mO_,
                       function(_mP_){
                        return caml_cps_call2
                                (Stdlib_List[1],
                                 section_table[1],
                                 function(_mQ_){
                                  return caml_cps_call3
  (Stdlib[71],
   outchan,
   _mQ_,
   function(_mR_){
    return caml_cps_call3
            (Stdlib[66],
             outchan,
             Dynlink_compilerlibs_Config[23],
             function(_mS_){section_table[1] = 0; return cont(0);});
   });
                                 });
                       });
             });
   }
   var
    Bad_magic_number =
      [248, cst_Dynlink_compilerlibs_Bytes, caml_fresh_oo_id(0)];
   function read_toc(ic, cont){
    return caml_cps_call2
            (Stdlib[92],
             ic,
             function(_mH_){
              var pos_trailer = _mH_ - 16 | 0;
              return caml_cps_call3
                      (Stdlib[90],
                       ic,
                       pos_trailer,
                       function(_mI_){
                        return caml_cps_call2
                                (Stdlib[88],
                                 ic,
                                 function(num_sections){
                                  return caml_cps_call3
  (Stdlib[86],
   ic,
   caml_ml_string_length(Dynlink_compilerlibs_Config[23]),
   function(header){
    if
     (!
      caml_string_notequal
       (header, Dynlink_compilerlibs_Config[23]))
     return caml_cps_call3
             (Stdlib[90],
              ic,
              pos_trailer - (8 * num_sections | 0) | 0,
              function(_mJ_){
               section_table[1] = 0;
               function _mM_(i){
                return caml_cps_call3
                        (Stdlib[86],
                         ic,
                         4,
                         function(name){
                          return caml_cps_call2
                                  (Stdlib[88],
                                   ic,
                                   function(len){
                                    section_table[1] = [0, [0, name, len], section_table[1]];
                                    var _mN_ = i + 1 | 0;
                                    return num_sections !== i
    ? caml_cps_exact_call1(_mM_, _mN_)
    : _mL_();
                                   });
                         });
               }
               function _mL_(){return cont(0);}
               var _mK_ = 1;
               return num_sections < 1 ? _mL_() : _mM_(_mK_);
              });
    var
     raise = caml_pop_trap(),
     Bad_magic_number$0 =
       caml_maybe_attach_backtrace(Bad_magic_number, 1);
    return raise(Bad_magic_number$0);
   });
                                 });
                       });
             });
   }
   function toc(param, cont){
    return caml_cps_call2(Stdlib_List[9], section_table[1], cont);
   }
   function seek_section(ic, name, cont){
    var param = section_table[1];
    return caml_cps_call2
            (Stdlib_List[1],
             section_table[1],
             function(_mC_){
              var _mD_ = 8 * _mC_ | 0;
              return caml_cps_call2
                      (Stdlib[92],
                       ic,
                       function(_mF_){
                        var
                         curr_ofs$1 = (_mF_ - 16 | 0) - _mD_ | 0,
                         curr_ofs = curr_ofs$1,
                         param$0 = param;
                        for(;;){
                         if(! param$0){
                          var _mE_ = Stdlib[8], raise = caml_pop_trap();
                          return raise(caml_maybe_attach_backtrace(_mE_, 1));
                         }
                         var
                          rem = param$0[2],
                          match = param$0[1],
                          len = match[2],
                          n = match[1];
                         if(caml_string_equal(n, name)) break;
                         var
                          curr_ofs$0 = curr_ofs - len | 0,
                          curr_ofs = curr_ofs$0,
                          param$0 = rem;
                        }
                        return caml_cps_call3
                                (Stdlib[90],
                                 ic,
                                 curr_ofs - len | 0,
                                 function(_mG_){return cont(len);});
                       });
             });
   }
   function read_section_string(ic, name, cont){
    return caml_cps_exact_call3
            (seek_section,
             ic,
             name,
             function(_mB_){
              return caml_cps_call3(Stdlib[86], ic, _mB_, cont);
             });
   }
   function read_section_struct(ic, name, cont){
    return caml_cps_exact_call3
            (seek_section,
             ic,
             name,
             function(_mA_){return caml_cps_call2(Stdlib[89], ic, cont);});
   }
   function pos_first_section(ic, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(total, param, cont){
              var len = param[2];
              return cont(total + len | 0);
             },
             0,
             section_table[1],
             function(_mw_){
              return caml_cps_call2
                      (Stdlib_List[1],
                       section_table[1],
                       function(_mx_){
                        var _my_ = 8 * _mx_ | 0;
                        return caml_cps_call2
                                (Stdlib[92],
                                 ic,
                                 function(_mz_){
                                  return cont(((_mz_ - 16 | 0) - _my_ | 0) - _mw_ | 0);
                                 });
                       });
             });
   }
   function reset$5(param, cont){
    section_table[1] = 0;
    section_beginning[1] = 0;
    return cont(0);
   }
   var
    Dynlink_compilerlibs_Bytesecti =
      [0,
       init_record,
       record$2,
       write_toc_and_trailer,
       read_toc,
       Bad_magic_number,
       toc,
       seek_section,
       read_section_string,
       read_section_struct,
       pos_first_section,
       reset$5];
   caml_register_global
    (1441,
     Dynlink_compilerlibs_Bytesecti,
     "Dynlink_compilerlibs.Bytesections");
   var search_path = [0, 0];
   function dll_close(param, cont){
    if(0 === param[0]) return cont(0);
    var dll = param[1];
    return cont(runtime.caml_dynlink_close_lib(dll));
   }
   var opened_dlls = [0, 0], names_of_opened_dlls = [0, 0];
   function add_path(dirs, cont){
    return caml_cps_call3
            (Stdlib[37],
             dirs,
             search_path[1],
             function(_mv_){search_path[1] = _mv_; return cont(0);});
   }
   function remove_path(dirs, cont){
    return caml_cps_call3
            (Stdlib_List[41],
             function(d, cont){
              return caml_cps_call3
                      (Stdlib_List[36],
                       d,
                       dirs,
                       function(_mu_){return cont(1 - _mu_);});
             },
             search_path[1],
             function(_mt_){search_path[1] = _mt_; return cont(0);});
   }
   function extract_dll_name(file, cont){
    return caml_cps_call3
            (Stdlib_Filename[7],
             file,
             Dynlink_compilerlibs_Config[48],
             function(_mp_){
              if(_mp_)
               return caml_cps_call3
                       (Stdlib_Filename[8],
                        file,
                        Dynlink_compilerlibs_Config[48],
                        cont);
              function _mq_(){return cont(file);}
              return 2 <= caml_ml_string_length(file)
                      ? caml_cps_call4
                        (Stdlib_String[15],
                         file,
                         0,
                         2,
                         function(_mr_){
                          return caml_string_equal(_mr_, "-l")
                                  ? caml_cps_call4
                                    (Stdlib_String[15],
                                     file,
                                     2,
                                     caml_ml_string_length(file) - 2 | 0,
                                     function(_ms_){
                                      return caml_cps_call3(Stdlib[28], cst_dll, _ms_, cont);
                                     })
                                  : _mq_();
                         })
                      : _mq_();
             });
   }
   function open_dlls(mode, names, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(name, cont){
              return caml_cps_call3
                      (Stdlib[28],
                       name,
                       Dynlink_compilerlibs_Config[48],
                       function(name){
                        function _ma_(fullname){
                         return caml_cps_call3
                                 (Stdlib_List[36],
                                  fullname,
                                  names_of_opened_dlls[1],
                                  function(_mf_){
                                   var _mg_ = 1 - _mf_;
                                   function _mh_(_mo_){return cont(_mo_);}
                                   if(! _mg_) return _mh_(_mg_);
                                   function _mi_(dll){
                                    names_of_opened_dlls[1] =
                                     [0, fullname, names_of_opened_dlls[1]];
                                    opened_dlls[1] = [0, dll, opened_dlls[1]];
                                    return _mh_(0);
                                   }
                                   if(! mode)
                                    return caml_cps_call2
    (Dynlink_compilerlibs_Binutils[2],
     fullname,
     function(match){
      if(0 === match[0]){var t = match[1]; return _mi_([0, t]);}
      var err = match[1];
      return caml_cps_call2
              (Dynlink_compilerlibs_Binutils[1],
               err,
               function(_ml_){
                return caml_cps_call3
                        (Stdlib[28],
                         cst$113,
                         _ml_,
                         function(_mm_){
                          return caml_cps_call3
                                  (Stdlib[28],
                                   fullname,
                                   _mm_,
                                   function(_mn_){
                                    return caml_cps_call2(Stdlib[2], _mn_, _mi_);
                                   });
                         });
               });
     });
                                   try{var dll = runtime.caml_dynlink_open_lib(mode, fullname);
                                   }
                                   catch(exn$1){
                                    var exn = caml_wrap_exception(exn$1);
                                    if(exn[1] === Stdlib[7]){
                                     var msg = exn[2];
                                     return caml_cps_call3
     (Stdlib[28],
      cst$112,
      msg,
      function(_mj_){
       return caml_cps_call3
               (Stdlib[28],
                fullname,
                _mj_,
                function(_mk_){
                 return caml_cps_call2(Stdlib[2], _mk_, _mi_);
                });
      });
                                    }
                                    var
                                     raise = caml_pop_trap(),
                                     exn$0 = caml_maybe_attach_backtrace(exn, 0);
                                    return raise(exn$0);
                                   }
                                   return _mi_([1, dll]);
                                  });
                        }
                        caml_push_trap
                         (function(_me_){
                           if(_me_ === Stdlib[8]) return _ma_(name);
                           var raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_me_, 0));
                          });
                        return caml_cps_call3
                                (Dynlink_compilerlibs_Misc[14],
                                 search_path[1],
                                 name,
                                 function(fullname){
                                  return caml_cps_call2
  (Stdlib_Filename[6],
   fullname,
   function(_mb_){
    function _mc_(_md_){caml_pop_trap(); return _ma_(_md_);}
    return _mb_
            ? caml_cps_call3
              (Stdlib_Filename[4], Stdlib_Filename[1], fullname, _mc_)
            : _mc_(fullname);
   });
                                 });
                       });
             },
             names,
             cont);
   }
   function close_all_dlls(param, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             dll_close,
             opened_dlls[1],
             function(_l$_){
              opened_dlls[1] = 0;
              names_of_opened_dlls[1] = 0;
              return cont(0);
             });
   }
   function find_primitive(prim_name, cont){
    function _l7_(param, seen){
     if(! param) return cont(0);
     var curr = param[1];
     if(0 === curr[0]){
      var rem = param[2], t = curr[1];
      return caml_cps_call3
              (Dynlink_compilerlibs_Binutils[3],
               t,
               prim_name,
               function(_l__){
                if(_l__) return cont(_jL_);
                var seen$0 = [0, curr, seen];
                return caml_cps_exact_call2(_l7_, rem, seen$0);
               });
     }
     var
      rem$0 = param[2],
      dll = curr[1],
      addr = runtime.caml_dynlink_lookup_symbol(dll, prim_name);
     if(0 === addr){
      var seen$0 = [0, curr, seen];
      return caml_cps_exact_call2(_l7_, rem$0, seen$0);
     }
     function _l8_(){return cont([0, [0, addr]]);}
     return 0 !== seen
             ? caml_cps_call3
               (Stdlib_List[12],
                seen,
                rem$0,
                function(_l9_){
                 opened_dlls[1] = [0, curr, _l9_];
                 return _l8_();
                })
             : _l8_();
    }
    return _l7_(opened_dlls[1], 0);
   }
   var linking_in_core = [0, 0];
   function synchronize_primitive(num, symb, cont){
    var _l6_ = linking_in_core[1];
    if(! _l6_) return cont(_l6_);
    var actual_num = runtime.caml_dynlink_add_primitive(symb);
    if(actual_num === num) return cont(0);
    var raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace([0, Assert_failure, _jM_], 1));
   }
   function ld_conf_contents(param, cont){
    var path = [0, 0];
    function _lY_(){return caml_cps_call2(Stdlib_List[9], path[1], cont);}
    caml_push_trap
     (function(_l5_){
       if(_l5_[1] === Stdlib[11]) return _lY_();
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_l5_, 0));
      });
    return caml_cps_call3
            (Stdlib_Filename[4],
             Dynlink_compilerlibs_Config[3],
             cst_ld_conf,
             function(_lZ_){
              return caml_cps_call2
                      (Stdlib[79],
                       _lZ_,
                       function(ic){
                        function _l0_(){
                         var _l3_ = path[1];
                         return caml_cps_call2
                                 (Stdlib[83],
                                  ic,
                                  function(_l4_){
                                   path[1] = [0, _l4_, _l3_];
                                   return caml_cps_exact_call0(_l0_);
                                  });
                        }
                        caml_push_trap
                         (function(_l1_){
                           if(_l1_ === Stdlib[12])
                            return caml_cps_call2
                                    (Stdlib[93],
                                     ic,
                                     function(_l2_){caml_pop_trap(); return _lY_();});
                           var raise = caml_pop_trap();
                           return raise(caml_maybe_attach_backtrace(_l1_, 0));
                          });
                        return _l0_();
                       });
             });
   }
   function ld_library_path_contents(param, cont){
    try{var s = caml_sys_getenv("CAML_LD_LIBRARY_PATH");}
    catch(_lX_){
     var _lW_ = caml_wrap_exception(_lX_);
     if(_lW_ === Stdlib[8]) return cont(0);
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_lW_, 0));
    }
    return caml_cps_call3(Dynlink_compilerlibs_Misc[19], 0, s, cont);
   }
   function init_compile(nostdlib, cont){
    function _lS_(_lT_){
     return caml_cps_exact_call2
             (ld_library_path_contents,
              undef,
              function(_lU_){
               return caml_cps_call3
                       (Stdlib[37],
                        _lU_,
                        _lT_,
                        function(_lV_){search_path[1] = _lV_; return cont(0);});
              });
    }
    return nostdlib
            ? _lS_(0)
            : caml_cps_exact_call2(ld_conf_contents, undef, _lS_);
   }
   function init_toplevel(dllpath, cont){
    return caml_cps_exact_call2
            (ld_conf_contents,
             undef,
             function(_lK_){
              return caml_cps_call3
                      (Dynlink_compilerlibs_Misc[19],
                       _jN_,
                       dllpath,
                       function(_lL_){
                        return caml_cps_call3
                                (Stdlib[37],
                                 _lL_,
                                 _lK_,
                                 function(_lM_){
                                  return caml_cps_exact_call2
  (ld_library_path_contents,
   undef,
   function(_lN_){
    return caml_cps_call3
            (Stdlib[37],
             _lN_,
             _lM_,
             function(_lO_){
              search_path[1] = _lO_;
              var _lP_ = runtime.caml_dynlink_get_current_libs(0);
              return caml_cps_call2
                      (Stdlib_Array[9],
                       _lP_,
                       function(_lQ_){
                        return caml_cps_call3
                                (Stdlib_List[19],
                                 function(dll, cont){return cont([1, dll]);},
                                 _lQ_,
                                 function(_lR_){
                                  opened_dlls[1] = _lR_;
                                  names_of_opened_dlls[1] = 0;
                                  linking_in_core[1] = 1;
                                  return cont(0);
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function reset$6(param, cont){
    search_path[1] = 0;
    opened_dlls[1] = 0;
    names_of_opened_dlls[1] = 0;
    linking_in_core[1] = 0;
    return cont(0);
   }
   var
    Dynlink_compilerlibs_Dll =
      [0,
       extract_dll_name,
       open_dlls,
       close_all_dlls,
       find_primitive,
       synchronize_primitive,
       add_path,
       remove_path,
       init_compile,
       init_toplevel,
       reset$6];
   caml_register_global
    (1442, Dynlink_compilerlibs_Dll, "Dynlink_compilerlibs.Dll");
   var Dynlink_compilerlibs_Meta = [0];
   caml_register_global
    (1443, Dynlink_compilerlibs_Meta, "Dynlink_compilerlibs.Meta");
   var Error$7 = [248, cst_Dynlink_compilerlibs_Symta, caml_fresh_oo_id(0)];
   function Num_tbl(M){
    var empty = [0, 0, M[1]];
    function find(nt, key, cont){
     return caml_cps_call3(M[28], key, nt[2], cont);
    }
    function enter(nt, key, cont){
     var n = nt[1][1];
     return caml_cps_call4
             (M[4],
              key,
              n,
              nt[1][2],
              function(_lJ_){nt[1] = [0, n + 1 | 0, _lJ_]; return cont(n);});
    }
    function incr(nt){
     var n = nt[1][1];
     nt[1] = [0, n + 1 | 0, nt[1][2]];
     return n;
    }
    return [0, empty, find, enter, incr];
   }
   var
    _jO_ = Dynlink_compilerlibs_Ident[7],
    GlobalMap =
      Num_tbl
       ([0,
         _jO_[1],
         ,
         ,
         _jO_[4],
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         ,
         _jO_[28]]),
    PrimMap = Num_tbl(Dynlink_compilerlibs_Misc[13][4][65]),
    global_table = [0, GlobalMap[1]],
    literal_table = [0, 0];
   function is_global_defined(id, cont){
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[7][3], id, global_table[1][2], cont);
   }
   function slot_for_getglobal(id, cont){
    caml_push_trap
     (function(_lH_){
       if(_lH_ === Stdlib[8])
        return caml_cps_call2
                (Dynlink_compilerlibs_Ident[15],
                 id,
                 function(_lI_){
                  var raise = caml_pop_trap();
                  return raise
                          (caml_maybe_attach_backtrace([0, Error$7, [0, _lI_]], 1));
                 });
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_lH_, 0));
      });
    return caml_cps_exact_call3
            (GlobalMap[2],
             global_table[1],
             id,
             function(_lG_){caml_pop_trap(); return cont(_lG_);});
   }
   function slot_for_setglobal(id, cont){
    return caml_cps_exact_call3(GlobalMap[3], global_table, id, cont);
   }
   var c_prim_table = [0, PrimMap[1]];
   function set_prim_table(name, cont){
    return caml_cps_exact_call3
            (PrimMap[3], c_prim_table, name, function(_lF_){return cont(0);});
   }
   function of_prim(name, cont){
    caml_push_trap
     (function(_lD_){
       if(_lD_ !== Stdlib[8]){
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_lD_, 0));
       }
       if
        (!
         Dynlink_compilerlibs_Clflags[24][1]
         &&
          !
          caml_string_notequal
           (Dynlink_compilerlibs_Config[53], Dynlink_compilerlibs_Config[54])
          && ! Dynlink_compilerlibs_Clflags[25][1])
        return caml_cps_call2
                (Dynlink_compilerlibs_Dll[4],
                 name,
                 function(match){
                  if(! match){
                   var raise = caml_pop_trap();
                   return raise
                           (caml_maybe_attach_backtrace([0, Error$7, [1, name]], 1));
                  }
                  var match$0 = match[1];
                  if(! match$0)
                   return caml_cps_exact_call3
                           (PrimMap[3], c_prim_table, name, cont);
                  var symb = match$0[1];
                  return caml_cps_exact_call3
                          (PrimMap[3],
                           c_prim_table,
                           name,
                           function(num){
                            return caml_cps_call3
                                    (Dynlink_compilerlibs_Dll[5],
                                     num,
                                     symb,
                                     function(_lE_){return cont(num);});
                           });
                 });
       return caml_cps_exact_call3(PrimMap[3], c_prim_table, name, cont);
      });
    return caml_cps_exact_call3
            (PrimMap[2],
             c_prim_table[1],
             name,
             function(_lC_){caml_pop_trap(); return cont(_lC_);});
   }
   function require_primitive(name, cont){
    var _ly_ = 37 !== caml_string_get(name, 0) ? 1 : 0;
    function _lz_(_lB_){return cont(_lB_);}
    return _ly_
            ? caml_cps_exact_call2
              (of_prim, name, function(_lA_){return _lz_(0);})
            : _lz_(_ly_);
   }
   function all_primitives(param, cont){
    var prim = caml_make_vect(c_prim_table[1][1], cst$117);
    return caml_cps_call3
            (Dynlink_compilerlibs_Misc[13][4][65][12],
             function(name, number, cont){
              caml_check_bound(prim, number)[1 + number] = name;
              return cont(0);
             },
             c_prim_table[1][2],
             function(_lx_){return cont(prim);});
   }
   function data_primitive_names(param, cont){
    return caml_cps_exact_call2
            (all_primitives,
             undef,
             function(prim){
              return caml_cps_call2
                      (Stdlib_Buffer[1],
                       512,
                       function(b){
                        var _lq_ = prim.length - 1 - 1 | 0;
                        function _ls_(){
                         return caml_cps_call2(Stdlib_Buffer[2], b, cont);
                        }
                        function _lr_(i){
                         var _lt_ = caml_check_bound(prim, i)[1 + i];
                         return caml_cps_call3
                                 (Stdlib_Buffer[16],
                                  b,
                                  _lt_,
                                  function(_lu_){
                                   return caml_cps_call3
   (Stdlib_Buffer[12],
    b,
    0,
    function(_lv_){
     var _lw_ = i + 1 | 0;
     return _lq_ !== i
             ? caml_cps_exact_call1(_lr_, _lw_)
             : _ls_();
    });
                                  });
                        }
                        var _lp_ = 0;
                        return _lq_ < 0 ? _ls_() : _lr_(_lp_);
                       });
             });
   }
   function output_primitive_names(outchan, cont){
    return caml_cps_exact_call2
            (data_primitive_names,
             undef,
             function(_lo_){
              return caml_cps_call3(Stdlib[66], outchan, _lo_, cont);
             });
   }
   function output_primitive_table(outchan, cont){
    return caml_cps_exact_call2
            (all_primitives,
             undef,
             function(prim){
              var _k2_ = prim.length - 1 - 1 | 0;
              function _k4_(){
               return caml_cps_call3
                       (Stdlib_Printf[1],
                        outchan,
                        _jP_,
                        function(_k8_){
                         return caml_cps_call3
                                 (Stdlib_Printf[1],
                                  outchan,
                                  _jQ_,
                                  function(_k9_){
                                   var _k$_ = prim.length - 1 - 1 | 0;
                                   function _lb_(){
                                    return caml_cps_call3
    (Stdlib_Printf[1],
     outchan,
     _jR_,
     function(_lf_){
      return caml_cps_call3
              (Stdlib_Printf[1],
               outchan,
               _jS_,
               function(_lg_){
                var _li_ = prim.length - 1 - 1 | 0;
                function _lk_(){
                 return caml_cps_call3(Stdlib_Printf[1], outchan, _jT_, cont);
                }
                function _lj_(i){
                 var _ll_ = caml_check_bound(prim, i)[1 + i];
                 return caml_cps_call4
                         (Stdlib_Printf[1],
                          outchan,
                          _jU_,
                          _ll_,
                          function(_lm_){
                           var _ln_ = i + 1 | 0;
                           return _li_ !== i
                                   ? caml_cps_exact_call1(_lj_, _ln_)
                                   : _lk_();
                          });
                }
                var _lh_ = 0;
                return _li_ < 0 ? _lk_() : _lj_(_lh_);
               });
     });
                                   }
                                   function _la_(i){
                                    var _lc_ = caml_check_bound(prim, i)[1 + i];
                                    return caml_cps_call4
    (Stdlib_Printf[1],
     outchan,
     _jV_,
     _lc_,
     function(_ld_){
      var _le_ = i + 1 | 0;
      return _k$_ !== i
              ? caml_cps_exact_call1(_la_, _le_)
              : _lb_();
     });
                                   }
                                   var _k__ = 0;
                                   return _k$_ < 0 ? _lb_() : _la_(_k__);
                                  });
                        });
              }
              function _k3_(i){
               var _k5_ = caml_check_bound(prim, i)[1 + i];
               return caml_cps_call4
                       (Stdlib_Printf[1],
                        outchan,
                        _jW_,
                        _k5_,
                        function(_k6_){
                         var _k7_ = i + 1 | 0;
                         return _k2_ !== i
                                 ? caml_cps_exact_call1(_k3_, _k7_)
                                 : _k4_();
                        });
              }
              var _k1_ = 0;
              return _k2_ < 0 ? _k4_() : _k3_(_k1_);
             });
   }
   function init$4(param, cont){
    return caml_cps_call3
            (Stdlib_Array[12],
             function(i, name, cont){
              function _kY_(id){
               return caml_cps_exact_call2
                       (slot_for_setglobal,
                        id,
                        function(c){
                         var
                          cst =
                            [1,
                             Stdlib_Obj[10],
                             [0,
                              [0, [2, name, Dynlink_compilerlibs_Location[1], 0]],
                              [0, [0, [0, (- i | 0) - 1 | 0]], 0]]];
                         literal_table[1] = [0, [0, c, cst], literal_table[1]];
                         return cont(0);
                        });
              }
              caml_push_trap
               (function(_k0_){
                 if(_k0_ === Stdlib[8])
                  return caml_cps_call2
                          (Dynlink_compilerlibs_Misc[1], cst_Symtable_init, _kY_);
                 var raise = caml_pop_trap();
                 return raise(caml_maybe_attach_backtrace(_k0_, 0));
                });
              return caml_cps_call3
                      (Stdlib_List[46],
                       name,
                       Dynlink_compilerlibs_Predef[46],
                       function(_kZ_){caml_pop_trap(); return _kY_(_kZ_);});
             },
             Dynlink_compilerlibs_Runtimede[1],
             function(_kS_){
              function set_prim_table_from_file(primfile, cont){
               return caml_cps_call2
                       (Stdlib[79],
                        primfile,
                        function(ic){
                         return caml_cps_call4
                                 (Dynlink_compilerlibs_Misc[4],
                                  [0,
                                   function(param, cont){
                                    return caml_cps_call2(Stdlib[93], ic, cont);
                                   }],
                                  0,
                                  function(param, cont){
                                   function _kU_(_kW_){
                                    return caml_cps_call2
    (Stdlib[83],
     ic,
     function(_kX_){
      return caml_cps_exact_call2(set_prim_table, _kX_, _kU_);
     });
                                   }
                                   caml_push_trap
                                    (function(_kV_){
                                      if(_kV_ === Stdlib[12]) return cont(0);
                                      var raise = caml_pop_trap();
                                      return raise(caml_maybe_attach_backtrace(_kV_, 0));
                                     });
                                   return _kU_(0);
                                  },
                                  cont);
                        });
              }
              return 0
                      < caml_ml_string_length(Dynlink_compilerlibs_Clflags[48][1])
                      ? caml_cps_exact_call2
                        (set_prim_table_from_file,
                         Dynlink_compilerlibs_Clflags[48][1],
                         cont)
                      : 0
                        < caml_ml_string_length(Dynlink_compilerlibs_Clflags[49][1])
                        ? caml_cps_call4
                          (Stdlib_Filename[16],
                           0,
                           cst_camlprims,
                           cst$114,
                           function(primfile){
                            return caml_cps_call4
                                    (Dynlink_compilerlibs_Misc[4],
                                     [0,
                                      function(param, cont){
                                       return caml_cps_call2
       (Dynlink_compilerlibs_Misc[17], primfile, cont);
                                      }],
                                     0,
                                     function(param, cont){
                                      return caml_cps_call6
      (Stdlib_Filename[21],
       Dynlink_compilerlibs_Clflags[49][1],
       0,
       [0, primfile],
       0,
       _jX_,
       function(cmd){
        if(0 === runtime.caml_sys_system_command(cmd))
         return caml_cps_exact_call2
                 (set_prim_table_from_file, primfile, cont);
        var
         _kT_ =
           [0, Error$7, [2, Dynlink_compilerlibs_Clflags[49][1]]],
         raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_kT_, 1));
       });
                                     },
                                     cont);
                           })
                        : caml_cps_call3
                          (Stdlib_Array[11],
                           set_prim_table,
                           Dynlink_compilerlibs_Runtimede[2],
                           cont);
             });
   }
   function patch_int(buff, pos, n, cont){
    return caml_cps_call4
            (Dynlink_compilerlibs_Misc[46][4],
             buff,
             pos,
             n,
             function(_kP_){
              return caml_cps_call4
                      (Dynlink_compilerlibs_Misc[46][4],
                       buff,
                       pos + 1 | 0,
                       n >> 8,
                       function(_kQ_){
                        return caml_cps_call4
                                (Dynlink_compilerlibs_Misc[46][4],
                                 buff,
                                 pos + 2 | 0,
                                 n >> 16,
                                 function(_kR_){
                                  return caml_cps_call4
  (Dynlink_compilerlibs_Misc[46][4],
   buff,
   pos + 3 | 0,
   n >> 24,
   cont);
                                 });
                       });
             });
   }
   function patch_object(buff, patchlist, cont){
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var match = param[1];
              switch(match[0]){
                case 0:
                 var
                  pos = param[2],
                  cst = match[1],
                  n = GlobalMap[4].call(null, global_table);
                 literal_table[1] = [0, [0, n, cst], literal_table[1]];
                 return caml_cps_exact_call4(patch_int, buff, pos, n, cont);
                case 1:
                 var pos$0 = param[2], id = match[1];
                 return caml_cps_exact_call2
                         (slot_for_getglobal,
                          id,
                          function(_kO_){
                           return caml_cps_exact_call4
                                   (patch_int, buff, pos$0, _kO_, cont);
                          });
                case 2:
                 var pos$1 = param[2], id$0 = match[1];
                 return caml_cps_exact_call2
                         (slot_for_setglobal,
                          id$0,
                          function(_kN_){
                           return caml_cps_exact_call4
                                   (patch_int, buff, pos$1, _kN_, cont);
                          });
                default:
                 var pos$2 = param[2], name = match[1];
                 return caml_cps_exact_call2
                         (of_prim,
                          name,
                          function(_kM_){
                           return caml_cps_exact_call4
                                   (patch_int, buff, pos$2, _kM_, cont);
                          });
              }
             },
             patchlist,
             cont);
   }
   function transl_const(param, cont){
    switch(param[0]){
      case 0:
       var match = param[1];
       switch(match[0]){
         case 0:
          var i = match[1]; return cont(i);
         case 1:
          var c = match[1]; return cont(c);
         case 2:
          var s = match[1]; return cont(s);
         case 3:
          var f = match[1]; return cont(caml_float_of_string(f));
         case 4:
          var i$0 = match[1]; return cont(i$0);
         case 5:
          var i$1 = match[1]; return cont(i$1);
         default: var i$2 = match[1]; return cont(i$2);
       }
      case 1:
       var fields = param[2], tag = param[1];
       return caml_cps_call2
               (Stdlib_List[1],
                fields,
                function(_kJ_){
                 var block = runtime.caml_obj_block(tag, _kJ_), pos = [0, 0];
                 return caml_cps_call3
                         (Stdlib_List[17],
                          function(c, cont){
                           return caml_cps_exact_call2
                                   (transl_const,
                                    c,
                                    function(_kL_){
                                     block[1 + pos[1]] = _kL_;
                                     pos[1]++;
                                     return cont(0);
                                    });
                          },
                          fields,
                          function(_kK_){return cont(block);});
                });
      case 2:
       var fields$0 = param[1];
       return caml_cps_call2
               (Stdlib_List[1],
                fields$0,
                function(_kH_){
                 var res = runtime.caml_floatarray_create(_kH_);
                 return caml_cps_call3
                         (Stdlib_List[18],
                          function(i, f, cont){
                           return cont(caml_array_set(res, i, caml_float_of_string(f)));
                          },
                          fields$0,
                          function(_kI_){return cont(res);});
                });
      default: var s$0 = param[1]; return cont(s$0);
    }
   }
   function initial_global_table(param, cont){
    var glob = caml_make_vect(global_table[1][1], 0);
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var cst = param[2], slot = param[1];
              return caml_cps_exact_call2
                      (transl_const,
                       cst,
                       function(_kG_){
                        caml_check_bound(glob, slot)[1 + slot] = _kG_;
                        return cont(0);
                       });
             },
             literal_table[1],
             function(_kF_){literal_table[1] = 0; return cont(glob);});
   }
   function output_global_map(oc, cont){
    return caml_cps_call3(Stdlib[72], oc, global_table[1], cont);
   }
   function data_global_map(param, cont){return cont(global_table[1]);}
   function update_global_table(param, cont){
    var ng = global_table[1][1];
    if(caml_get_global_data(0).length - 1 < ng)
     runtime.caml_realloc_global(ng);
    var glob = caml_get_global_data(0);
    return caml_cps_call3
            (Stdlib_List[17],
             function(param, cont){
              var cst = param[2], slot = param[1];
              return caml_cps_exact_call2
                      (transl_const,
                       cst,
                       function(_kE_){
                        caml_check_bound(glob, slot)[1 + slot] = _kE_;
                        return cont(0);
                       });
             },
             literal_table[1],
             function(_kD_){literal_table[1] = 0; return cont(0);});
   }
   function init_toplevel$0(param, cont){
    caml_push_trap
     (function(_kC_){
       if
        (_kC_ !== Dynlink_compilerlibs_Bytesecti[5]
         && _kC_ !== Stdlib[8] && _kC_[1] !== Stdlib[7]){
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_kC_, 0));
       }
       return caml_cps_call2
               (Dynlink_compilerlibs_Misc[1],
                cst_Toplevel_bytecode_executab,
                cont);
      });
    function _kk_(sect){
     return caml_cps_call2
             (sect[2],
              cst_SYMB,
              function(_kq_){
               global_table[1] = _kq_;
               return caml_cps_call2
                       (sect[1],
                        cst_PRIM,
                        function(prims){
                         c_prim_table[1] = PrimMap[1];
                         var pos = [0, 0];
                         function _kr_(){
                          if(pos[1] < caml_ml_string_length(prims))
                           return caml_cps_call4
                                   (Dynlink_compilerlibs_Misc[13][4][30],
                                    prims,
                                    pos[1],
                                    0,
                                    function(i){
                                     return caml_cps_call4
     (Dynlink_compilerlibs_Misc[13][4][15],
      prims,
      pos[1],
      i - pos[1] | 0,
      function(_kA_){
       return caml_cps_exact_call2
               (set_prim_table,
                _kA_,
                function(_kB_){
                 pos[1] = i + 1 | 0;
                 return caml_cps_exact_call0(_kr_);
                });
      });
                                    });
                          function _ks_(dllpath){
                           return caml_cps_call2
                                   (Dynlink_compilerlibs_Dll[9],
                                    dllpath,
                                    function(_kv_){
                                     function _kw_(crcintfs){
                                      return caml_cps_exact_call2
      (sect[3],
       undef,
       function(_kz_){caml_pop_trap(); return cont(crcintfs);});
                                     }
                                     caml_push_trap
                                      (function(_ky_){
if(_ky_ === Stdlib[8]) return _kw_(0);
var raise = caml_pop_trap();
return raise(caml_maybe_attach_backtrace(_ky_, 0));
                                       });
                                     return caml_cps_call2
     (sect[2],
      cst_CRCS,
      function(_kx_){caml_pop_trap(); return _kw_(_kx_);});
                                    });
                          }
                          caml_push_trap
                           (function(_ku_){
                             if(_ku_ === Stdlib[8]) return _ks_(cst$115);
                             var raise = caml_pop_trap();
                             return raise(caml_maybe_attach_backtrace(_ku_, 0));
                            });
                          return caml_cps_call2
                                  (sect[1],
                                   cst_DLPT,
                                   function(_kt_){caml_pop_trap(); return _ks_(_kt_);});
                         }
                         return _kr_();
                        });
              });
    }
    try{
     var
      sections = runtime.caml_get_section_table(0),
      _kj_ =
        [0,
         function(name, cont){
          return caml_cps_call3(Stdlib_List[46], name, sections, cont);
         },
         function(name, cont){
          return caml_cps_call3(Stdlib_List[46], name, sections, cont);
         },
         function(param, cont){return cont(undef);}];
    }
    catch(_kl_){
     var _ki_ = caml_wrap_exception(_kl_);
     if(_ki_ === Stdlib[8])
      return caml_cps_call2
              (Stdlib[80],
               Stdlib_Sys[1],
               function(ic){
                return caml_cps_call2
                        (Dynlink_compilerlibs_Bytesecti[4],
                         ic,
                         function(_km_){
                          function _kn_(param, cont){
                           return caml_cps_call2(Stdlib[93], ic, cont);
                          }
                          return caml_cps_call2
                                  (Dynlink_compilerlibs_Bytesecti[9],
                                   ic,
                                   function(_ko_){
                                    return caml_cps_call2
    (Dynlink_compilerlibs_Bytesecti[8],
     ic,
     function(_kp_){return _kk_([0, _kp_, _ko_, _kn_]);});
                                   });
                         });
               });
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_ki_, 0));
    }
    return _kk_(_kj_);
   }
   function get_global_position(id, cont){
    return caml_cps_exact_call2(slot_for_getglobal, id, cont);
   }
   function get_global_value(id, cont){
    return caml_cps_exact_call2
            (slot_for_getglobal,
             id,
             function(_kh_){
              return cont
                      (caml_check_bound(caml_get_global_data(0), _kh_)[1 + _kh_]);
             });
   }
   function assign_global_value(id, v, cont){
    return caml_cps_exact_call2
            (slot_for_getglobal,
             id,
             function(_kg_){
              caml_check_bound(caml_get_global_data(0), _kg_)[1 + _kg_] = v;
              return cont(0);
             });
   }
   function defined_globals(patchlist, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(accu, rel, cont){
              var match = rel[1];
              if(2 !== match[0]) return cont(accu);
              var id = match[1];
              return cont([0, id, accu]);
             },
             0,
             patchlist,
             cont);
   }
   function required_globals$0(patchlist, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(accu, rel, cont){
              var match = rel[1];
              if(1 !== match[0]) return cont(accu);
              var id = match[1];
              return cont([0, id, accu]);
             },
             0,
             patchlist,
             cont);
   }
   function check_global_initialized(patchlist, cont){
    return caml_cps_exact_call2
            (defined_globals,
             patchlist,
             function(defined_globals){
              function check_reference(param, cont){
               var match = param[1];
               if(1 !== match[0]) return cont(0);
               var id = match[1];
               return caml_cps_call3
                       (Stdlib_List[36],
                        id,
                        defined_globals,
                        function(_ka_){
                         var _kb_ = 1 - _ka_;
                         function _kc_(_ke_){
                          return _ke_
                                  ? caml_cps_call2
                                    (Dynlink_compilerlibs_Ident[15],
                                     id,
                                     function(_kf_){
                                      var raise = caml_pop_trap();
                                      return raise
      (caml_maybe_attach_backtrace([0, Error$7, [3, _kf_]], 1));
                                     })
                                  : cont(_ke_);
                         }
                         return _kb_
                                 ? caml_cps_exact_call2
                                   (get_global_value,
                                    id,
                                    function(_kd_){
                                     return _kc_(typeof _kd_ === "number" ? 1 : 0);
                                    })
                                 : _kc_(_kb_);
                        });
              }
              return caml_cps_call3
                      (Stdlib_List[17], check_reference, patchlist, cont);
             });
   }
   function current_state(param, cont){return cont(global_table[1]);}
   function restore_state(st, cont){global_table[1] = st; return cont(0);}
   function hide_additions(st, cont){
    function _j__(_j$_){
     global_table[1] = [0, global_table[1][1], st[2]];
     return cont(0);
    }
    return global_table[1][1] < st[1]
            ? caml_cps_call2
              (Dynlink_compilerlibs_Misc[1],
               cst_Symtable_hide_additions,
               _j__)
            : _j__(0);
   }
   function filter_global_map(p, gmap, cont){
    var newtbl = [0, Dynlink_compilerlibs_Ident[7][1]];
    return caml_cps_call3
            (Dynlink_compilerlibs_Ident[7][12],
             function(id, num, cont){
              return caml_cps_call2
                      (p,
                       id,
                       function(_j6_){
                        function _j7_(_j9_){return cont(_j9_);}
                        return _j6_
                                ? caml_cps_call4
                                  (Dynlink_compilerlibs_Ident[7][4],
                                   id,
                                   num,
                                   newtbl[1],
                                   function(_j8_){newtbl[1] = _j8_; return _j7_(0);})
                                : _j7_(_j6_);
                       });
             },
             gmap[2],
             function(_j5_){return cont([0, gmap[1], newtbl[1]]);});
   }
   function iter_global_map(f, gmap, cont){
    return caml_cps_call3(Dynlink_compilerlibs_Ident[7][12], f, gmap[2], cont);
   }
   function is_defined_in_global_map(gmap, id, cont){
    return caml_cps_call3(Dynlink_compilerlibs_Ident[7][3], id, gmap[2], cont);
   }
   var empty_global_map = GlobalMap[1];
   function report_error$4(ppf, param, cont){
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _jY_, s, cont);
      case 1:
       var s$0 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _jZ_, s$0, cont);
      case 2:
       var s$1 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _j0_, s$1, cont);
      default:
       var s$2 = param[1];
       return caml_cps_call4(Stdlib_Format[135], ppf, _j1_, s$2, cont);
    }
   }
   caml_callback
    (Dynlink_compilerlibs_Location[51],
     [function(param, cont){
       if(param[1] !== Error$7) return cont(0);
       var err = param[2];
       return caml_cps_call3
               (Dynlink_compilerlibs_Location[50],
                report_error$4,
                err,
                function(_j4_){return cont([0, _j4_]);});
      }]);
   function reset$7(param, cont){
    global_table[1] = GlobalMap[1];
    literal_table[1] = 0;
    c_prim_table[1] = PrimMap[1];
    return cont(0);
   }
   var
    Dynlink_compilerlibs_Symtable =
      [0,
       init$4,
       patch_object,
       require_primitive,
       initial_global_table,
       output_global_map,
       output_primitive_names,
       output_primitive_table,
       data_global_map,
       data_primitive_names,
       transl_const,
       init_toplevel$0,
       update_global_table,
       get_global_value,
       is_global_defined,
       assign_global_value,
       get_global_position,
       check_global_initialized,
       defined_globals,
       required_globals$0,
       empty_global_map,
       current_state,
       restore_state,
       hide_additions,
       filter_global_map,
       iter_global_map,
       is_defined_in_global_map,
       Error$7,
       report_error$4,
       reset$7];
   caml_register_global
    (1445, Dynlink_compilerlibs_Symtable, "Dynlink_compilerlibs.Symtable");
   var Dynlink_compilerlibs_Asttypes = [0];
   caml_register_global
    (1446, Dynlink_compilerlibs_Asttypes, "Dynlink_compilerlibs.Asttypes");
   var Dynlink_compilerlibs_Parsetree = [0];
   caml_register_global
    (1447, Dynlink_compilerlibs_Parsetree, "Dynlink_compilerlibs.Parsetree");
   var Dynlink_compilerlibs_Outcometr = [0];
   caml_register_global
    (1448, Dynlink_compilerlibs_Outcometr, "Dynlink_compilerlibs.Outcometree");
   var Dynlink_compilerlibs_Cmo_forma = [0];
   caml_register_global
    (1449, Dynlink_compilerlibs_Cmo_forma, "Dynlink_compilerlibs.Cmo_format");
   var Dynlink_compilerlibs_Cmxs_form = [0];
   caml_register_global
    (1450, Dynlink_compilerlibs_Cmxs_form, "Dynlink_compilerlibs.Cmxs_format");
   var
    Dynlink_compilerlibs =
      [0,
       Dynlink_compilerlibs_Binutils,
       Dynlink_compilerlibs_Config,
       Dynlink_compilerlibs_Build_pat,
       Dynlink_compilerlibs_Misc,
       Dynlink_compilerlibs_Identifia,
       Dynlink_compilerlibs_Numbers,
       Dynlink_compilerlibs_Arg_helpe,
       Dynlink_compilerlibs_Local_sto,
       Dynlink_compilerlibs_Load_path,
       Dynlink_compilerlibs_Clflags,
       Dynlink_compilerlibs_Profile,
       Dynlink_compilerlibs_Consistbl,
       Dynlink_compilerlibs_Terminfo,
       Dynlink_compilerlibs_Warnings,
       Dynlink_compilerlibs_Int_repla,
       Dynlink_compilerlibs_Lazy_back,
       Dynlink_compilerlibs_Location,
       Dynlink_compilerlibs_Longident,
       Dynlink_compilerlibs_Docstring,
       Dynlink_compilerlibs_Syntaxerr,
       Dynlink_compilerlibs_Ast_helpe,
       Dynlink_compilerlibs_Ast_mappe,
       Dynlink_compilerlibs_Attr_help,
       Dynlink_compilerlibs_Builtin_a,
       Dynlink_compilerlibs_Ident,
       Dynlink_compilerlibs_Path,
       Dynlink_compilerlibs_Primitive,
       Dynlink_compilerlibs_Type_imme,
       Dynlink_compilerlibs_Shape,
       Dynlink_compilerlibs_Types,
       Dynlink_compilerlibs_Btype,
       Dynlink_compilerlibs_Subst,
       Dynlink_compilerlibs_Predef,
       Dynlink_compilerlibs_Datarepr,
       Dynlink_compilerlibs_Cmi_forma,
       Dynlink_compilerlibs_Persisten,
       Dynlink_compilerlibs_Env,
       Dynlink_compilerlibs_Debuginfo,
       Dynlink_compilerlibs_Lambda,
       Dynlink_compilerlibs_Runtimede,
       Dynlink_compilerlibs_Instruct,
       Dynlink_compilerlibs_Opcodes,
       Dynlink_compilerlibs_Bytesecti,
       Dynlink_compilerlibs_Dll,
       Dynlink_compilerlibs_Meta,
       Dynlink_compilerlibs_Symtable,
       Dynlink_compilerlibs_Asttypes,
       Dynlink_compilerlibs_Parsetree,
       Dynlink_compilerlibs_Outcometr,
       Dynlink_compilerlibs_Cmo_forma,
       Dynlink_compilerlibs_Cmxs_form];
   caml_register_global(1451, Dynlink_compilerlibs, "Dynlink_compilerlibs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_types
//# unitInfo: Requires: Stdlib, Stdlib__Printexc, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = ".\n",
    cst_Linking_error = "Linking_error (",
    cst_The_module$1 = "The module `",
    cst_error_while_linking$2 = "error while linking ";
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "'",
    cst$0 = cst$3,
    cst$1 = cst$3,
    cst$2 = cst$3,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Error = [248, "Dynlink_types.Error", runtime.caml_fresh_oo_id(0)],
    cst_this_object_file_uses_unsa = "this object file uses unsafe features",
    cst_is_not_an_object_file = " is not an object file",
    cst_interface_mismatch_on = "interface mismatch on ",
    cst_no_implementation_availabl = "no implementation available for ",
    cst_Reference_to_undefined_glo = "Reference to undefined global `",
    cst_error_while_linking = cst_error_while_linking$2,
    cst_is_not_available = "' is not available",
    cst_The_external_function = "The external function `",
    cst_error_while_linking$0 = cst_error_while_linking$2,
    cst_is_not_yet_initialized = "' is not yet initialized",
    cst_The_module = cst_The_module$1,
    cst_error_while_linking$1 = cst_error_while_linking$2,
    cst_corrupted_interface_file = "corrupted interface file ",
    cst_error_loading_shared_libra = "error loading shared library: ",
    cst_execution_of_module_initia =
      "execution of module initializers in the shared library failed: ",
    cst_implementation_mismatch_on = "implementation mismatch on ",
    cst_is_already_loaded_either_b =
      "' is already loaded (either by the main program or a previously-dynlinked library)",
    cst_The_module$0 = cst_The_module$1,
    cst_cannot_be_implemented_by_a =
      "' cannot be implemented by a library loaded privately",
    cst_The_interface = "The interface `",
    cst_Unsafe_file = "Unsafe_file",
    _a_ =
      [0,
       [11, "Dynlink.Error (Dynlink.", [2, 0, [12, 41, 0]]],
       "Dynlink.Error (Dynlink.%s)"],
    _b_ =
      [0, [11, "Not_a_bytecode_file ", [3, 0, 0]], "Not_a_bytecode_file %S"],
    _c_ =
      [0, [11, "Inconsistent_import ", [3, 0, 0]], "Inconsistent_import %S"],
    _d_ = [0, [11, "Unavailable_unit ", [3, 0, 0]], "Unavailable_unit %S"],
    _e_ =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Undefined_global ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Undefined_global %S)"],
    _f_ =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Unavailable_primitive ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Unavailable_primitive %S)"],
    _g_ =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Uninitialized_global ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Uninitialized_global %S)"],
    _h_ =
      [0, [11, "Corrupted_interface ", [3, 0, 0]], "Corrupted_interface %S"],
    _i_ = [0, [11, "Cannot_open_dll ", [3, 0, 0]], "Cannot_open_dll %S"],
    _j_ =
      [0,
       [11, "Library's_module_initializers_failed ", [3, 0, 0]],
       "Library's_module_initializers_failed %S"],
    _k_ =
      [0,
       [11, "Inconsistent_implementation ", [3, 0, 0]],
       "Inconsistent_implementation %S"],
    _l_ =
      [0,
       [11, "Module_already_loaded ", [3, 0, 0]],
       "Module_already_loaded %S"],
    _m_ =
      [0,
       [11, "Private_library_cannot_implement_interface ", [3, 0, 0]],
       "Private_library_cannot_implement_interface %S"];
   function error_message(param, cont){
    if(typeof param === "number") return cont(cst_this_object_file_uses_unsa);
    switch(param[0]){
      case 0:
       var name = param[1];
       return caml_cps_call3
               (Stdlib[28], name, cst_is_not_an_object_file, cont);
      case 1:
       var name$0 = param[1];
       return caml_cps_call3
               (Stdlib[28], cst_interface_mismatch_on, name$0, cont);
      case 2:
       var name$1 = param[1];
       return caml_cps_call3
               (Stdlib[28], cst_no_implementation_availabl, name$1, cont);
      case 3:
       var match = param[2], name$2 = param[1];
       switch(match[0]){
         case 0:
          var s = match[1];
          return caml_cps_call3
                  (Stdlib[28],
                   s,
                   cst,
                   function(_D_){
                    return caml_cps_call3
                            (Stdlib[28],
                             cst_Reference_to_undefined_glo,
                             _D_,
                             function(_E_){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       cst$0,
                                       _E_,
                                       function(_F_){
return caml_cps_call3
        (Stdlib[28],
         name$2,
         _F_,
         function(_G_){
          return caml_cps_call3
                  (Stdlib[28], cst_error_while_linking, _G_, cont);
         });
                                       });
                             });
                   });
         case 1:
          var s$0 = match[1];
          return caml_cps_call3
                  (Stdlib[28],
                   s$0,
                   cst_is_not_available,
                   function(_z_){
                    return caml_cps_call3
                            (Stdlib[28],
                             cst_The_external_function,
                             _z_,
                             function(_A_){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       cst$1,
                                       _A_,
                                       function(_B_){
return caml_cps_call3
        (Stdlib[28],
         name$2,
         _B_,
         function(_C_){
          return caml_cps_call3
                  (Stdlib[28], cst_error_while_linking$0, _C_, cont);
         });
                                       });
                             });
                   });
         default:
          var s$1 = match[1];
          return caml_cps_call3
                  (Stdlib[28],
                   s$1,
                   cst_is_not_yet_initialized,
                   function(_v_){
                    return caml_cps_call3
                            (Stdlib[28],
                             cst_The_module,
                             _v_,
                             function(_w_){
                              return caml_cps_call3
                                      (Stdlib[28],
                                       cst$2,
                                       _w_,
                                       function(_x_){
return caml_cps_call3
        (Stdlib[28],
         name$2,
         _x_,
         function(_y_){
          return caml_cps_call3
                  (Stdlib[28], cst_error_while_linking$1, _y_, cont);
         });
                                       });
                             });
                   });
       }
      case 4:
       var name$3 = param[1];
       return caml_cps_call3
               (Stdlib[28], cst_corrupted_interface_file, name$3, cont);
      case 5:
       var exn = param[1];
       return caml_cps_call2
               (Stdlib_Printexc[1],
                exn,
                function(_u_){
                 return caml_cps_call3
                         (Stdlib[28], cst_error_loading_shared_libra, _u_, cont);
                });
      case 6:
       var exn$0 = param[1];
       return caml_cps_call2
               (Stdlib_Printexc[1],
                exn$0,
                function(_t_){
                 return caml_cps_call3
                         (Stdlib[28], cst_execution_of_module_initia, _t_, cont);
                });
      case 7:
       var name$4 = param[1];
       return caml_cps_call3
               (Stdlib[28], cst_implementation_mismatch_on, name$4, cont);
      case 8:
       var name$5 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                name$5,
                cst_is_already_loaded_either_b,
                function(_s_){
                 return caml_cps_call3
                         (Stdlib[28], cst_The_module$0, _s_, cont);
                });
      default:
       var name$6 = param[1];
       return caml_cps_call3
               (Stdlib[28],
                name$6,
                cst_cannot_be_implemented_by_a,
                function(_r_){
                 return caml_cps_call3
                         (Stdlib[28], cst_The_interface, _r_, cont);
                });
    }
   }
   runtime.caml_callback
    (Stdlib_Printexc[9],
     [function(param, cont){
       if(param[1] !== Error) return cont(0);
       var err = param[2];
       function _n_(msg){
        return caml_cps_call3
                (Stdlib_Printf[4],
                 _a_,
                 msg,
                 function(_q_){return cont([0, _q_]);});
       }
       if(typeof err === "number") return _n_(cst_Unsafe_file);
       switch(err[0]){
         case 0:
          var s = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _b_, s, _n_);
         case 1:
          var s$0 = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _c_, s$0, _n_);
         case 2:
          var s$1 = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _d_, s$1, _n_);
         case 3:
          var match = err[2], s$2 = err[1];
          switch(match[0]){
            case 0:
             var s$3 = match[1];
             return caml_cps_call4(Stdlib_Printf[4], _e_, s$2, s$3, _n_);
            case 1:
             var s$4 = match[1];
             return caml_cps_call4(Stdlib_Printf[4], _f_, s$2, s$4, _n_);
            default:
             var s$5 = match[1];
             return caml_cps_call4(Stdlib_Printf[4], _g_, s$2, s$5, _n_);
          }
         case 4:
          var s$6 = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _h_, s$6, _n_);
         case 5:
          var exn = err[1];
          return caml_cps_call2
                  (Stdlib_Printexc[1],
                   exn,
                   function(_p_){
                    return caml_cps_call3(Stdlib_Printf[4], _i_, _p_, _n_);
                   });
         case 6:
          var exn$0 = err[1];
          return caml_cps_call2
                  (Stdlib_Printexc[1],
                   exn$0,
                   function(_o_){
                    return caml_cps_call3(Stdlib_Printf[4], _j_, _o_, _n_);
                   });
         case 7:
          var s$7 = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _k_, s$7, _n_);
         case 8:
          var name = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _l_, name, _n_);
         default:
          var name$0 = err[1];
          return caml_cps_call3(Stdlib_Printf[4], _m_, name$0, _n_);
       }
      }]);
   var Dynlink_types = [0, Error, error_message];
   runtime.caml_register_global(42, Dynlink_types, "Dynlink_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_platform_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dynlink_platform_intf = [0];
   runtime.caml_register_global
    (0, Dynlink_platform_intf, "Dynlink_platform_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_common
//# unitInfo: Requires: CamlinternalLazy, Dynlink_compilerlibs, Dynlink_types, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Fun, Stdlib__List, Stdlib__Mutex, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = ", ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Dynlink_types = global_data.Dynlink_types,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Format = global_data.Stdlib__Format,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Dynlink_compilerlibs = global_data.Dynlink_compilerlibs,
    include = Dynlink_compilerlibs[4][13][4],
    Set = include[64],
    Map = include[65],
    empty = Map[1],
    mem = Map[3],
    add = Map[4],
    fold = Map[13],
    find = Map[28],
    _a_ = [0, [11, cst, 0], cst],
    _b_ =
      [0,
       [2,
        0,
        [11, ": symbols multiply-defined ", [2, 0, [11, ": ", [15, 0]]]]],
       "%s: symbols multiply-defined %s: %a"],
    cst_in_the_executable_file = "in the executable file",
    _c_ =
      [0,
       [11,
        "between the executable file (and any existing dynamically-loaded units) and the unit `",
        [2, 0, [11, "' being dynamically loaded from ", [2, 0, 0]]]],
       "between the executable file (and any existing dynamically-loaded units) and the unit `%s' being dynamically loaded from %s"],
    Dynlink_common =
      [0,
       function(P, cont){
        var
         UH = P[1],
         empty$0 = [0, empty, empty, Set[1], Set[1], Set[1], Set[1]];
        return caml_cps_call2
                (Stdlib_Mutex[1],
                 0,
                 function(lock){
                  var state = [0, empty$0, 0, 0];
                  function with_lock(f, cont){
                   function f$0(param, cont){
                    return caml_cps_exact_call2(f, state, cont);
                   }
                   return caml_cps_call2
                           (Stdlib_Mutex[2],
                            lock,
                            function(_aA_){
                             return caml_cps_call3
                                     (Stdlib_Fun[4],
                                      function(param, cont){
                                       return caml_cps_call2(Stdlib_Mutex[4], lock, cont);
                                      },
                                      f$0,
                                      cont);
                            });
                  }
                  function allow_unsafe_modules(b, cont){
                   return caml_cps_exact_call2
                           (with_lock,
                            function(global, cont){global[3] = b; return cont(0);},
                            cont);
                  }
                  function check_symbols_disjoint(descr, syms1, syms2, cont){
                   var exe = Stdlib_Sys[1];
                   return caml_cps_call3
                           (Set[8],
                            syms1,
                            syms2,
                            function(overlap){
                             return caml_cps_call2
                                     (Set[2],
                                      overlap,
                                      function(_at_){
                                       var _au_ = 1 - _at_;
                                       return _au_
       ? caml_cps_call2
         (Set[23],
          overlap,
          function(_av_){
           return caml_cps_call3
                   (Stdlib_Format[129],
                    [0,
                     function(ppf, param, cont){
                      return caml_cps_call3(Stdlib_Format[135], ppf, _a_, cont);
                     }],
                    Stdlib_Format[13],
                    function(_aw_){
                     var _ax_ = runtime.caml_obj_tag(descr);
                     function _ay_(_az_){
                      return caml_cps_call6
                              (Stdlib_Format[139],
                               _b_,
                               exe,
                               _az_,
                               _aw_,
                               _av_,
                               function(msg){return caml_cps_call2(Stdlib[2], msg, cont);});
                     }
                     if(250 === _ax_) return _ay_(descr[1]);
                     if(246 !== _ax_ && 244 !== _ax_) return _ay_(descr);
                     return caml_cps_call2(CamlinternalLazy[2], descr, _ay_);
                    });
          })
       : cont(_au_);
                                      });
                            });
                  }
                  function init(param, cont){
                   return caml_cps_exact_call2
                           (with_lock,
                            function(global, cont){
                             var _am_ = 1 - global[2];
                             function _an_(_as_){return cont(_as_);}
                             return _am_
                                     ? caml_cps_call2
                                       (P[2],
0,
function(_ao_){
 var exe = Stdlib_Sys[1];
 return caml_cps_call3
         (P[6],
          [0, empty, empty, Set[1]],
          function
          (param,
           comp_unit,
           interface$0,
           implementation,
           defined_symbols_this_unit,
           cont){
           var
            defined_symbols = param[3],
            implems = param[2],
            ifaces = param[1];
           function _ap_(ifaces){
            function _aq_(implems){
             return caml_cps_call2
                     (Set[37],
                      defined_symbols_this_unit,
                      function(defined_symbols_this_unit){
                       return caml_cps_exact_call4
                               (check_symbols_disjoint,
                                cst_in_the_executable_file,
                                defined_symbols_this_unit,
                                defined_symbols,
                                function(_ar_){
                                 return caml_cps_call3
 (Set[7],
  defined_symbols_this_unit,
  defined_symbols,
  function(defined_symbols){
   return cont([0, ifaces, implems, defined_symbols]);
  });
                                });
                      });
            }
            if(! implementation) return _aq_(implems);
            var
             match = implementation[1],
             state = match[2],
             crc = match[1];
            return caml_cps_call4
                    (add, comp_unit, [0, crc, exe, state], implems, _aq_);
           }
           if(! interface$0)
            return caml_cps_call4
                    (add, comp_unit, [0, 0, exe], ifaces, _ap_);
           var crc = interface$0[1];
           return caml_cps_call4
                   (add, comp_unit, [0, [0, crc], exe], ifaces, _ap_);
          },
          function(match){
           var
            defined_symbols = match[3],
            implems = match[2],
            ifaces = match[1];
           return caml_cps_call4
                   (fold,
                    function(key, data, keys, cont){
                     return caml_cps_call3(Set[4], key, keys, cont);
                    },
                    implems,
                    Set[1],
                    function(main_program_units){
                     var
                      state =
                        [0,
                         ifaces,
                         implems,
                         defined_symbols,
                         main_program_units,
                         main_program_units,
                         Set[1]];
                     global[1] = state;
                     global[2] = 1;
                     return _an_(0);
                    });
          });
})
                                     : _an_(_am_);
                            },
                            cont);
                  }
                  function set_loaded_implem(filename, ui, implems, cont){
                   var _ai_ = 0;
                   return caml_cps_call2
                           (UH[2],
                            ui,
                            function(_aj_){
                             var _ak_ = [0, _aj_, filename, _ai_];
                             return caml_cps_call2
                                     (UH[1],
                                      ui,
                                      function(_al_){
                                       return caml_cps_call4(add, _al_, _ak_, implems, cont);
                                      });
                            });
                  }
                  function set_allowed_units(allowed_units, cont){
                   return caml_cps_call2
                           (Set[37],
                            allowed_units,
                            function(allowed_units){
                             return caml_cps_exact_call2
                                     (with_lock,
                                      function(global, cont){
                                       var _ah_ = global[1];
                                       global[1] =
[0,
 _ah_[1],
 _ah_[2],
 _ah_[3],
 allowed_units,
 _ah_[5],
 _ah_[6]];
                                       return cont(0);
                                      },
                                      cont);
                            });
                  }
                  function allow_only(units, cont){
                   return caml_cps_exact_call2
                           (with_lock,
                            function(global, cont){
                             return caml_cps_call2
                                     (Set[37],
                                      units,
                                      function(_af_){
                                       return caml_cps_call3
       (Set[8],
        global[1][4],
        _af_,
        function(allowed_units){
         var _ag_ = global[1];
         global[1] =
          [0,
           _ag_[1],
           _ag_[2],
           _ag_[3],
           allowed_units,
           _ag_[5],
           _ag_[6]];
         return cont(0);
        });
                                      });
                            },
                            cont);
                  }
                  function prohibit(units, cont){
                   return caml_cps_exact_call2
                           (with_lock,
                            function(global, cont){
                             return caml_cps_call2
                                     (Set[37],
                                      units,
                                      function(_ad_){
                                       return caml_cps_call3
       (Set[10],
        global[1][4],
        _ad_,
        function(allowed_units){
         var _ae_ = global[1];
         global[1] =
          [0,
           _ae_[1],
           _ae_[2],
           _ae_[3],
           allowed_units,
           _ae_[5],
           _ae_[6]];
         return cont(0);
        });
                                      });
                            },
                            cont);
                  }
                  function main_program_units(param, cont){
                   return caml_cps_exact_call2
                           (init,
                            undef,
                            function(_ac_){
                             return caml_cps_exact_call2
                                     (with_lock,
                                      function(param, cont){
                                       var state = param[1];
                                       return cont(state);
                                      },
                                      function(global_state){
                                       return caml_cps_call2(Set[23], global_state[5], cont);
                                      });
                            });
                  }
                  function public_dynamically_loaded_unit(param, cont){
                   return caml_cps_exact_call2
                           (init,
                            undef,
                            function(_ab_){
                             return caml_cps_exact_call2
                                     (with_lock,
                                      function(param, cont){
                                       var state = param[1];
                                       return cont(state);
                                      },
                                      function(global_state){
                                       return caml_cps_call2(Set[23], global_state[6], cont);
                                      });
                            });
                  }
                  function all_units(param, cont){
                   return caml_cps_exact_call2
                           (init,
                            undef,
                            function(_$_){
                             return caml_cps_exact_call2
                                     (with_lock,
                                      function(param, cont){
                                       var state = param[1];
                                       return cont(state);
                                      },
                                      function(global_state){
                                       return caml_cps_call3
       (Set[7],
        global_state[5],
        global_state[6],
        function(_aa_){return caml_cps_call2(Set[23], _aa_, cont);});
                                      });
                            });
                  }
                  function load(priv, filename, cont){
                   return caml_cps_exact_call2
                           (init,
                            undef,
                            function(_d_){
                             return caml_cps_call2
                                     (Stdlib_Filename[6],
                                      filename,
                                      function(_e_){
                                       function _g_(filename){
caml_push_trap
 (function(exn){
   var
    ___ = [0, Dynlink_types[1], [5, exn]],
    raise = caml_pop_trap();
   return raise(caml_maybe_attach_backtrace(___, 1));
  });
return caml_cps_call3
        (P[7],
         filename,
         priv,
         function(val){
          caml_pop_trap();
          var units = val[2], handle = val[1];
          caml_push_trap
           (function(exn){
             return caml_cps_call2
                     (P[11],
                      handle,
                      function(_Z_){
                       var
                        raise = caml_pop_trap(),
                        exn$0 = caml_maybe_attach_backtrace(exn, 0);
                       return raise(exn$0);
                      });
            });
          return caml_cps_exact_call2
                  (with_lock,
                   function(global, cont){
                    var unsafe_allowed = global[3], state = global[1];
                    return caml_cps_call3
                            (Stdlib_List[17],
                             function(ui, cont){
                              var _V_ = 1 - unsafe_allowed;
                              function _W_(_X_){
                               if(! _X_) return cont(_X_);
                               var _Y_ = [0, Dynlink_types[1], 0], raise = caml_pop_trap();
                               return raise(caml_maybe_attach_backtrace(_Y_, 1));
                              }
                              return _V_ ? caml_cps_call2(UH[6], ui, _W_) : _W_(_V_);
                             },
                             units,
                             function(_r_){
                              return caml_cps_call3
                                      (Stdlib_List[19],
                                       function(ui, cont){return caml_cps_call2(UH[1], ui, cont);},
                                       units,
                                       function(_s_){
return caml_cps_call2
        (Set[37],
         _s_,
         function(new_units){
          return caml_cps_call4
                  (Stdlib_List[25],
                   function(implems, ui, cont){
                    var ifaces = state[1];
                    return caml_cps_call2
                            (UH[1],
                             ui,
                             function(name){
                              return caml_cps_call3
                                      (mem,
                                       name,
                                       implems,
                                       function(_O_){
if(_O_){
 var
  _P_ = [0, Dynlink_types[1], [8, name]],
  raise = caml_pop_trap();
 return raise(caml_maybe_attach_backtrace(_P_, 1));
}
function _Q_(_R_){
 if(_R_){
  var
   _S_ = [0, Dynlink_types[1], [9, name]],
   raise = caml_pop_trap();
  return raise(caml_maybe_attach_backtrace(_S_, 1));
 }
 var _T_ = 1;
 return caml_cps_call2
         (UH[2],
          ui,
          function(_U_){
           return caml_cps_call4
                   (add, name, [0, _U_, filename, _T_], implems, cont);
          });
}
return priv
        ? caml_cps_call3(mem, name, ifaces, _Q_)
        : _Q_(priv);
                                       });
                             });
                   },
                   state[2],
                   units,
                   function(implems){
                    return caml_cps_call4
                            (Stdlib_List[25],
                             function(ifaces, ui, cont){
                              return caml_cps_call2
                                      (UH[3],
                                       ui,
                                       function(_L_){
return caml_cps_call4
        (Stdlib_List[25],
         function(ifaces, param, cont){
          var crc = param[2], name = param[1];
          caml_push_trap
           (function(_N_){
             if(_N_ !== Stdlib[8]){
              var raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_N_, 0));
             }
             if(! crc)
              return caml_cps_call4
                      (add, name, [0, 0, filename], ifaces, cont);
             var crc$0 = crc[1];
             return caml_cps_call4
                     (add, name, [0, [0, crc$0], filename], ifaces, cont);
            });
          return caml_cps_call3
                  (find,
                   name,
                   ifaces,
                   function(val){
                    caml_pop_trap();
                    var old_crc = val[1];
                    if(old_crc){
                     var old_crc$0 = old_crc[1];
                     if(crc){
                      var crc$0 = crc[1];
                      if(! caml_string_notequal(old_crc$0, crc$0))
                       return cont(ifaces);
                      var
                       _M_ = [0, Dynlink_types[1], [1, name]],
                       raise = caml_pop_trap();
                      return raise(caml_maybe_attach_backtrace(_M_, 1));
                     }
                    }
                    else if(crc){
                     var crc$1 = crc[1];
                     return caml_cps_call4
                             (add, name, [0, [0, crc$1], filename], ifaces, cont);
                    }
                    return cont(ifaces);
                   });
         },
         ifaces,
         _L_,
         cont);
                                       });
                             },
                             state[1],
                             units,
                             function(ifaces){
                              return caml_cps_call3
                                      (Set[7],
                                       state[4],
                                       new_units,
                                       function(allowed_units){
return caml_cps_call4
        (Stdlib_List[25],
         function(implems, ui, cont){
          return caml_cps_call2
                  (UH[4],
                   ui,
                   function(_z_){
                    return caml_cps_call3
                            (Stdlib_List[17],
                             function(param, cont){
                              var crc = param[2], name = param[1];
                              return caml_cps_call3
                                      (Set[3],
                                       name,
                                       allowed_units,
                                       function(_B_){
if(1 - _B_){
 var
  _C_ = [0, Dynlink_types[1], [2, name]],
  raise = caml_pop_trap();
 return raise(caml_maybe_attach_backtrace(_C_, 1));
}
caml_push_trap
 (function(_J_){
   if(_J_ === Stdlib[8]){
    var
     _K_ = [0, Dynlink_types[1], [2, name]],
     raise = caml_pop_trap();
    return raise(caml_maybe_attach_backtrace(_K_, 1));
   }
   var raise$0 = caml_pop_trap();
   return raise$0(caml_maybe_attach_backtrace(_J_, 0));
  });
return caml_cps_call3
        (find,
         name,
         implems,
         function(val){
          caml_pop_trap();
          var unit_state = val[3], old_crc = val[1];
          if(old_crc){
           var old_crc$0 = old_crc[1];
           if(crc){
            var crc$0 = crc[1];
            if(caml_string_notequal(old_crc$0, crc$0)){
             var
              _D_ = [0, Dynlink_types[1], [7, name]],
              raise = caml_pop_trap();
             return raise(caml_maybe_attach_backtrace(_D_, 1));
            }
           }
          }
          else if(crc){
           var
            _F_ = [0, Dynlink_types[1], [7, name]],
            raise$1 = caml_pop_trap();
           return raise$1(caml_maybe_attach_backtrace(_F_, 1));
          }
          if(typeof unit_state !== "number"){
           var i = unit_state[1];
           return caml_cps_call2
                   (P[5],
                    0,
                    function(_G_){
                     var _H_ = _G_ < i ? 1 : 0;
                     if(! _H_) return cont(_H_);
                     var
                      _I_ = [0, Dynlink_types[1], [3, filename, [2, name]]],
                      raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_I_, 1));
                    });
          }
          if(! unit_state) return cont(0);
          var
           _E_ = [0, Dynlink_types[1], [3, filename, [2, name]]],
           raise$0 = caml_pop_trap();
          return raise$0(caml_maybe_attach_backtrace(_E_, 1));
         });
                                       });
                             },
                             _z_,
                             function(_A_){
                              return caml_cps_exact_call4
                                      (set_loaded_implem, filename, ui, implems, cont);
                             });
                   });
         },
         implems,
         units,
         function(_t_){
          return caml_cps_call4
                  (Stdlib_List[25],
                   function(defined_symbols, ui, cont){
                    var
                     descr =
                       [246,
                        function(param, cont){
                         return caml_cps_call2
                                 (UH[1],
                                  ui,
                                  function(_y_){
                                   return caml_cps_call4
   (Stdlib_Printf[4], _c_, _y_, filename, cont);
                                  });
                        }];
                    return caml_cps_call2
                            (UH[5],
                             ui,
                             function(_w_){
                              return caml_cps_call2
                                      (Set[37],
                                       _w_,
                                       function(symbols){
return caml_cps_exact_call4
        (check_symbols_disjoint,
         descr,
         symbols,
         defined_symbols,
         function(_x_){
          return caml_cps_call3
                  (Set[7], symbols, defined_symbols, cont);
         });
                                       });
                             });
                   },
                   state[3],
                   units,
                   function(defined_symbols){
                    function _u_(_v_){
                     global[1] = _v_;
                     return caml_cps_call2(P[8], handle, cont);
                    }
                    return priv
                            ? _u_(state)
                            : caml_cps_call3
                              (Set[7],
                               state[6],
                               new_units,
                               function(public_dynamically_loaded_unit){
                                var
                                 state$0 =
                                   [0,
                                    ifaces,
                                    implems,
                                    defined_symbols,
                                    allowed_units,
                                    state[5],
                                    public_dynamically_loaded_unit];
                                return _u_(state$0);
                               });
                   });
         });
                                       });
                             });
                   });
         });
                                       });
                             });
                   },
                   function(_h_){
                    return caml_cps_call3
                            (Stdlib_List[17],
                             function(unit_header, cont){
                              return caml_cps_call5
                                      (P[9],
                                       lock,
                                       handle,
                                       unit_header,
                                       priv,
                                       function(_k_){
var _l_ = 1 - priv;
return _l_
        ? caml_cps_exact_call2
          (with_lock,
           function(global, cont){
            var
             state = global[1],
             _m_ = state[6],
             _n_ = state[5],
             _o_ = state[4],
             _p_ = state[3];
            return caml_cps_exact_call4
                    (set_loaded_implem,
                     filename,
                     unit_header,
                     state[2],
                     function(_q_){
                      global[1] = [0, state[1], _q_, _p_, _o_, _n_, _m_];
                      return cont(0);
                     });
           },
           cont)
        : cont(_l_);
                                       });
                             },
                             units,
                             function(_i_){
                              return caml_cps_call2
                                      (P[11],
                                       handle,
                                       function(_j_){caml_pop_trap(); return cont(_j_);});
                             });
                   });
         });
                                       }
                                       if(! _e_) return _g_(filename);
                                       var _f_ = runtime.caml_sys_getcwd(0);
                                       return caml_cps_call3
       (Stdlib_Filename[4], _f_, filename, _g_);
                                      });
                            });
                  }
                  function loadfile(filename, cont){
                   return caml_cps_exact_call3(load, 0, filename, cont);
                  }
                  function loadfile_private(filename, cont){
                   return caml_cps_exact_call3(load, 1, filename, cont);
                  }
                  function unsafe_get_global_value
                  (bytecode_or_asm_symbol, cont){
                   return caml_cps_exact_call2
                           (with_lock,
                            function(param, cont){
                             return caml_cps_call2(P[10], bytecode_or_asm_symbol, cont);
                            },
                            cont);
                  }
                  var is_native = P[3], adapt_filename = P[4];
                  return cont
                          ([0,
                            is_native,
                            loadfile,
                            loadfile_private,
                            unsafe_get_global_value,
                            adapt_filename,
                            set_allowed_units,
                            allow_only,
                            prohibit,
                            main_program_units,
                            public_dynamically_loaded_unit,
                            all_units,
                            allow_unsafe_modules]);
                 });
       }];
   runtime.caml_register_global(15, Dynlink_common, "Dynlink_common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink
//# unitInfo: Requires: Assert_failure, Dynlink_common, Dynlink_compilerlibs, Dynlink_types, Stdlib, Stdlib__Char, Stdlib__Digest, Stdlib__Fun, Stdlib__List, Stdlib__Mutex, Stdlib__Printexc, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_equal = runtime.caml_string_equal;
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/dynlink.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\n\xfa\0\0\x02\x10\0\0\x07\xfb\0\0\x07\xac\xa0'Dynlink\xa0\xb0\xa0)is_native\x01\x01U\xd0\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xc4@\xb0\xc0+dynlink.mliV\x01\x05/\x01\x05/\xc0\x04\x02V\x01\x05/\x01\x05C@@\xa1\x04\x11@@\xa0\xb0\xa0(loadfile\x01\x01V\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xc6@\x02\x05\xf5\xe1\0@\0\xc7@\xb0\xc0\x04\x18\\\x01\x05\xc3\x01\x05\xc3\xc0\x04\x19\\\x01\x05\xc3\x01\x05\xe0@@\xa1\x04(A@\xa0\xb0\xa00loadfile_private\x01\x01W\xd0\xc0\xc1@\xc0\xb3\x90\x04\x17@\x90@\x02\x05\xf5\xe1\0@\0\xc8\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\xb0\xc0\x04+q\x01\t\xe7\x01\t\xe7\xc0\x04,q\x01\t\xe7\x01\n\f@@\xa1\x04;B@\xa0\xb0\xa0.adapt_filename\x01\x01X\xd0\xc0\xc1@\xc0\xb3\x90\x04*@\x90@\x02\x05\xf5\xe1\0@\0\xcb\xc0\xb3\x90\x04.@\x90@\x02\x05\xf5\xe1\0@\0\xcc@\x02\x05\xf5\xe1\0@\0\xcd@\xb0\xc0\x04>\0G\x01\x0eG\x01\x0eG\xc0\x04?\0G\x01\x0eG\x01\x0el@@\xa1\x04NC@\xa0\xb0\xa01set_allowed_units\x01\x01Y\xd0\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x04C@\x90@\x02\x05\xf5\xe1\0@\0\xce@\x90@\x02\x05\xf5\xe1\0@\0\xcf\xc0\xb3\x90\x04B@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\xb0\xc0\x04X\0M\x01\x0e\xf1\x01\x0e\xf1\xc0\x04Y\0M\x01\x0e\xf1\x01\x0f\x1c@@\xa1\x04hD@\xa0\xb0\xa0*allow_only\x01\x01Z\xd0\xc0\xc1@\xc0\xb3\x90\x04\x1a\xa0\xc0\xb3\x90\x04[@\x90@\x02\x05\xf5\xe1\0@\0\xd2@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xb3\x90\x04Z@\x90@\x02\x05\xf5\xe1\0@\0\xd4@\x02\x05\xf5\xe1\0@\0\xd5@\xb0\xc0\x04p\0Z\x01\x11~\x01\x11~\xc0\x04q\0Z\x01\x11~\x01\x11\xa1@@\xa1\x04\x80E@\xa0\xb0\xa0(prohibit\x01\x01[\xd0\xc0\xc1@\xc0\xb3\x90\x042\xa0\xc0\xb3\x90\x04s@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x90@\x02\x05\xf5\xe1\0@\0\xd7\xc0\xb3\x90\x04r@\x90@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\xb0\xc0\x04\x88\0_\x01\x12o\x01\x12o\xc0\x04\x89\0_\x01\x12o\x01\x12\x91@@\xa1\x04\x98F@\xa0\xb0\xa02main_program_units\x01\x01\\\xd0\xc0\xc1@\xc0\xb3\x90\x04\x81@\x90@\x02\x05\xf5\xe1\0@\0\xda\xc0\xb3\x90\x04N\xa0\xc0\xb3\x90\x04\x8f@\x90@\x02\x05\xf5\xe1\0@\0\xdb@\x90@\x02\x05\xf5\xe1\0@\0\xdc@\x02\x05\xf5\xe1\0@\0\xdd@\xb0\xc0\x04\xa0\0e\x01\x13\xad\x01\x13\xad\xc0\x04\xa1\0e\x01\x13\xad\x01\x13\xd9@@\xa1\x04\xb0G@\xa0\xb0\xa0?public_dynamically_loaded_units\x01\x01]\xd0\xc0\xc1@\xc0\xb3\x90\x04\x99@\x90@\x02\x05\xf5\xe1\0@\0\xde\xc0\xb3\x90\x04f\xa0\xc0\xb3\x90\x04\xa7@\x90@\x02\x05\xf5\xe1\0@\0\xdf@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\xb0\xc0\x04\xb8\0i\x01\x14I\x01\x14I\xc0\x04\xb9\0i\x01\x14I\x01\x14\x82@@\xa1\x04\xc8H@\xa0\xb0\xa0)all_units\x01\x01^\xd0\xc0\xc1@\xc0\xb3\x90\x04\xb1@\x90@\x02\x05\xf5\xe1\0@\0\xe2\xc0\xb3\x90\x04~\xa0\xc0\xb3\x90\x04\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xe4@\x02\x05\xf5\xe1\0@\0\xe5@\xb0\xc0\x04\xd0\0n\x01\x15O\x01\x15O\xc0\x04\xd1\0n\x01\x15O\x01\x15r@@\xa1\x04\xe0I@\xa0\xb0\xa04allow_unsafe_modules\x01\x01_\xd0\xc0\xc1@\xc0\xb3\x90\x04\xe1@\x90@\x02\x05\xf5\xe1\0@\0\xe6\xc0\xb3\x90\x04\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\xb0\xc0\x04\xe3\0s\x01\x16*\x01\x16*\xc0\x04\xe4\0s\x01\x16*\x01\x16Q@@\xa1\x04\xf3J@\xa0\xc1\xa0-linking_error\x01\x01`\b\0\0;\0@@\xa1\xa0\xe0\xa00Undefined_global\x01\x01\x18\x90\xa0\xc0\xb3\x90\x04\xe7@\x90@\x02\x05\xf5\xe1\0@\0\xeb@@\xb0\xc0\x04\xf7\0~\x01\x18 \x01\x18\"\xc0\x04\xf8\0~\x01\x18 \x01\x18>@@\xa1\x05\x01\x07L\xa0\xe0\xa05Unavailable_primitive\x01\x01\x19\x90\xa0\xc0\xb3\x90\x04\xf5@\x90@\x02\x05\xf5\xe1\0@\0\xea@@\xb0\xc0\x05\x01\x05\0\x7f\x01\x18?\x01\x18A\xc0\x05\x01\x06\0\x7f\x01\x18?\x01\x18b@@\xa1\x05\x01\x15M\xa0\xe0\xa04Uninitialized_global\x01\x01\x1a\x90\xa0\xc0\xb3\x90\x05\x01\x03@\x90@\x02\x05\xf5\xe1\0@\0\xe9@@\xb0\xc0\x05\x01\x13\x01\0\x80\x01\x18c\x01\x18e\xc0\x05\x01\x14\x01\0\x80\x01\x18c\x01\x18\x85@@\xa1\x05\x01#N@@@@@@@@\xb0\xc0\x05\x01\x17\0}\x01\x18\x03\x01\x18\x03\x04\x04@@@@\xa1\x05\x01&KA@\xa0\xc1\xa0%error\x01\x01a\b\0\0;\0@@\xa1\xa0\xe0\xa03Not_a_bytecode_file\x01\x01\x1c\x90\xa0\xc0\xb3\x90\x05\x01\x1a@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@\xb0\xc0\x05\x01*\x01\0\x83\x01\x18\x9c\x01\x18\x9e\xc0\x05\x01+\x01\0\x83\x01\x18\x9c\x01\x18\xbd@@\xa1\x05\x01:P\xa0\xe0\xa03Inconsistent_import\x01\x01\x1d\x90\xa0\xc0\xb3\x90\x05\x01(@\x90@\x02\x05\xf5\xe1\0@\0\xf5@@\xb0\xc0\x05\x018\x01\0\x84\x01\x18\xbe\x01\x18\xc0\xc0\x05\x019\x01\0\x84\x01\x18\xbe\x01\x18\xdf@@\xa1\x05\x01HQ\xa0\xe0\xa00Unavailable_unit\x01\x01\x1e\x90\xa0\xc0\xb3\x90\x05\x016@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x05\x01F\x01\0\x85\x01\x18\xe0\x01\x18\xe2\xc0\x05\x01G\x01\0\x85\x01\x18\xe0\x01\x18\xfe@@\xa1\x05\x01VR\xa0\xe0\xa0+Unsafe_file\x01\x01\x1f\x90@@\xb0\xc0\x05\x01O\x01\0\x86\x01\x18\xff\x01\x19\x01\xc0\x05\x01P\x01\0\x86\x01\x18\xff\x01\x19\x0e@@\xa1\x05\x01_S\xa0\xe0\xa0-Linking_error\x01\x01 \x90\xa0\xc0\xb3\x90\x05\x01M@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xa0\xc0\xb3\x90\x04x@\x90@\x02\x05\xf5\xe1\0@\0\xf2@@\xb0\xc0\x05\x01b\x01\0\x87\x01\x19\x0f\x01\x19\x11\xc0\x05\x01c\x01\0\x87\x01\x19\x0f\x01\x19:@@\xa1\x05\x01rT\xa0\xe0\xa03Corrupted_interface\x01\x01!\x90\xa0\xc0\xb3\x90\x05\x01`@\x90@\x02\x05\xf5\xe1\0@\0\xf1@@\xb0\xc0\x05\x01p\x01\0\x88\x01\x19;\x01\x19=\xc0\x05\x01q\x01\0\x88\x01\x19;\x01\x19\\@@\xa1\x05\x01\x80U\xa0\xe0\xa0;Cannot_open_dynamic_library\x01\x01\"\x90\xa0\xc0\xb3\x90\xa3#exnG@\x90@\x02\x05\xf5\xe1\0@\0\xf0@@\xb0\xc0\x05\x01\x80\x01\0\x89\x01\x19]\x01\x19_\xc0\x05\x01\x81\x01\0\x89\x01\x19]\x01\x19\x83@@\xa1\x05\x01\x90V\xa0\xe0\xa0\t$Library's_module_initializers_failed\x01\x01#\x90\xa0\xc0\xb3\x90\x04\x10@\x90@\x02\x05\xf5\xe1\0@\0\xef@@\xb0\xc0\x05\x01\x8e\x01\0\x8a\x01\x19\x84\x01\x19\x86\xc0\x05\x01\x8f\x01\0\x8a\x01\x19\x84\x01\x19\xb3@@\xa1\x05\x01\x9eW\xa0\xe0\xa0;Inconsistent_implementation\x01\x01$\x90\xa0\xc0\xb3\x90\x05\x01\x8c@\x90@\x02\x05\xf5\xe1\0@\0\xee@@\xb0\xc0\x05\x01\x9c\x01\0\x8b\x01\x19\xb4\x01\x19\xb6\xc0\x05\x01\x9d\x01\0\x8b\x01\x19\xb4\x01\x19\xdd@@\xa1\x05\x01\xacX\xa0\xe0\xa05Module_already_loaded\x01\x01%\x90\xa0\xc0\xb3\x90\x05\x01\x9a@\x90@\x02\x05\xf5\xe1\0@\0\xed@@\xb0\xc0\x05\x01\xaa\x01\0\x8c\x01\x19\xde\x01\x19\xe0\xc0\x05\x01\xab\x01\0\x8c\x01\x19\xde\x01\x1a\x01@@\xa1\x05\x01\xbaY\xa0\xe0\xa0\t*Private_library_cannot_implement_interface\x01\x01&\x90\xa0\xc0\xb3\x90\x05\x01\xa8@\x90@\x02\x05\xf5\xe1\0@\0\xec@@\xb0\xc0\x05\x01\xb8\x01\0\x8d\x01\x1a\x02\x01\x1a\x04\xc0\x05\x01\xb9\x01\0\x8d\x01\x1a\x02\x01\x1a:@@\xa1\x05\x01\xc8Z@@@@@@@@\xb0\xc0\x05\x01\xbc\x01\0\x82\x01\x18\x87\x01\x18\x87\x04\x04@@@@\xa1\x05\x01\xcbOA@\xa0\xc2\xa0%Error\x01\x01b\b\0\0#\0\x90\x04H@\x90\xa0\xc0\xb3\x90\x04\xae@\x90@\x02\x05\xf5\xe1\0@\0\xf7@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x05\x01\xdb[B@\xa0\xb0\xa0-error_message\x01\x01c\xd0\xc0\xc1@\xc0\xb3\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\0\xf8\xc0\xb3\x90\x05\x01\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\xb0\xc0\x05\x01\xdd\x01\0\x96\x01\x1b\x80\x01\x1b\x80\xc0\x05\x01\xde\x01\0\x96\x01\x1b\x80\x01\x1b\xa3@@\xa1\x05\x01\xed\\@\xa0\xb0\xa07unsafe_get_global_value\x01\x01d\xd0\xc0\xc1\x906bytecode_or_asm_symbol\xc0\xb3\x90\x05\x01\xde@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\xa1\xa1\x90\x92&Stdlib#Obj!t@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x01\xff\x01\0\x9b\x01\x1b\xea\x01\x1b\xea\xc0\x05\x02\0\x01\0\x9b\x01\x1b\xea\x01\x1c5@@\xa1\x05\x02\x0f]@@\x84\x95\xa6\xbe\0\0\0\xa7\0\0\0\x19\0\0\0]\0\0\0K\xa0\xa0'Dynlink\x900N\xf8\xf1\x80\xb6\xa5_(\xc0\x92\xcd\x06\x98\x98z\xf5\xa0\xa0+Stdlib__Obj\x900\x85e^\xce\xec[\xcdl|N\xf5\xddgX\xb1\x9d\xa0\xa0-Stdlib__Int32\x900\x1d\xb6\x04\xc2\x10o\x99n\xa4zW's\xa5\xff\x7f\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\0\0\0\x01\0\0\0",
    Stdlib = global_data.Stdlib,
    Dynlink_compilerlibs = global_data.Dynlink_compilerlibs,
    Dynlink_types = global_data.Dynlink_types,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Char = global_data.Stdlib__Char,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_String = global_data.Stdlib__String,
    Dynlink_common = global_data.Dynlink_common;
   function name(t, cont){return cont(t[1]);}
   function crc(t, cont){return cont(0);}
   function interface_imports(t, cont){return cont(t[5]);}
   function implementation_imports(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs[46][19],
             t[4],
             function(_M_){
              return caml_cps_call3
                      (Stdlib[37],
                       t[6],
                       _M_,
                       function(required){
                        return caml_cps_call3
                                (Stdlib_List[41],
                                 function(id, cont){
                                  return caml_cps_call2
  (Dynlink_compilerlibs[25][22],
   id,
   function(_P_){
    var _Q_ = 1 - _P_;
    function _S_(_V_){return cont(_V_);}
    if(! _Q_) return _S_(_Q_);
    var _R_ = 46;
    return caml_cps_call2
            (Dynlink_compilerlibs[25][15],
             id,
             function(_T_){
              return caml_cps_call3
                      (Stdlib_String[14],
                       _T_,
                       _R_,
                       function(_U_){return _S_(1 - _U_);});
             });
   });
                                 },
                                 required,
                                 function(required){
                                  return caml_cps_call3
  (Stdlib_List[19],
   function(ident, cont){
    var _N_ = 0;
    return caml_cps_call2
            (Dynlink_compilerlibs[25][15],
             ident,
             function(_O_){return cont([0, _O_, _N_]);});
   },
   required,
   cont);
                                 });
                       });
             });
   }
   function defined_symbols(t, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs[46][18],
             t[4],
             function(_L_){
              return caml_cps_call3
                      (Stdlib_List[19],
                       function(ident, cont){
                        return caml_cps_call2
                                (Dynlink_compilerlibs[25][15], ident, cont);
                       },
                       _L_,
                       cont);
             });
   }
   function unsafe_module(t, cont){return cont(0 !== t[7] ? 1 : 0);}
   var
    Unit_header =
      [0,
       name,
       crc,
       interface_imports,
       implementation_imports,
       defined_symbols,
       unsafe_module],
    default_crcs = [0, 0],
    default_global_map = [0, Dynlink_compilerlibs[46][20]],
    cst_The_dynlink_cma_library_ca =
      "The dynlink.cma library cannot be used inside the OCaml toplevel";
   function init(param, cont){
    function _H_(_I_){
     return caml_cps_call2
             (Dynlink_compilerlibs[46][11],
              0,
              function(_J_){
               default_crcs[1] = _J_;
               return caml_cps_call2
                       (Dynlink_compilerlibs[46][21],
                        0,
                        function(_K_){default_global_map[1] = _K_; return cont(0);});
              });
    }
    return Stdlib_Sys[3][1]
            ? caml_cps_call2(Stdlib[1], cst_The_dynlink_cma_library_ca, _H_)
            : _H_(0);
   }
   var
    cst_Should_never_be_called_for =
      "Should never be called for bytecode dynlink",
    _a_ = [0, [0, 0, 0]],
    _b_ = [0, "otherlibs/dynlink/dynlink.ml", 126, 37];
   function adapt_filename(f, cont){return cont(f);}
   function num_globals_inited(param, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs[4][1], cst_Should_never_be_called_for, cont);
   }
   function fold_initial_units(init, f, cont){
    return caml_cps_call4
            (Stdlib_List[25],
             function(acc, param, cont){
              var interface$0 = param[2], comp_unit = param[1];
              return caml_cps_call2
                      (Dynlink_compilerlibs[25][12],
                       comp_unit,
                       function(id){
                        return caml_cps_call3
                                (Dynlink_compilerlibs[46][26],
                                 default_global_map[1],
                                 id,
                                 function(defined){
                                  var
                                   implementation = defined ? _a_ : 0,
                                   defined_symbols = defined ? [0, comp_unit, 0] : 0;
                                  return caml_cps_call6
  (f,
   acc,
   comp_unit,
   interface$0,
   implementation,
   defined_symbols,
   cont);
                                 });
                       });
             },
             init,
             default_crcs[1],
             cont);
   }
   function run_shared_startup(param, cont){return cont(0);}
   function run(lock, param, unit_header, priv, cont){
    var file_digest = param[3], file_name = param[2], ic = param[1];
    function f(param, cont){
     return caml_cps_call2
             (Dynlink_compilerlibs[46][21],
              0,
              function(old_state){
               return caml_cps_call3
                       (Stdlib[90],
                        ic,
                        unit_header[2],
                        function(_s_){
                         var code_size = unit_header[3] + 8 | 0;
                         return caml_cps_call2
                                 (Dynlink_compilerlibs[4][46][1],
                                  code_size,
                                  function(code){
                                   return caml_cps_call4
   (Dynlink_compilerlibs[4][46][8],
    code,
    ic,
    unit_header[3],
    function(_t_){
     return caml_cps_call2
             (Stdlib_Char[1],
              Dynlink_compilerlibs[42][41],
              function(_u_){
               return caml_cps_call4
                       (Dynlink_compilerlibs[4][46][4],
                        code,
                        unit_header[3],
                        _u_,
                        function(_v_){
                         return caml_cps_call6
                                 (Dynlink_compilerlibs[4][46][6],
                                  cst,
                                  0,
                                  code,
                                  unit_header[3] + 1 | 0,
                                  7,
                                  function(_w_){
                                   caml_push_trap
                                    (function(exn){
                                      if(exn[1] === Dynlink_compilerlibs[46][27]){
                                       var error = exn[2];
                                       switch(error[0]){
 case 0:
  var s = error[1], new_error = [0, s]; break;
 case 1:
  var s$0 = error[1], new_error = [1, s$0]; break;
 case 2:
  var raise$0 = caml_pop_trap();
  return raise$0
          (caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1));
 default: var s$1 = error[1], new_error = [2, s$1];
                                       }
                                       var
_G_ = [0, Dynlink_types[1], [3, file_name, new_error]],
raise = caml_pop_trap();
                                       return raise(caml_maybe_attach_backtrace(_G_, 1));
                                      }
                                      var
                                       raise$1 = caml_pop_trap(),
                                       exn$0 = caml_maybe_attach_backtrace(exn, 0);
                                      return raise$1(exn$0);
                                     });
                                   return caml_cps_call3
   (Dynlink_compilerlibs[46][2],
    code,
    unit_header[4],
    function(_x_){
     return caml_cps_call2
             (Dynlink_compilerlibs[46][17],
              unit_header[4],
              function(_y_){
               return caml_cps_call2
                       (Dynlink_compilerlibs[46][12],
                        0,
                        function(_z_){
                         caml_pop_trap();
                         return caml_cps_call3
                                 (Stdlib[28],
                                  file_digest,
                                  unit_header[1],
                                  function(_A_){
                                   return caml_cps_call2
   (Stdlib_Digest[3],
    _A_,
    function(digest){
     function _B_(events){
      function _E_(_F_){
       var
        clos =
          runtime.caml_reify_bytecode(code, events, [0, digest])[2];
       return cont(clos);
      }
      return priv
              ? caml_cps_call2
                (Dynlink_compilerlibs[46][23], old_state, _E_)
              : _E_(0);
     }
     return 0 === unit_header[9]
             ? _B_([0])
             : caml_cps_call3
               (Stdlib[90],
                ic,
                unit_header[9],
                function(_C_){
                 return caml_cps_call2
                         (Stdlib[89], ic, function(_D_){return _B_([0, _D_]);});
                });
    });
                                  });
                        });
              });
    });
                                  });
                        });
              });
    });
                                  });
                        });
              });
    }
    return caml_cps_call2
            (Stdlib_Mutex[2],
             lock,
             function(_p_){
              return caml_cps_call3
                      (Stdlib_Fun[4],
                       function(param, cont){
                        return caml_cps_call2(Stdlib_Mutex[4], lock, cont);
                       },
                       f,
                       function(clos){
                        caml_push_trap
                         (function(exn){
                           var exn$0 = [0, Dynlink_types[1], [6, exn]];
                           return caml_cps_call2
                                   (Stdlib_Printexc[12],
                                    0,
                                    function(_r_){
                                     runtime.caml_restore_raw_backtrace(exn$0, _r_);
                                     var
                                      raise = caml_pop_trap(),
                                      exn = caml_maybe_attach_backtrace(exn$0, 0);
                                     return raise(exn);
                                    });
                          });
                        return caml_cps_call2
                                (clos, 0, function(_q_){caml_pop_trap(); return cont(0);});
                       });
             });
   }
   function load(file_name, param, cont){
    return caml_cps_call2
            (Stdlib[80],
             file_name,
             function(ic){
              var file_digest = runtime.caml_md5_chan(ic, -1);
              return caml_cps_call3
                      (Stdlib[90],
                       ic,
                       0,
                       function(_d_){
                        caml_push_trap
                         (function(exc){
                           return caml_cps_call2
                                   (Stdlib[93],
                                    ic,
                                    function(_o_){
                                     var
                                      raise = caml_pop_trap(),
                                      exc$0 = caml_maybe_attach_backtrace(exc, 0);
                                     return raise(exc$0);
                                    });
                          });
                        caml_push_trap
                         (function(_m_){
                           if(_m_ === Stdlib[12]){
                            var
                             _n_ = [0, Dynlink_types[1], [0, file_name]],
                             raise = caml_pop_trap();
                            return raise(caml_maybe_attach_backtrace(_n_, 1));
                           }
                           var raise$0 = caml_pop_trap();
                           return raise$0(caml_maybe_attach_backtrace(_m_, 0));
                          });
                        return caml_cps_call3
                                (Stdlib[86],
                                 ic,
                                 runtime.caml_ml_string_length(Dynlink_compilerlibs[2][25]),
                                 function(buffer){
                                  caml_pop_trap();
                                  var handle = [0, ic, file_name, file_digest];
                                  function _f_(_l_){caml_pop_trap(); return cont(_l_);}
                                  if(caml_string_equal(buffer, Dynlink_compilerlibs[2][25]))
                                   return caml_cps_call2
   (Stdlib[88],
    ic,
    function(compunit_pos){
     return caml_cps_call3
             (Stdlib[90],
              ic,
              compunit_pos,
              function(_k_){
               return caml_cps_call2
                       (Stdlib[89],
                        ic,
                        function(cu){return _f_([0, handle, [0, cu, 0]]);});
              });
    });
                                  if(caml_string_equal(buffer, Dynlink_compilerlibs[2][26]))
                                   return caml_cps_call2
   (Stdlib[88],
    ic,
    function(toc_pos){
     return caml_cps_call3
             (Stdlib[90],
              ic,
              toc_pos,
              function(_g_){
               return caml_cps_call2
                       (Stdlib[89],
                        ic,
                        function(lib){
                         caml_push_trap
                          (function(exn){
                            var
                             _j_ = [0, Dynlink_types[1], [5, exn]],
                             raise = caml_pop_trap();
                            return raise(caml_maybe_attach_backtrace(_j_, 1));
                           });
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  Dynlink_compilerlibs[44][1],
                                  lib[5],
                                  function(_h_){
                                   return caml_cps_call3
   (Dynlink_compilerlibs[44][2],
    1,
    _h_,
    function(_i_){
     caml_pop_trap();
     return _f_([0, handle, lib[1]]);
    });
                                  });
                        });
              });
    });
                                  var
                                   _e_ = [0, Dynlink_types[1], [0, file_name]],
                                   raise = caml_pop_trap();
                                  return raise(caml_maybe_attach_backtrace(_e_, 1));
                                 });
                       });
             });
   }
   function unsafe_get_global_value(bytecode_or_asm_symbol, cont){
    return caml_cps_call2
            (Dynlink_compilerlibs[25][12],
             bytecode_or_asm_symbol,
             function(id){
              caml_push_trap(function(_c_){return cont(0);});
              return caml_cps_call2
                      (Dynlink_compilerlibs[46][13],
                       id,
                       function(obj){caml_pop_trap(); return cont([0, obj]);});
             });
   }
   function finish(param, cont){
    var ic = param[1];
    return caml_cps_call2(Stdlib[93], ic, cont);
   }
   var
    include =
      runtime.caml_callback
       (Dynlink_common[1],
        [[0,
          Unit_header,
          init,
          0,
          adapt_filename,
          num_globals_inited,
          fold_initial_units,
          load,
          run_shared_startup,
          run,
          unsafe_get_global_value,
          finish]]),
    is_native = include[1],
    loadfile = include[2],
    loadfile_private = include[3],
    unsafe_get_global_value$0 = include[4],
    adapt_filename$0 = include[5],
    set_allowed_units = include[6],
    allow_only = include[7],
    prohibit = include[8],
    main_program_units = include[9],
    public_dynamically_loaded_unit = include[10],
    all_units = include[11],
    allow_unsafe_modules = include[12],
    Error = Dynlink_types[1],
    error_message = Dynlink_types[2],
    Dynlink =
      [0,
       is_native,
       loadfile,
       loadfile_private,
       adapt_filename$0,
       set_allowed_units,
       allow_only,
       prohibit,
       main_program_units,
       public_dynamically_loaded_unit,
       all_units,
       allow_unsafe_modules,
       Error,
       error_message,
       unsafe_get_global_value$0];
   runtime.caml_register_global(18, Dynlink, "Dynlink");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
