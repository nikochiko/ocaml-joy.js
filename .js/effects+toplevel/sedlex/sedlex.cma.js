// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Sedlexing
//# unitInfo: Requires: Assert_failure, Gen, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Option, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_lib_sedlexing_ml = "src/lib/sedlexing.ml",
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_get = runtime.caml_string_get;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_exact_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/sedlexing.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x1aD\0\0\x05\x18\0\0\x13{\0\0\x13\0\xa0)Sedlexing\xa0\xc1\xa0&lexbuf\x01\x01\xdb\b\0\0;\0@@@A@@@@@\xb0\xc05src/lib/sedlexing.mli_\x01\x06K\x01\x06K\xc0\x04\x02_\x01\x06K\x01\x06V@@@@\xa1\x04\x0b@A@\xa0\xc2\xa00InvalidCodepoint\x01\x01\xdc\b\0\0#\0\x90\xa3#exnG@\x90\xa0\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\x01\xffm@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x04\x1fAB@\xa0\xc2\xa0)MalFormed\x01\x01\xdd\b\0\0#\0\x04\x14@\x90@@A\x04\n@\xa1\x04&BB@\xa0\xb0\xa0&create\x01\x01\xde\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffn\xc0\xb3\x90\x04,@\x90@\x02\x05\xf5\xe1\0@\x01\xffo@\x02\x05\xf5\xe1\0@\x01\xffp@\x90@\x02\x05\xf5\xe1\0@\x01\xffq\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\xa3%arrayH\xa0\xc0\xb3\xa1\xa1\x04\x19%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffr@\x90@\x02\x05\xf5\xe1\0@\x01\xffs\xc0\xc1@\xc0\xb3\x90\x04E@\x90@\x02\x05\xf5\xe1\0@\x01\xfft\xc0\xc1@\xc0\xb3\x90\x04K@\x90@\x02\x05\xf5\xe1\0@\x01\xffu\xc0\xb3\x90\x04O@\x90@\x02\x05\xf5\xe1\0@\x01\xffv@\x02\x05\xf5\xe1\0@\x01\xffw@\x02\x05\xf5\xe1\0@\x01\xffx@\x02\x05\xf5\xe1\0@\x01\xffy\xc0\xb3\x90\x04h@\x90@\x02\x05\xf5\xe1\0@\x01\xffz@\x02\x05\xf5\xe1\0@\x01\xff{@\x02\x05\xf5\xe1\0@\x01\xff|@\xb0\xc0\x04fs\x01\t\xb0\x01\t\xb0\xc0\x04gv\x01\n\r\x01\n\x15@@\xa1\x04pC@\xa0\xb0\xa0,set_position\x01\x01\xdf\xd0\xc0\xc1\x91.bytes_position\xc0\xb3\x04J\xa0\xc0\xb3\xa1\xa1\x04E&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\x01\xff}@\x90@\x02\x05\xf5\xe1\0@\x01\xff~\xc0\xc1@\xc0\xb3\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x7f\xc0\xc1@\xc0\xb3\xa1\xa1\x04T&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\x80\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\x81@\x02\x05\xf5\xe1\0@\0\x82@\x02\x05\xf5\xe1\0@\0\x83@\x02\x05\xf5\xe1\0@\0\x84@\xb0\xc0\x04\x92{\x01\n\xc1\x01\n\xc1\xc0\x04\x93|\x01\n\xd4\x01\x0b\x1a@@\xa1\x04\x9cD@\xa0\xb0\xa0,set_filename\x01\x01\xe0\xd0\xc0\xc1@\xc0\xb3\x04;@\x90@\x02\x05\xf5\xe1\0@\0\x85\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\x86\xc0\xb3\x90\x04\x1c@\x90@\x02\x05\xf5\xe1\0@\0\x87@\x02\x05\xf5\xe1\0@\0\x88@\x02\x05\xf5\xe1\0@\0\x89@\xb0\xc0\x04\xac\0A\x01\x0b\xca\x01\x0b\xca\xc0\x04\xad\0A\x01\x0b\xca\x01\x0b\xf5@@\xa1\x04\xb6E@\xa0\xb0\xa0(from_gen\x01\x01\xe1\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\x90\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\x8d%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x8a\xc0\xb3\x90\x04\xb6@\x90@\x02\x05\xf5\xe1\0@\0\x8b@\x02\x05\xf5\xe1\0@\0\x8c@\x90@\x02\x05\xf5\xe1\0@\0\x8d\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\xa1\xa1\x04\xa3%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x8e@\x90@\x02\x05\xf5\xe1\0@\0\x8f\xc0\xb3\x04z@\x90@\x02\x05\xf5\xe1\0@\0\x90@\x02\x05\xf5\xe1\0@\0\x91@\x02\x05\xf5\xe1\0@\0\x92@\xb0\xc0\x04\xdf\0E\x01\f\x9b\x01\f\x9b\xc0\x04\xe0\0E\x01\f\x9b\x01\f\xe5@@\xa1\x04\xe9F@\xa0\xb0\xa0.from_int_array\x01\x01\xe2\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\xc3\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\xc0%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x93\xc0\xb3\x90\x04\xe9@\x90@\x02\x05\xf5\xe1\0@\0\x94@\x02\x05\xf5\xe1\0@\0\x95@\x90@\x02\x05\xf5\xe1\0@\0\x96\xc0\xc1@\xc0\xb3\x90\x04\xbb\xa0\xc0\xb3\x90\x04\xf4@\x90@\x02\x05\xf5\xe1\0@\0\x97@\x90@\x02\x05\xf5\xe1\0@\0\x98\xc0\xb3\x04\xa6@\x90@\x02\x05\xf5\xe1\0@\0\x99@\x02\x05\xf5\xe1\0@\0\x9a@\x02\x05\xf5\xe1\0@\0\x9b@\xb0\xc0\x05\x01\x0b\0I\x01\r\x8b\x01\r\x8b\xc0\x05\x01\f\0I\x01\r\x8b\x01\r\xd7@@\xa1\x05\x01\x15G@\xa0\xb0\xa00from_uchar_array\x01\x01\xe3\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\xef\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\xec%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x9c\xc0\xb3\x90\x05\x01\x15@\x90@\x02\x05\xf5\xe1\0@\0\x9d@\x02\x05\xf5\xe1\0@\0\x9e@\x90@\x02\x05\xf5\xe1\0@\0\x9f\xc0\xc1@\xc0\xb3\x90\x04\xe7\xa0\xc0\xb3\xa1\xa1\x04\xfe%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xa0@\x90@\x02\x05\xf5\xe1\0@\0\xa1\xc0\xb3\x04\xd5@\x90@\x02\x05\xf5\xe1\0@\0\xa2@\x02\x05\xf5\xe1\0@\0\xa3@\x02\x05\xf5\xe1\0@\0\xa4@\xb0\xc0\x05\x01:\0M\x01\x0e}\x01\x0e}\xc0\x05\x01;\0N\x01\x0e\x94\x01\x0e\xd1@@\xa1\x05\x01DH@\xa0\xb0\xa0,lexeme_start\x01\x01\xe4\xd0\xc0\xc1@\xc0\xb3\x04\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xa5\xc0\xb3\x90\x05\x019@\x90@\x02\x05\xf5\xe1\0@\0\xa6@\x02\x05\xf5\xe1\0@\0\xa7@\xb0\xc0\x05\x01L\0Y\x01\x10\x9a\x01\x10\x9a\xc0\x05\x01M\0Y\x01\x10\x9a\x01\x10\xba@@\xa1\x05\x01VI@\xa0\xb0\xa02lexeme_bytes_start\x01\x01\xe5\xd0\xc0\xc1@\xc0\xb3\x04\xf5@\x90@\x02\x05\xf5\xe1\0@\0\xa8\xc0\xb3\x90\x05\x01K@\x90@\x02\x05\xf5\xe1\0@\0\xa9@\x02\x05\xf5\xe1\0@\0\xaa@\xb0\xc0\x05\x01^\0^\x01\x11t\x01\x11t\xc0\x05\x01_\0^\x01\x11t\x01\x11\x9a@@\xa1\x05\x01hJ@\xa0\xb0\xa0*lexeme_end\x01\x01\xe6\xd0\xc0\xc1@\xc0\xb3\x05\x01\x07@\x90@\x02\x05\xf5\xe1\0@\0\xab\xc0\xb3\x90\x05\x01]@\x90@\x02\x05\xf5\xe1\0@\0\xac@\x02\x05\xf5\xe1\0@\0\xad@\xb0\xc0\x05\x01p\0d\x01\x12v\x01\x12v\xc0\x05\x01q\0d\x01\x12v\x01\x12\x94@@\xa1\x05\x01zK@\xa0\xb0\xa00lexeme_bytes_end\x01\x01\xe7\xd0\xc0\xc1@\xc0\xb3\x05\x01\x19@\x90@\x02\x05\xf5\xe1\0@\0\xae\xc0\xb3\x90\x05\x01o@\x90@\x02\x05\xf5\xe1\0@\0\xaf@\x02\x05\xf5\xe1\0@\0\xb0@\xb0\xc0\x05\x01\x82\0j\x01\x13k\x01\x13k\xc0\x05\x01\x83\0j\x01\x13k\x01\x13\x8f@@\xa1\x05\x01\x8cL@\xa0\xb0\xa0#loc\x01\x01\xe8\xd0\xc0\xc1@\xc0\xb3\x05\x01+@\x90@\x02\x05\xf5\xe1\0@\0\xb1\xc0\x92\xa0\xc0\xb3\x90\x05\x01\x84@\x90@\x02\x05\xf5\xe1\0@\0\xb3\xa0\xc0\xb3\x90\x05\x01\x89@\x90@\x02\x05\xf5\xe1\0@\0\xb2@\x02\x05\xf5\xe1\0@\0\xb4@\x02\x05\xf5\xe1\0@\0\xb5@\xb0\xc0\x05\x01\x9c\0o\x01\x14\x0f\x01\x14\x0f\xc0\x05\x01\x9d\0o\x01\x14\x0f\x01\x14,@@\xa1\x05\x01\xa6M@\xa0\xb0\xa0)bytes_loc\x01\x01\xe9\xd0\xc0\xc1@\xc0\xb3\x05\x01E@\x90@\x02\x05\xf5\xe1\0@\0\xb6\xc0\x92\xa0\xc0\xb3\x90\x05\x01\x9e@\x90@\x02\x05\xf5\xe1\0@\0\xb8\xa0\xc0\xb3\x90\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\0\xb7@\x02\x05\xf5\xe1\0@\0\xb9@\x02\x05\xf5\xe1\0@\0\xba@\xb0\xc0\x05\x01\xb6\0t\x01\x14\xbe\x01\x14\xbe\xc0\x05\x01\xb7\0t\x01\x14\xbe\x01\x14\xe1@@\xa1\x05\x01\xc0N@\xa0\xb0\xa0-lexeme_length\x01\x01\xea\xd0\xc0\xc1@\xc0\xb3\x05\x01_@\x90@\x02\x05\xf5\xe1\0@\0\xbb\xc0\xb3\x90\x05\x01\xb5@\x90@\x02\x05\xf5\xe1\0@\0\xbc@\x02\x05\xf5\xe1\0@\0\xbd@\xb0\xc0\x05\x01\xc8\0z\x01\x15\xb9\x01\x15\xb9\xc0\x05\x01\xc9\0z\x01\x15\xb9\x01\x15\xda@@\xa1\x05\x01\xd2O@\xa0\xb0\xa03lexeme_bytes_length\x01\x01\xeb\xd0\xc0\xc1@\xc0\xb3\x05\x01q@\x90@\x02\x05\xf5\xe1\0@\0\xbe\xc0\xb3\x90\x05\x01\xc7@\x90@\x02\x05\xf5\xe1\0@\0\xbf@\x02\x05\xf5\xe1\0@\0\xc0@\xb0\xc0\x05\x01\xda\x01\0\x80\x01\x16\xb8\x01\x16\xb8\xc0\x05\x01\xdb\x01\0\x80\x01\x16\xb8\x01\x16\xdf@@\xa1\x05\x01\xe4P@\xa0\xb0\xa00lexing_positions\x01\x01\xec\xd0\xc0\xc1@\xc0\xb3\x05\x01\x83@\x90@\x02\x05\xf5\xe1\0@\0\xc1\xc0\x92\xa0\xc0\xb3\xa1\xa1\x05\x01\xba&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc3\xa0\xc0\xb3\xa1\xa1\x05\x01\xc2&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc2@\x02\x05\xf5\xe1\0@\0\xc4@\x02\x05\xf5\xe1\0@\0\xc5@\xb0\xc0\x05\x01\xfa\x01\0\x86\x01\x17\xe7\x01\x17\xe7\xc0\x05\x01\xfb\x01\0\x86\x01\x17\xe7\x01\x18)@@\xa1\x05\x02\x04Q@\xa0\xb0\xa06lexing_bytes_positions\x01\x01\xed\xd0\xc0\xc1@\xc0\xb3\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\0\xc6\xc0\x92\xa0\xc0\xb3\xa1\xa1\x05\x01\xda&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc8\xa0\xc0\xb3\xa1\xa1\x05\x01\xe2&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc7@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\xb0\xc0\x05\x02\x1a\x01\0\x8c\x01\x191\x01\x191\xc0\x05\x02\x1b\x01\0\x8c\x01\x191\x01\x19y@@\xa1\x05\x02$R@\xa0\xb0\xa0(new_line\x01\x01\xee\xd0\xc0\xc1@\xc0\xb3\x05\x01\xc3@\x90@\x02\x05\xf5\xe1\0@\0\xcb\xc0\xb3\x90\x05\x01\x9c@\x90@\x02\x05\xf5\xe1\0@\0\xcc@\x02\x05\xf5\xe1\0@\0\xcd@\xb0\xc0\x05\x02,\x01\0\x91\x01\x1aA\x01\x1aA\xc0\x05\x02-\x01\0\x91\x01\x1aA\x01\x1a^@@\xa1\x05\x026S@\xa0\xb0\xa0&lexeme\x01\x01\xef\xd0\xc0\xc1@\xc0\xb3\x05\x01\xd5@\x90@\x02\x05\xf5\xe1\0@\0\xce\xc0\xb3\x90\x05\x01\xf6\xa0\xc0\xb3\xa1\xa1\x05\x02\r%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xcf@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\xb0\xc0\x05\x02F\x01\0\x95\x01\x1a\xe1\x01\x1a\xe1\xc0\x05\x02G\x01\0\x95\x01\x1a\xe1\x01\x1b\x05@@\xa1\x05\x02PT@\xa0\xb0\xa0+lexeme_char\x01\x01\xf0\xd0\xc0\xc1@\xc0\xb3\x05\x01\xef@\x90@\x02\x05\xf5\xe1\0@\0\xd2\xc0\xc1@\xc0\xb3\x90\x05\x02G@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xb3\xa1\xa1\x05\x02)%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xd4@\x02\x05\xf5\xe1\0@\0\xd5@\x02\x05\xf5\xe1\0@\0\xd6@\xb0\xc0\x05\x02a\x01\0\x99\x01\x1bp\x01\x1bp\xc0\x05\x02b\x01\0\x99\x01\x1bp\x01\x1b\x9a@@\xa1\x05\x02kU@\xa0\xb0\xa0*sub_lexeme\x01\x01\xf1\xd0\xc0\xc1@\xc0\xb3\x05\x02\n@\x90@\x02\x05\xf5\xe1\0@\0\xd7\xc0\xc1@\xc0\xb3\x90\x05\x02b@\x90@\x02\x05\xf5\xe1\0@\0\xd8\xc0\xc1@\xc0\xb3\x90\x05\x02h@\x90@\x02\x05\xf5\xe1\0@\0\xd9\xc0\xb3\x90\x05\x027\xa0\xc0\xb3\xa1\xa1\x05\x02N%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xda@\x90@\x02\x05\xf5\xe1\0@\0\xdb@\x02\x05\xf5\xe1\0@\0\xdc@\x02\x05\xf5\xe1\0@\0\xdd@\x02\x05\xf5\xe1\0@\0\xde@\xb0\xc0\x05\x02\x87\x01\0\x9d\x01\x1c4\x01\x1c4\xc0\x05\x02\x88\x01\0\x9d\x01\x1c4\x01\x1cj@@\xa1\x05\x02\x91V@\xa0\xb0\xa0(rollback\x01\x01\xf2\xd0\xc0\xc1@\xc0\xb3\x05\x020@\x90@\x02\x05\xf5\xe1\0@\0\xdf\xc0\xb3\x90\x05\x02\t@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\xb0\xc0\x05\x02\x99\x01\0\xa4\x01\x1d\xb2\x01\x1d\xb2\xc0\x05\x02\x9a\x01\0\xa4\x01\x1d\xb2\x01\x1d\xcf@@\xa1\x05\x02\xa3W@\xa0\xb0\xa0%start\x01\x01\xf3\xd0\xc0\xc1@\xc0\xb3\x05\x02B@\x90@\x02\x05\xf5\xe1\0@\0\xe2\xc0\xb3\x90\x05\x02\x1b@\x90@\x02\x05\xf5\xe1\0@\0\xe3@\x02\x05\xf5\xe1\0@\0\xe4@\xb0\xc0\x05\x02\xab\x01\0\xb4\x01 E\x01 E\xc0\x05\x02\xac\x01\0\xb4\x01 E\x01 _@@\xa1\x05\x02\xb5X@\xa0\xb0\xa0$next\x01\x01\xf4\xd0\xc0\xc1@\xc0\xb3\x05\x02T@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xc0\xb3\x90\x05\x02\x90\xa0\xc0\xb3\xa1\xa1\x05\x02\x8c%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xe6@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\xb0\xc0\x05\x02\xc5\x01\0\xba\x01!\\\x01!\\\xc0\x05\x02\xc6\x01\0\xba\x01!\\\x01!\x7f@@\xa1\x05\x02\xcfY@\xa0\xb0\xa03__private__next_int\x01\x01\xf5\xd0\xc0\xc1@\xc0\xb3\x05\x02n@\x90@\x02\x05\xf5\xe1\0@\0\xe9\xc0\xb3\x90\x05\x02\xc4@\x90@\x02\x05\xf5\xe1\0@\0\xea@\x02\x05\xf5\xe1\0@\0\xeb@\xb0\xc0\x05\x02\xd7\x01\0\xc3\x01#\x01\x01#\x01\xc0\x05\x02\xd8\x01\0\xc3\x01#\x01\x01#(@@\xa1\x05\x02\xe1Z@\xa0\xb0\xa0$mark\x01\x01\xf6\xd0\xc0\xc1@\xc0\xb3\x05\x02\x80@\x90@\x02\x05\xf5\xe1\0@\0\xec\xc0\xc1@\xc0\xb3\x90\x05\x02\xd8@\x90@\x02\x05\xf5\xe1\0@\0\xed\xc0\xb3\x90\x05\x02_@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\x02\x05\xf5\xe1\0@\0\xf0@\xb0\xc0\x05\x02\xef\x01\0\xc7\x01#\xa9\x01#\xa9\xc0\x05\x02\xf0\x01\0\xc7\x01#\xa9\x01#\xc9@@\xa1\x05\x02\xf9[@\xa0\xb0\xa0)backtrack\x01\x01\xf7\xd0\xc0\xc1@\xc0\xb3\x05\x02\x98@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xb3\x90\x05\x02\xee@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf3@\xb0\xc0\x05\x03\x01\x01\0\xcc\x01$\x8a\x01$\x8a\xc0\x05\x03\x02\x01\0\xcc\x01$\x8a\x01$\xa7@@\xa1\x05\x03\x0b\\@\xa0\xb0\xa0.with_tokenizer\x01\x01\xf8\xd0\xc0\xc1@\xc0\xc1@\xc0\xb3\x05\x02\xac@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\x90\x90%token\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1@\xc0\xb3\x05\x02\xb5@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xc1@\xc0\xb3\x90\x05\x02\x90@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\x92\xa0\x04\x12\xa0\xc0\xb3\xa1\xa1\x05\x02\xf3&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xa0\xc0\xb3\xa1\xa1\x05\x02\xfb&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x033\x01\0\xd2\x01%\x80\x01%\x80\xc0\x05\x034\x01\0\xd6\x01%\xc3\x01%\xef@@\xa1\x05\x03=]@\xa0\xd3\xa0&Latin1\x01\x01\xf9@\xc0\x91\xa0\xb0\xa0(from_gen\x01\x01\xfc\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\xa3$charB@\x90@\x02\x05\xf5\xe1\0@\x01\xffT@\x90@\x02\x05\xf5\xe1\0@\x01\xffU\xc0\xb3\x05\x02\xf1@\x90@\x02\x05\xf5\xe1\0@\x01\xffV@\x02\x05\xf5\xe1\0@\x01\xffW@\xb0\xc0\x05\x03V\x01\0\xdd\x01&\xa9\x01&\xab\xc0\x05\x03W\x01\0\xdd\x01&\xa9\x01&\xce@@\xa1\x05\x03`^@\xa0\xb0\xa0,from_channel\x01\x01\xfd\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x03/*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xffX\xc0\xb3\x05\x03\x04@\x90@\x02\x05\xf5\xe1\0@\x01\xffY@\x02\x05\xf5\xe1\0@\x01\xffZ@\xb0\xc0\x05\x03i\x01\0\xe1\x01'K\x01'M\xc0\x05\x03j\x01\0\xe1\x01'K\x01't@@\xa1\x05\x03s_@\xa0\xb0\xa0+from_string\x01\x01\xfe\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xd2@\x90@\x02\x05\xf5\xe1\0@\x01\xff[\xc0\xb3\x05\x03\x16@\x90@\x02\x05\xf5\xe1\0@\x01\xff\\@\x02\x05\xf5\xe1\0@\x01\xff]@\xb0\xc0\x05\x03{\x01\0\xe4\x01'\xad\x01'\xaf\xc0\x05\x03|\x01\0\xe4\x01'\xad\x01'\xd1@@\xa1\x05\x03\x85`@\xa0\xb0\xa0&lexeme\x01\x01\xff\xd0\xc0\xc1@\xc0\xb3\x05\x03$@\x90@\x02\x05\xf5\xe1\0@\x01\xff^\xc0\xb3\x90\x05\x02\xe7@\x90@\x02\x05\xf5\xe1\0@\x01\xff_@\x02\x05\xf5\xe1\0@\x01\xff`@\xb0\xc0\x05\x03\x8d\x01\0\xe9\x01(\x93\x01(\x95\xc0\x05\x03\x8e\x01\0\xe9\x01(\x93\x01(\xb2@@\xa1\x05\x03\x97a@\xa0\xb0\xa0*sub_lexeme\x01\x02\0\xd0\xc0\xc1@\xc0\xb3\x05\x036@\x90@\x02\x05\xf5\xe1\0@\x01\xffa\xc0\xc1@\xc0\xb3\x90\x05\x03\x8e@\x90@\x02\x05\xf5\xe1\0@\x01\xffb\xc0\xc1@\xc0\xb3\x90\x05\x03\x94@\x90@\x02\x05\xf5\xe1\0@\x01\xffc\xc0\xb3\x90\x05\x03\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xffd@\x02\x05\xf5\xe1\0@\x01\xffe@\x02\x05\xf5\xe1\0@\x01\xfff@\x02\x05\xf5\xe1\0@\x01\xffg@\xb0\xc0\x05\x03\xab\x01\0\xee\x01)w\x01)y\xc0\x05\x03\xac\x01\0\xee\x01)w\x01)\xa8@@\xa1\x05\x03\xb5b@\xa0\xb0\xa0+lexeme_char\x01\x02\x01\xd0\xc0\xc1@\xc0\xb3\x05\x03T@\x90@\x02\x05\xf5\xe1\0@\x01\xffh\xc0\xc1@\xc0\xb3\x90\x05\x03\xac@\x90@\x02\x05\xf5\xe1\0@\x01\xffi\xc0\xb3\x90\x04s@\x90@\x02\x05\xf5\xe1\0@\x01\xffj@\x02\x05\xf5\xe1\0@\x01\xffk@\x02\x05\xf5\xe1\0@\x01\xffl@\xb0\xc0\x05\x03\xc3\x01\0\xf3\x01*n\x01*p\xc0\x05\x03\xc4\x01\0\xf3\x01*n\x01*\x97@@\xa1\x05\x03\xcdc@@@\xb0\xc0\x05\x03\xc7\x01\0\xda\x01&\x1a\x01&\x1a\xc0\x05\x03\xc8\x01\0\xf4\x01*\x98\x01*\x9b@\xa1\x05\x03\xd1d@@\xa0\xd3\xa0$Utf8\x01\x01\xfa@\xc0\x91\xa0\xb0\xa0(from_gen\x01\x02\x02\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\x04\x94@\x90@\x02\x05\xf5\xe1\0@\x01\xff@@\x90@\x02\x05\xf5\xe1\0@\x01\xffA\xc0\xb3\x05\x03\x83@\x90@\x02\x05\xf5\xe1\0@\x01\xffB@\x02\x05\xf5\xe1\0@\x01\xffC@\xb0\xc0\x05\x03\xe8\x01\0\xf8\x01*\xe5\x01*\xe7\xc0\x05\x03\xe9\x01\0\xf8\x01*\xe5\x01+\n@@\xa1\x05\x03\xf2e@\xa0\xb0\xa0,from_channel\x01\x02\x03\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x03\xc1*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xffD\xc0\xb3\x05\x03\x96@\x90@\x02\x05\xf5\xe1\0@\x01\xffE@\x02\x05\xf5\xe1\0@\x01\xffF@\xb0\xc0\x05\x03\xfb\x01\0\xfb\x01+I\x01+K\xc0\x05\x03\xfc\x01\0\xfb\x01+I\x01+r@@\xa1\x05\x04\x05f@\xa0\xb0\xa0+from_string\x01\x02\x04\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03d@\x90@\x02\x05\xf5\xe1\0@\x01\xffG\xc0\xb3\x05\x03\xa8@\x90@\x02\x05\xf5\xe1\0@\x01\xffH@\x02\x05\xf5\xe1\0@\x01\xffI@\xb0\xc0\x05\x04\r\x01\0\xfe\x01+\xaa\x01+\xac\xc0\x05\x04\x0e\x01\0\xfe\x01+\xaa\x01+\xce@@\xa1\x05\x04\x17g@\xa0\xb0\xa0&lexeme\x01\x02\x05\xd0\xc0\xc1@\xc0\xb3\x05\x03\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xffJ\xc0\xb3\x90\x05\x03y@\x90@\x02\x05\xf5\xe1\0@\x01\xffK@\x02\x05\xf5\xe1\0@\x01\xffL@\xb0\xc0\x05\x04\x1f\x01\x01\x01\x01,\x0f\x01,\x11\xc0\x05\x04 \x01\x01\x01\x01,\x0f\x01,.@@\xa1\x05\x04)h@\xa0\xb0\xa0*sub_lexeme\x01\x02\x06\xd0\xc0\xc1@\xc0\xb3\x05\x03\xc8@\x90@\x02\x05\xf5\xe1\0@\x01\xffM\xc0\xc1@\xc0\xb3\x90\x05\x04 @\x90@\x02\x05\xf5\xe1\0@\x01\xffN\xc0\xc1@\xc0\xb3\x90\x05\x04&@\x90@\x02\x05\xf5\xe1\0@\x01\xffO\xc0\xb3\x90\x05\x03\x97@\x90@\x02\x05\xf5\xe1\0@\x01\xffP@\x02\x05\xf5\xe1\0@\x01\xffQ@\x02\x05\xf5\xe1\0@\x01\xffR@\x02\x05\xf5\xe1\0@\x01\xffS@\xb0\xc0\x05\x04=\x01\x01\x04\x01,s\x01,u\xc0\x05\x04>\x01\x01\x04\x01,s\x01,\xa4@@\xa1\x05\x04Gi@@@\xb0\xc0\x05\x04A\x01\0\xf6\x01*\x9d\x01*\x9d\xc0\x05\x04B\x01\x01\x05\x01,\xa5\x01,\xa8@\xa1\x05\x04Kj@@\xa0\xd3\xa0%Utf16\x01\x01\xfb@\xc0\x91\xa0\xc1\xa0*byte_order\x01\x02\x07\b\0\0;\0@@\xa1\xa0\xe0\xa0-Little_endian\x01\x01\xd3\x90@@\xb0\xc0\x05\x04V\x01\x01\b\x01,\xbd\x01,\xd1\xc0\x05\x04W\x01\x01\b\x01,\xbd\x01,\xde@@\xa1\x05\x04`l\xa0\xe0\xa0*Big_endian\x01\x01\xd4\x90@@\xb0\xc0\x05\x04_\x01\x01\b\x01,\xbd\x01,\xdf\xc0\x05\x04`\x01\x01\b\x01,\xbd\x01,\xeb@@\xa1\x05\x04im@@A@@@@@\xb0\xc0\x05\x04c\x01\x01\b\x01,\xbd\x01,\xbf\x04\x04@@A@\xa1\x05\x04lkA@\xa0\xb0\xa0(from_gen\x01\x02\b\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\x05\x01)@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1b@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1c\xc0\xc1@\xc0\xb3\x90\x05\x04S\xa0\xc0\xb3\x90\x046@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1d@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1e\xc0\xb3\x05\x04#@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1f@\x02\x05\xf5\xe1\0@\x01\xff @\x02\x05\xf5\xe1\0@\x01\xff!@\xb0\xc0\x05\x04\x88\x01\x01\x12\x01.\xec\x01.\xee\xc0\x05\x04\x89\x01\x01\x12\x01.\xec\x01/&@@\xa1\x05\x04\x92n@\xa0\xb0\xa0,from_channel\x01\x02\t\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x04a*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xff\"\xc0\xc1@\xc0\xb3\x90\x05\x04q\xa0\xc0\xb3\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\x01\xff#@\x90@\x02\x05\xf5\xe1\0@\x01\xff$\xc0\xb3\x05\x04@@\x90@\x02\x05\xf5\xe1\0@\x01\xff%@\x02\x05\xf5\xe1\0@\x01\xff&@\x02\x05\xf5\xe1\0@\x01\xff'@\xb0\xc0\x05\x04\xa5\x01\x01\x15\x01/a\x01/c\xc0\x05\x04\xa6\x01\x01\x15\x01/a\x01/\x9f@@\xa1\x05\x04\xafo@\xa0\xb0\xa0+from_string\x01\x02\n\xd0\xc0\xc1@\xc0\xb3\x90\x05\x04\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xff(\xc0\xc1@\xc0\xb3\x90\x05\x04\x8d\xa0\xc0\xb3\x04:@\x90@\x02\x05\xf5\xe1\0@\x01\xff)@\x90@\x02\x05\xf5\xe1\0@\x01\xff*\xc0\xb3\x05\x04\\@\x90@\x02\x05\xf5\xe1\0@\x01\xff+@\x02\x05\xf5\xe1\0@\x01\xff,@\x02\x05\xf5\xe1\0@\x01\xff-@\xb0\xc0\x05\x04\xc1\x01\x01\x18\x01/\xd5\x01/\xd7\xc0\x05\x04\xc2\x01\x01\x18\x01/\xd5\x010\x0e@@\xa1\x05\x04\xcbp@\xa0\xb0\xa0&lexeme\x01\x02\x0b\xd0\xc0\xc1@\xc0\xb3\x05\x04j@\x90@\x02\x05\xf5\xe1\0@\x01\xff.\xc0\xc1@\xc0\xb3\x04Q@\x90@\x02\x05\xf5\xe1\0@\x01\xff/\xc0\xc1@\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\x01\xff0\xc0\xb3\x90\x05\x04:@\x90@\x02\x05\xf5\xe1\0@\x01\xff1@\x02\x05\xf5\xe1\0@\x01\xff2@\x02\x05\xf5\xe1\0@\x01\xff3@\x02\x05\xf5\xe1\0@\x01\xff4@\xb0\xc0\x05\x04\xe0\x01\x01\x1d\x010\xb9\x010\xbb\xc0\x05\x04\xe1\x01\x01\x1d\x010\xb9\x010\xee@@\xa1\x05\x04\xeaq@\xa0\xb0\xa0*sub_lexeme\x01\x02\f\xd0\xc0\xc1@\xc0\xb3\x05\x04\x89@\x90@\x02\x05\xf5\xe1\0@\x01\xff5\xc0\xc1@\xc0\xb3\x90\x05\x04\xe1@\x90@\x02\x05\xf5\xe1\0@\x01\xff6\xc0\xc1@\xc0\xb3\x90\x05\x04\xe7@\x90@\x02\x05\xf5\xe1\0@\x01\xff7\xc0\xc1@\xc0\xb3\x04|@\x90@\x02\x05\xf5\xe1\0@\x01\xff8\xc0\xc1@\xc0\xb3\x90\x04+@\x90@\x02\x05\xf5\xe1\0@\x01\xff9\xc0\xb3\x90\x05\x04c@\x90@\x02\x05\xf5\xe1\0@\x01\xff:@\x02\x05\xf5\xe1\0@\x01\xff;@\x02\x05\xf5\xe1\0@\x01\xff<@\x02\x05\xf5\xe1\0@\x01\xff=@\x02\x05\xf5\xe1\0@\x01\xff>@\x02\x05\xf5\xe1\0@\x01\xff?@\xb0\xc0\x05\x05\t\x01\x01\"\x011\xa1\x011\xa3\xc0\x05\x05\n\x01\x01\"\x011\xa1\x011\xe8@@\xa1\x05\x05\x13r@@@\xb0\xc0\x05\x05\r\x01\x01\x07\x01,\xaa\x01,\xaa\xc0\x05\x05\x0e\x01\x01#\x011\xe9\x011\xec@\xa1\x05\x05\x17s@@@\x84\x95\xa6\xbe\0\0\x01\x8d\0\0\0<\0\0\0\xdf\0\0\0\xb4\xa0\xa0)Sedlexing\x900\xed\x0f\"5\xb4\x80\x8fK>!\x9d\x12\xd4\xdf-\xff\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0.Stdlib__Lexing\x900\xbeb\x85O\x0f\xbc\xd8S\x1f\xe51\xcd\0\xe3H!\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0(Gen_intf\x900\x17D\xf1\xdb\xab\x87^\xb26\xc4S.\x8cx\xbd\x16\xa0\xa0#Gen\x900I\xf5!V+ \xe1\x0f\xfc\xf7e\x1c\x07K\x07\xc7\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Gen = global_data.Gen,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    InvalidCodepoint =
      [248, "Sedlexing.InvalidCodepoint", caml_fresh_oo_id(0)],
    MalFormed = [248, "Sedlexing.MalFormed", caml_fresh_oo_id(0)],
    to_int = Stdlib_Uchar[10],
    is_char = Stdlib_Uchar[11],
    of_char = Stdlib_Uchar[12],
    to_char = Stdlib_Uchar[13],
    equal = Stdlib_Uchar[15],
    utf_8_byte_length = Stdlib_Uchar[23],
    utf_16_byte_length = Stdlib_Uchar[24];
   function of_int(x, cont){
    return caml_cps_call2
            (Stdlib_Uchar[7],
             x,
             function(_bn_){
              if(_bn_) return caml_cps_call2(Stdlib_Uchar[9], x, cont);
              var
               raise = caml_pop_trap(),
               MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
              return raise(MalFormed$0);
             });
   }
   function symbol_map(o, f, cont){
    if(! o) return cont(0);
    var x = o[1];
    return caml_cps_exact_call2(f, x, function(_bm_){return cont([0, _bm_]);});
   }
   var _a_ = [0, cst_src_lib_sedlexing_ml, 88, 27];
   function empty_lexbuf(bytes_per_char){
    return [0,
            function(param, _bl_, _bk_, cont){
             var raise = caml_pop_trap();
             return raise
                     (caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1));
            },
            bytes_per_char,
            ,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            cst,
            0];
   }
   var
    dummy_uchar = caml_callback(of_int, [0]),
    nl_uchar = caml_callback(of_int, [10]),
    chunk_size = 512;
   function create(opt, refill, cont){
    if(opt)
     var sth = opt[1], bytes_per_char = sth;
    else
     var bytes_per_char = function(param, cont){return cont(1);};
    var init = empty_lexbuf(bytes_per_char);
    return cont
            ([0,
              refill,
              init[2],
              caml_make_vect(512, dummy_uchar),
              init[4],
              init[5],
              init[6],
              init[7],
              init[8],
              init[9],
              init[10],
              init[11],
              init[12],
              init[13],
              init[14],
              init[15],
              init[16],
              init[17],
              init[18],
              init[19],
              init[20],
              init[21],
              init[22],
              init[23],
              init[24]]);
   }
   function set_position(bytes_position, lexbuf, position, cont){
    lexbuf[5] = position[4] - lexbuf[7] | 0;
    lexbuf[9] = position[3];
    lexbuf[11] = position[2];
    return caml_cps_call3
            (Stdlib_Option[3],
             bytes_position,
             position,
             function(bytes_position){
              lexbuf[6] = bytes_position[4] - lexbuf[8] | 0;
              lexbuf[10] = bytes_position[3];
              return cont(0);
             });
   }
   function set_filename(lexbuf, fname, cont){lexbuf[23] = fname; return cont(0);
   }
   function from_gen(bytes_per_char, gen, cont){
    var malformed = [0, 0];
    function refill(buf, pos, len, cont){
     function _bi_(i){
      if(! malformed[1])
       return len <= i
               ? cont(len)
               : (caml_push_trap
                  (function(exn){
                    if(exn === MalFormed && 0 !== i){
                     malformed[1] = 1;
                     return cont(i);
                    }
                    var
                     raise = caml_pop_trap(),
                     exn$0 = caml_maybe_attach_backtrace(exn, 0);
                    return raise(exn$0);
                   }),
                 caml_cps_call2
                  (gen,
                   0,
                   function(val){
                    caml_pop_trap();
                    if(! val) return cont(i);
                    var c = val[1], _bj_ = pos + i | 0;
                    caml_check_bound(buf, _bj_)[1 + _bj_] = c;
                    var i$0 = i + 1 | 0;
                    return caml_cps_exact_call1(_bi_, i$0);
                   }));
      var
       raise = caml_pop_trap(),
       MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
      return raise(MalFormed$0);
     }
     return _bi_(0);
    }
    return caml_cps_exact_call3(create, bytes_per_char, refill, cont);
   }
   function from_int_array(bytes_per_char, a, cont){
    return caml_cps_call3
            (Gen[12],
             [0, a.length - 1],
             function(i, cont){
              return caml_cps_exact_call2
                      (of_int, caml_check_bound(a, i)[1 + i], cont);
             },
             function(_bh_){
              return caml_cps_exact_call3
                      (from_gen, bytes_per_char, _bh_, cont);
             });
   }
   function from_uchar_array(opt, a, cont){
    if(opt)
     var sth = opt[1], bytes_per_char = sth;
    else
     var bytes_per_char = function(param, cont){return cont(1);};
    var
     len = a.length - 1,
     init = empty_lexbuf(bytes_per_char),
     _aY_ = 1,
     _aZ_ = init[23],
     _a0_ = init[22],
     _a1_ = init[21],
     _a2_ = init[20],
     _a3_ = init[19],
     _a4_ = init[18],
     _a5_ = init[17],
     _a6_ = init[16],
     _a7_ = init[15],
     _a8_ = init[14],
     _a9_ = init[13],
     _a__ = init[12],
     _a$_ = init[11],
     _ba_ = init[10],
     _bb_ = init[9],
     _bc_ = init[8],
     _bd_ = init[7],
     _be_ = init[6],
     _bf_ = init[5];
    return caml_cps_call3
            (Stdlib_Array[1],
             len,
             function(i, cont){return cont(caml_check_bound(a, i)[1 + i]);},
             function(_bg_){
              return cont
                      ([0,
                        init[1],
                        init[2],
                        _bg_,
                        len,
                        _bf_,
                        _be_,
                        _bd_,
                        _bc_,
                        _bb_,
                        _ba_,
                        _a$_,
                        _a__,
                        _a9_,
                        _a8_,
                        _a7_,
                        _a6_,
                        _a5_,
                        _a4_,
                        _a3_,
                        _a2_,
                        _a1_,
                        _a0_,
                        _aZ_,
                        _aY_]);
             });
   }
   function new_line(lexbuf, cont){
    lexbuf[11] = lexbuf[11] + 1 | 0;
    lexbuf[9] = lexbuf[7] + lexbuf[5] | 0;
    lexbuf[10] = lexbuf[8] + lexbuf[6] | 0;
    return cont(0);
   }
   function next_aux(some, none, lexbuf, cont){
    var
     _aM_ = 1 - lexbuf[24],
     _aN_ = _aM_ ? lexbuf[7] === lexbuf[4] ? 1 : 0 : _aM_;
    function _aQ_(){
     if(lexbuf[24] && lexbuf[7] === lexbuf[4]) return cont(none);
     var _aT_ = lexbuf[7], ret = caml_check_bound(lexbuf[3], _aT_)[1 + _aT_];
     lexbuf[7] = lexbuf[7] + 1 | 0;
     return caml_cps_call2
             (lexbuf[2],
              ret,
              function(_aU_){
               lexbuf[8] = lexbuf[8] + _aU_ | 0;
               return caml_cps_call3
                       (equal,
                        ret,
                        nl_uchar,
                        function(_aV_){
                         function _aW_(_aX_){return caml_cps_call2(some, ret, cont);}
                         return _aV_
                                 ? caml_cps_exact_call2(new_line, lexbuf, _aW_)
                                 : _aW_(0);
                        });
              });
    }
    if(! _aN_) return _aQ_();
    function _aO_(){
     return caml_cps_call4
             (lexbuf[1],
              lexbuf[3],
              lexbuf[7],
              chunk_size,
              function(n){
               return n === 0
                       ? (lexbuf[24] = 1, _aQ_())
                       : (lexbuf[4] = lexbuf[4] + n | 0, _aQ_());
              });
    }
    if(lexbuf[3].length - 1 >= (lexbuf[4] + 512 | 0)) return _aO_();
    var s = lexbuf[12], s_bytes = lexbuf[13], ls = lexbuf[4] - s | 0;
    function _aP_(_aS_){
     lexbuf[4] = ls;
     lexbuf[5] = lexbuf[5] + s | 0;
     lexbuf[6] = lexbuf[6] + s_bytes | 0;
     lexbuf[7] = lexbuf[7] - s | 0;
     lexbuf[8] = lexbuf[8] - s_bytes | 0;
     lexbuf[17] = lexbuf[17] - s | 0;
     lexbuf[18] = lexbuf[18] - s_bytes | 0;
     lexbuf[12] = 0;
     lexbuf[13] = 0;
     return _aO_();
    }
    if((ls + 512 | 0) <= lexbuf[3].length - 1)
     return caml_cps_call6
             (Stdlib_Array[8], lexbuf[3], s, lexbuf[3], 0, ls, _aP_);
    var
     newlen = (lexbuf[3].length - 1 + 512 | 0) * 2 | 0,
     newbuf = caml_make_vect(newlen, dummy_uchar);
    return caml_cps_call6
            (Stdlib_Array[8],
             lexbuf[3],
             s,
             newbuf,
             0,
             ls,
             function(_aR_){lexbuf[3] = newbuf; return _aP_(0);});
   }
   function next(lexbuf, cont){
    return caml_cps_exact_call4
            (next_aux,
             function(x, cont){return cont([0, x]);},
             0,
             lexbuf,
             cont);
   }
   function private_next_int(lexbuf, cont){
    return caml_cps_exact_call4(next_aux, to_int, -1, lexbuf, cont);
   }
   function mark(lexbuf, i, cont){
    lexbuf[17] = lexbuf[7];
    lexbuf[18] = lexbuf[8];
    lexbuf[19] = lexbuf[9];
    lexbuf[20] = lexbuf[10];
    lexbuf[21] = lexbuf[11];
    lexbuf[22] = i;
    return cont(0);
   }
   function start(lexbuf, cont){
    lexbuf[12] = lexbuf[7];
    lexbuf[13] = lexbuf[8];
    lexbuf[14] = lexbuf[9];
    lexbuf[15] = lexbuf[10];
    lexbuf[16] = lexbuf[11];
    return caml_cps_exact_call3(mark, lexbuf, -1, cont);
   }
   function backtrack(lexbuf, cont){
    lexbuf[7] = lexbuf[17];
    lexbuf[8] = lexbuf[18];
    lexbuf[9] = lexbuf[19];
    lexbuf[10] = lexbuf[20];
    lexbuf[11] = lexbuf[21];
    return cont(lexbuf[22]);
   }
   function rollback(lexbuf, cont){
    lexbuf[7] = lexbuf[12];
    lexbuf[8] = lexbuf[13];
    lexbuf[9] = lexbuf[14];
    lexbuf[10] = lexbuf[15];
    lexbuf[11] = lexbuf[16];
    return cont(0);
   }
   function lexeme_start(lexbuf, cont){
    return cont(lexbuf[12] + lexbuf[5] | 0);
   }
   function lexeme_bytes_start(lexbuf, cont){return cont(lexbuf[13] + lexbuf[6] | 0);
   }
   function lexeme_end(lexbuf, cont){return cont(lexbuf[7] + lexbuf[5] | 0);}
   function lexeme_bytes_end(lexbuf, cont){
    return cont(lexbuf[8] + lexbuf[6] | 0);
   }
   function loc(lexbuf, cont){
    return cont([0, lexbuf[12] + lexbuf[5] | 0, lexbuf[7] + lexbuf[5] | 0]);
   }
   function bytes_loc(lexbuf, cont){
    return cont([0, lexbuf[13] + lexbuf[6] | 0, lexbuf[8] + lexbuf[6] | 0]);
   }
   function lexeme_length(lexbuf, cont){
    return cont(lexbuf[7] - lexbuf[12] | 0);
   }
   function lexeme_bytes_length(lexbuf, cont){return cont(lexbuf[8] - lexbuf[13] | 0);
   }
   function sub_lexeme(lexbuf, pos, len, cont){
    return caml_cps_call4
            (Stdlib_Array[5], lexbuf[3], lexbuf[12] + pos | 0, len, cont);
   }
   function lexeme(lexbuf, cont){
    return caml_cps_call4
            (Stdlib_Array[5],
             lexbuf[3],
             lexbuf[12],
             lexbuf[7] - lexbuf[12] | 0,
             cont);
   }
   function lexeme_char(lexbuf, pos, cont){
    var _aL_ = lexbuf[12] + pos | 0;
    return cont(caml_check_bound(lexbuf[3], _aL_)[1 + _aL_]);
   }
   function lexing_positions(lexbuf, cont){
    var
     start_p =
       [0, lexbuf[23], lexbuf[16], lexbuf[14], lexbuf[12] + lexbuf[5] | 0],
     curr_p =
       [0, lexbuf[23], lexbuf[11], lexbuf[9], lexbuf[7] + lexbuf[5] | 0];
    return cont([0, start_p, curr_p]);
   }
   function lexing_bytes_positions(lexbuf, cont){
    var
     start_p =
       [0, lexbuf[23], lexbuf[16], lexbuf[15], lexbuf[13] + lexbuf[6] | 0],
     curr_p =
       [0, lexbuf[23], lexbuf[11], lexbuf[10], lexbuf[8] + lexbuf[6] | 0];
    return cont([0, start_p, curr_p]);
   }
   function with_tokenizer(lexer, lexbuf, cont){
    function lexer$0(param, cont){
     return caml_cps_call2
             (lexer,
              lexbuf,
              function(token){
               return caml_cps_exact_call2
                       (lexing_positions,
                        lexbuf,
                        function(match){
                         var curr_p = match[2], start_p = match[1];
                         return cont([0, token, start_p, curr_p]);
                        });
              });
    }
    return cont(lexer$0);
   }
   var
    Missing_input = [248, "Sedlexing.Chan.Missing_input", caml_fresh_oo_id(0)],
    min_buffer_size = 64,
    cst_Sedlexing_Chan_ensure = "Sedlexing.Chan.ensure",
    cst_advance = "advance",
    _b_ = [0, cst_src_lib_sedlexing_ml, 465, 15];
   function available(t){return t[3] - t[4] | 0;}
   function ensure_bytes_available(t, can_refill, n, cont){
    var _aF_ = n <= 0 ? 1 : 0, _aG_ = _aF_ || (64 < n ? 1 : 0);
    function _aH_(_aJ_){
     if(n <= available(t)) return cont(undef);
     if(can_refill){
      var
       len = t[3] - t[4] | 0,
       _aI_ =
         function(_aK_){
          return caml_cps_call5
                  (Stdlib[84],
                   t[2],
                   t[1],
                   len,
                   runtime.caml_ml_bytes_length(t[1]) - len | 0,
                   function(read){
                    t[3] = len + read | 0;
                    t[4] = 0;
                    if(read !== 0) return caml_cps_exact_call1(_aH_, 0);
                    var
                     raise = caml_pop_trap(),
                     Missing_input$0 =
                       caml_maybe_attach_backtrace(Missing_input, 1);
                    return raise(Missing_input$0);
                   });
         };
      return 0 < len
              ? caml_cps_call6
                (Stdlib_Bytes[11], t[1], t[4], t[1], 0, len, _aI_)
              : _aI_(0);
     }
     var
      raise = caml_pop_trap(),
      Missing_input$0 = caml_maybe_attach_backtrace(Missing_input, 1);
     return raise(Missing_input$0);
    }
    return _aG_
            ? caml_cps_call2(Stdlib[1], cst_Sedlexing_Chan_ensure, _aH_)
            : _aH_(0);
   }
   function get(t, i){return runtime.caml_bytes_get(t[1], t[4] + i | 0);}
   function advance(t, n, cont){
    function _aD_(_aE_){t[4] = t[4] + n | 0; return cont(undef);}
    return t[3] < (t[4] + n | 0)
            ? caml_cps_call2(Stdlib[1], cst_advance, _aD_)
            : _aD_(0);
   }
   function make_from_channel
   (bytes_per_char,
    ic,
    max_bytes_per_uchar,
    min_bytes_per_uchar,
    read_uchar,
    cont){
    var len = 512 * max_bytes_per_uchar | 0;
    return caml_cps_call3
            (Stdlib[17],
             len,
             min_buffer_size,
             function(len){
              var
               t = [0, caml_create_bytes(len), ic, 0, 0],
               malformed = [0, 0];
              function refill(buf, pos, len, cont){
               function _ay_(i){
                if(malformed[1]){
                 var
                  raise = caml_pop_trap(),
                  MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                 return raise(MalFormed$0);
                }
                if(i === len) return cont(i);
                caml_push_trap
                 (function(exn){
                   if(exn === MalFormed && 0 !== i){
                    malformed[1] = 1;
                    return cont(i);
                   }
                   if(exn !== Missing_input){
                    var
                     raise$0 = caml_pop_trap(),
                     exn$0 = caml_maybe_attach_backtrace(exn, 0);
                    return raise$0(exn$0);
                   }
                   var
                    _aB_ = i === 0 ? 1 : 0,
                    _aC_ = _aB_ ? 0 < available(t) ? 1 : 0 : _aB_;
                   if(! _aC_) return cont(i);
                   var
                    raise = caml_pop_trap(),
                    MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                   return raise(MalFormed$0);
                  });
                var can_refill = i === 0 ? 1 : 0;
                return caml_cps_exact_call4
                        (ensure_bytes_available,
                         t,
                         can_refill,
                         min_bytes_per_uchar,
                         function(_az_){
                          return caml_cps_exact_call3
                                  (read_uchar,
                                   can_refill,
                                   t,
                                   function(c){
                                    caml_pop_trap();
                                    var _aA_ = pos + i | 0;
                                    caml_check_bound(buf, _aA_)[1 + _aA_] = c;
                                    var i$0 = i + 1 | 0;
                                    return caml_cps_exact_call1(_ay_, i$0);
                                   });
                         });
               }
               return _ay_(0);
              }
              return caml_cps_exact_call3
                      (create, bytes_per_char, refill, cont);
             });
   }
   function from_gen$0(s, cont){
    return caml_cps_call3
            (Gen[21],
             of_char,
             s,
             function(_ax_){
              return caml_cps_exact_call3
                      (from_gen,
                       [0, function(param, cont){return cont(1);}],
                       _ax_,
                       cont);
             });
   }
   function from_string(s, cont){
    var
     len = caml_ml_string_length(s),
     init = empty_lexbuf(function(param, cont){return cont(1);}),
     _ac_ = 1,
     _ad_ = init[23],
     _ae_ = init[22],
     _af_ = init[21],
     _ag_ = init[20],
     _ah_ = init[19],
     _ai_ = init[18],
     _aj_ = init[17],
     _ak_ = init[16],
     _al_ = init[15],
     _am_ = init[14],
     _an_ = init[13],
     _ao_ = init[12],
     _ap_ = init[11],
     _aq_ = init[10],
     _ar_ = init[9],
     _as_ = init[8],
     _at_ = init[7],
     _au_ = init[6],
     _av_ = init[5];
    return caml_cps_call3
            (Stdlib_Array[1],
             len,
             function(i, cont){
              return caml_cps_call2(of_char, caml_string_get(s, i), cont);
             },
             function(_aw_){
              return cont
                      ([0,
                        init[1],
                        init[2],
                        _aw_,
                        len,
                        _av_,
                        _au_,
                        _at_,
                        _as_,
                        _ar_,
                        _aq_,
                        _ap_,
                        _ao_,
                        _an_,
                        _am_,
                        _al_,
                        _ak_,
                        _aj_,
                        _ai_,
                        _ah_,
                        _ag_,
                        _af_,
                        _ae_,
                        _ad_,
                        _ac_]);
             });
   }
   function from_channel(ic, cont){
    return caml_cps_exact_call6
            (make_from_channel,
             [0, function(param, cont){return cont(1);}],
             ic,
             1,
             1,
             function(param, t, cont){
              var c = get(t, 0);
              return caml_cps_exact_call3
                      (advance,
                       t,
                       1,
                       function(_ab_){return caml_cps_call2(of_char, c, cont);});
             },
             cont);
   }
   function to_latin1(c, cont){
    return caml_cps_call2
            (is_char,
             c,
             function(_$_){
              return _$_
                      ? caml_cps_call2(to_char, c, cont)
                      : caml_cps_call2
                        (to_int,
                         c,
                         function(_aa_){
                          var raise = caml_pop_trap();
                          return raise
                                  (caml_maybe_attach_backtrace([0, InvalidCodepoint, _aa_], 1));
                         });
             });
   }
   function lexeme_char$0(lexbuf, pos, cont){
    return caml_cps_exact_call3
            (lexeme_char,
             lexbuf,
             pos,
             function(___){return caml_cps_exact_call2(to_latin1, ___, cont);});
   }
   function sub_lexeme$0(lexbuf, pos, len, cont){
    var s = caml_create_bytes(len), _U_ = len - 1 | 0;
    function _W_(i){
     var _X_ = (lexbuf[12] + pos | 0) + i | 0;
     return caml_cps_exact_call2
             (to_latin1,
              caml_check_bound(lexbuf[3], _X_)[1 + _X_],
              function(_Y_){
               runtime.caml_bytes_set(s, i, _Y_);
               var _Z_ = i + 1 | 0;
               return _U_ !== i ? caml_cps_exact_call1(_W_, _Z_) : _V_();
              });
    }
    function _V_(){return caml_cps_call2(Stdlib_Bytes[6], s, cont);}
    var _T_ = 0;
    return _U_ < 0 ? _V_() : _W_(_T_);
   }
   function lexeme$0(lexbuf, cont){
    return caml_cps_exact_call4
            (sub_lexeme$0, lexbuf, 0, lexbuf[7] - lexbuf[12] | 0, cont);
   }
   function width(param){
    if(192 <= param){
     if(240 > param) return 224 <= param ? 3 : 2;
     if(248 > param) return 4;
    }
    else if(128 > param) return 1;
    throw caml_maybe_attach_backtrace(MalFormed, 1);
   }
   function from_channel$0(ic, cont){
    return caml_cps_exact_call6
            (make_from_channel,
             [0, utf_8_byte_length],
             ic,
             4,
             1,
             function(can_refill, t, cont){
              var w = width(get(t, 0));
              return caml_cps_exact_call4
                      (ensure_bytes_available,
                       t,
                       can_refill,
                       w,
                       function(_K_){
                        var i = t[4];
                        return caml_cps_call2
                                (Stdlib_Bytes[44],
                                 t[1],
                                 function(s){
                                  var
                                   c1 = caml_string_get(s, i),
                                   switcher = width(c1) - 1 | 0;
                                  if(3 < switcher >>> 0){
                                   var raise = caml_pop_trap();
                                   return raise
   (caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1));
                                  }
                                  switch(switcher){
                                    case 1:
                                     var n2 = caml_string_get(s, i + 1 | 0);
                                     if(2 !== (n2 >>> 6 | 0)){
                                      var
                                       raise$3 = caml_pop_trap(),
                                       MalFormed$3 = caml_maybe_attach_backtrace(MalFormed, 1);
                                      return raise$3(MalFormed$3);
                                     }
                                     var c = (c1 & 31) << 6 | n2 & 63;
                                     break;
                                    case 2:
                                     var
                                      n2$0 = caml_string_get(s, i + 1 | 0),
                                      n3 = caml_string_get(s, i + 2 | 0),
                                      _L_ = 2 !== (n2$0 >>> 6 | 0) ? 1 : 0,
                                      _M_ = _L_ || (2 !== (n3 >>> 6 | 0) ? 1 : 0);
                                     if(_M_){
                                      var
                                       raise$1 = caml_pop_trap(),
                                       MalFormed$1 = caml_maybe_attach_backtrace(MalFormed, 1);
                                      return raise$1(MalFormed$1);
                                     }
                                     var
                                      p = (c1 & 15) << 12 | (n2$0 & 63) << 6 | n3 & 63,
                                      _N_ = 55296 <= p ? 1 : 0,
                                      _O_ = _N_ ? p <= 57088 ? 1 : 0 : _N_;
                                     if(_O_){
                                      var
                                       raise$2 = caml_pop_trap(),
                                       MalFormed$2 = caml_maybe_attach_backtrace(MalFormed, 1);
                                      return raise$2(MalFormed$2);
                                     }
                                     var c = p;
                                     break;
                                    case 3:
                                     var
                                      n2$1 = caml_string_get(s, i + 1 | 0),
                                      n3$0 = caml_string_get(s, i + 2 | 0),
                                      n4 = caml_string_get(s, i + 3 | 0),
                                      _P_ = 2 !== (n2$1 >>> 6 | 0) ? 1 : 0;
                                     if(_P_)
                                      var _Q_ = _P_;
                                     else
                                      var
                                       _R_ = 2 !== (n3$0 >>> 6 | 0) ? 1 : 0,
                                       _Q_ = _R_ || (2 !== (n4 >>> 6 | 0) ? 1 : 0);
                                     if(_Q_){
                                      var
                                       raise$0 = caml_pop_trap(),
                                       MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                                      return raise$0(MalFormed$0);
                                     }
                                     var
                                      c =
(c1 & 7) << 18 | (n2$1 & 63) << 12 | (n3$0 & 63) << 6
| n4 & 63;
                                     break;
                                    default: var c = c1;
                                  }
                                  return caml_cps_exact_call3
  (advance,
   t,
   w,
   function(_S_){return caml_cps_exact_call2(of_int, c, cont);});
                                 });
                       });
             },
             cont);
   }
   function from_gen$1(s, cont){
    function next_or_fail(param, cont){
     return caml_cps_call2
             (Gen[2],
              s,
              function(match){
               if(match){var x = match[1]; return cont(x);}
               var
                raise = caml_pop_trap(),
                MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
               return raise(MalFormed$0);
              });
    }
    return caml_cps_exact_call3
            (from_gen,
             [0, utf_8_byte_length],
             function(param, cont){
              function _D_(c1, cont){
               var switcher = width(c1) - 1 | 0;
               if(3 >= switcher >>> 0)
                switch(switcher){
                  case 0:
                   return caml_cps_call2(of_char, c1, cont);
                  case 1:
                   return caml_cps_exact_call2
                           (next_or_fail,
                            undef,
                            function(n2){
                             if(2 === (n2 >>> 6 | 0))
                              return caml_cps_exact_call2
                                      (of_int, (c1 & 31) << 6 | n2 & 63, cont);
                             var
                              raise = caml_pop_trap(),
                              MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                             return raise(MalFormed$0);
                            });
                  case 2:
                   return caml_cps_exact_call2
                           (next_or_fail,
                            undef,
                            function(n2){
                             return caml_cps_exact_call2
                                     (next_or_fail,
                                      undef,
                                      function(n3){
                                       var
_I_ = 2 !== (n2 >>> 6 | 0) ? 1 : 0,
_J_ = _I_ || (2 !== (n3 >>> 6 | 0) ? 1 : 0);
                                       if(! _J_)
return caml_cps_exact_call2
        (of_int, (c1 & 15) << 12 | (n2 & 63) << 6 | n3 & 63, cont);
                                       var
raise = caml_pop_trap(),
MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                                       return raise(MalFormed$0);
                                      });
                            });
                  default:
                   return caml_cps_exact_call2
                           (next_or_fail,
                            undef,
                            function(n2){
                             return caml_cps_exact_call2
                                     (next_or_fail,
                                      undef,
                                      function(n3){
                                       return caml_cps_exact_call2
       (next_or_fail,
        undef,
        function(n4){
         var _F_ = 2 !== (n2 >>> 6 | 0) ? 1 : 0;
         if(_F_)
          var _G_ = _F_;
         else
          var
           _H_ = 2 !== (n3 >>> 6 | 0) ? 1 : 0,
           _G_ = _H_ || (2 !== (n4 >>> 6 | 0) ? 1 : 0);
         if(! _G_)
          return caml_cps_exact_call2
                  (of_int,
                   (c1 & 7) << 18 | (n2 & 63) << 12 | (n3 & 63) << 6 | n4 & 63,
                   cont);
         var
          raise = caml_pop_trap(),
          MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
         return raise(MalFormed$0);
        });
                                      });
                            });
                }
               var
                raise = caml_pop_trap(),
                MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
               return raise(MalFormed$0);
              }
              return caml_cps_call2
                      (Gen[2],
                       s,
                       function(_E_){
                        return caml_cps_exact_call3(symbol_map, _E_, _D_, cont);
                       });
             },
             cont);
   }
   function from_string$0(s, cont){
    return caml_cps_call3
            (Gen[12],
             [0, caml_ml_string_length(s)],
             function(i, cont){return cont(caml_string_get(s, i));},
             function(_C_){
              return caml_cps_exact_call2(from_gen$1, _C_, cont);
             });
   }
   function sub_lexeme$1(lexbuf, pos, len, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             len * 4 | 0,
             function(buf){
              var
               apos = lexbuf[12] + pos | 0,
               a = lexbuf[3],
               _w_ = (apos + len | 0) - 1 | 0;
              function _y_(i){
               var _z_ = caml_check_bound(a, i)[1 + i];
               return caml_cps_call3
                       (Stdlib_Buffer[13],
                        buf,
                        _z_,
                        function(_A_){
                         var _B_ = i + 1 | 0;
                         return _w_ !== i ? caml_cps_exact_call1(_y_, _B_) : _x_();
                        });
              }
              function _x_(){
               return caml_cps_call2(Stdlib_Buffer[2], buf, cont);
              }
              return _w_ < apos ? _x_() : _y_(apos);
             });
   }
   function lexeme$1(lexbuf, cont){
    return caml_cps_exact_call4
            (sub_lexeme$1, lexbuf, 0, lexbuf[7] - lexbuf[12] | 0, cont);
   }
   function number_of_pair(bo, c1, c2){
    return bo ? (c1 << 8) + c2 | 0 : (c2 << 8) + c1 | 0;
   }
   function get_bo(bo, c1, c2){
    var match = bo[1];
    if(match){var o = match[1]; return o;}
    a:
    {if(255 === c1 && 254 === c2){var o$0 = 0; break a;} var o$0 = 1;}
    bo[1] = [0, o$0];
    return o$0;
   }
   function from_channel$1(ic, opt_bo, cont){
    var bo = [0, opt_bo];
    return caml_cps_exact_call6
            (make_from_channel,
             [0, utf_16_byte_length],
             ic,
             4,
             2,
             function(can_refill, t, cont){
              var
               n1 = get(t, 0),
               n2 = get(t, 1),
               o = get_bo(bo, n1, n2),
               w1 = number_of_pair(o, n1, n2);
              if(w1 === 65534){
               var raise = caml_pop_trap();
               return raise
                       (caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1));
              }
              if(55296 <= w1 && 57343 >= w1){
               if(56319 >= w1)
                return caml_cps_exact_call4
                        (ensure_bytes_available,
                         t,
                         can_refill,
                         4,
                         function(_s_){
                          var
                           n3 = get(t, 2),
                           n4 = get(t, 3),
                           w2 = number_of_pair(o, n3, n4),
                           _t_ = w2 < 56320 ? 1 : 0,
                           _u_ = _t_ || (57343 < w2 ? 1 : 0);
                          if(_u_){
                           var
                            raise = caml_pop_trap(),
                            MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                           return raise(MalFormed$0);
                          }
                          var upper10 = (w1 & 1023) << 10, lower10 = w2 & 1023;
                          return caml_cps_exact_call3
                                  (advance,
                                   t,
                                   4,
                                   function(_v_){
                                    return caml_cps_exact_call2
    (of_int, (65536 + upper10 | 0) + lower10 | 0, cont);
                                   });
                         });
               var
                raise$0 = caml_pop_trap(),
                MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
               return raise$0(MalFormed$0);
              }
              return caml_cps_exact_call3
                      (advance,
                       t,
                       2,
                       function(_r_){
                        return caml_cps_exact_call2(of_int, w1, cont);
                       });
             },
             cont);
   }
   function from_gen$2(s, opt_bo, cont){
    function next_or_fail(param, cont){
     return caml_cps_call2
             (Gen[2],
              s,
              function(match){
               if(match){var x = match[1]; return cont(x);}
               var
                raise = caml_pop_trap(),
                MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
               return raise(MalFormed$0);
              });
    }
    var bo = [0, opt_bo];
    return caml_cps_exact_call3
            (from_gen,
             [0, utf_16_byte_length],
             function(param, cont){
              function _n_(c1, cont){
               return caml_cps_exact_call2
                       (next_or_fail,
                        undef,
                        function(n2){
                         var o = get_bo(bo, c1, n2), w1 = number_of_pair(o, c1, n2);
                         if(w1 === 65534){
                          var raise = caml_pop_trap();
                          return raise
                                  (caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1));
                         }
                         if(55296 <= w1 && 57343 >= w1){
                          if(56319 >= w1)
                           return caml_cps_exact_call2
                                   (next_or_fail,
                                    undef,
                                    function(n3){
                                     return caml_cps_exact_call2
     (next_or_fail,
      undef,
      function(n4){
       var
        w2 = number_of_pair(o, n3, n4),
        _p_ = w2 < 56320 ? 1 : 0,
        _q_ = _p_ || (57343 < w2 ? 1 : 0);
       if(_q_){
        var
         raise = caml_pop_trap(),
         MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
        return raise(MalFormed$0);
       }
       var upper10 = (w1 & 1023) << 10, lower10 = w2 & 1023;
       return caml_cps_exact_call2
               (of_int, (65536 + upper10 | 0) + lower10 | 0, cont);
      });
                                    });
                          var
                           raise$0 = caml_pop_trap(),
                           MalFormed$0 = caml_maybe_attach_backtrace(MalFormed, 1);
                          return raise$0(MalFormed$0);
                         }
                         return caml_cps_exact_call2(of_int, w1, cont);
                        });
              }
              return caml_cps_call2
                      (Gen[2],
                       s,
                       function(_o_){
                        return caml_cps_exact_call3(symbol_map, _o_, _n_, cont);
                       });
             },
             cont);
   }
   function from_string$1(s, cont){
    return caml_cps_call3
            (Gen[12],
             [0, caml_ml_string_length(s)],
             function(i, cont){return cont(caml_string_get(s, i));},
             function(_l_){
              return cont
                      (function(_m_, cont){
                        return caml_cps_exact_call3(from_gen$2, _l_, _m_, cont);
                       });
             });
   }
   function sub_lexeme$2(lb, pos, len, bo, bom, cont){
    return caml_cps_call2
            (Stdlib_Buffer[1],
             (len * 4 | 0) + 2 | 0,
             function(buf){
              var apos = lb[12] + pos | 0, a = lb[3];
              function _c_(store){
               function _d_(_f_){
                var _g_ = (apos + len | 0) - 1 | 0;
                function _i_(i){
                 return caml_cps_call2
                         (store,
                          caml_check_bound(a, i)[1 + i],
                          function(_j_){
                           var _k_ = i + 1 | 0;
                           return _g_ !== i ? caml_cps_exact_call1(_i_, _k_) : _h_();
                          });
                }
                function _h_(){
                 return caml_cps_call2(Stdlib_Buffer[2], buf, cont);
                }
                return _g_ < apos ? _h_() : _i_(apos);
               }
               return bom
                       ? caml_cps_exact_call2
                         (of_int,
                          65279,
                          function(_e_){return caml_cps_call2(store, _e_, _d_);})
                       : _d_(0);
              }
              return bo
                      ? caml_cps_call2(Stdlib_Buffer[15], buf, _c_)
                      : caml_cps_call2(Stdlib_Buffer[14], buf, _c_);
             });
   }
   function lexeme$2(lb, bo, bom, cont){
    return caml_cps_exact_call6
            (sub_lexeme$2, lb, 0, lb[7] - lb[12] | 0, bo, bom, cont);
   }
   var
    Sedlexing =
      [0,
       InvalidCodepoint,
       MalFormed,
       create,
       set_position,
       set_filename,
       from_gen,
       from_int_array,
       from_uchar_array,
       lexeme_start,
       lexeme_bytes_start,
       lexeme_end,
       lexeme_bytes_end,
       loc,
       bytes_loc,
       lexeme_length,
       lexeme_bytes_length,
       lexing_positions,
       lexing_bytes_positions,
       new_line,
       lexeme,
       lexeme_char,
       sub_lexeme,
       rollback,
       start,
       next,
       private_next_int,
       mark,
       backtrack,
       with_tokenizer,
       [0,
        from_gen$0,
        from_channel,
        from_string,
        lexeme$0,
        sub_lexeme$0,
        lexeme_char$0],
       [0, from_gen$1, from_channel$0, from_string$0, lexeme$1, sub_lexeme$1],
       [0, from_gen$2, from_channel$1, from_string$1, lexeme$2, sub_lexeme$2]];
   runtime.caml_register_global(20, Sedlexing, "Sedlexing");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
