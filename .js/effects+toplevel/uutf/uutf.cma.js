// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Uutf
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Format, Stdlib__Printf, Stdlib__String, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_ISO_8859_1$0 = "ISO-8859-1",
    cst_US_ASCII$0 = "US-ASCII",
    cst_UTF_16$0 = "UTF-16",
    cst_UTF_16BE$0 = "UTF-16BE",
    cst_UTF_16LE$0 = "UTF-16LE",
    cst_UTF_8$0 = "UTF-8",
    cst_Await = "`Await",
    cst_End = "`End",
    cst_src_uutf_ml = "src/uutf.ml",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/uutf.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x18\xca\0\0\x05e\0\0\x13\xdb\0\0\x13l\xa0$Uutf\xa0\xb0\xa0%u_bom\x01\x02s\xd0\xc0\xb3\xa1\xa1\x90\x92&Stdlib%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x8f@\xb0\xc0,src/uutf.mli`\x01\x05$\x01\x05$\xc0\x04\x02`\x01\x05$\x01\x057@@\xa1\x04\x15@@\xa0\xb0\xa0%u_rep\x01\x02t\xd0\xc0\xb3\xa1\xa1\x04\x14%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x90@\xb0\xc0\x04\x11e\x01\x05\xda\x01\x05\xda\xc0\x04\x12e\x01\x05\xda\x01\x05\xed@@\xa1\x04%A@\xa0\xc1\xa0(encoding\x01\x02u\b\0\0;\0@@@A\x90\xc0\x98\xd0\xa0\xa0%UTF_8\x90@\xa0\xa0&UTF_16\x90@\xa0\xa0(UTF_16BE\x90@\xa0\xa0(UTF_16LE\x90@@\xc0@\x02\x05\xf5\xe1\0@\0\x91A@@\x02\x05\xf5\xe1\0@\0\x92@@@@\xb0\xc0\x04/n\x01\x06\xbe\x01\x06\xbe\xc0\x040n\x01\x06\xbe\x01\x06\xfa@@A@\xa1\x04CBA@\xa0\xc1\xa00decoder_encoding\x01\x02v\b\0\0;\0@@@A\x90\xc0\x98\xd0\xa0\xa0(US_ASCII\x90@\xa0\xa0\x04\"\x90@\xa0\xa0\x04!\x90@\xa0\xa0\x04 \x90@\xa0\xa0\x04\x1f\x90@\xa0\xa0*ISO_8859_1\x90@@\xc0@\x02\x05\xf5\xe1\0@\0\x93A@@\x02\x05\xf5\xe1\0@\0\x94@@@@\xb0\xc0\x04Qs\x01\x07m\x01\x07m\xc0\x04Rs\x01\x07m\x01\x07\xab@@A@\xa1\x04eCA@\xa0\xb0\xa02encoding_of_string\x01\x02w\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\x95\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\x90\x046@\x90@\x02\x05\xf5\xe1\0@\0\x96@\x90@\x02\x05\xf5\xe1\0@\0\x97@\x02\x05\xf5\xe1\0@\0\x98@\xb0\xc0\x04my\x01\b\xaa\x01\b\xaa\xc0\x04ny\x01\b\xaa\x01\b\xe4@@\xa1\x04\x81D@\xa0\xb0\xa02encoding_to_string\x01\x02x\xd0\xc0\xc1@\xc0\x98\xd0\xa0\xa0\x04?\xc1A@@\x90A\xa0\xa0\x04a\xc1A@@\x90A\xa0\xa0\x04a\xc1A@@\x90A\xa0\xa0\x04a\xc1A@@\x90A\xa0\xa0\x04a\xc1A@@\x90A\xa0\xa0\x04C\xc1A@@\x90A@\xc0\x90@\x02\x05\xf5\xe1\0@\0\x99A@\x90\xa0\x04-@\x02\x05\xf5\xe1\0@\0\x9a\xc0\xb3\x90\x04;@\x90@\x02\x05\xf5\xe1\0@\0\x9b@\x02\x05\xf5\xe1\0@\0\x9c@\xb0\xc0\x04\x9b~\x01\t\x85\x01\t\x85\xc0\x04\x9c~\x01\t\x85\x01\t\xbc@@\xa1\x04\xafE@\xa0\xc1\xa0#src\x01\x02y\b\0\0;\0@@@A\x90\xc0\x98\xd0\xa0\xa0'Channel\x90\x90\xc0\xb3\xa1\x04\xb6*in_channel@\x90@\x02\x05\xf5\xe1\0@\0\x9e\xa0\xa0&String\x90\x90\xc0\xb3\x90\x04[@\x90@\x02\x05\xf5\xe1\0@\0\x9d\xa0\xa0&Manual\x90@@\xc0@\x02\x05\xf5\xe1\0@\0\x9fA@@\x02\x05\xf5\xe1\0@\0\xa0@@@@\xb0\xc0\x04\xc0\0E\x01\nW\x01\nW\xc0\x04\xc1\0E\x01\nW\x01\n\x9a@@@@\xa1\x04\xd4FA@\xa0\xc1\xa0#nln\x01\x02z\b\0\0;\0@@@A\x90\xc0\x98\xd0\xa0\xa0#NLF\x90\x90\xc0\xb3\xa1\xa1\x04\xdc%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xa3\xa0\xa0(Readline\x90\x90\xc0\xb3\xa1\xa1\x04\xe8%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xa2\xa0\xa0%ASCII\x90\x90\xc0\xb3\xa1\xa1\x04\xf4%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xa1@\xc0@\x02\x05\xf5\xe1\0@\0\xa4A@@\x02\x05\xf5\xe1\0@\0\xa5@@@@\xb0\xc0\x04\xf2\0I\x01\x0b\r\x01\x0b\r\xc0\x04\xf3\0I\x01\x0b\r\x01\x0bV@@@@\xa1\x05\x01\x06GA@\xa0\xc1\xa0'decoder\x01\x02{\b\0\0;\0@@@A@@@@@\xb0\xc0\x04\xfb\0Y\x01\x0e/\x01\x0e/\xc0\x04\xfc\0Y\x01\x0e/\x01\x0e;@@@@\xa1\x05\x01\x0fHA@\xa0\xb0\xa0'decoder\x01\x02|\xd0\xc0\xc1\x91#nln\xc0\xb3\x90\x04\xa6\xa0\xc0\x98\xd0\xa0\xa0\x04B\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x01\x1d\x04A\x04@@\x90@\x02\x05\xf5\xe1\0@\0\xa8@@\x90A\xa0\xa0\x04@\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x01'\x04?\x04>@\x90@\x02\x05\xf5\xe1\0@\0\xa7@@\x90A\xa0\xa0\x04>\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x011\x04=\x04<@\x90@\x02\x05\xf5\xe1\0@\0\xa6@@\x90A@\xc0\x04\x9a\x02\x05\xf5\xe1\0@\0\xa9A@\x90\xa0\x90\x04k@\x02\x05\xf5\xe1\0@\0\xaa@\x90@\x02\x05\xf5\xe1\0@\0\xab\xc0\xc1\x91(encoding\xc0\xb3\x04.\xa0\xc0\x98\xd0\xa0\xa0\x05\x01\0\xc1A@@\x90A\xa0\xa0\x05\x01\"\xc1A@@\x90A\xa0\xa0\x05\x01\"\xc1A@@\x90A\xa0\xa0\x05\x01\"\xc1A@@\x90A\xa0\xa0\x05\x01\"\xc1A@@\x90A\xa0\xa0\x05\x01\x04\xc1A@@\x90A@\xc0\x04\xc1\x02\x05\xf5\xe1\0@\0\xacA@\x90\xa0\x04\xed@\x02\x05\xf5\xe1\0@\0\xad@\x90@\x02\x05\xf5\xe1\0@\0\xae\xc0\xc1@\xc0\x98\xd0\xa0\xa0\x04\xb5\xc1@\xa0\xc0\xb3\xa1\x05\x01j\x04\xb4@\x90@\x02\x05\xf5\xe1\0@\0\xb0@@\x90A\xa0\xa0\x04\xb4\xc1@\xa0\xc0\xb3\x04\xb3@\x90@\x02\x05\xf5\xe1\0@\0\xaf@@\x90A\xa0\xa0\x04\xb3\xc1A@@\x90A@\xc0\x04\xdf\x02\x05\xf5\xe1\0@\0\xb1A@\x90\xa0\x90\x04\xd5@\x02\x05\xf5\xe1\0@\0\xb2\xc0\xb3\x90\x04\x81@\x90@\x02\x05\xf5\xe1\0@\0\xb3@\x02\x05\xf5\xe1\0@\0\xb4@\x02\x05\xf5\xe1\0@\0\xb5@\x02\x05\xf5\xe1\0@\0\xb6@\xb0\xc0\x05\x01z\0\\\x01\x0e[\x01\x0e[\xc0\x05\x01{\0]\x01\x0e\xa6\x01\x0e\xaf@@\xa1\x05\x01\x8eI@\xa0\xb0\xa0&decode\x01\x02}\xd0\xc0\xc1@\xc0\xb3\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\0\xb7\xc0\x98\xd0\xa0\xa0)Malformed\x90\x90\xc0\xb3\x90\x05\x014@\x90@\x02\x05\xf5\xe1\0@\0\xb9\xa0\xa0#End\x90@\xa0\xa0%Await\x90@\xa0\xa0%Uchar\x90\x90\xc0\xb3\xa1\xa1\x05\x01\xab%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xb8@\xc0@\x02\x05\xf5\xe1\0@\0\xbaA@@\x02\x05\xf5\xe1\0@\0\xbb@\x02\x05\xf5\xe1\0@\0\xbc@\xb0\xc0\x05\x01\xa9\x01\0\xb0\x01\x1e\xf8\x01\x1e\xf8\xc0\x05\x01\xaa\x01\0\xb1\x01\x1f\x10\x01\x1fM@@\xa1\x05\x01\xbdJ@\xa0\xb0\xa00decoder_encoding\x01\x02~\xd0\xc0\xc1@\xc0\xb3\x04>@\x90@\x02\x05\xf5\xe1\0@\0\xbd\xc0\xb3\x05\x01O@\x90@\x02\x05\xf5\xe1\0@\0\xbe@\x02\x05\xf5\xe1\0@\0\xbf@\xb0\xc0\x05\x01\xba\x01\0\xc2\x01\"}\x01\"}\xc0\x05\x01\xbb\x01\0\xc2\x01\"}\x01\"\xaf@@\xa1\x05\x01\xceK@\xa0\xb0\xa04set_decoder_encoding\x01\x02\x7f\xd0\xc0\xc1@\xc0\xb3\x04O@\x90@\x02\x05\xf5\xe1\0@\0\xc0\xc0\xc1@\xc0\x98\xd0\xa0\xa0\x05\x01\x91\xc1A@@\x90A\xa0\xa0\x05\x01\xb3\xc1A@@\x90A\xa0\xa0\x05\x01\xb3\xc1A@@\x90A\xa0\xa0\x05\x01\xb3\xc1A@@\x90A\xa0\xa0\x05\x01\xb3\xc1A@@\x90A\xa0\xa0\x05\x01\x95\xc1A@@\x90A@\xc0\x05\x01R\x02\x05\xf5\xe1\0@\0\xc1A@\x90\xa0\x05\x01~@\x02\x05\xf5\xe1\0@\0\xc2\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xc3@\x02\x05\xf5\xe1\0@\0\xc4@\x02\x05\xf5\xe1\0@\0\xc5@\xb0\xc0\x05\x01\xee\x01\0\xcd\x01$\n\x01$\n\xc0\x05\x01\xef\x01\0\xcd\x01$\n\x01$L@@\xa1\x05\x02\x02L@\xa0\xb0\xa0,decoder_line\x01\x02\x80\xd0\xc0\xc1@\xc0\xb3\x04\x83@\x90@\x02\x05\xf5\xe1\0@\0\xc6\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\0\xc7@\x02\x05\xf5\xe1\0@\0\xc8@\xb0\xc0\x05\x02\x02\x01\0\xd7\x01%\x9c\x01%\x9c\xc0\x05\x02\x03\x01\0\xd7\x01%\x9c\x01%\xbd@@\xa1\x05\x02\x16M@\xa0\xb0\xa0+decoder_col\x01\x02\x81\xd0\xc0\xc1@\xc0\xb3\x04\x97@\x90@\x02\x05\xf5\xe1\0@\0\xc9\xc0\xb3\x90\x04\x14@\x90@\x02\x05\xf5\xe1\0@\0\xca@\x02\x05\xf5\xe1\0@\0\xcb@\xb0\xc0\x05\x02\x14\x01\0\xdb\x01&<\x01&<\xc0\x05\x02\x15\x01\0\xdb\x01&<\x01&\\@@\xa1\x05\x02(N@\xa0\xb0\xa02decoder_byte_count\x01\x02\x82\xd0\xc0\xc1@\xc0\xb3\x04\xa9@\x90@\x02\x05\xf5\xe1\0@\0\xcc\xc0\xb3\x90\x04&@\x90@\x02\x05\xf5\xe1\0@\0\xcd@\x02\x05\xf5\xe1\0@\0\xce@\xb0\xc0\x05\x02&\x01\0\xdf\x01&\xdc\x01&\xdc\xc0\x05\x02'\x01\0\xdf\x01&\xdc\x01'\x03@@\xa1\x05\x02:O@\xa0\xb0\xa0-decoder_count\x01\x02\x83\xd0\xc0\xc1@\xc0\xb3\x04\xbb@\x90@\x02\x05\xf5\xe1\0@\0\xcf\xc0\xb3\x90\x048@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\xb0\xc0\x05\x028\x01\0\xe4\x01'\xd1\x01'\xd1\xc0\x05\x029\x01\0\xe4\x01'\xd1\x01'\xf3@@\xa1\x05\x02LP@\xa0\xb0\xa03decoder_removed_bom\x01\x02\x84\xd0\xc0\xc1@\xc0\xb3\x04\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xd2\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xd3@\x02\x05\xf5\xe1\0@\0\xd4@\xb0\xc0\x05\x02L\x01\0\xe8\x01(\x81\x01(\x81\xc0\x05\x02M\x01\0\xe8\x01(\x81\x01(\xaa@@\xa1\x05\x02`Q@\xa0\xb0\xa0+decoder_src\x01\x02\x85\xd0\xc0\xc1@\xc0\xb3\x04\xe1@\x90@\x02\x05\xf5\xe1\0@\0\xd5\xc0\xb3\x04\xe7@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x02\x05\xf5\xe1\0@\0\xd7@\xb0\xc0\x05\x02]\x01\0\xed\x01)h\x01)h\xc0\x05\x02^\x01\0\xed\x01)h\x01)\x88@@\xa1\x05\x02qR@\xa0\xb0\xa0+decoder_nln\x01\x02\x86\xd0\xc0\xc1@\xc0\xb3\x04\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xd8\xc0\xb3\x90\x05\x02\t\xa0\xc0\xb3\x05\x01A@\x90@\x02\x05\xf5\xe1\0@\0\xd9@\x90@\x02\x05\xf5\xe1\0@\0\xda@\x02\x05\xf5\xe1\0@\0\xdb@\xb0\xc0\x05\x02s\x01\0\xf0\x01)\xb8\x01)\xb8\xc0\x05\x02t\x01\0\xf0\x01)\xb8\x01)\xdf@@\xa1\x05\x02\x87S@\xa0\xb0\xa0)pp_decode\x01\x02\x87\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x02\x88&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xdc\xc0\xc1@\xc0\x98\xd0\xa0\xa0)Malformed\xc1@\xa0\xc0\xb3\x90\x05\x023@\x90@\x02\x05\xf5\xe1\0@\0\xde@@\x90A\xa0\xa0#End\xc1A@@\x90A\xa0\xa0%Await\xc1A@@\x90A\xa0\xa0%Uchar\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x02\xad%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xdd@@\x90A@\xc0\x05\x02\x18\x02\x05\xf5\xe1\0@\0\xdfA@@\x02\x05\xf5\xe1\0@\0\xe0\xc0\xb3\x90\x04\xc4@\x90@\x02\x05\xf5\xe1\0@\0\xe1@\x02\x05\xf5\xe1\0@\0\xe2@\x02\x05\xf5\xe1\0@\0\xe3@\xb0\xc0\x05\x02\xb0\x01\0\xf3\x01*&\x01*&\xc0\x05\x02\xb1\x01\0\xf4\x01*J\x01*\x90@@\xa1\x05\x02\xc4T@\xa0\xc1\xa0#dst\x01\x02\x88\b\0\0;\0@@@A\x90\xc0\x98\xd0\xa0\xa0'Channel\x90\x90\xc0\xb3\xa1\x05\x02\xcb+out_channel@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xa0\xa0&Buffer\x90\x90\xc0\xb3\xa1\xa1\x05\x02\xd6&Buffer!t@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xa0\xa0&Manual\x90@@\xc0@\x02\x05\xf5\xe1\0@\0\xe6A@@\x02\x05\xf5\xe1\0@\0\xe7@@@@\xb0\xc0\x05\x02\xd8\x01\0\xfa\x01*\xff\x01*\xff\xc0\x05\x02\xd9\x01\0\xfa\x01*\xff\x01+E@@@@\xa1\x05\x02\xecUA@\xa0\xc1\xa0'encoder\x01\x02\x89\b\0\0;\0@@@A@@@@@\xb0\xc0\x05\x02\xe1\x01\0\xfe\x01+\xcc\x01+\xcc\xc0\x05\x02\xe2\x01\0\xfe\x01+\xcc\x01+\xd8@@@@\xa1\x05\x02\xf5VA@\xa0\xb0\xa0'encoder\x01\x02\x8a\xd0\xc0\xc1@\xc0\x98\xd0\xa0\xa0\x05\x02\xd1\xc1A@@\x90A\xa0\xa0\x05\x02\xd1\xc1A@@\x90A\xa0\xa0\x05\x02\xd1\xc1A@@\x90A\xa0\xa0\x05\x02\xd1\xc1A@@\x90A@\xc0\x05\x02l\x02\x05\xf5\xe1\0@\0\xe8A@\x90\xa0\x90\x05\x02\xec@\x02\x05\xf5\xe1\0@\0\xe9\xc0\xc1@\xc0\x98\xd0\xa0\xa0\x04K\xc1@\xa0\xc0\xb3\xa1\x05\x03\x15\x04J@\x90@\x02\x05\xf5\xe1\0@\0\xeb@@\x90A\xa0\xa0\x04J\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x03\x1f\x04I\x04H@\x90@\x02\x05\xf5\xe1\0@\0\xea@@\x90A\xa0\xa0\x04H\xc1A@@\x90A@\xc0\x05\x02\x8c\x02\x05\xf5\xe1\0@\0\xecA@\x90\xa0\x90\x04m@\x02\x05\xf5\xe1\0@\0\xed\xc0\xb3\x90\x04H@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\x02\x05\xf5\xe1\0@\0\xf0@\xb0\xc0\x05\x03'\x01\x01\x01\x01,\0\x01,\0\xc0\x05\x03(\x01\x01\x01\x01,\0\x01,0@@\xa1\x05\x03;W@\xa0\xb0\xa0&encode\x01\x02\x8b\xd0\xc0\xc1@\xc0\xb3\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xc1@\xc0\x98\xd0\xa0\xa0#End\xc1A@@\x90A\xa0\xa0%Await\xc1A@@\x90A\xa0\xa0%Uchar\xc1@\xa0\xc0\xb3\xa1\xa1\x05\x03S%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xf2@@\x90A@\xc0\x05\x02\xbe\x02\x05\xf5\xe1\0@\0\xf3A@@\x02\x05\xf5\xe1\0@\0\xf4\xc0\x98\xd0\xa0\xa0'Partial\x90@\xa0\xa0\"Ok\x90@@\xc0@\x02\x05\xf5\xe1\0@\0\xf5A@@\x02\x05\xf5\xe1\0@\0\xf6@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\xb0\xc0\x05\x03^\x01\x01\t\x01-\x17\x01-\x17\xc0\x05\x03_\x01\x01\n\x01-$\x01-k@@\xa1\x05\x03rX@\xa0\xb0\xa00encoder_encoding\x01\x02\x8c\xd0\xc0\xc1@\xc0\xb3\x04F@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xc0\xb3\x04l@\x90@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\xb0\xc0\x05\x03o\x01\x01\x1b\x010A\x010A\xc0\x05\x03p\x01\x01\x1b\x010A\x010k@@\xa1\x05\x03\x83Y@\xa0\xb0\xa0+encoder_dst\x01\x02\x8d\xd0\xc0\xc1@\xc0\xb3\x04W@\x90@\x02\x05\xf5\xe1\0@\0\xfc\xc0\xb3\x04]@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x03\x80\x01\x01\x1e\x010\x9c\x010\x9c\xc0\x05\x03\x81\x01\x01\x1e\x010\x9c\x010\xbc@@\xa1\x05\x03\x94Z@\xa0\xd3\xa0&Manual\x01\x02\x8e@\xc0\x91\xa0\xb0\xa0#src\x01\x02\x91\xd0\xc0\xc1@\xc0\xb3\x05\x02\x1b@\x90@\x02\x05\xf5\xe1\0@\x01\xffz\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x03\xa0%Bytes!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff{\xc0\xc1@\xc0\xb3\x90\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\x01\xff|\xc0\xc1@\xc0\xb3\x90\x05\x01\xa9@\x90@\x02\x05\xf5\xe1\0@\x01\xff}\xc0\xb3\x90\x05\x01\xc1@\x90@\x02\x05\xf5\xe1\0@\x01\xff~@\x02\x05\xf5\xe1\0@\x01\xff\x7f@\x02\x05\xf5\xe1\0@\0\x80@\x02\x05\xf5\xe1\0@\0\x81@\x02\x05\xf5\xe1\0@\0\x82@\xb0\xc0\x05\x03\xad\x01\x01'\x011\xa2\x011\xa4\xc0\x05\x03\xae\x01\x01'\x011\xa2\x011\xd6@@\xa1\x05\x03\xc1[@\xa0\xb0\xa0#dst\x01\x02\x92\xd0\xc0\xc1@\xc0\xb3\x04\x95@\x90@\x02\x05\xf5\xe1\0@\0\x83\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x03\xc7%Bytes!t@\x90@\x02\x05\xf5\xe1\0@\0\x84\xc0\xc1@\xc0\xb3\x90\x05\x01\xca@\x90@\x02\x05\xf5\xe1\0@\0\x85\xc0\xc1@\xc0\xb3\x90\x05\x01\xd0@\x90@\x02\x05\xf5\xe1\0@\0\x86\xc0\xb3\x90\x05\x01\xe8@\x90@\x02\x05\xf5\xe1\0@\0\x87@\x02\x05\xf5\xe1\0@\0\x88@\x02\x05\xf5\xe1\0@\0\x89@\x02\x05\xf5\xe1\0@\0\x8a@\x02\x05\xf5\xe1\0@\0\x8b@\xb0\xc0\x05\x03\xd4\x01\x01-\x012\xd0\x012\xd2\xc0\x05\x03\xd5\x01\x01-\x012\xd0\x013\x04@@\xa1\x05\x03\xe8\\@\xa0\xb0\xa0'dst_rem\x01\x02\x93\xd0\xc0\xc1@\xc0\xb3\x04\xbc@\x90@\x02\x05\xf5\xe1\0@\0\x8c\xc0\xb3\x90\x05\x01\xe6@\x90@\x02\x05\xf5\xe1\0@\0\x8d@\x02\x05\xf5\xe1\0@\0\x8e@\xb0\xc0\x05\x03\xe6\x01\x013\x014\x17\x014\x19\xc0\x05\x03\xe7\x01\x013\x014\x17\x0145@@\xa1\x05\x03\xfa]@@@\xb0\xc0\x05\x03\xea\x01\x01&\x011\x8e\x011\x8e\xc0\x05\x03\xeb\x01\x016\x014\xb4\x014\xb7@\xa1\x05\x03\xfe^@@\xa0\xd3\xa0&String\x01\x02\x8f@\xc0\x91\xa0\xb0\xa0.encoding_guess\x01\x02\x94\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\x9f@\x90@\x02\x05\xf5\xe1\0@\x01\xffG\xc0\x92\xa0\xc0\x98\xd0\xa0\xa0%UTF_8\x90@\xa0\xa0(UTF_16BE\x90@\xa0\xa0(UTF_16LE\x90@@\xc0@\x02\x05\xf5\xe1\0@\x01\xffIA@@\x02\x05\xf5\xe1\0@\x01\xffJ\xa0\xc0\xb3\x90\x05\x01\xcd@\x90@\x02\x05\xf5\xe1\0@\x01\xffH@\x02\x05\xf5\xe1\0@\x01\xffK@\x02\x05\xf5\xe1\0@\x01\xffL@\xb0\xc0\x05\x04\x17\x01\x01B\x015\xe1\x015\xe3\xc0\x05\x04\x18\x01\x01B\x015\xe1\x016+@@\xa1\x05\x04+_@\xa0\xc1\xa0&folder\x01\x02\x95\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffR@A@A\x90\xc0\xc1@\x04\x07\xc0\xc1@\xc0\xb3\x90\x05\x02.@\x90@\x02\x05\xf5\xe1\0@\x01\xffM\xc0\xc1@\xc0\x98\xd0\xa0\xa0)Malformed\x90\x90\xc0\xb3\x90\x05\x03\xdc@\x90@\x02\x05\xf5\xe1\0@\x01\xffO\xa0\xa0%Uchar\x90\x90\xc0\xb3\xa1\xa1\x05\x04K%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffN@\xc0@\x02\x05\xf5\xe1\0@\x01\xffPA@@\x02\x05\xf5\xe1\0@\x01\xffQ\x04(@\x02\x05\xf5\xe1\0@\x01\xffS@\x02\x05\xf5\xe1\0@\x01\xffT@\x02\x05\xf5\xe1\0@\x01\xffU\xa0\x7f@\xa0@@@@\xb0\xc0\x05\x04K\x01\x01L\x017X\x017Z\xc0\x05\x04L\x01\x01M\x017\xa8\x017\xae@@@@\xa1\x05\x04_`A@\xa0\xb0\xa0*fold_utf_8\x01\x02\x96\xd0\xc0\xc1\x91#pos\xc0\xb3\x05\x03P\xa0\xc0\xb3\x90\x05\x02_@\x90@\x02\x05\xf5\xe1\0@\x01\xffV@\x90@\x02\x05\xf5\xe1\0@\x01\xffW\xc0\xc1\x91#len\xc0\xb3\x05\x03\\\xa0\xc0\xb3\x90\x05\x02k@\x90@\x02\x05\xf5\xe1\0@\x01\xffX@\x90@\x02\x05\xf5\xe1\0@\x01\xffY\xc0\xc1@\xc0\xb3\x90\x04T\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xff\\@\x90@\x02\x05\xf5\xe1\0@\x01\xffZ\xc0\xc1@\x04\x07\xc0\xc1@\xc0\xb3\x90\x05\x04\x1f@\x90@\x02\x05\xf5\xe1\0@\x01\xff[\x04\r@\x02\x05\xf5\xe1\0@\x01\xff]@\x02\x05\xf5\xe1\0@\x01\xff^@\x02\x05\xf5\xe1\0@\x01\xff_@\x02\x05\xf5\xe1\0@\x01\xff`@\x02\x05\xf5\xe1\0@\x01\xffa@\xb0\xc0\x05\x04\x7f\x01\x01Q\x0181\x0183\xc0\x05\x04\x80\x01\x01Q\x0181\x018{@@\xa1\x05\x04\x93a@\xa0\xb0\xa0-fold_utf_16be\x01\x02\x97\xd0\xc0\xc1\x91#pos\xc0\xb3\x05\x03\x84\xa0\xc0\xb3\x90\x05\x02\x93@\x90@\x02\x05\xf5\xe1\0@\x01\xffb@\x90@\x02\x05\xf5\xe1\0@\x01\xffc\xc0\xc1\x91#len\xc0\xb3\x05\x03\x90\xa0\xc0\xb3\x90\x05\x02\x9f@\x90@\x02\x05\xf5\xe1\0@\x01\xffd@\x90@\x02\x05\xf5\xe1\0@\x01\xffe\xc0\xc1@\xc0\xb3\x044\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffh@\x90@\x02\x05\xf5\xe1\0@\x01\xfff\xc0\xc1@\x04\x07\xc0\xc1@\xc0\xb3\x90\x05\x04R@\x90@\x02\x05\xf5\xe1\0@\x01\xffg\x04\r@\x02\x05\xf5\xe1\0@\x01\xffi@\x02\x05\xf5\xe1\0@\x01\xffj@\x02\x05\xf5\xe1\0@\x01\xffk@\x02\x05\xf5\xe1\0@\x01\xffl@\x02\x05\xf5\xe1\0@\x01\xffm@\xb0\xc0\x05\x04\xb2\x01\x01Z\x019\xea\x019\xec\xc0\x05\x04\xb3\x01\x01Z\x019\xea\x01:7@@\xa1\x05\x04\xc6b@\xa0\xb0\xa0-fold_utf_16le\x01\x02\x98\xd0\xc0\xc1\x91#pos\xc0\xb3\x05\x03\xb7\xa0\xc0\xb3\x90\x05\x02\xc6@\x90@\x02\x05\xf5\xe1\0@\x01\xffn@\x90@\x02\x05\xf5\xe1\0@\x01\xffo\xc0\xc1\x91#len\xc0\xb3\x05\x03\xc3\xa0\xc0\xb3\x90\x05\x02\xd2@\x90@\x02\x05\xf5\xe1\0@\x01\xffp@\x90@\x02\x05\xf5\xe1\0@\x01\xffq\xc0\xc1@\xc0\xb3\x04g\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfft@\x90@\x02\x05\xf5\xe1\0@\x01\xffr\xc0\xc1@\x04\x07\xc0\xc1@\xc0\xb3\x90\x05\x04\x85@\x90@\x02\x05\xf5\xe1\0@\x01\xffs\x04\r@\x02\x05\xf5\xe1\0@\x01\xffu@\x02\x05\xf5\xe1\0@\x01\xffv@\x02\x05\xf5\xe1\0@\x01\xffw@\x02\x05\xf5\xe1\0@\x01\xffx@\x02\x05\xf5\xe1\0@\x01\xffy@\xb0\xc0\x05\x04\xe5\x01\x01c\x01;\xa9\x01;\xab\xc0\x05\x04\xe6\x01\x01c\x01;\xa9\x01;\xf6@@\xa1\x05\x04\xf9c@@@\xb0\xc0\x05\x04\xe9\x01\x01>\x015\xb1\x015\xb1\xc0\x05\x04\xea\x01\x01k\x01=g\x01=j@\xa1\x05\x04\xfdd@@\xa0\xd3\xa0&Buffer\x01\x02\x90@\xc0\x91\xa0\xb0\xa0)add_utf_8\x01\x02\x99\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05\x04&Buffer!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff8\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05\r%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff9\xc0\xb3\x90\x05\x03\"@\x90@\x02\x05\xf5\xe1\0@\x01\xff:@\x02\x05\xf5\xe1\0@\x01\xff;@\x02\x05\xf5\xe1\0@\x01\xff<@\xb0\xc0\x05\x05\x0e\x01\x01u\x01>Z\x01>\\\xc0\x05\x05\x0f\x01\x01u\x01>Z\x01>\x87@@\xa1\x05\x05\"e@\xa0\xb0\xa0,add_utf_16be\x01\x02\x9a\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05#&Buffer!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff=\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05,%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff>\xc0\xb3\x90\x05\x03A@\x90@\x02\x05\xf5\xe1\0@\x01\xff?@\x02\x05\xf5\xe1\0@\x01\xff@@\x02\x05\xf5\xe1\0@\x01\xffA@\xb0\xc0\x05\x05-\x01\x01x\x01>\xc9\x01>\xcb\xc0\x05\x05.\x01\x01x\x01>\xc9\x01>\xf9@@\xa1\x05\x05Af@\xa0\xb0\xa0,add_utf_16le\x01\x02\x9b\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05B&Buffer!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffB\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05K%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffC\xc0\xb3\x90\x05\x03`@\x90@\x02\x05\xf5\xe1\0@\x01\xffD@\x02\x05\xf5\xe1\0@\x01\xffE@\x02\x05\xf5\xe1\0@\x01\xffF@\xb0\xc0\x05\x05L\x01\x01{\x01?A\x01?C\xc0\x05\x05M\x01\x01{\x01?A\x01?q@@\xa1\x05\x05`g@@@\xb0\xc0\x05\x05P\x01\x01q\x01>'\x01>'\xc0\x05\x05Q\x01\x01}\x01?\xb8\x01?\xbb@\xa1\x05\x05dh@@@\x84\x95\xa6\xbe\0\0\x01R\0\0\x002\0\0\0\xbc\0\0\0\x96\xa0\xa0$Uutf\x900\xbf<\xc8\xa1\xd5Z\xbfe,\xe4zBN\x05\b\xf3\xa0\xa0-Stdlib__Uchar\x900\x9e\xa8d\bP\x95\x97\fs\xb7\xb1|&\xc3s\x17\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0.Stdlib__Format\x900\xe78P\x10\xd0\xd6\xa0\xbb\xd4\x19\x1b\xc7TmE\x8a\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0.Stdlib__Domain\x900\xa9\xe9\xc7(\xd3w\xf5\x93fw2\xdc\x02o \x13\xa0\xa0-Stdlib__Bytes\x900\xb0\xd2\xa0\x02~rx\xe2j\x1f\xe4\xbc\x0ey\xa6\x90\xa0\xa0.Stdlib__Buffer\x900\x12\xb9D\xb4\xb2\x917Q\xcde\xbd\xc68\x97]M\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    pp = Stdlib_Format[135],
    _a_ =
      [0,
       [11,
        "invalid bounds (index ",
        [4, 0, 0, 0, [11, ", length ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "invalid bounds (index %d, length %d)"];
   function invalid_bounds(j, l, cont){
    return caml_cps_call4
            (Stdlib_Printf[4],
             _a_,
             j,
             l,
             function(_bS_){return caml_cps_call2(Stdlib[1], _bS_, cont);});
   }
   function unsafe_set_byte(s, j, byte$0){
    runtime.caml_bytes_unsafe_set(s, j, byte$0);
    return;
   }
   var
    u_bom = caml_callback(Stdlib_Uchar[9], [65279]),
    u_rep = caml_callback(Stdlib_Uchar[9], [65533]),
    _b_ = [0, 684370880],
    _c_ = [0, -211555818],
    _d_ = [0, -211558048],
    _e_ = [0, 143365725],
    _f_ = [0, 423112016],
    _g_ = [0, 338302576],
    cst_UTF_8 = cst_UTF_8$0,
    cst_US_ASCII = cst_US_ASCII$0,
    cst_ISO_8859_1 = cst_ISO_8859_1$0,
    cst_UTF_16 = cst_UTF_16$0,
    cst_UTF_16LE = cst_UTF_16LE$0,
    cst_UTF_16BE = cst_UTF_16BE$0;
   function encoding_of_string(s, cont){
    return caml_cps_call2
            (Stdlib_String[25],
             s,
             function(match){
              var _bQ_ = caml_string_compare(match, "ISO646-US");
              a:
              {
               b:
               {
                if(0 <= _bQ_){
                 if(0 >= _bQ_) break b;
                 var switch$0 = caml_string_compare(match, "US");
                 if(0 <= switch$0){
                  if(0 >= switch$0) break b;
                  if(! caml_string_notequal(match, cst_US_ASCII$0)) break b;
                  if(! caml_string_notequal(match, cst_UTF_16$0))
                   return cont(_e_);
                  if(! caml_string_notequal(match, cst_UTF_16BE$0))
                   return cont(_d_);
                  if(! caml_string_notequal(match, cst_UTF_16LE$0))
                   return cont(_c_);
                  if(caml_string_notequal(match, cst_UTF_8$0)) break a;
                  return cont(_b_);
                 }
                 if(! caml_string_notequal(match, "ISO_646.IRV:1991"))
                  break b;
                 if
                  (caml_string_notequal(match, "ISO_8859-1")
                   &&
                    caml_string_notequal(match, "ISO_8859-1:1987")
                    &&
                     caml_string_notequal(match, "L1")
                     && caml_string_notequal(match, "LATIN1"))
                  break a;
                }
                else{
                 var _bR_ = caml_string_compare(match, "CSISOLATIN1");
                 if(0 <= _bR_){
                  if(0 < _bR_){
                   if(! caml_string_notequal(match, "IBM367")) break b;
                   if
                    (caml_string_notequal(match, "IBM819")
                     &&
                      caml_string_notequal(match, cst_ISO_8859_1$0)
                      && caml_string_notequal(match, "ISO-IR-100")){
                    if(caml_string_notequal(match, "ISO-IR-6")) break a;
                    break b;
                   }
                  }
                 }
                 else{
                  if(! caml_string_notequal(match, "ANSI_X3.4-1968")) break b;
                  if(! caml_string_notequal(match, "ANSI_X3.4-1986")) break b;
                  if(! caml_string_notequal(match, "ASCII")) break b;
                  if(! caml_string_notequal(match, "CP367")) break b;
                  if(caml_string_notequal(match, "CP819")){
                   if(caml_string_notequal(match, "CSASCII")) break a;
                   break b;
                  }
                 }
                }
                return cont(_g_);
               }
               return cont(_f_);
              }
              return cont(0);
             });
   }
   function encoding_to_string(param, cont){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? cont(cst_UTF_8) : cont(cst_US_ASCII)
              : 338302576 <= param ? cont(cst_ISO_8859_1) : cont(cst_UTF_16)
            : -211555818 <= param ? cont(cst_UTF_16LE) : cont(cst_UTF_16BE);
   }
   function malformed(s, j, l, cont){
    return caml_cps_call4
            (Stdlib_Bytes[8],
             s,
             j,
             l,
             function(_bP_){return cont([0, 659980059, _bP_]);});
   }
   function malformed_pair(be, hi, s, j, l, cont){
    return caml_cps_call4
            (Stdlib_Bytes[7],
             s,
             j,
             l,
             function(bs1){
              var bs0 = caml_create_bytes(2);
              if(be) var j1 = 1, j0 = 0; else var j1 = 0, j0 = 1;
              unsafe_set_byte(bs0, j0, hi >>> 8 | 0);
              unsafe_set_byte(bs0, j1, hi & 255);
              return caml_cps_call3
                      (Stdlib_Bytes[14],
                       bs0,
                       bs1,
                       function(_bN_){
                        return caml_cps_call2
                                (Stdlib_Bytes[44],
                                 _bN_,
                                 function(_bO_){return cont([0, 659980059, _bO_]);});
                       });
             });
   }
   var
    utf_8_len =
      [0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0].slice
       (),
    cst_expected_Await_encode = "expected `Await encode",
    _h_ = [0, cst_src_uutf_ml, 120, 9],
    _i_ = [0, -211558048, 3299808],
    _j_ = [0, -211558048, 427938126],
    _k_ = [0, cst_src_uutf_ml, 153, 55],
    _l_ = [0, 684370880, 427938126],
    _m_ = [0, 684370880, 427938126],
    _n_ = [0, -211555818, 3299808],
    _o_ = [0, 684370880, 3299808],
    _p_ = [0, cst_src_uutf_ml, 152, 55],
    _q_ = [0, cst_src_uutf_ml, 154, 55],
    _r_ = [0, 684370880, 3455931],
    _s_ = [0, [11, cst_Await, 0], cst_Await],
    _t_ = [0, [11, cst_End, 0], cst_End],
    _u_ =
      [0,
       [18,
        [1, [0, 0, cst]],
        [11, "`Uchar U+", [4, 8, [0, 2, 4], 0, [17, 0, 0]]]],
       "@[`Uchar U+%04X@]"],
    _v_ =
      [0, [18, [1, [0, 0, cst]], [11, "`Malformed (", 0]], "@[`Malformed ("],
    _w_ = [0, [4, 8, [0, 2, 2], 0, 0], "%02X"],
    _x_ = [0, [12, 41, [17, 0, 0]], ")@]"],
    _y_ = [0, [12, 32, [4, 8, [0, 2, 2], 0, 0]], " %02X"],
    _z_ = [0, cst_src_uutf_ml, 363, 9];
   function r_utf_8(s, j, l, cont){
    function uchar(c, cont){
     return caml_cps_call2
             (Stdlib_Uchar[9],
              c,
              function(_bM_){return cont([0, 852405675, _bM_]);});
    }
    var switcher = l - 1 | 0;
    if(3 < switcher >>> 0){
     var raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1));
    }
    switch(switcher){
      case 0:
       return caml_cps_exact_call2(uchar, caml_bytes_unsafe_get(s, j), cont);
      case 1:
       var
        b0 = caml_bytes_unsafe_get(s, j),
        b1 = caml_bytes_unsafe_get(s, j + 1 | 0);
       return 2 === (b1 >>> 6 | 0)
               ? caml_cps_exact_call2(uchar, (b0 & 31) << 6 | b1 & 63, cont)
               : caml_cps_exact_call4(malformed, s, j, l, cont);
      case 2:
       var
        b0$0 = caml_bytes_unsafe_get(s, j),
        b1$0 = caml_bytes_unsafe_get(s, j + 1 | 0),
        b2 = caml_bytes_unsafe_get(s, j + 2 | 0),
        c = (b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
       if(2 !== (b2 >>> 6 | 0))
        return caml_cps_exact_call4(malformed, s, j, l, cont);
       if(224 === b0$0){
        if(160 <= b1$0 && 191 >= b1$0)
         return caml_cps_exact_call2(uchar, c, cont);
        return caml_cps_exact_call4(malformed, s, j, l, cont);
       }
       if(237 !== b0$0)
        return 2 === (b1$0 >>> 6 | 0)
                ? caml_cps_exact_call2(uchar, c, cont)
                : caml_cps_exact_call4(malformed, s, j, l, cont);
       if(128 <= b1$0 && 159 >= b1$0)
        return caml_cps_exact_call2(uchar, c, cont);
       return caml_cps_exact_call4(malformed, s, j, l, cont);
      default:
       var
        b0$1 = caml_bytes_unsafe_get(s, j),
        b1$1 = caml_bytes_unsafe_get(s, j + 1 | 0),
        b2$0 = caml_bytes_unsafe_get(s, j + 2 | 0),
        b3 = caml_bytes_unsafe_get(s, j + 3 | 0),
        c$0 =
          (b0$1 & 7) << 18 | (b1$1 & 63) << 12 | (b2$0 & 63) << 6 | b3 & 63;
       if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0)){
        if(240 === b0$1){
         if(144 <= b1$1 && 191 >= b1$1)
          return caml_cps_exact_call2(uchar, c$0, cont);
         return caml_cps_exact_call4(malformed, s, j, l, cont);
        }
        if(244 !== b0$1)
         return 2 === (b1$1 >>> 6 | 0)
                 ? caml_cps_exact_call2(uchar, c$0, cont)
                 : caml_cps_exact_call4(malformed, s, j, l, cont);
        if(128 <= b1$1 && 143 >= b1$1)
         return caml_cps_exact_call2(uchar, c$0, cont);
        return caml_cps_exact_call4(malformed, s, j, l, cont);
       }
       return caml_cps_exact_call4(malformed, s, j, l, cont);
    }
   }
   function r_utf_16(s, j0, j1, cont){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     u = b0 << 8 | b1;
    if(55296 <= u && 57343 >= u){
     if(56319 >= u) return cont([0, 16161, u]);
     var _bJ_ = 2;
     return caml_cps_call3
             (Stdlib[16],
              j0,
              j1,
              function(_bL_){
               return caml_cps_exact_call4(malformed, s, _bL_, _bJ_, cont);
              });
    }
    return caml_cps_call2
            (Stdlib_Uchar[9],
             u,
             function(_bK_){return cont([0, 852405675, _bK_]);});
   }
   function r_utf_16_lo(hi, s, j0, j1, cont){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     lo = b0 << 8 | b1;
    if(56320 <= lo && 57343 >= lo)
     return caml_cps_call2
             (Stdlib_Uchar[9],
              ((hi & 1023) << 10 | lo & 1023) + 65536 | 0,
              function(_bI_){return cont([0, 852405675, _bI_]);});
    var _bG_ = 2;
    return caml_cps_call3
            (Stdlib[16],
             j0,
             j1,
             function(_bH_){
              return caml_cps_exact_call6
                      (malformed_pair, j0 < j1 ? 1 : 0, hi, s, _bH_, _bG_, cont);
             });
   }
   function r_encoding(s, j, l){
    function some(i){
     return i < l ? [0, caml_bytes_unsafe_get(s, j + i | 0)] : 0;
    }
    var match = some(0), match$0 = some(1), match$1 = some(2);
    if(! match){
     if(match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
     if(match$1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
     return _r_;
    }
    var p = match[1];
    a:
    {
     if(240 <= p){
      if(254 === p){
       if(! match$0) break a;
       if(255 === match$0[1]) return _i_;
      }
      else if(255 === p){
       if(! match$0) break a;
       if(254 === match$0[1]) return _n_;
      }
     }
     else if(0 === p){
      if(! match$0) break a;
      var p$0 = match$0[1];
      if(0 < p$0) return [0, -211558048, [0, 605782321, p$0]];
     }
     else if(239 <= p){
      if(! match$0) break a;
      if(187 === match$0[1]){
       if(! match$1) break a;
       if(191 === match$1[1]) return _o_;
       break a;
      }
     }
     if(match$0 && 0 === match$0[1] && 0 < p)
      return [0, -211555818, [0, 605782321, p]];
    }
    if(0 !== caml_check_bound(utf_8_len, p)[1 + p]) return _m_;
    if(match$0) return _j_;
    if(match$1)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
    return _l_;
   }
   function pp_decode(ppf, param, cont){
    if(typeof param === "number")
     return 1006505782 <= param
             ? caml_cps_call3(pp, ppf, _s_, cont)
             : caml_cps_call3(pp, ppf, _t_, cont);
    if(852405675 <= param[1]){
     var u = param[2];
     return caml_cps_call2
             (Stdlib_Uchar[10],
              u,
              function(_bF_){return caml_cps_call4(pp, ppf, _u_, _bF_, cont);});
    }
    var bs = param[2], l = caml_ml_string_length(bs);
    return caml_cps_call3
            (pp,
             ppf,
             _v_,
             function(_bw_){
              function _bx_(_by_){
               var _bA_ = l - 1 | 0;
               function _bC_(i){
                return caml_cps_call4
                        (pp,
                         ppf,
                         _y_,
                         caml_string_get(bs, i),
                         function(_bD_){
                          var _bE_ = i + 1 | 0;
                          return _bA_ !== i
                                  ? caml_cps_exact_call1(_bC_, _bE_)
                                  : _bB_();
                         });
               }
               function _bB_(){return caml_cps_call3(pp, ppf, _x_, cont);}
               var _bz_ = 1;
               return _bA_ < 1 ? _bB_() : _bC_(_bz_);
              }
              return 0 < l
                      ? caml_cps_call4(pp, ppf, _w_, caml_string_get(bs, 0), _bx_)
                      : _bx_(0);
             });
   }
   function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0;}
   function eoi(d){
    d[5] = Stdlib_Bytes[3];
    d[6] = 0;
    d[7] = Stdlib[20];
    return 0;
   }
   function src(d, s, j, l, cont){
    if(0 <= j && 0 <= l && caml_ml_bytes_length(s) >= (j + l | 0))
     return 0 === l
             ? cont(eoi(d))
             : (d[5] = s, d[6] = j, d[7] = (j + l | 0) - 1 | 0, cont(0));
    return caml_cps_exact_call3(invalid_bounds, j, l, cont);
   }
   function refill(k, d, cont){
    var match = d[1];
    if(typeof match === "number"){d[18] = k; return cont(1006505782);}
    if(438511779 <= match[1]){
     var ic = match[2];
     return caml_cps_call5
             (Stdlib[84],
              ic,
              d[5],
              0,
              caml_ml_bytes_length(d[5]),
              function(rc){
               return caml_cps_exact_call5
                       (src,
                        d,
                        d[5],
                        0,
                        rc,
                        function(_bv_){return caml_cps_exact_call2(k, d, cont);});
              });
    }
    eoi(d);
    return caml_cps_exact_call2(k, d, cont);
   }
   function t_need(d, need){d[9] = 0; d[10] = need; return;}
   function t_fill(k, d, cont){
    function blit(d, l){
     caml_blit_bytes(d[5], d[6], d[8], d[9], l);
     d[6] = d[6] + l | 0;
     d[9] = d[9] + l | 0;
     return;
    }
    var rem = i_rem(d);
    if(0 > rem) return caml_cps_exact_call2(k, d, cont);
    var need = d[10] - d[9] | 0;
    return rem < need
            ? (blit
               (d, rem),
              caml_cps_exact_call3
               (refill,
                function(_bu_, cont){
                 return caml_cps_exact_call3(t_fill, k, _bu_, cont);
                },
                d,
                cont))
            : (blit(d, need), caml_cps_exact_call2(k, d, cont));
   }
   function ret(k, v, byte_count, d, cont){
    d[18] = k;
    d[15] = d[15] + byte_count | 0;
    return caml_cps_call3(d[17], d, v, cont);
   }
   function decode_us_ascii(d, cont){
    var rem = i_rem(d);
    if(0 >= rem)
     return 0 <= rem
             ? caml_cps_exact_call3(refill, decode_us_ascii, d, cont)
             : cont(3455931);
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var s = d[5], b0 = caml_bytes_unsafe_get(s, j), _bq_ = 1;
    function _br_(_bt_){
     return caml_cps_exact_call5(ret, decode_us_ascii, _bt_, _bq_, d, cont);
    }
    return 127 < b0
            ? caml_cps_exact_call4(malformed, s, j, 1, _br_)
            : caml_cps_call2
              (Stdlib_Uchar[9],
               b0,
               function(_bs_){return _br_([0, 852405675, _bs_]);});
   }
   function decode_iso_8859_1(d, cont){
    var rem = i_rem(d);
    if(0 >= rem)
     return 0 <= rem
             ? caml_cps_exact_call3(refill, decode_iso_8859_1, d, cont)
             : cont(3455931);
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var s = d[5], _bo_ = 1;
    return caml_cps_call2
            (Stdlib_Uchar[9],
             caml_bytes_unsafe_get(s, j),
             function(_bp_){
              return caml_cps_exact_call5
                      (ret,
                       decode_iso_8859_1,
                       [0, 852405675, _bp_],
                       _bo_,
                       d,
                       cont);
             });
   }
   function t_decode_utf_8(d, cont){
    if(d[9] < d[10]){
     var _bk_ = d[9];
     return caml_cps_exact_call4
             (malformed,
              d[8],
              0,
              d[9],
              function(_bn_){
               return caml_cps_exact_call5
                       (ret, decode_utf_8, _bn_, _bk_, d, cont);
              });
    }
    var _bl_ = d[9];
    return caml_cps_exact_call4
            (r_utf_8,
             d[8],
             0,
             d[9],
             function(_bm_){
              return caml_cps_exact_call5
                      (ret, decode_utf_8, _bm_, _bl_, d, cont);
             });
   }
   function decode_utf_8(d, cont){
    var rem = i_rem(d);
    if(0 >= rem)
     return 0 <= rem
             ? caml_cps_exact_call3(refill, decode_utf_8, d, cont)
             : cont(3455931);
    var need = utf_8_len[1 + caml_bytes_unsafe_get(d[5], d[6])];
    if(rem < need){
     t_need(d, need);
     return caml_cps_exact_call3(t_fill, t_decode_utf_8, d, cont);
    }
    var j = d[6];
    if(0 === need){
     d[6] = d[6] + 1 | 0;
     var _bh_ = 1;
     return caml_cps_exact_call4
             (malformed,
              d[5],
              j,
              1,
              function(_bj_){
               return caml_cps_exact_call5
                       (ret, decode_utf_8, _bj_, _bh_, d, cont);
              });
    }
    d[6] = d[6] + need | 0;
    return caml_cps_exact_call4
            (r_utf_8,
             d[5],
             j,
             need,
             function(_bi_){
              return caml_cps_exact_call5
                      (ret, decode_utf_8, _bi_, need, d, cont);
             });
   }
   function t_decode_utf_16be_lo(hi, d, cont){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? caml_cps_exact_call6
              (malformed_pair,
               1,
               hi,
               d[8],
               0,
               d[9],
               function(_bf_){
                return caml_cps_exact_call5
                        (ret, decode_utf_16be, _bf_, bcount, d, cont);
               })
            : caml_cps_exact_call5
              (r_utf_16_lo,
               hi,
               d[8],
               0,
               1,
               function(_bg_){
                return caml_cps_exact_call5
                        (ret, decode_utf_16be, _bg_, bcount, d, cont);
               });
   }
   function t_decode_utf_16be(d, cont){
    if(d[9] >= d[10])
     return caml_cps_exact_call4
             (r_utf_16,
              d[8],
              0,
              1,
              function(_be_){
               return caml_cps_exact_call3(decode_utf_16be_lo, _be_, d, cont);
              });
    var _bc_ = d[9];
    return caml_cps_exact_call4
            (malformed,
             d[8],
             0,
             d[9],
             function(_bd_){
              return caml_cps_exact_call5
                      (ret, decode_utf_16be, _bd_, _bc_, d, cont);
             });
   }
   function decode_utf_16be_lo(v, d, cont){
    if(659980059 <= v[1])
     return caml_cps_exact_call5(ret, decode_utf_16be, v, 2, d, cont);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     var _a$_ = 4;
     return caml_cps_exact_call5
             (r_utf_16_lo,
              hi,
              d[5],
              j,
              j + 1 | 0,
              function(_bb_){
               return caml_cps_exact_call5
                       (ret, decode_utf_16be, _bb_, _a$_, d, cont);
              });
    }
    t_need(d, 2);
    return caml_cps_exact_call3
            (t_fill,
             function(_ba_, cont){
              return caml_cps_exact_call3
                      (t_decode_utf_16be_lo, hi, _ba_, cont);
             },
             d,
             cont);
   }
   function decode_utf_16be(d, cont){
    var rem = i_rem(d);
    if(0 >= rem)
     return 0 <= rem
             ? caml_cps_exact_call3(refill, decode_utf_16be, d, cont)
             : cont(3455931);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return caml_cps_exact_call4
             (r_utf_16,
              d[5],
              j,
              j + 1 | 0,
              function(_a__){
               return caml_cps_exact_call3(decode_utf_16be_lo, _a__, d, cont);
              });
    }
    t_need(d, 2);
    return caml_cps_exact_call3(t_fill, t_decode_utf_16be, d, cont);
   }
   function t_decode_utf_16le_lo(hi, d, cont){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? caml_cps_exact_call6
              (malformed_pair,
               0,
               hi,
               d[8],
               0,
               d[9],
               function(_a8_){
                return caml_cps_exact_call5
                        (ret, decode_utf_16le, _a8_, bcount, d, cont);
               })
            : caml_cps_exact_call5
              (r_utf_16_lo,
               hi,
               d[8],
               1,
               0,
               function(_a9_){
                return caml_cps_exact_call5
                        (ret, decode_utf_16le, _a9_, bcount, d, cont);
               });
   }
   function t_decode_utf_16le(d, cont){
    if(d[9] >= d[10])
     return caml_cps_exact_call4
             (r_utf_16,
              d[8],
              1,
              0,
              function(_a7_){
               return caml_cps_exact_call3(decode_utf_16le_lo, _a7_, d, cont);
              });
    var _a5_ = d[9];
    return caml_cps_exact_call4
            (malformed,
             d[8],
             0,
             d[9],
             function(_a6_){
              return caml_cps_exact_call5
                      (ret, decode_utf_16le, _a6_, _a5_, d, cont);
             });
   }
   function decode_utf_16le_lo(v, d, cont){
    if(659980059 <= v[1])
     return caml_cps_exact_call5(ret, decode_utf_16le, v, 2, d, cont);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     var _a2_ = 4;
     return caml_cps_exact_call5
             (r_utf_16_lo,
              hi,
              d[5],
              j + 1 | 0,
              j,
              function(_a4_){
               return caml_cps_exact_call5
                       (ret, decode_utf_16le, _a4_, _a2_, d, cont);
              });
    }
    t_need(d, 2);
    return caml_cps_exact_call3
            (t_fill,
             function(_a3_, cont){
              return caml_cps_exact_call3
                      (t_decode_utf_16le_lo, hi, _a3_, cont);
             },
             d,
             cont);
   }
   function decode_utf_16le(d, cont){
    var rem = i_rem(d);
    if(0 >= rem)
     return 0 <= rem
             ? caml_cps_exact_call3(refill, decode_utf_16le, d, cont)
             : cont(3455931);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return caml_cps_exact_call4
             (r_utf_16,
              d[5],
              j + 1 | 0,
              j,
              function(_a1_){
               return caml_cps_exact_call3(decode_utf_16le_lo, _a1_, d, cont);
              });
    }
    t_need(d, 2);
    return caml_cps_exact_call3(t_fill, t_decode_utf_16le, d, cont);
   }
   function guessed_utf_16(d, be, v, cont){
    if(be)
     var
      j1 = 1,
      j0 = 0,
      t_decode_utf_16_lo = t_decode_utf_16be_lo,
      t_decode_utf_16 = t_decode_utf_16be,
      decode_utf_16 = decode_utf_16be;
    else
     var
      j1 = 0,
      j0 = 1,
      t_decode_utf_16_lo = t_decode_utf_16le_lo,
      t_decode_utf_16 = t_decode_utf_16le,
      decode_utf_16 = decode_utf_16le;
    function b3(k, d, cont){
     return 3 <= d[9]
             ? (d
                [10]
               = 2,
               d[9] = 1,
               unsafe_set_byte(d[8], 0, caml_bytes_unsafe_get(d[8], 2)),
               caml_cps_exact_call3(t_fill, k, d, cont))
             : caml_cps_exact_call2(decode_utf_16, d, cont);
    }
    if(typeof v === "number")
     return 427938126 <= v
             ? caml_cps_exact_call4
               (r_utf_16,
                d[8],
                j0,
                j1,
                function(v){
                 if(659980059 <= v[1])
                  return caml_cps_exact_call5
                          (ret,
                           function(_aZ_, cont){
                            return caml_cps_exact_call3(b3, t_decode_utf_16, _aZ_, cont);
                           },
                           v,
                           2,
                           d,
                           cont);
                 var hi = v[2];
                 if(3 <= d[9])
                  return caml_cps_exact_call3
                          (b3,
                           function(_aY_, cont){
                            return caml_cps_exact_call3
                                    (t_decode_utf_16_lo, hi, _aY_, cont);
                           },
                           d,
                           cont);
                 var _aW_ = d[9];
                 return caml_cps_exact_call6
                         (malformed_pair,
                          be,
                          hi,
                          Stdlib_Bytes[3],
                          0,
                          0,
                          function(_aX_){
                           return caml_cps_exact_call5
                                   (ret, decode_utf_16, _aX_, _aW_, d, cont);
                          });
                })
             : caml_cps_exact_call5
               (ret,
                function(_a0_, cont){
                 return caml_cps_exact_call3(b3, t_decode_utf_16, _a0_, cont);
                },
                [0, 852405675, u_bom],
                2,
                d,
                cont);
    var u = v[2], _aT_ = 2;
    return caml_cps_call2
            (Stdlib_Uchar[9],
             u,
             function(_aU_){
              return caml_cps_exact_call5
                      (ret,
                       function(_aV_, cont){
                        return caml_cps_exact_call3(b3, t_decode_utf_16, _aV_, cont);
                       },
                       [0, 852405675, _aU_],
                       _aT_,
                       d,
                       cont);
             });
   }
   function guess_encoding(d, cont){
    function setup(d, cont){
     var match = r_encoding(d[8], 0, d[9]), _aE_ = match[1];
     if(-211555818 === _aE_){
      var r = match[2];
      d[2] = -211555818;
      d[18] = decode_utf_16le;
      return caml_cps_exact_call4(guessed_utf_16, d, 0, r, cont);
     }
     if(684370880 > _aE_){
      var r$1 = match[2];
      d[2] = -211558048;
      d[18] = decode_utf_16be;
      return caml_cps_exact_call4(guessed_utf_16, d, 1, r$1, cont);
     }
     var r$0 = match[2];
     d[2] = 684370880;
     d[18] = decode_utf_8;
     if(3455931 === r$0) return cont(3455931);
     if(427938126 > r$0)
      return caml_cps_exact_call5
              (ret, decode_utf_8, [0, 852405675, u_bom], 3, d, cont);
     function b3(d, cont){
      var
       b3 = caml_bytes_unsafe_get(d[8], 2),
       n = caml_check_bound(utf_8_len, b3)[1 + b3];
      if(0 === n){
       var _aR_ = 1;
       return caml_cps_exact_call4
               (malformed,
                d[8],
                2,
                1,
                function(_aS_){
                 return caml_cps_exact_call5
                         (ret, decode_utf_8, _aS_, _aR_, d, cont);
                });
      }
      d[10] = n;
      d[9] = 1;
      unsafe_set_byte(d[8], 0, b3);
      return caml_cps_exact_call3(t_fill, t_decode_utf_8, d, cont);
     }
     function b2(d, cont){
      var
       b2 = caml_bytes_unsafe_get(d[8], 1),
       b3$0 = 2 < d[9] ? b3 : decode_utf_8,
       n = caml_check_bound(utf_8_len, b2)[1 + b2];
      if(0 === n){
       var _aN_ = 1;
       return caml_cps_exact_call4
               (malformed,
                d[8],
                1,
                1,
                function(_aQ_){
                 return caml_cps_exact_call5(ret, b3$0, _aQ_, _aN_, d, cont);
                });
      }
      if(1 === n){
       var _aO_ = 1;
       return caml_cps_exact_call4
               (r_utf_8,
                d[8],
                1,
                1,
                function(_aP_){
                 return caml_cps_exact_call5(ret, b3$0, _aP_, _aO_, d, cont);
                });
      }
      d[10] = n;
      unsafe_set_byte(d[8], 0, b2);
      if(3 <= d[9]){
       d[9] = 2;
       unsafe_set_byte(d[8], 1, caml_bytes_unsafe_get(d[8], 2));
      }
      else
       d[9] = 1;
      return caml_cps_exact_call3(t_fill, t_decode_utf_8, d, cont);
     }
     var
      b1 = caml_bytes_unsafe_get(d[8], 0),
      b2$0 = 1 < d[9] ? b2 : decode_utf_8,
      n = caml_check_bound(utf_8_len, b1)[1 + b1];
     if(4 < n >>> 0){
      var raise = caml_pop_trap();
      return raise(caml_maybe_attach_backtrace([0, Assert_failure, _z_], 1));
     }
     switch(n){
       case 0:
        var _aw_ = 1;
        return caml_cps_exact_call4
                (malformed,
                 d[8],
                 0,
                 1,
                 function(_aM_){
                  return caml_cps_exact_call5(ret, b2$0, _aM_, _aw_, d, cont);
                 });
       case 1:
        var _ax_ = 1;
        return caml_cps_exact_call4
                (r_utf_8,
                 d[8],
                 0,
                 1,
                 function(_aL_){
                  return caml_cps_exact_call5(ret, b2$0, _aL_, _ax_, d, cont);
                 });
       case 2:
        if(2 > d[9]){
         var _aA_ = 1;
         return caml_cps_exact_call4
                 (malformed,
                  d[8],
                  0,
                  1,
                  function(_aK_){
                   return caml_cps_exact_call5
                           (ret, decode_utf_8, _aK_, _aA_, d, cont);
                  });
        }
        if(3 <= d[9]){
         var _ay_ = 2;
         return caml_cps_exact_call4
                 (r_utf_8,
                  d[8],
                  0,
                  2,
                  function(_aJ_){
                   return caml_cps_exact_call5(ret, b3, _aJ_, _ay_, d, cont);
                  });
        }
        var _az_ = 2;
        return caml_cps_exact_call4
                (r_utf_8,
                 d[8],
                 0,
                 2,
                 function(_aI_){
                  return caml_cps_exact_call5
                          (ret, decode_utf_8, _aI_, _az_, d, cont);
                 });
       case 3:
        if(3 <= d[9]){
         var _aB_ = 3;
         return caml_cps_exact_call4
                 (r_utf_8,
                  d[8],
                  0,
                  3,
                  function(_aH_){
                   return caml_cps_exact_call5
                           (ret, decode_utf_8, _aH_, _aB_, d, cont);
                  });
        }
        var _aC_ = d[9];
        return caml_cps_exact_call4
                (malformed,
                 d[8],
                 0,
                 d[9],
                 function(_aG_){
                  return caml_cps_exact_call5
                          (ret, decode_utf_8, _aG_, _aC_, d, cont);
                 });
       default:
        if(3 <= d[9]){
         d[10] = 4;
         return caml_cps_exact_call3(t_fill, t_decode_utf_8, d, cont);
        }
        var _aD_ = d[9];
        return caml_cps_exact_call4
                (malformed,
                 d[8],
                 0,
                 d[9],
                 function(_aF_){
                  return caml_cps_exact_call5
                          (ret, decode_utf_8, _aF_, _aD_, d, cont);
                 });
     }
    }
    t_need(d, 3);
    return caml_cps_exact_call3(t_fill, setup, d, cont);
   }
   function nline(d){d[14] = 0; d[13] = d[13] + 1 | 0; return;}
   function ncol(d){d[14] = d[14] + 1 | 0; return;}
   function ncount(d){d[16] = d[16] + 1 | 0; return;}
   function cr(d, b){d[12] = b; return;}
   function pp_nln_none(d, v, cont){
    if(852405675 <= v[1]){
     var u = v[2];
     return caml_cps_call2
             (Stdlib_Uchar[10],
              u,
              function(match){
               var _av_ = match - 133 | 0;
               a:
               {
                if(8100 < _av_ >>> 0){
                 var switcher = _av_ + 123 | 0;
                 if(3 < switcher >>> 0) break a;
                 switch(switcher){
                   case 0:
                    var last_cr = d[12];
                    cr(d, 0);
                    ncount(d);
                    return last_cr ? cont(v) : (nline(d), cont(v));
                   case 3:
                    cr(d, 1); ncount(d); nline(d); return cont(v);
                   case 1:
                    break a;
                 }
                }
                else if(8097 >= _av_ - 1 >>> 0) break a;
                cr(d, 0);
                ncount(d);
                nline(d);
                return cont(v);
               }
               cr(d, 0);
               ncount(d);
               ncol(d);
               return cont(v);
              });
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return cont(v);
   }
   function pp_nln_readline(d, v, cont){
    if(852405675 <= v[1]){
     var u = v[2];
     return caml_cps_call2
             (Stdlib_Uchar[10],
              u,
              function(match){
               var _au_ = match - 133 | 0;
               a:
               {
                if(8100 < _au_ >>> 0){
                 var switcher = _au_ + 123 | 0;
                 if(3 < switcher >>> 0) break a;
                 switch(switcher){
                   case 0:
                    var last_cr = d[12];
                    cr(d, 0);
                    return last_cr
                            ? caml_cps_call2(d[18], d, cont)
                            : (ncount(d), nline(d), cont([0, 852405675, d[4]]));
                   case 3:
                    cr(d, 1);
                    ncount(d);
                    nline(d);
                    return cont([0, 852405675, d[4]]);
                   case 1:
                    break a;
                 }
                }
                else if(8097 >= _au_ - 1 >>> 0) break a;
                cr(d, 0);
                ncount(d);
                nline(d);
                return cont([0, 852405675, d[4]]);
               }
               cr(d, 0);
               ncount(d);
               ncol(d);
               return cont(v);
              });
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return cont(v);
   }
   function pp_nln_nlf(d, v, cont){
    if(852405675 <= v[1]){
     var u = v[2];
     return caml_cps_call2
             (Stdlib_Uchar[10],
              u,
              function(match){
               a:
               {
                if(14 <= match){
                 if(8232 > match){
                  if(133 !== match) break a;
                  cr(d, 0);
                  ncount(d);
                  nline(d);
                  return cont([0, 852405675, d[4]]);
                 }
                 if(8234 <= match) break a;
                }
                else{
                 if(10 > match) break a;
                 switch(match - 10 | 0){
                   case 0:
                    var last_cr = d[12];
                    cr(d, 0);
                    return last_cr
                            ? caml_cps_call2(d[18], d, cont)
                            : (ncount(d), nline(d), cont([0, 852405675, d[4]]));
                   case 3:
                    cr(d, 1);
                    ncount(d);
                    nline(d);
                    return cont([0, 852405675, d[4]]);
                   case 1:
                    break a;
                 }
                }
                cr(d, 0);
                ncount(d);
                nline(d);
                return cont(v);
               }
               cr(d, 0);
               ncount(d);
               ncol(d);
               return cont(v);
              });
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return cont(v);
   }
   function pp_nln_ascii(d, v, cont){
    if(852405675 <= v[1]){
     var u = v[2];
     return caml_cps_call2
             (Stdlib_Uchar[10],
              u,
              function(match){
               var _at_ = match - 133 | 0;
               a:
               {
                if(8100 < _at_ >>> 0){
                 var switcher = _at_ + 123 | 0;
                 if(3 < switcher >>> 0) break a;
                 switch(switcher){
                   case 0:
                    var last_cr = d[12];
                    cr(d, 0);
                    return last_cr
                            ? caml_cps_call2(d[18], d, cont)
                            : (ncount(d), nline(d), cont([0, 852405675, d[4]]));
                   case 3:
                    cr(d, 1);
                    ncount(d);
                    nline(d);
                    return cont([0, 852405675, d[4]]);
                   case 1:
                    break a;
                 }
                }
                else if(8097 >= _at_ - 1 >>> 0) break a;
                cr(d, 0);
                ncount(d);
                nline(d);
                return cont(v);
               }
               cr(d, 0);
               ncount(d);
               ncol(d);
               return cont(v);
              });
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return cont(v);
   }
   function decode_fun(param){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? decode_utf_8 : decode_us_ascii
              : 338302576 <= param ? decode_iso_8859_1 : decode_utf_16be
            : -211555818 <= param ? decode_utf_16le : decode_utf_16be;
   }
   function decoder(nln, encoding, src, cont){
    function _ar_(pp, nl){
     if(encoding)
      var e = encoding[1], k = decode_fun(e), encoding$0 = e;
     else
      var k = guess_encoding, encoding$0 = 684370880;
     function _as_(i, i_pos, i_max){
      var utf16 = 143365725 === encoding$0 ? 1 : 0;
      return cont
              ([0,
                src,
                encoding$0,
                nln,
                nl,
                i,
                i_pos,
                i_max,
                caml_create_bytes(4),
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                function(d, v, cont){
                 if(852405675 <= v[1]){
                  var u = v[2];
                  return caml_cps_call2
                          (Stdlib_Uchar[10],
                           u,
                           function(match){
                            if(65279 === match){
                             if(utf16){d[2] = -211558048; d[18] = decode_utf_16be;}
                             d[11] = 1;
                             d[17] = pp;
                             return caml_cps_call2(d[18], d, cont);
                            }
                            if(65534 === match && utf16){
                             d[2] = -211555818;
                             d[18] = decode_utf_16le;
                             d[11] = 1;
                             d[17] = pp;
                             return caml_cps_call2(d[18], d, cont);
                            }
                            d[11] = 0;
                            d[17] = pp;
                            return caml_cps_call3(d[17], d, v, cont);
                           });
                 }
                 d[11] = 0;
                 d[17] = pp;
                 return caml_cps_call3(d[17], d, v, cont);
                },
                k]);
     }
     if(typeof src === "number") return _as_(Stdlib_Bytes[3], 1, 0);
     if(438511779 <= src[1]) return _as_(caml_create_bytes(65536), 1, 0);
     var s = src[2], i_max = caml_ml_string_length(s) - 1 | 0, i_pos = 0;
     return caml_cps_call2
             (Stdlib_Bytes[45], s, function(i){return _as_(i, i_pos, i_max);});
    }
    if(! nln)
     return caml_cps_call2
             (Stdlib_Uchar[9],
              10,
              function(nl){return _ar_(pp_nln_none, nl);});
    var match = nln[1], _aq_ = match[1];
    if(3895880 === _aq_){var nl = match[2]; return _ar_(pp_nln_nlf, nl);}
    if(605782321 <= _aq_){
     var nl$0 = match[2];
     return _ar_(pp_nln_ascii, nl$0);
    }
    var nl$1 = match[2];
    return _ar_(pp_nln_readline, nl$1);
   }
   function decode(d, cont){return caml_cps_call2(d[18], d, cont);}
   function decoder_line(d, cont){return cont(d[13]);}
   function decoder_col(d, cont){return cont(d[14]);}
   function decoder_byte_count(d, cont){return cont(d[15]);}
   function decoder_count(d, cont){return cont(d[16]);}
   function decoder_removed_bom(d, cont){return cont(d[11]);}
   function decoder_src(d, cont){return cont(d[1]);}
   function decoder_nln(d, cont){return cont(d[3]);}
   function decoder_encoding(d, cont){return cont(d[2]);}
   function set_decoder_encoding(d, e, cont){
    d[2] = e;
    d[18] = decode_fun(e);
    return cont(0);
   }
   function o_rem(e, cont){return cont((e[5] - e[4] | 0) + 1 | 0);}
   function dst(e, s, j, l, cont){
    var _al_ = j < 0 ? 1 : 0;
    if(_al_)
     var _am_ = _al_;
    else
     var
      _an_ = l < 0 ? 1 : 0,
      _am_ = _an_ || (caml_ml_bytes_length(s) < (j + l | 0) ? 1 : 0);
    function _ao_(_ap_){
     e[3] = s;
     e[4] = j;
     e[5] = (j + l | 0) - 1 | 0;
     return cont(0);
    }
    return _am_ ? caml_cps_exact_call3(invalid_bounds, j, l, _ao_) : _ao_(0);
   }
   function flush(k, e, cont){
    var match = e[1];
    if(typeof match === "number"){
     e[9] =
      function(e, param, cont){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_cps_exact_call2(k, e, cont);
       return caml_cps_call2(Stdlib[1], cst_expected_Await_encode, cont);
      };
     return cont(939392865);
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     return caml_cps_call5
             (Stdlib[68],
              oc,
              e[3],
              0,
              e[4],
              function(_ak_){
               e[4] = 0;
               return caml_cps_exact_call2(k, e, cont);
              });
    }
    var b = match[2];
    return caml_cps_call2
            (Stdlib_Bytes[44],
             e[3],
             function(o){
              return caml_cps_call5
                      (Stdlib_Buffer[18],
                       b,
                       o,
                       0,
                       e[4],
                       function(_aj_){
                        e[4] = 0;
                        return caml_cps_exact_call2(k, e, cont);
                       });
             });
   }
   function t_range(e, max){e[7] = 0; e[8] = max; return;}
   function t_flush(k, e, cont){
    function blit(e, l){
     caml_blit_bytes(e[6], e[7], e[3], e[4], l);
     e[4] = e[4] + l | 0;
     e[7] = e[7] + l | 0;
     return;
    }
    return caml_cps_exact_call2
            (o_rem,
             e,
             function(rem){
              var len = (e[8] - e[7] | 0) + 1 | 0;
              return rem < len
                      ? (blit
                         (e, rem),
                        caml_cps_exact_call3
                         (flush,
                          function(_ai_, cont){
                           return caml_cps_exact_call3(t_flush, k, _ai_, cont);
                          },
                          e,
                          cont))
                      : (blit(e, len), caml_cps_exact_call2(k, e, cont));
             });
   }
   function encode_utf_8(e, v, cont){
    function k(e, cont){e[9] = encode_utf_8; return cont(17724);}
    if(typeof v === "number")
     return 1006505782 <= v
             ? caml_cps_exact_call2(k, e, cont)
             : caml_cps_exact_call3(flush, k, e, cont);
    var u = v[2];
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              return caml_cps_exact_call2
                      (o_rem,
                       e,
                       function(rem){
                        if(127 >= u)
                         return 1 <= rem
                                 ? (unsafe_set_byte
                                    (e[3], e[4], u),
                                   e[4] = e[4] + 1 | 0,
                                   caml_cps_exact_call2(k, e, cont))
                                 : caml_cps_exact_call3
                                   (flush,
                                    function(e, cont){
                                     return caml_cps_exact_call3(encode_utf_8, e, v, cont);
                                    },
                                    e,
                                    cont);
                        if(2047 >= u){
                         if(2 <= rem){
                          var j$3 = e[4];
                          e[4] = e[4] + 2 | 0;
                          var s$3 = e[3], k$2 = k, j$4 = j$3, s$4 = s$3;
                         }
                         else{
                          t_range(e, 1);
                          var
                           k$2 =
                             function(_ah_, cont){
                              return caml_cps_exact_call3(t_flush, k, _ah_, cont);
                             },
                           j$4 = 0,
                           s$4 = e[6];
                         }
                         unsafe_set_byte(s$4, j$4, 192 | u >>> 6 | 0);
                         unsafe_set_byte(s$4, j$4 + 1 | 0, 128 | u & 63);
                         return caml_cps_exact_call2(k$2, e, cont);
                        }
                        if(65535 < u){
                         if(4 <= rem){
                          var j = e[4];
                          e[4] = e[4] + 4 | 0;
                          var s = e[3], k$0 = k, j$0 = j, s$0 = s;
                         }
                         else{
                          t_range(e, 3);
                          var
                           k$0 =
                             function(_ag_, cont){
                              return caml_cps_exact_call3(t_flush, k, _ag_, cont);
                             },
                           j$0 = 0,
                           s$0 = e[6];
                         }
                         unsafe_set_byte(s$0, j$0, 240 | u >>> 18 | 0);
                         unsafe_set_byte(s$0, j$0 + 1 | 0, 128 | (u >>> 12 | 0) & 63);
                         unsafe_set_byte(s$0, j$0 + 2 | 0, 128 | (u >>> 6 | 0) & 63);
                         unsafe_set_byte(s$0, j$0 + 3 | 0, 128 | u & 63);
                         return caml_cps_exact_call2(k$0, e, cont);
                        }
                        if(3 <= rem){
                         var j$1 = e[4];
                         e[4] = e[4] + 3 | 0;
                         var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
                        }
                        else{
                         t_range(e, 2);
                         var
                          k$1 =
                            function(_af_, cont){
                             return caml_cps_exact_call3(t_flush, k, _af_, cont);
                            },
                          j$2 = 0,
                          s$2 = e[6];
                        }
                        unsafe_set_byte(s$2, j$2, 224 | u >>> 12 | 0);
                        unsafe_set_byte(s$2, j$2 + 1 | 0, 128 | (u >>> 6 | 0) & 63);
                        unsafe_set_byte(s$2, j$2 + 2 | 0, 128 | u & 63);
                        return caml_cps_exact_call2(k$1, e, cont);
                       });
             });
   }
   function encode_utf_16be(e, v, cont){
    function k(e, cont){e[9] = encode_utf_16be; return cont(17724);}
    if(typeof v === "number")
     return 1006505782 <= v
             ? caml_cps_exact_call2(k, e, cont)
             : caml_cps_exact_call3(flush, k, e, cont);
    var u = v[2];
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              return caml_cps_exact_call2
                      (o_rem,
                       e,
                       function(rem){
                        if(65536 <= u){
                         if(4 <= rem){
                          var j = e[4];
                          e[4] = e[4] + 4 | 0;
                          var s = e[3], k$0 = k, j$0 = j, s$0 = s;
                         }
                         else{
                          t_range(e, 3);
                          var
                           k$0 =
                             function(_ae_, cont){
                              return caml_cps_exact_call3(t_flush, k, _ae_, cont);
                             },
                           j$0 = 0,
                           s$0 = e[6];
                         }
                         var
                          u$0 = u - 65536 | 0,
                          hi = 55296 | u$0 >>> 10 | 0,
                          lo = 56320 | u$0 & 1023;
                         unsafe_set_byte(s$0, j$0, hi >>> 8 | 0);
                         unsafe_set_byte(s$0, j$0 + 1 | 0, hi & 255);
                         unsafe_set_byte(s$0, j$0 + 2 | 0, lo >>> 8 | 0);
                         unsafe_set_byte(s$0, j$0 + 3 | 0, lo & 255);
                         return caml_cps_exact_call2(k$0, e, cont);
                        }
                        if(2 <= rem){
                         var j$1 = e[4];
                         e[4] = e[4] + 2 | 0;
                         var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
                        }
                        else{
                         t_range(e, 1);
                         var
                          k$1 =
                            function(_ad_, cont){
                             return caml_cps_exact_call3(t_flush, k, _ad_, cont);
                            },
                          j$2 = 0,
                          s$2 = e[6];
                        }
                        unsafe_set_byte(s$2, j$2, u >>> 8 | 0);
                        unsafe_set_byte(s$2, j$2 + 1 | 0, u & 255);
                        return caml_cps_exact_call2(k$1, e, cont);
                       });
             });
   }
   function encode_utf_16le(e, v, cont){
    function k(e, cont){e[9] = encode_utf_16le; return cont(17724);}
    if(typeof v === "number")
     return 1006505782 <= v
             ? caml_cps_exact_call2(k, e, cont)
             : caml_cps_exact_call3(flush, k, e, cont);
    var u = v[2];
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              return caml_cps_exact_call2
                      (o_rem,
                       e,
                       function(rem){
                        if(65536 <= u){
                         if(4 <= rem){
                          var j = e[4];
                          e[4] = e[4] + 4 | 0;
                          var s = e[3], k$0 = k, j$0 = j, s$0 = s;
                         }
                         else{
                          t_range(e, 3);
                          var
                           k$0 =
                             function(_ac_, cont){
                              return caml_cps_exact_call3(t_flush, k, _ac_, cont);
                             },
                           j$0 = 0,
                           s$0 = e[6];
                         }
                         var
                          u$0 = u - 65536 | 0,
                          hi = 55296 | u$0 >>> 10 | 0,
                          lo = 56320 | u$0 & 1023;
                         unsafe_set_byte(s$0, j$0, hi & 255);
                         unsafe_set_byte(s$0, j$0 + 1 | 0, hi >>> 8 | 0);
                         unsafe_set_byte(s$0, j$0 + 2 | 0, lo & 255);
                         unsafe_set_byte(s$0, j$0 + 3 | 0, lo >>> 8 | 0);
                         return caml_cps_exact_call2(k$0, e, cont);
                        }
                        if(2 <= rem){
                         var j$1 = e[4];
                         e[4] = e[4] + 2 | 0;
                         var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
                        }
                        else{
                         t_range(e, 1);
                         var
                          k$1 =
                            function(_ab_, cont){
                             return caml_cps_exact_call3(t_flush, k, _ab_, cont);
                            },
                          j$2 = 0,
                          s$2 = e[6];
                        }
                        unsafe_set_byte(s$2, j$2, u & 255);
                        unsafe_set_byte(s$2, j$2 + 1 | 0, u >>> 8 | 0);
                        return caml_cps_exact_call2(k$1, e, cont);
                       });
             });
   }
   function encoder(encoding, dst, cont){
    if(typeof dst === "number")
     var o_max = 0, o_pos = 1, o = Stdlib_Bytes[3];
    else
     var o$0 = caml_create_bytes(65536), o_max = 65535, o_pos = 0, o = o$0;
    var
     _aa_ =
       143365725 <= encoding
        ? 684370880 <= encoding ? encode_utf_8 : encode_utf_16be
        : -211555818 <= encoding ? encode_utf_16le : encode_utf_16be;
    return cont
            ([0,
              dst,
              encoding,
              o,
              o_pos,
              o_max,
              caml_create_bytes(4),
              1,
              0,
              _aa_]);
   }
   function encode(e, v, cont){return caml_cps_call3(e[9], e, v, cont);}
   function encoder_encoding(e, cont){return cont(e[2]);}
   function encoder_dst(e, cont){return cont(e[1]);}
   var Manual = [0, src, dst, o_rem];
   function encoding_guess(s, cont){
    return caml_cps_call2
            (Stdlib_Bytes[45],
             s,
             function(s){
              return caml_cps_call3
                      (Stdlib[17],
                       caml_ml_bytes_length(s),
                       3,
                       function(___){
                        var match = r_encoding(s, 0, ___), _$_ = match[1];
                        if(-211555818 === _$_){
                         var d = match[2];
                         return cont([0, -211555818, 3299808 === d ? 1 : 0]);
                        }
                        if(684370880 <= _$_){
                         var d$0 = match[2];
                         return cont([0, 684370880, 3299808 === d$0 ? 1 : 0]);
                        }
                        var d$1 = match[2];
                        return cont([0, -211558048, 3299808 === d$1 ? 1 : 0]);
                       });
             });
   }
   function fold_utf_8(opt, len, f, acc, s, cont){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var last = (pos + len$0 | 0) - 1 | 0;
    return caml_cps_call2
            (Stdlib_Bytes[45],
             s,
             function(s){
              function _W_(i, acc){
               if(last < i) return cont(acc);
               var need = utf_8_len[1 + caml_bytes_unsafe_get(s, i)];
               if(0 === need){
                var i$0 = i + 1 | 0;
                return caml_cps_exact_call4
                        (malformed,
                         s,
                         i,
                         1,
                         function(_Z_){
                          return caml_cps_call4
                                  (f,
                                   acc,
                                   i,
                                   _Z_,
                                   function(acc){return caml_cps_exact_call2(_W_, i$0, acc);});
                         });
               }
               var rem = (last - i | 0) + 1 | 0;
               if(rem < need)
                return caml_cps_exact_call4
                        (malformed,
                         s,
                         i,
                         rem,
                         function(_Y_){return caml_cps_call4(f, acc, i, _Y_, cont);});
               var i$1 = i + need | 0;
               return caml_cps_exact_call4
                       (r_utf_8,
                        s,
                        i,
                        need,
                        function(_X_){
                         return caml_cps_call4
                                 (f,
                                  acc,
                                  i,
                                  _X_,
                                  function(acc){return caml_cps_exact_call2(_W_, i$1, acc);});
                        });
              }
              return _W_(pos, acc);
             });
   }
   function fold_utf_16be(opt, len, f, acc, s, cont){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var last = (pos + len$0 | 0) - 1 | 0;
    return caml_cps_call2
            (Stdlib_Bytes[45],
             s,
             function(s){
              function _S_(i, acc){
               if(last < i) return cont(acc);
               var rem = (last - i | 0) + 1 | 0;
               return 2 <= rem
                       ? caml_cps_exact_call4
                         (r_utf_16,
                          s,
                          i,
                          i + 1 | 0,
                          function(v){
                           if(659980059 <= v[1]){
                            var i$0 = i + 2 | 0;
                            return caml_cps_call4
                                    (f,
                                     acc,
                                     i,
                                     v,
                                     function(acc){return caml_cps_exact_call2(_S_, i$0, acc);});
                           }
                           var hi = v[2];
                           if(4 > rem)
                            return caml_cps_exact_call4
                                    (malformed,
                                     s,
                                     i,
                                     rem,
                                     function(_U_){return caml_cps_call4(f, acc, i, _U_, cont);});
                           var i$1 = i + 4 | 0;
                           return caml_cps_exact_call5
                                   (r_utf_16_lo,
                                    hi,
                                    s,
                                    i + 2 | 0,
                                    i + 3 | 0,
                                    function(_T_){
                                     return caml_cps_call4
     (f,
      acc,
      i,
      _T_,
      function(acc){return caml_cps_exact_call2(_S_, i$1, acc);});
                                    });
                          })
                       : caml_cps_exact_call4
                         (malformed,
                          s,
                          i,
                          1,
                          function(_V_){return caml_cps_call4(f, acc, i, _V_, cont);});
              }
              return _S_(pos, acc);
             });
   }
   function fold_utf_16le(opt, len, f, acc, s, cont){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var last = (pos + len$0 | 0) - 1 | 0;
    return caml_cps_call2
            (Stdlib_Bytes[45],
             s,
             function(s){
              function _O_(i, acc){
               if(last < i) return cont(acc);
               var rem = (last - i | 0) + 1 | 0;
               return 2 <= rem
                       ? caml_cps_exact_call4
                         (r_utf_16,
                          s,
                          i + 1 | 0,
                          i,
                          function(v){
                           if(659980059 <= v[1]){
                            var i$0 = i + 2 | 0;
                            return caml_cps_call4
                                    (f,
                                     acc,
                                     i,
                                     v,
                                     function(acc){return caml_cps_exact_call2(_O_, i$0, acc);});
                           }
                           var hi = v[2];
                           if(4 > rem)
                            return caml_cps_exact_call4
                                    (malformed,
                                     s,
                                     i,
                                     rem,
                                     function(_Q_){return caml_cps_call4(f, acc, i, _Q_, cont);});
                           var i$1 = i + 4 | 0;
                           return caml_cps_exact_call5
                                   (r_utf_16_lo,
                                    hi,
                                    s,
                                    i + 3 | 0,
                                    i + 2 | 0,
                                    function(_P_){
                                     return caml_cps_call4
     (f,
      acc,
      i,
      _P_,
      function(acc){return caml_cps_exact_call2(_O_, i$1, acc);});
                                    });
                          })
                       : caml_cps_exact_call4
                         (malformed,
                          s,
                          i,
                          1,
                          function(_R_){return caml_cps_call4(f, acc, i, _R_, cont);});
              }
              return _O_(pos, acc);
             });
   }
   var String = [0, encoding_guess, fold_utf_8, fold_utf_16be, fold_utf_16le];
   function add_utf_8(b, u, cont){
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              function w(byte$0, cont){
               return caml_cps_call3(Stdlib_Buffer[12], b, byte$0, cont);
              }
              return 127 < u
                      ? 2047
                        < u
                        ? 65535
                          < u
                          ? caml_cps_exact_call2
                            (w,
                             240 | u >>> 18 | 0,
                             function(_I_){
                              return caml_cps_exact_call2
                                      (w,
                                       128 | (u >>> 12 | 0) & 63,
                                       function(_J_){
return caml_cps_exact_call2
        (w,
         128 | (u >>> 6 | 0) & 63,
         function(_K_){
          return caml_cps_exact_call2(w, 128 | u & 63, cont);
         });
                                       });
                             })
                          : caml_cps_exact_call2
                            (w,
                             224 | u >>> 12 | 0,
                             function(_L_){
                              return caml_cps_exact_call2
                                      (w,
                                       128 | (u >>> 6 | 0) & 63,
                                       function(_M_){
return caml_cps_exact_call2(w, 128 | u & 63, cont);
                                       });
                             })
                        : caml_cps_exact_call2
                          (w,
                           192 | u >>> 6 | 0,
                           function(_N_){
                            return caml_cps_exact_call2(w, 128 | u & 63, cont);
                           })
                      : caml_cps_exact_call2(w, u, cont);
             });
   }
   function add_utf_16be(b, u, cont){
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              function w(byte$0, cont){
               return caml_cps_call3(Stdlib_Buffer[12], b, byte$0, cont);
              }
              if(65536 > u)
               return caml_cps_exact_call2
                       (w,
                        u >>> 8 | 0,
                        function(_H_){
                         return caml_cps_exact_call2(w, u & 255, cont);
                        });
              var
               u$0 = u - 65536 | 0,
               hi = 55296 | u$0 >>> 10 | 0,
               lo = 56320 | u$0 & 1023;
              return caml_cps_exact_call2
                      (w,
                       hi >>> 8 | 0,
                       function(_E_){
                        return caml_cps_exact_call2
                                (w,
                                 hi & 255,
                                 function(_F_){
                                  return caml_cps_exact_call2
  (w,
   lo >>> 8 | 0,
   function(_G_){
    return caml_cps_exact_call2(w, lo & 255, cont);
   });
                                 });
                       });
             });
   }
   function add_utf_16le(b, u, cont){
    return caml_cps_call2
            (Stdlib_Uchar[10],
             u,
             function(u){
              function w(byte$0, cont){
               return caml_cps_call3(Stdlib_Buffer[12], b, byte$0, cont);
              }
              if(65536 > u)
               return caml_cps_exact_call2
                       (w,
                        u & 255,
                        function(_D_){
                         return caml_cps_exact_call2(w, u >>> 8 | 0, cont);
                        });
              var
               u$0 = u - 65536 | 0,
               hi = 55296 | u$0 >>> 10 | 0,
               lo = 56320 | u$0 & 1023;
              return caml_cps_exact_call2
                      (w,
                       hi & 255,
                       function(_A_){
                        return caml_cps_exact_call2
                                (w,
                                 hi >>> 8 | 0,
                                 function(_B_){
                                  return caml_cps_exact_call2
  (w,
   lo & 255,
   function(_C_){
    return caml_cps_exact_call2(w, lo >>> 8 | 0, cont);
   });
                                 });
                       });
             });
   }
   var
    Buffer = [0, add_utf_8, add_utf_16be, add_utf_16le],
    Uutf =
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
   runtime.caml_register_global(66, Uutf, "Uutf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1dXRmLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0ksTzs7Ozs7NEIsTztHOztJOztHO0c7SSxRO0ksUTs7Ozs7Ozs7Ozs7Ozs7SSxPOzs7Ozs7Ozs7Ozs7Ozs7O21COzttQjs7bUI7O2tCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0I7O2U7O2M7O0c7O0k7Ozs7OztHOztJLE87Ozs7OzRCO0c7O0ksTzs7Ozs7O2MsVTs7YztjO2MsTzs7Ozs7d0IsTzs7O2dEOzs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0k7SyxPOzs7NkI7STs7OztLOzs7O08sTyw0Qjs7TztRLEs7USxLOzs7aUI7O087USxPO1EsTztRLEs7OztRLE87OztTLE87USxPOzs7O2tCO2tCOztRLE87TyxPOztPO1EsTztRLE87USxPO1EsSzs7Ozs7O1UsTztTLE87Ozs7bUI7bUI7O1MsTztRLE87O08sTzs7Rzs7STtLLEs7SyxLOzs7b0I7SztLLE87Ozs7O2UsTzs7O0ksTzs7OzRCO0c7O0k7SyxLO0ssSzs7O0ssTzs7OzZCO0k7SSxPOzs7OztjLE87OztHOzs7SyxtQjtJO0ksSSxpQixtQjs7O00sTTs7TSxNO0s7Ozs7Ozs7OzhCOzs7OzhCOzs7Ozs7TSxZOzs7Ozs7OEI7Ozs7O007O0ksZ0Q7Z0I7O0ssTTtJO0c7O0k7O2U7ZTs7O0ssTzs7OzZCLE87O0ksbUIsSTtJLE87Ozs7OztlOztnQixPOzs7O3lCOzswQjs7Ozs7OytCLE87ZTs7Yzs7d0IsNkI7Ozs7cUIsaUM7O0k7Ozs7Rzs7STs7OztJLE87Rzs7STs2Qzs7O0ssTzs7Ozs7OztlLE87Ozs7Ozt1QyxPOzs7STtJLE87Rzs0QiwrQjs7O0s7Ozs7STtJO0ksWSxPOzs7OztjOzs7aUI7Ozs7OEI7Rzs7STs7SSxPO0c7O0k7STs7ZTs7OztJLGMsSzs7SyxPOztJO2M7Yzs7OzhCO0c7O0k7STs7ZTs7Ozs7SSxPOzthOztjLE87Ozs7Ozs7O0c7O0k7O0ssTzs7Ozs7O2UsTzs7Ozs7SSxPOzs7Ozs7YyxPOzs7Rzs7STtJOztlOztJLHlCOztLO0ssTzs7O0k7OztLLE87Ozs7OztlLE87Ozs7O0ksTzs7Ozs7O2MsTzs7O0c7O0k7O2M7Ozs7Ozs7O2dCLE87OztjOzs7Ozs7O2dCLE87OztHOztJO0ssTzs7Ozs7O2UsTzs7O0ksTzs7Ozs7O2MsTzs7O0c7O0k7SyxPO0ksZTtJOzs7O0ssTzs7Ozs7OztlLE87Ozs7STtJLE87OztjOzs7OztHOztJO0k7O2U7Ozs7O0ssTzs7Ozs7O2UsTzs7O0k7SSxPO0c7O0k7O2M7Ozs7Ozs7O2dCLE87OztjOzs7Ozs7O2dCLE87OztHOztJO0ssTzs7Ozs7O2UsTzs7O0ksTzs7Ozs7O2MsTzs7O0c7O0k7SyxPO0ksZTtJOzs7O0ssTzs7Ozs7OztlLE87Ozs7STtJLE87OztjOzs7OztHOztJO0k7O2U7Ozs7O0ssTzs7Ozs7O2UsTzs7O0k7SSxPO0c7O0k7Ozs7Ozs7Ozs7Ozs7OztLOzs7Ozt3QztlO2U7STs7O2U7Ozs7OztpQjtrQixPOzs7NEI7Ozs7Ozs7Ozs7OzRCOzs7Ozs7aUIsTzs7Ozs7Ozs7MkIsTzs7OztlOzs7aUI7Ozs7OztrQjtJLE87Ozs7YyxPOzs7d0I7Ozs7Ozs7Rzs7O0ssSTs7Ozs7TSxPOzs7Ozs7TSxPOzs7Ozt5Qjs7TSxPOzs7TTtPLEs7Tzs7O08sTzs7Ozs7O2lCLE87Ozs7OztNO00sTztLOztNO08sSzs7Tzs7O08sTzs7Ozs7O2lCLE87Ozs7O08sTzs7Ozs7O2lCLE87Ozs7TTs7O08seUI7Ozs7TSxPO0s7SztNLEs7O007OztNOzs7OztRLE87Ozs7OztrQixPOzs7O1EsTzs7Ozs7O2tCLE87Ozs7O1MsTzs7Ozs7O21CLE87Ozs7OztTLE87Ozs7OzttQixPOzs7O1EsTzs7Ozs7O2tCLE87Ozs7OztTLE87Ozs7OzttQixPOzs7OztRLE87Ozs7OztrQixPOzs7Ozs7UyxPOzs7USxPOzs7Ozs7a0IsTzs7OztJO0k7SSxPO0c7cUIseUM7b0IsOEI7c0IsOEI7cUIsa0I7O0k7O0ssTzs7OztlOzs7O2lCOzs7OztvQjtvQjs7O29CLFUsVyxVOzs7Ozs7Z0I7Z0I7Z0I7Z0I7O2U7ZTtlO2U7OztJO0k7STtJOzs7STs7SyxPOzs7O2U7Ozs7aUI7Ozs7O29COzs4Qjs7O29CO29CO29CO29COzs7Ozs7Z0I7Z0I7Z0I7Z0I7O2U7ZTtlO2U7OztJO0k7STtJOzs7STs7SyxPOzs7O2U7Ozs7O2tCO2tCO2tCO2tCOzs7Ozs7Ozs7b0I7OzhCOzs7b0I7b0I7b0I7b0I7Ozs7O2dCO2dCO2dCO2dCOztlO2U7ZTtlOzs7STtJO0k7STs7O0k7O0ssTzs7OztlOzs7O2lCOzs7OztvQjs7OEI7OztvQjtvQjtvQjtvQjs7Ozs7O2dCO2dCO2dCO2dCOztlO2U7ZTtlOzs7STtJO0k7STs7O0k7Ozs7OztHOzs7Szs7Ozs7TTtNOzs7Ozs7Ozs7Z0I7Ozs7Ozs7Ozs7aUI7O2tCLE87Ozs7NEI7Ozs7NkIsTzs7Ozs7Ozs2QixPOzs7OzRCLE87Ozs7O2lCLE87OztLOzt5QztLLGdCLFE7SyxPOytDO0k7O0ssTzs7OzJCOzs7Ozs7Ozs7OzRCLE8sK0I7a0MsbUI7aUMsbUI7d0MsbUI7bUMsbUI7eUMsbUI7aUMsa0I7aUMsa0I7c0Msa0I7O0k7OztHOzJCLHVDOztJOzs7Ozs7OztLOzs7O0k7a0I7Rzs7STs7OztPO1EsTztPLE87O0s7Ozs7SyxPOzs7Ozs7O2U7ZSxPOzs7O0ksTzs7OztjLE87Ozs7Ozs7d0I7d0IsTzs7O0c7NEIsNkI7OztLOzs7O0k7SSxPOzs7Ozs7Ozt3Qjs7OzJCOzs7O3VDOztHOzt3QixxQixtQjs7O2U7ZTs7SSxPOzs7O2MsTzs7Ozt3Qjs7Ozs7bUM7bUM7OztxQztvQzs7Ozs7Ozs7OzswQjs7Ozs4Qjs7Ozs7eUI7eUI7eUIsTzs7Ozs7Ozs7OzBCOzs7OzhCOzs7Ozt5Qjt5Qjt5Qjt5Qjt5QixPOzs7Ozs7Ozt5Qjs7Ozs2Qjs7Ozs7d0I7d0I7d0I7d0IsTzs7O0c7O3dCLHdCLG1COzs7ZTtlOztJLE87Ozs7YyxPOzs7O3dCOzs7Ozs7OzBCOzs7OzhCOzs7Ozt5QjswQjs7O3lCO3lCO3lCO3lCO3lCLE87Ozs7Ozs7O3lCOzs7OzZCOzs7Ozt3Qjt3Qjt3QixPOzs7Rzs7d0Isd0IsbUI7OztlO2U7O0ksTzs7OztjLE87Ozs7d0I7Ozs7Ozs7MEI7Ozs7OEI7Ozs7O3lCOzBCOzs7eUI7eUI7eUI7eUI7eUIsTzs7Ozs7Ozs7eUI7Ozs7NkI7Ozs7O3dCO3dCO3dCLE87OztHOztJOzs7SyxJLE07Ozs7OztJOzs7Ozs7O2M7Ozs7RzsrQixPLGlDO3NDLGtCO2lDLGtCO0c7O0ksTzs7OztjLE87Ozs7O3dCLEk7Ozt5Qjs7Ozt5Qjs7O3dCOzs7Rzs7STs7Ozs7O0ksTzs7Ozs7ZSxhO2UseUI7ZTs7Z0IsTzs7Ozs7OzBCLE87Ozs7O2lELE87Ozs7O2dCLE87Ozs7O3VDLE87O2UsTzs7Ozs7O3lCLE87Ozs7O2dELE87O2M7Yzs7Rzs7STs7Ozs7O0ksTzs7Ozs7ZSxhOztlO3lCOzs7Ozs7MkI7OzRCLE87Ozs7O21ELE87OzsyQjs0QixPOzs7OzttRCxPOzsyQixPOzs7Ozs7O3FDLE87Ozs7O29CLE87Ozt5Qjs7Ozs7d0MsTztjO2M7O0c7O0k7Ozs7OztJLE87Ozs7O2UsYTs7ZTt5Qjs7Ozs7OzJCOzs0QixPOzs7OzttRCxPOzs7MkI7NEIsTzs7Ozs7bUQsTzs7MkIsTzs7Ozs7OztxQyxPOzs7OztvQixPOzs7eUI7Ozs7O3dDLE87YztjOztHO0c7O0ksTzs7Ozs7ZSxPO2M7Yzs7Ozs7NEI7Ozs7OEIsTzs7OztBLE87Ozs7VTs7Ozs0Qjs7Ozs4QixPOzs7O0E7OzswQjs7Ozs0Qjs7d0I7O0c7O0ksTzs7Ozs7ZSxPO2M7YztlLE87Ozs7eUI7O2M7ZTs7O2MsTzs7Ozt3QixPOzs7O2tDLE87Ozs7STs7Ozs7Rzs7SSxPOzs7OztlLE87YztjO2UsTzs7Ozt5Qjs7YztlOzs7YyxPOzs7O3dCLE87Ozs7a0MsTzs7OztJOzs7OztHO0c7STs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFIiwic291cmNlc0NvbnRlbnQiOltdfQ==
