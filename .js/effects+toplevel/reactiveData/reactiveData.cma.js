// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: ReactiveData
//# unitInfo: Requires: Assert_failure, React, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ReactiveData_Rlist_merge$3 = "ReactiveData.Rlist.merge",
    cst_merge_invalid_index$1 = "merge: invalid index",
    cst_src_reactiveData_ml = "src/reactiveData.ml",
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/reactiveData.cmi",
     'Caml1999I032\x84\x95\xa6\xbe\0\x002j\0\0\n%\0\0&\x9f\0\0&_\xa0,ReactiveData\xa0\xb4\xa0!S\x01\x02\xb0\xc0\x90\x91\xa0\xc1\xa0!t\x01\x02\xb7\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xa4@A@A@\xa0G@\xa0B@@@\xb0\xc04src/reactiveData.mlic\x01\x05\xb2\x01\x05\xb4\xc0\x04\x02c\x01\x05\xb2\x01\x05\xbd@@@@\xa1\x04\x19@A@\xa0\xc1\xa0$data\x01\x02\xb8\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xa5@A@A@\xa0G@\xa0B@@@\xb0\xc0\x04\x11f\x01\x05\xf9\x01\x05\xfb\xc0\x04\x12f\x01\x05\xf9\x01\x06\x07@@@@\xa1\x04)AA@\xa0\xc1\xa0%patch\x01\x02\xb9\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xa6@A@A@\xa0G@\xa0B@@@\xb0\xc0\x04!i\x01\x06\x1f\x01\x06!\xc0\x04"i\x01\x06\x1f\x01\x06.@@@@\xa1\x049BA@\xa0\xc1\xa0#msg\x01\x02\xba\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xa8@A\xa1\xa0\xe0\xa0%Patch\x01\x01\x10\x90\xa0\xc0\xb3\x90\x04"\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\0\xa9@@\xb0\xc0\x04;m\x01\x06X\x01\x06\\\xc0\x04<m\x01\x06X\x01\x06o@@\xa1\x04SD\xa0\xe0\xa0#Set\x01\x01\x11\x90\xa0\xc0\xb3\x90\x04A\xa0\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\0\xa7@@\xb0\xc0\x04Jo\x01\x06\xd5\x01\x06\xd9\xc0\x04Ko\x01\x06\xd5\x01\x06\xe9@@\xa1\x04bE@@A@\xa0O@\xa0@@@@\xb0\xc0\x04Pl\x01\x06H\x01\x06J\x04\x06@@@@\xa1\x04gCA@\xa0\xc1\xa0&handle\x01\x02\xbb\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xaa@A@A@\xa0G@\xa0B@@@\xb0\xc0\x04_s\x01\x07u\x01\x07w\xc0\x04`s\x01\x07u\x01\x07\x85@@@@\xa1\x04wFA@\xa0\xb0\xa0%empty\x01\x02\xbc\xd0\xc0\xb3\x90\x04u\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xab@\x90@\x02\x05\xf5\xe1\0@\0\xac@\xb0\xc0\x04qv\x01\x07\xa5\x01\x07\xa7\xc0\x04rv\x01\x07\xa5\x01\x07\xb7@@\xa1\x04\x89G@\xa0\xb0\xa0&create\x01\x02\xbd\xd0\xc0\xc1@\xc0\xb3\x047\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xaf@\x90@\x02\x05\xf5\xe1\0@\0\xad\xc0\x92\xa0\xc0\xb3\x04\x1f\xa0\x04\x0b@\x90@\x02\x05\xf5\xe1\0@\0\xb0\xa0\xc0\xb3\x90\x04:\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\0\xae@\x02\x05\xf5\xe1\0@\0\xb1@\x02\x05\xf5\xe1\0@\0\xb2@\xb0\xc0\x04\x91z\x01\b)\x01\b+\xc0\x04\x92z\x01\b)\x01\bS@@\xa1\x04\xa9H@\xa0\xb0\xa0*from_event\x01\x02\xbe\xd0\xc0\xc1@\xc0\xb3\x04W\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xb6@\x90@\x02\x05\xf5\xe1\0@\0\xb3\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92%React!E!t\xa0\xc0\xb3\x90\x04\x8c\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\xb4@\x90@\x02\x05\xf5\xe1\0@\0\xb5\xc0\xb3\x04N\xa0\x04\x1a@\x90@\x02\x05\xf5\xe1\0@\0\xb7@\x02\x05\xf5\xe1\0@\0\xb8@\x02\x05\xf5\xe1\0@\0\xb9@\xb0\xc0\x04\xba~\x01\b\xd3\x01\b\xd5\xc0\x04\xbb~\x01\b\xd3\x01\t\t@@\xa1\x04\xd2I@\xa0\xb0\xa0+from_signal\x01\x02\xbf\xd0\xc0\xc1\x91"eq\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xc0\xc0\xc1@\x04\x06\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xba@\x02\x05\xf5\xe1\0@\0\xbb@\x02\x05\xf5\xe1\0@\0\xbc@\x90@\x02\x05\xf5\xe1\0@\0\xbd\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92%React!S!t\xa0\xc0\xb3\x04\xa3\xa0\x04\x1c@\x90@\x02\x05\xf5\xe1\0@\0\xbe@\x90@\x02\x05\xf5\xe1\0@\0\xbf\xc0\xb3\x04\x85\xa0\x04!@\x90@\x02\x05\xf5\xe1\0@\0\xc1@\x02\x05\xf5\xe1\0@\0\xc2@\x02\x05\xf5\xe1\0@\0\xc3@\xb0\xc0\x04\xf1\0F\x01\n)\x01\n+\xc0\x04\xf2\0G\x01\n=\x01\nt@@\xa1\x05\x01\tJ@\xa0\xb0\xa0%const\x01\x02\xc0\xd0\xc0\xc1@\xc0\xb3\x04\xb7\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xc5@\x90@\x02\x05\xf5\xe1\0@\0\xc4\xc0\xb3\x04\x9c\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\0\xc6@\x02\x05\xf5\xe1\0@\0\xc7@\xb0\xc0\x05\x01\b\0J\x01\n\x9c\x01\n\x9e\xc0\x05\x01\t\0J\x01\n\x9c\x01\n\xb9@@\xa1\x05\x01 K@\xa0\xb0\xa0%patch\x01\x02\xc1\xd0\xc0\xc1@\xc0\xb3\x04\x87\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xc9@\x90@\x02\x05\xf5\xe1\0@\0\xc8\xc0\xc1@\xc0\xb3\x04\xe7\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\0\xca\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xcb@\x02\x05\xf5\xe1\0@\0\xcc@\x02\x05\xf5\xe1\0@\0\xcd@\xb0\xc0\x05\x01\'\0M\x01\x0b\x02\x01\x0b\x04\xc0\x05\x01(\0M\x01\x0b\x02\x01\x0b-@@\xa1\x05\x01?L@\xa0\xb0\xa0#set\x01\x02\xc2\xd0\xc0\xc1@\xc0\xb3\x04\xa6\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xcf@\x90@\x02\x05\xf5\xe1\0@\0\xce\xc0\xc1@\xc0\xb3\x04\xf7\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\0\xd0\xc0\xb3\x90\x04\x1f@\x90@\x02\x05\xf5\xe1\0@\0\xd1@\x02\x05\xf5\xe1\0@\0\xd2@\x02\x05\xf5\xe1\0@\0\xd3@\xb0\xc0\x05\x01D\0Q\x01\x0b\xa0\x01\x0b\xa2\xc0\x05\x01E\0Q\x01\x0b\xa0\x01\x0b\xc8@@\xa1\x05\x01\\M@\xa0\xb0\xa0\'map_msg\x01\x02\xc3\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xd5\xc0\x90\x90!b\x02\x05\xf5\xe1\0@\0\xd7@\x02\x05\xf5\xe1\0@\0\xd4\xc0\xc1@\xc0\xb3\x04\xab\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\xd6\xc0\xb3\x04\xaf\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\x02\x05\xf5\xe1\0@\0\xda@\xb0\xc0\x05\x01c\0T\x01\x0b\xe7\x01\x0b\xe9\xc0\x05\x01d\0T\x01\x0b\xe7\x01\f\x15@@\xa1\x05\x01{N@\xa0\xb0\xa0#map\x01\x02\xc4\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xdc\xc0\x90\x90!b\x02\x05\xf5\xe1\0@\0\xde@\x02\x05\xf5\xe1\0@\0\xdb\xc0\xc1@\xc0\xb3\x05\x01\x12\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\xdd\xc0\xb3\x05\x01\x16\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\xdf@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\xb0\xc0\x05\x01\x82\0Z\x01\r\x03\x01\r\x05\xc0\x05\x01\x83\0Z\x01\r\x03\x01\r)@@\xa1\x05\x01\x9aO@\xa0\xb0\xa0%value\x01\x02\xc5\xd0\xc0\xc1@\xc0\xb3\x05\x01%\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xe2\xc0\xb3\x05\x01P\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\0\xe4@\x02\x05\xf5\xe1\0@\0\xe5@\xb0\xc0\x05\x01\x99\0]\x01\rL\x01\rN\xc0\x05\x01\x9a\0]\x01\rL\x01\ri@@\xa1\x05\x01\xb1P@\xa0\xb0\xa0$fold\x01\x02\xc6\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xeb\xc0\xc1@\xc0\xb3\x04\xfc\xa0\xc0\x90\x90!b\x02\x05\xf5\xe1\0@\0\xe9@\x90@\x02\x05\xf5\xe1\0@\0\xe6\x04\x0e@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8\xc0\xc1@\xc0\xb3\x05\x01N\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\0\xea\xc0\xc1@\x04\x16\xc0\xb3\xa1\x90\x92%React&signal\xa0\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\0\xec@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\xb0\xc0\x05\x01\xc5\0g\x01\x0e\xe9\x01\x0e\xeb\xc0\x05\x01\xc6\0g\x01\x0e\xe9\x01\x0f+@@\xa1\x05\x01\xddQ@\xa0\xb0\xa0&signal\x01\x02\xc7\xd0\xc0\xc1\x91"eq\xc0\xb3\x05\x01\x0b\xa0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1@\x04\x06\xc0\xb3\x90\x05\x01\b@\x90@\x02\x05\xf5\xe1\0@\0\xf0@\x02\x05\xf5\xe1\0@\0\xf1@\x02\x05\xf5\xe1\0@\0\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xc0\xc1@\xc0\xb3\x05\x01|\xa0\x04\x10@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\xb3\xa1\xa1\x90\x92%React!S!t\xa0\xc0\xb3\x05\x01\xad\xa0\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\0\xf6@\x90@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\xb0\xc0\x05\x01\xf7\0j\x01\x0fW\x01\x0fY\xc0\x05\x01\xf8\0k\x01\x0ff\x01\x0f\x9d@@\xa1\x05\x02\x0fR@\xa0\xb0\xa0%event\x01\x02\xc8\xd0\xc0\xc1@\xc0\xb3\x05\x01\x9a\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\xfb@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xb3\xa1\xa1\x90\x92%React!E!t\xa0\xc0\xb3\x05\x01d\xa0\x04\x12@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x02\x19\0n\x01\x0f\xe0\x01\x0f\xe2\xc0\x05\x02\x1a\0n\x01\x0f\xe0\x01\x10\x06@@\xa1\x05\x021S@@@\xb0\xc0\x05\x02\x1d`\x01\x05m\x01\x05m\xc0\x05\x02\x1e\0p\x01\x10\b\x01\x10\x0b@\xa1\x05\x025T@\xa0\xd3\xa0%RList\x01\x02\xb1@\xc0\x91\xa0\xc1\xa0!p\x01\x02\xc9\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfe\xdf@A\xa1\xa0\xe0\xa0!I\x01\x01u\x90\xa0\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe0\xa0\x04\x12@@\xb0\xc0\x05\x02?\0y\x01\x10\xa5\x01\x10\xa9\xc0\x05\x02@\0y\x01\x10\xa5\x01\x10\xb8@@\xa1\x05\x02WV\xa0\xe0\xa0!R\x01\x01v\x90\xa0\xc0\xb3\x90\x04\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xde@@\xb0\xc0\x05\x02M\0z\x01\x10\xe5\x01\x10\xe9\xc0\x05\x02N\0z\x01\x10\xe5\x01\x10\xf3@@\xa1\x05\x02eW\xa0\xe0\xa0!U\x01\x01w\x90\xa0\xc0\xb3\x90\x04\x1f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xdd\xa0\x04/@@\xb0\xc0\x05\x02\\\0{\x01\x11\x1e\x01\x11"\xc0\x05\x02]\0{\x01\x11\x1e\x01\x111@@\xa1\x05\x02tX\xa0\xe0\xa0!X\x01\x01x\x90\xa0\xc0\xb3\x90\x04.@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xdc\xa0\xc0\xb3\x90\x043@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xdb@@\xb0\xc0\x05\x02o\0|\x01\x11i\x01\x11m\xc0\x05\x02p\0|\x01\x11i\x01\x11}@@\xa1\x05\x02\x87Y@@A@\xa0Y@\xa0@@@@\xb0\xc0\x05\x02u\0x\x01\x10\x97\x01\x10\x99\x04\x06@@@@\xa1\x05\x02\x8cUA@\xa0\xc1\xa0%patch\x01\x02\xca\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfe\xe1@A@A\x90\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x04c\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe2@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe3\xa0Y@\xa0@@@@\xb0\xc0\x05\x02\x91\x01\0\x89\x01\x13\xdc\x01\x13\xde\xc0\x05\x02\x92\x01\0\x89\x01\x13\xdc\x01\x13\xf7@@@@\xa1\x05\x02\xa9ZA@\xa0\xc1\xa0\x05\x02\xa1\x01\x02\xcb\b\0\0;\0\xa0\xc0\x05\x02\xa0\x02\x05\xf5\xe1\0@\x01\xfe\xe4@A@A@\x05\x02\x9d\x05\x02\x9c@@\xb0\xc0\x05\x02\x9b\x01\0\x8b\x01\x13\xf9\x01\x14\x03\xc0\x05\x02\x9c\x01\0\x8c\x01\x14!\x01\x14K@@@@\x05\x02\x9aA@\xa0\xc1\xa0\x05\x02\x99\x01\x02\xcc\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfe\xe5@A@A\x90\xc0\xb3\x90\x04%\xa0\x04\t@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe6\xa0Y@\xa0@@@@\x04\x14@@@\xa1\x05\x02\xc4[A@\xa0\xc1\xa0\x05\x02\x8b\x01\x02\xcd\b\0\0;\0\xa0\xc0\x05\x02\x8a\x02\x05\xf5\xe1\0@\x01\xfe\xe8@A\xa1\xa0\xe0\x05\x02\x87\x90\xa0\xc0\xb3\x90\x04D\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe9@@\x04%@\x05\x02\x82\xa0\xe0\x05\x02\x81\x90\xa0\xc0\xb3\x90\x04\'\xa0\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xe7@@\x04.@\x05\x02|@@A@\x05\x02{\x05\x02z@@\x04.@@@\x05\x02wA@\xa0\xc1\xa0\x05\x02v\x01\x02\xce\b\0\0;\0\xa0\xc0\x05\x02u\x02\x05\xf5\xe1\0@\x01\xfe\xea@A@A@\x05\x02r\x05\x02q@@\x044@@@\x05\x02mA@\xa0\xb0\xa0\x05\x02l\x01\x02\xcf\xd0\xc0\xb3\x90\x04?\xa0\xc0\x05\x02k\x02\x05\xf5\xe1\0@\x01\xfe\xeb@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xec@\x04>@\x05\x02e@\xa0\xb0\xa0\x05\x02d\x01\x02\xd0\xd0\xc0\xc1@\xc0\xb3\x04\x1b\xa0\xc0\x05\x02c\x02\x05\xf5\xe1\0@\x01\xfe\xef@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xed\xc0\x92\xa0\xc0\xb3\x04\x14\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf0\xa0\xc0\xb3\x90\x04$\xa0\x04\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xee@\x02\x05\xf5\xe1\0@\x01\xfe\xf1@\x02\x05\xf5\xe1\0@\x01\xfe\xf2@\x04V@\x05\x02]@\xa0\xb0\xa0\x05\x02\\\x01\x02\xd1\xd0\xc0\xc1@\xc0\xb3\x043\xa0\xc0\x05\x02[\x02\x05\xf5\xe1\0@\x01\xfe\xf6@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf3\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x02X\x05\x02U\x05\x02T\xa0\xc0\xb3\x90\x04T\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf4@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf5\xc0\xb3\x046\xa0\x04\x12@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf7@\x02\x05\xf5\xe1\0@\x01\xfe\xf8@\x02\x05\xf5\xe1\0@\x01\xfe\xf9@\x04r@\x05\x02P@\xa0\xb0\xa0\x05\x02O\x01\x02\xd2\xd0\xc0\xc1\x05\x02N\xc0\xb3\x05\x02L\xa0\xc0\xc1@\xc0\x05\x02I\x02\x05\xf5\xe1\0@\x01\xff\0\xc0\xc1@\x04\x03\xc0\xb3\x05\x02F@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfa@\x02\x05\xf5\xe1\0@\x01\xfe\xfb@\x02\x05\xf5\xe1\0@\x01\xfe\xfc@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfd\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x02C\x05\x02@\x05\x02?\xa0\xc0\xb3\x04b\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfe@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xff\xc0\xb3\x04X\xa0\x04\x16@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x01@\x02\x05\xf5\xe1\0@\x01\xff\x02@\x02\x05\xf5\xe1\0@\x01\xff\x03@\x04\x94@\x05\x02;@\xa0\xb0\xa0\x05\x02:\x01\x02\xd3\xd0\xc0\xc1@\xc0\xb3\x04q\xa0\xc0\x05\x029\x02\x05\xf5\xe1\0@\x01\xff\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x04\xc0\xb3\x04g\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x06@\x02\x05\xf5\xe1\0@\x01\xff\x07@\x04\xa3@\x05\x023@\xa0\xb0\xa0\x05\x022\x01\x02\xd4\xd0\xc0\xc1@\xc0\xb3\x04X\xa0\xc0\x05\x021\x02\x05\xf5\xe1\0@\x01\xff\t@\x90@\x02\x05\xf5\xe1\0@\x01\xff\b\xc0\xc1@\xc0\xb3\x04\x90\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xff\n\xc0\xb3\x05\x02.@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x0b@\x02\x05\xf5\xe1\0@\x01\xff\f@\x02\x05\xf5\xe1\0@\x01\xff\r@\x04\xb7@\x05\x02(@\xa0\xb0\xa0\x05\x02\'\x01\x02\xd5\xd0\xc0\xc1@\xc0\xb3\x04l\xa0\xc0\x05\x02&\x02\x05\xf5\xe1\0@\x01\xff\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x0e\xc0\xc1@\xc0\xb3\x04\x9b\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x10\xc0\xb3\x05\x02#@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x11@\x02\x05\xf5\xe1\0@\x01\xff\x12@\x02\x05\xf5\xe1\0@\x01\xff\x13@\x04\xcb@\x05\x02\x1f@\xa0\xb0\xa0\x05\x02\x1e\x01\x02\xd6\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x02\x1d\x02\x05\xf5\xe1\0@\x01\xff\x15\xc0\x05\x02\x1a\x02\x05\xf5\xe1\0@\x01\xff\x17@\x02\x05\xf5\xe1\0@\x01\xff\x14\xc0\xc1@\xc0\xb3\x04o\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x16\xc0\xb3\x04s\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x18@\x02\x05\xf5\xe1\0@\x01\xff\x19@\x02\x05\xf5\xe1\0@\x01\xff\x1a@\x04\xdf@\x05\x02\x14@\xa0\xb0\xa0\x05\x02\x13\x01\x02\xd7\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x02\x12\x02\x05\xf5\xe1\0@\x01\xff\x1c\xc0\x05\x02\x0f\x02\x05\xf5\xe1\0@\x01\xff\x1e@\x02\x05\xf5\xe1\0@\x01\xff\x1b\xc0\xc1@\xc0\xb3\x04\xb3\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1d\xc0\xb3\x04\xb7\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1f@\x02\x05\xf5\xe1\0@\x01\xff @\x02\x05\xf5\xe1\0@\x01\xff!@\x04\xf3@\x05\x02\t@\xa0\xb0\xa0\x05\x02\b\x01\x02\xd8\xd0\xc0\xc1@\xc0\xb3\x04\xc1\xa0\xc0\x05\x02\x07\x02\x05\xf5\xe1\0@\x01\xff#@\x90@\x02\x05\xf5\xe1\0@\x01\xff"\xc0\xb3\x04\xd5\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xff$@\x02\x05\xf5\xe1\0@\x01\xff%@\x05\x01\x02@\x05\x02\x01@\xa0\xb0\xa0\x05\x02\0\x01\x02\xd9\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x01\xff\x02\x05\xf5\xe1\0@\x01\xff+\xc0\xc1@\xc0\xb3\x04\xa5\xa0\xc0\x05\x01\xfc\x02\x05\xf5\xe1\0@\x01\xff)@\x90@\x02\x05\xf5\xe1\0@\x01\xff&\x04\b@\x02\x05\xf5\xe1\0@\x01\xff\'@\x02\x05\xf5\xe1\0@\x01\xff(\xc0\xc1@\xc0\xb3\x04\xdc\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xff*\xc0\xc1@\x04\x10\xc0\xb3\xa1\x05\x01\xf9\x05\x01\xf6\xa0\x04\x14@\x90@\x02\x05\xf5\xe1\0@\x01\xff,@\x02\x05\xf5\xe1\0@\x01\xff-@\x02\x05\xf5\xe1\0@\x01\xff.@\x02\x05\xf5\xe1\0@\x01\xff/@\x05\x01\x1f@\x05\x01\xf2@\xa0\xb0\xa0\x05\x01\xf1\x01\x02\xda\xd0\xc0\xc1\x05\x01\xf0\xc0\xb3\x05\x02\xf9\xa0\xc0\xc1@\xc0\x05\x01\xee\x02\x05\xf5\xe1\0@\x01\xff5\xc0\xc1@\x04\x03\xc0\xb3\x05\x01\xeb@\x90@\x02\x05\xf5\xe1\0@\x01\xff0@\x02\x05\xf5\xe1\0@\x01\xff1@\x02\x05\xf5\xe1\0@\x01\xff2@\x90@\x02\x05\xf5\xe1\0@\x01\xff3\xc0\xc1@\xc0\xb3\x04\xfb\xa0\x04\f@\x90@\x02\x05\xf5\xe1\0@\x01\xff4\xc0\xb3\xa1\xa1\x05\x01\xea\x05\x01\xe7\x05\x01\xe6\xa0\xc0\xb3\x05\x01\x13\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xff6@\x90@\x02\x05\xf5\xe1\0@\x01\xff7@\x02\x05\xf5\xe1\0@\x01\xff8@\x02\x05\xf5\xe1\0@\x01\xff9@\x05\x01A@\x05\x01\xe2@\xa0\xb0\xa0\x05\x01\xe1\x01\x02\xdb\xd0\xc0\xc1@\xc0\xb3\x05\x01\x0f\xa0\xc0\x05\x01\xe0\x02\x05\xf5\xe1\0@\x01\xff;@\x90@\x02\x05\xf5\xe1\0@\x01\xff:\xc0\xb3\xa1\xa1\x05\x01\xdd\x05\x01\xda\x05\x01\xd9\xa0\xc0\xb3\x04\xe9\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xff<@\x90@\x02\x05\xf5\xe1\0@\x01\xff=@\x02\x05\xf5\xe1\0@\x01\xff>@\x05\x01V@\x05\x01\xd5@\xa0\xb0\xa0$cons\x01\x02\xdc\xd0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xff?\xc0\xc1@\xc0\xb3\x05\x01\x12\xa0\x04\t@\x90@\x02\x05\xf5\xe1\0@\x01\xff@\xc0\xb3\x90\x05\x02\xe1@\x90@\x02\x05\xf5\xe1\0@\x01\xffA@\x02\x05\xf5\xe1\0@\x01\xffB@\x02\x05\xf5\xe1\0@\x01\xffC@\xb0\xc0\x05\x04\x06\x01\0\x8f\x01\x14s\x01\x14u\xc0\x05\x04\x07\x01\0\x8f\x01\x14s\x01\x14\x97@@\xa1\x05\x04\x1e]@\xa0\xb0\xa0$snoc\x01\x02\xdd\xd0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffD\xc0\xc1@\xc0\xb3\x05\x01+\xa0\x04\t@\x90@\x02\x05\xf5\xe1\0@\x01\xffE\xc0\xb3\x90\x05\x02\xfa@\x90@\x02\x05\xf5\xe1\0@\x01\xffF@\x02\x05\xf5\xe1\0@\x01\xffG@\x02\x05\xf5\xe1\0@\x01\xffH@\xb0\xc0\x05\x04\x1f\x01\0\x92\x01\x14\xb9\x01\x14\xbb\xc0\x05\x04 \x01\0\x92\x01\x14\xb9\x01\x14\xdd@@\xa1\x05\x047^@\xa0\xb0\xa0&insert\x01\x02\xde\xd0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffJ\xc0\xc1@\xc0\xb3\x90\x05\x01\xf8@\x90@\x02\x05\xf5\xe1\0@\x01\xffI\xc0\xc1@\xc0\xb3\x05\x01J\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xffK\xc0\xb3\x90\x05\x03\x19@\x90@\x02\x05\xf5\xe1\0@\x01\xffL@\x02\x05\xf5\xe1\0@\x01\xffM@\x02\x05\xf5\xe1\0@\x01\xffN@\x02\x05\xf5\xe1\0@\x01\xffO@\xb0\xc0\x05\x04>\x01\0\x97\x01\x15y\x01\x15{\xc0\x05\x04?\x01\0\x97\x01\x15y\x01\x15\xa6@@\xa1\x05\x04V_@\xa0\xb0\xa0&remove\x01\x02\xdf\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xffP\xc0\xc1@\xc0\xb3\x05\x01c\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffQ@\x90@\x02\x05\xf5\xe1\0@\x01\xffR\xc0\xb3\x90\x05\x036@\x90@\x02\x05\xf5\xe1\0@\x01\xffS@\x02\x05\xf5\xe1\0@\x01\xffT@\x02\x05\xf5\xe1\0@\x01\xffU@\xb0\xc0\x05\x04[\x01\0\x9c\x01\x16>\x01\x16@\xc0\x05\x04\\\x01\0\x9c\x01\x16>\x01\x16e@@\xa1\x05\x04s`@\xa0\xb0\xa0+remove_last\x01\x02\xe0\xd0\xc0\xc1@\xc0\x92\xa0\xc0\xb3\x05\x01\x96\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffW@\x90@\x02\x05\xf5\xe1\0@\x01\xffX\xa0\xc0\xb3\x05\x01\x86\xa0\x04\t@\x90@\x02\x05\xf5\xe1\0@\x01\xffV@\x02\x05\xf5\xe1\0@\x01\xffY\xc0\xb3\x90\x05\x03U@\x90@\x02\x05\xf5\xe1\0@\x01\xffZ@\x02\x05\xf5\xe1\0@\x01\xff[@\xb0\xc0\x05\x04z\x01\0\x9f\x01\x16\xa0\x01\x16\xa2\xc0\x05\x04{\x01\0\x9f\x01\x16\xa0\x01\x16\xce@@\xa1\x05\x04\x92a@\xa0\xb0\xa0)remove_eq\x01\x02\xe1\xd0\xc0\xc1\x91"eq\xc0\xb3\x05\x03\xc0\xa0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffc\xc0\xc1@\x04\x06\xc0\xb3\x90\x05\x03\xbd@\x90@\x02\x05\xf5\xe1\0@\x01\xff\\@\x02\x05\xf5\xe1\0@\x01\xff]@\x02\x05\xf5\xe1\0@\x01\xff^@\x90@\x02\x05\xf5\xe1\0@\x01\xff_\xc0\xc1@\xc0\x92\xa0\xc0\xb3\x05\x01\xc9\xa0\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xffa\xa0\xc0\xb3\x05\x01\xb5\xa0\x04\x18@\x90@\x02\x05\xf5\xe1\0@\x01\xff`@\x02\x05\xf5\xe1\0@\x01\xffb\xc0\xc1@\x04\x1b\xc0\xb3\x90\x05\x03\x86@\x90@\x02\x05\xf5\xe1\0@\x01\xffd@\x02\x05\xf5\xe1\0@\x01\xffe@\x02\x05\xf5\xe1\0@\x01\xfff@\x02\x05\xf5\xe1\0@\x01\xffg@\xb0\xc0\x05\x04\xab\x01\0\xa2\x01\x17\x15\x01\x17\x17\xc0\x05\x04\xac\x01\0\xa2\x01\x17\x15\x01\x17a@@\xa1\x05\x04\xc3b@\xa0\xb0\xa0&update\x01\x02\xe2\xd0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffi\xc0\xc1@\xc0\xb3\x90\x05\x02\x84@\x90@\x02\x05\xf5\xe1\0@\x01\xffh\xc0\xc1@\xc0\xb3\x05\x01\xd6\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xffj\xc0\xb3\x90\x05\x03\xa5@\x90@\x02\x05\xf5\xe1\0@\x01\xffk@\x02\x05\xf5\xe1\0@\x01\xffl@\x02\x05\xf5\xe1\0@\x01\xffm@\x02\x05\xf5\xe1\0@\x01\xffn@\xb0\xc0\x05\x04\xca\x01\0\xa6\x01\x17\xcf\x01\x17\xd1\xc0\x05\x04\xcb\x01\0\xa6\x01\x17\xcf\x01\x17\xfc@@\xa1\x05\x04\xe2c@\xa0\xb0\xa0)update_eq\x01\x02\xe3\xd0\xc0\xc1\x91"eq\xc0\xb3\x05\x04\x10\xa0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xffv\xc0\xc1@\x04\x06\xc0\xb3\x90\x05\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xffo@\x02\x05\xf5\xe1\0@\x01\xffp@\x02\x05\xf5\xe1\0@\x01\xffq@\x90@\x02\x05\xf5\xe1\0@\x01\xffr\xc0\xc1@\xc0\x92\xa0\xc0\xb3\x05\x02\x19\xa0\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xfft\xa0\xc0\xb3\x05\x02\x05\xa0\x04\x18@\x90@\x02\x05\xf5\xe1\0@\x01\xffs@\x02\x05\xf5\xe1\0@\x01\xffu\xc0\xc1@\x04\x1b\xc0\xc1@\x04\x1d\xc0\xb3\x90\x05\x03\xd8@\x90@\x02\x05\xf5\xe1\0@\x01\xffw@\x02\x05\xf5\xe1\0@\x01\xffx@\x02\x05\xf5\xe1\0@\x01\xffy@\x02\x05\xf5\xe1\0@\x01\xffz@\x02\x05\xf5\xe1\0@\x01\xff{@\xb0\xc0\x05\x04\xfd\x01\0\xaa\x01\x18j\x01\x18l\xc0\x05\x04\xfe\x01\0\xaa\x01\x18j\x01\x18\xbc@@\xa1\x05\x05\x15d@\xa0\xb0\xa0$move\x01\x02\xe4\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xd0@\x90@\x02\x05\xf5\xe1\0@\x01\xff|\xc0\xc1@\xc0\xb3\x90\x05\x02\xd6@\x90@\x02\x05\xf5\xe1\0@\x01\xff}\xc0\xc1@\xc0\xb3\x05\x02(\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xff~@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x7f\xc0\xb3\x90\x05\x03\xfb@\x90@\x02\x05\xf5\xe1\0@\0\x80@\x02\x05\xf5\xe1\0@\0\x81@\x02\x05\xf5\xe1\0@\0\x82@\x02\x05\xf5\xe1\0@\0\x83@\xb0\xc0\x05\x05 \x01\0\xaf\x01\x19c\x01\x19e\xc0\x05\x05!\x01\0\xaf\x01\x19c\x01\x19\x8f@@\xa1\x05\x058e@\xa0\xb0\xa0)singleton\x01\x02\xe5\xd0\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x84\xc0\xb3\x05\x02\\\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\0\x85@\x02\x05\xf5\xe1\0@\0\x86@\xb0\xc0\x05\x053\x01\0\xb2\x01\x19\xd7\x01\x19\xd9\xc0\x05\x054\x01\0\xb2\x01\x19\xd7\x01\x19\xf3@@\xa1\x05\x05Kf@\xa0\xb0\xa0+singleton_s\x01\x02\xe6\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92%React!S!t\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x88@\x90@\x02\x05\xf5\xe1\0@\0\x87\xc0\xb3\x05\x02z\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\0\x89@\x02\x05\xf5\xe1\0@\0\x8a@\xb0\xc0\x05\x05Q\x01\0\xb6\x01\x1aZ\x01\x1a\\\xc0\x05\x05R\x01\0\xb6\x01\x1aZ\x01\x1a\x82@@\xa1\x05\x05ig@\xa0\xb0\xa0&concat\x01\x02\xe7\xd0\xc0\xc1@\xc0\xb3\x05\x02\x89\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x8d@\x90@\x02\x05\xf5\xe1\0@\0\x8b\xc0\xc1@\xc0\xb3\x05\x02\x93\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\0\x8c\xc0\xb3\x05\x02\x97\xa0\x04\x0e@\x90@\x02\x05\xf5\xe1\0@\0\x8e@\x02\x05\xf5\xe1\0@\0\x8f@\x02\x05\xf5\xe1\0@\0\x90@\xb0\xc0\x05\x05n\x01\0\xba\x01\x1a\xf5\x01\x1a\xf7\xc0\x05\x05o\x01\0\xba\x01\x1a\xf5\x01\x1b\x18@@\xa1\x05\x05\x86h@\xa0\xb0\xa0#rev\x01\x02\xe8\xd0\xc0\xc1@\xc0\xb3\x05\x02\xa6\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x92@\x90@\x02\x05\xf5\xe1\0@\0\x91\xc0\xb3\x05\x02\xae\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\0\x93@\x02\x05\xf5\xe1\0@\0\x94@\xb0\xc0\x05\x05\x85\x01\0\xbe\x01\x1bm\x01\x1bo\xc0\x05\x05\x86\x01\0\xbe\x01\x1bm\x01\x1b\x85@@\xa1\x05\x05\x9di@\xa0\xb0\xa0&filter\x01\x02\xe9\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x98\xc0\xb3\x90\x05\x04\xc1@\x90@\x02\x05\xf5\xe1\0@\0\x95@\x02\x05\xf5\xe1\0@\0\x96\xc0\xc1@\xc0\xb3\x05\x02\xc9\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\x97\xc0\xb3\x05\x02\xcd\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\0\x99@\x02\x05\xf5\xe1\0@\0\x9a@\x02\x05\xf5\xe1\0@\0\x9b@\xb0\xc0\x05\x05\xa4\x01\0\xc2\x01\x1c\f\x01\x1c\x0e\xc0\x05\x05\xa5\x01\0\xc2\x01\x1c\f\x01\x1c7@@\xa1\x05\x05\xbcj@\xa0\xb0\xa0\'for_all\x01\x02\xea\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\0\x9e\xc0\xb3\x90\x05\x04\xe0@\x90@\x02\x05\xf5\xe1\0@\0\x9c@\x02\x05\xf5\xe1\0@\0\x9d\xc0\xc1@\xc0\xb3\x05\x02\xe8\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\0\x9f\xc0\xb3\xa1\xa1\x90\x92%React!S!t\xa0\xc0\xb3\x90\x05\x04\xf4@\x90@\x02\x05\xf5\xe1\0@\0\xa0@\x90@\x02\x05\xf5\xe1\0@\0\xa1@\x02\x05\xf5\xe1\0@\0\xa2@\x02\x05\xf5\xe1\0@\0\xa3@\xb0\xc0\x05\x05\xce\x01\0\xc6\x01\x1c\xa7\x01\x1c\xa9\xc0\x05\x05\xcf\x01\0\xc6\x01\x1c\xa7\x01\x1c\xdd@@\xa1\x05\x05\xe6k@@@\xb0\xc0\x05\x05\xd2\0s\x01\x101\x01\x101\xc0\x05\x05\xd3\x01\0\xc8\x01\x1c\xdf\x01\x1c\xe2@\xa1\x05\x05\xeal@@\xa0\xd3\xa0$RMap\x01\x02\xb2@\xc0\xa2\xa0\x90\xa0!M\x01\x02\xb6\x90\xa1\xa1\x90\x92&Stdlib#Map!S\x91\xa0\xc1\xa0%patch\x01\x02\xeb\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfep@A@A\x90\xc0\xb3\x90\x05\x03q\xa0\xc0\x98\xd0\xa0\xa0#Del\x90\x90\xc0\xb3\xa1\x90\x04&#key@\x90@\x02\x05\xf5\xe1\0@\x01\xfes\xa0\xa0#Add\x90\x90\xc0\x92\xa0\xc0\xb3\xa1\x04\x0e#key@\x90@\x02\x05\xf5\xe1\0@\x01\xfeq\xa0\x04%@\x02\x05\xf5\xe1\0@\x01\xfer@\xc0@\x02\x05\xf5\xe1\0@\x01\xfetA@@\x02\x05\xf5\xe1\0@\x01\xfeu@\x90@\x02\x05\xf5\xe1\0@\x01\xfev\xa0Y@\xa0@@@@\xb0\xc0\x05\x06\x18\x01\0\xce\x01\x1d%\x01\x1d\'\xc0\x05\x06\x19\x01\0\xce\x01\x1d%\x01\x1db@@@@\xa1\x05\x060nA@\xa0\xc1\xa0\x05\x06(\x01\x02\xec\b\0\0;\0\xa0\xc0\x05\x06\'\x02\x05\xf5\xe1\0@\x01\xfew@A@A@\x05\x06$\x05\x06#@@\xb0\xc0\x05\x06"\x01\0\xd0\x01\x1dd\x01\x1dn\xc0\x05\x06#\x01\0\xd1\x01\x1d\x8b\x01\x1d\xb5@@@@\x05\x06!A@\xa0\xc1\xa0\x05\x06 \x01\x02\xed\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfex@A@A\x90\xc0\xb3\xa1\x04/!t\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfey\xa0I@\xa0B@@@\x04\x15@@@\xa1\x05\x06LoA@\xa0\xc1\xa0\x05\x06\x13\x01\x02\xee\b\0\0;\0\xa0\xc0\x05\x06\x12\x02\x05\xf5\xe1\0@\x01\xfe{@A\xa1\xa0\xe0\x05\x06\x0f\x90\xa0\xc0\xb3\x90\x04[\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe|@@\x04&@\x05\x06\n\xa0\xe0\x05\x06\t\x90\xa0\xc0\xb3\x90\x04(\xa0\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xfez@@\x04/@\x05\x06\x04@@A@\x05\x06\x03\x05\x06\x02@@\x04/@@@\x05\x05\xffA@\xa0\xc1\xa0\x05\x05\xfe\x01\x02\xef\b\0\0;\0\xa0\xc0\x05\x05\xfd\x02\x05\xf5\xe1\0@\x01\xfe}@A@A@\x05\x05\xfa\x05\x05\xf9@@\x045@@@\x05\x05\xf5A@\xa0\xb0\xa0\x05\x05\xf4\x01\x02\xf0\xd0\xc0\xb3\x90\x04@\xa0\xc0\x05\x05\xf3\x02\x05\xf5\xe1\0@\x01\xfe~@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x7f@\x04?@\x05\x05\xed@\xa0\xb0\xa0\x05\x05\xec\x01\x02\xf1\xd0\xc0\xc1@\xc0\xb3\x04\x1b\xa0\xc0\x05\x05\xeb\x02\x05\xf5\xe1\0@\x01\xfe\x82@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x80\xc0\x92\xa0\xc0\xb3\x04\x14\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x83\xa0\xc0\xb3\x90\x04$\xa0\x04\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x81@\x02\x05\xf5\xe1\0@\x01\xfe\x84@\x02\x05\xf5\xe1\0@\x01\xfe\x85@\x04W@\x05\x05\xe5@\xa0\xb0\xa0\x05\x05\xe4\x01\x02\xf2\xd0\xc0\xc1@\xc0\xb3\x043\xa0\xc0\x05\x05\xe3\x02\x05\xf5\xe1\0@\x01\xfe\x89@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x86\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05\xe0\x05\x05\xdd\x05\x05\xdc\xa0\xc0\xb3\x90\x04T\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x87@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x88\xc0\xb3\x046\xa0\x04\x12@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x8a@\x02\x05\xf5\xe1\0@\x01\xfe\x8b@\x02\x05\xf5\xe1\0@\x01\xfe\x8c@\x04s@\x05\x05\xd8@\xa0\xb0\xa0\x05\x05\xd7\x01\x02\xf3\xd0\xc0\xc1\x05\x05\xd6\xc0\xb3\x05\x05\xd4\xa0\xc0\xc1@\xc0\x05\x05\xd1\x02\x05\xf5\xe1\0@\x01\xfe\x93\xc0\xc1@\x04\x03\xc0\xb3\x05\x05\xce@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x8d@\x02\x05\xf5\xe1\0@\x01\xfe\x8e@\x02\x05\xf5\xe1\0@\x01\xfe\x8f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x90\xc0\xc1@\xc0\xb3\xa1\xa1\x05\x05\xcb\x05\x05\xc8\x05\x05\xc7\xa0\xc0\xb3\x04b\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x91@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x92\xc0\xb3\x04X\xa0\x04\x16@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x94@\x02\x05\xf5\xe1\0@\x01\xfe\x95@\x02\x05\xf5\xe1\0@\x01\xfe\x96@\x04\x95@\x05\x05\xc3@\xa0\xb0\xa0\x05\x05\xc2\x01\x02\xf4\xd0\xc0\xc1@\xc0\xb3\x04q\xa0\xc0\x05\x05\xc1\x02\x05\xf5\xe1\0@\x01\xfe\x98@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x97\xc0\xb3\x04g\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x99@\x02\x05\xf5\xe1\0@\x01\xfe\x9a@\x04\xa4@\x05\x05\xbb@\xa0\xb0\xa0\x05\x05\xba\x01\x02\xf5\xd0\xc0\xc1@\xc0\xb3\x04X\xa0\xc0\x05\x05\xb9\x02\x05\xf5\xe1\0@\x01\xfe\x9c@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x9b\xc0\xc1@\xc0\xb3\x04\x90\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x9d\xc0\xb3\x05\x05\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x9e@\x02\x05\xf5\xe1\0@\x01\xfe\x9f@\x02\x05\xf5\xe1\0@\x01\xfe\xa0@\x04\xb8@\x05\x05\xb0@\xa0\xb0\xa0\x05\x05\xaf\x01\x02\xf6\xd0\xc0\xc1@\xc0\xb3\x04l\xa0\xc0\x05\x05\xae\x02\x05\xf5\xe1\0@\x01\xfe\xa2@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xa1\xc0\xc1@\xc0\xb3\x04\x9b\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xa3\xc0\xb3\x05\x05\xab@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xa4@\x02\x05\xf5\xe1\0@\x01\xfe\xa5@\x02\x05\xf5\xe1\0@\x01\xfe\xa6@\x04\xcc@\x05\x05\xa7@\xa0\xb0\xa0\x05\x05\xa6\x01\x02\xf7\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x05\xa5\x02\x05\xf5\xe1\0@\x01\xfe\xa8\xc0\x05\x05\xa2\x02\x05\xf5\xe1\0@\x01\xfe\xaa@\x02\x05\xf5\xe1\0@\x01\xfe\xa7\xc0\xc1@\xc0\xb3\x04o\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xa9\xc0\xb3\x04s\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xab@\x02\x05\xf5\xe1\0@\x01\xfe\xac@\x02\x05\xf5\xe1\0@\x01\xfe\xad@\x04\xe0@\x05\x05\x9c@\xa0\xb0\xa0\x05\x05\x9b\x01\x02\xf8\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x05\x9a\x02\x05\xf5\xe1\0@\x01\xfe\xaf\xc0\x05\x05\x97\x02\x05\xf5\xe1\0@\x01\xfe\xb1@\x02\x05\xf5\xe1\0@\x01\xfe\xae\xc0\xc1@\xc0\xb3\x04\xb3\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xb0\xc0\xb3\x04\xb7\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xb2@\x02\x05\xf5\xe1\0@\x01\xfe\xb3@\x02\x05\xf5\xe1\0@\x01\xfe\xb4@\x04\xf4@\x05\x05\x91@\xa0\xb0\xa0\x05\x05\x90\x01\x02\xf9\xd0\xc0\xc1@\xc0\xb3\x04\xc1\xa0\xc0\x05\x05\x8f\x02\x05\xf5\xe1\0@\x01\xfe\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xb5\xc0\xb3\x04\xd5\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xb7@\x02\x05\xf5\xe1\0@\x01\xfe\xb8@\x05\x01\x03@\x05\x05\x89@\xa0\xb0\xa0\x05\x05\x88\x01\x02\xfa\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\x05\x87\x02\x05\xf5\xe1\0@\x01\xfe\xbe\xc0\xc1@\xc0\xb3\x04\xa5\xa0\xc0\x05\x05\x84\x02\x05\xf5\xe1\0@\x01\xfe\xbc@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xb9\x04\b@\x02\x05\xf5\xe1\0@\x01\xfe\xba@\x02\x05\xf5\xe1\0@\x01\xfe\xbb\xc0\xc1@\xc0\xb3\x04\xdc\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xbd\xc0\xc1@\x04\x10\xc0\xb3\xa1\x05\x05\x81\x05\x05~\xa0\x04\x14@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xbf@\x02\x05\xf5\xe1\0@\x01\xfe\xc0@\x02\x05\xf5\xe1\0@\x01\xfe\xc1@\x02\x05\xf5\xe1\0@\x01\xfe\xc2@\x05\x01 @\x05\x05z@\xa0\xb0\xa0\x05\x05y\x01\x02\xfb\xd0\xc0\xc1\x05\x05x\xc0\xb3\x05\x06\x81\xa0\xc0\xc1@\xc0\x05\x05v\x02\x05\xf5\xe1\0@\x01\xfe\xc8\xc0\xc1@\x04\x03\xc0\xb3\x05\x05s@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xc3@\x02\x05\xf5\xe1\0@\x01\xfe\xc4@\x02\x05\xf5\xe1\0@\x01\xfe\xc5@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xc6\xc0\xc1@\xc0\xb3\x04\xfb\xa0\x04\f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xc7\xc0\xb3\xa1\xa1\x05\x05r\x05\x05o\x05\x05n\xa0\xc0\xb3\x05\x01\x13\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xc9@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xca@\x02\x05\xf5\xe1\0@\x01\xfe\xcb@\x02\x05\xf5\xe1\0@\x01\xfe\xcc@\x05\x01B@\x05\x05j@\xa0\xb0\xa0\x05\x05i\x01\x02\xfc\xd0\xc0\xc1@\xc0\xb3\x05\x01\x0f\xa0\xc0\x05\x05h\x02\x05\xf5\xe1\0@\x01\xfe\xce@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xcd\xc0\xb3\xa1\xa1\x05\x05e\x05\x05b\x05\x05a\xa0\xc0\xb3\x04\xe9\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xcf@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xd0@\x02\x05\xf5\xe1\0@\x01\xfe\xd1@\x05\x01W@\x05\x05]@\xa0\xb0\xa0&filter\x01\x02\xfd\xd0\xc0\xc1@\xc0\xc1@\xc0\xb3\xa1\x05\x01\x82#key@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xd2\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfe\xd7\xc0\xb3\x90\x05\x06\xb8@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xd3@\x02\x05\xf5\xe1\0@\x01\xfe\xd4@\x02\x05\xf5\xe1\0@\x01\xfe\xd5\xc0\xc1@\xc0\xb3\x05\x018\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xd6\xc0\xb3\x05\x01<\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xd8@\x02\x05\xf5\xe1\0@\x01\xfe\xd9@\x02\x05\xf5\xe1\0@\x01\xfe\xda@\xb0\xc0\x05\x07\x9b\x01\0\xd5\x01\x1e<\x01\x1e>\xc0\x05\x07\x9c\x01\0\xd5\x01\x1e<\x01\x1ep@@\xa1\x05\x07\xb3q@@@\xb0\xc0\x05\x07\x9f\x01\0\xcb\x01\x1d\x07\x01\x1d\x07\xc0\x05\x07\xa0\x01\0\xd7\x01\x1er\x01\x1eu@\xa1\x05\x07\xb7r@@\xa0\xb4\xa0$DATA\x01\x02\xb3\xc0\x90\x91\xa0\xc1\xa0$data\x01\x02\xfe\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeD@A@A@\xa0G@\xa0B@@@\xb0\xc0\x05\x07\xb6\x01\0\xe0\x01\x1fW\x01\x1fY\xc0\x05\x07\xb7\x01\0\xe0\x01\x1fW\x01\x1fe@@@@\xa1\x05\x07\xcesA@\xa0\xc1\xa0%patch\x01\x02\xff\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeE@A@A@\xa0G@\xa0B@@@\xb0\xc0\x05\x07\xc6\x01\0\xe3\x01\x1f\x99\x01\x1f\x9b\xc0\x05\x07\xc7\x01\0\xe3\x01\x1f\x99\x01\x1f\xa8@@@@\xa1\x05\x07\xdetA@\xa0\xb0\xa0%merge\x01\x03\0\xd0\xc0\xc1@\xc0\xb3\x90\x04\x18\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeH@\x90@\x02\x05\xf5\xe1\0@\x01\xfeF\xc0\xc1@\xc0\xb3\x90\x043\xa0\x04\x0b@\x90@\x02\x05\xf5\xe1\0@\x01\xfeG\xc0\xb3\x04\x05\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xfeI@\x02\x05\xf5\xe1\0@\x01\xfeJ@\x02\x05\xf5\xe1\0@\x01\xfeK@\xb0\xc0\x05\x07\xe5\x01\0\xe7\x01 +\x01 -\xc0\x05\x07\xe6\x01\0\xe7\x01 +\x01 W@@\xa1\x05\x07\xfdu@\xa0\xb0\xa0)map_patch\x01\x03\x01\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeM\xc0\x90\x90!b\x02\x05\xf5\xe1\0@\x01\xfeO@\x02\x05\xf5\xe1\0@\x01\xfeL\xc0\xc1@\xc0\xb3\x04+\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfeN\xc0\xb3\x04/\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfeP@\x02\x05\xf5\xe1\0@\x01\xfeQ@\x02\x05\xf5\xe1\0@\x01\xfeR@\xb0\xc0\x05\b\x04\x01\0\xea\x01 t\x01 v\xc0\x05\b\x05\x01\0\xea\x01 t\x01 \xa8@@\xa1\x05\b\x1cv@\xa0\xb0\xa0(map_data\x01\x03\x02\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeT\xc0\x90\x90!b\x02\x05\xf5\xe1\0@\x01\xfeV@\x02\x05\xf5\xe1\0@\x01\xfeS\xc0\xc1@\xc0\xb3\x04?\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfeU\xc0\xb3\x04C\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfeW@\x02\x05\xf5\xe1\0@\x01\xfeX@\x02\x05\xf5\xe1\0@\x01\xfeY@\xb0\xc0\x05\b#\x01\0\xee\x01!\x1b\x01!\x1d\xc0\x05\b$\x01\0\xee\x01!\x1b\x01!L@@\xa1\x05\b;w@\xa0\xb0\xa0%empty\x01\x03\x03\xd0\xc0\xb3\x04P\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfeZ@\x90@\x02\x05\xf5\xe1\0@\x01\xfe[@\xb0\xc0\x05\b4\x01\0\xf1\x01!g\x01!i\xc0\x05\b5\x01\0\xf1\x01!g\x01!|@@\xa1\x05\bLx@\xa0\xb0\xa0%equal\x01\x03\x04\xd0\xc0\xc1@\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfe`\xc0\xc1@\x04\x06\xc0\xb3\x90\x05\x07r@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\\@\x02\x05\xf5\xe1\0@\x01\xfe]@\x02\x05\xf5\xe1\0@\x01\xfe^\xc0\xc1@\xc0\xb3\x04q\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe_\xc0\xc1@\xc0\xb3\x04w\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xfea\xc0\xb3\x90\x05\x07\x82@\x90@\x02\x05\xf5\xe1\0@\x01\xfeb@\x02\x05\xf5\xe1\0@\x01\xfec@\x02\x05\xf5\xe1\0@\x01\xfed@\x02\x05\xf5\xe1\0@\x01\xfee@\xb0\xc0\x05\b[\x01\0\xf5\x01!\xe6\x01!\xe8\xc0\x05\b\\\x01\0\xf5\x01!\xe6\x01"$@@\xa1\x05\bsy@\xa0\xb0\xa0$diff\x01\x03\x05\xd0\xc0\xc1\x90"eq\xc0\xc1@\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfek\xc0\xc1@\x04\x06\xc0\xb3\x90\x05\x07\x9b@\x90@\x02\x05\xf5\xe1\0@\x01\xfef@\x02\x05\xf5\xe1\0@\x01\xfeg@\x02\x05\xf5\xe1\0@\x01\xfeh\xc0\xc1@\xc0\xb3\x04\x9a\xa0\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\x01\xfei\xc0\xc1@\xc0\xb3\x04\xa0\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xfej\xc0\xb3\x04\xaf\xa0\x04\x19@\x90@\x02\x05\xf5\xe1\0@\x01\xfel@\x02\x05\xf5\xe1\0@\x01\xfem@\x02\x05\xf5\xe1\0@\x01\xfen@\x02\x05\xf5\xe1\0@\x01\xfeo@\xb0\xc0\x05\b\x84\x01\0\xfc\x01#\x0f\x01#\x11\xc0\x05\b\x85\x01\0\xfc\x01#\x0f\x01#S@@\xa1\x05\b\x9cz@@@\xb0\xc0\x05\b\x88\x01\0\xdd\x01\x1f\'\x01\x1f\'\xc0\x05\b\x89\x01\0\xfe\x01#U\x01#X@\xa1\x05\b\xa0{@\xa0\xd3\xa0$Make\x01\x02\xb4@\xc0\xa2\xa0\x90\xa0!D\x01\x02\xb5\x90\x90\x04\xf3\x91\xa0\xc1\xa0\x05\b\xa5\x01\x03\x06\b\0\0;\0\xa0\xc0\x05\b\xa4\x02\x05\xf5\xe1\0@\x01\xfd\xe7@A@A@\x05\b\xa1\x05\b\xa0@@\x05\b\x9f@@@\x05\b\x9bA@\xa0\xc1\xa0\x05\b\x9a\x01\x03\x07\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfd\xe8@A@A\x90\xc0\xb3\xa1\x90\x04\x19$data\xa0\x04\x0b@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xe9\xa0G@\xa0B@@@\xb0\xc0\x05\b\xb2\x01\x01\x01\x01#\x9f\x01#\xbe\xc0\x05\b\xb3\x01\x01\x01\x01#\x9f\x01#\xd6@@@@\xa1\x05\b\xca}A@\xa0\xc1\xa0\x05\b\xa1\x01\x03\b\b\0\0;\0\xa0\xc0\x90\x90!a\x02\x05\xf5\xe1\0@\x01\xfd\xea@A@A\x90\xc0\xb3\xa1\x04\x17%patch\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xeb\xa0G@\xa0B@@@\xb0\xc0\x05\b\xc8\x01\x01\x02\x01#\xd7\x01#\xf6\xc0\x05\b\xc9\x01\x01\x02\x01#\xd7\x01$\x10@@@@\xa1\x05\b\xe0~A@\xa0\xc1\xa0\x05\b\xa7\x01\x03\t\b\0\0;\0\xa0\xc0\x05\b\xa6\x02\x05\xf5\xe1\0@\x01\xfd\xed@A\xa1\xa0\xe0\x05\b\xa3\x90\xa0\xc0\xb3\x90\x04"\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xee@@\x05\b\xa1@\x05\b\x9e\xa0\xe0\x05\b\x9d\x90\xa0\xc0\xb3\x90\x04B\xa0\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xec@@\x05\b\x9b@\x05\b\x98@@A@\x05\b\x97\x05\b\x96@@\x05\b\x95@@@\x05\b\x93A@\xa0\xc1\xa0\x05\b\x92\x01\x03\n\b\0\0;\0\xa0\xc0\x05\b\x91\x02\x05\xf5\xe1\0@\x01\xfd\xef@A@A@\x05\b\x8e\x05\b\x8d@@\x05\b\x8c@@@\x05\b\x89A@\xa0\xb0\xa0\x05\b\x88\x01\x03\x0b\xd0\xc0\xb3\x90\x04W\xa0\xc0\x05\b\x87\x02\x05\xf5\xe1\0@\x01\xfd\xf0@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf1@\x05\b\x84@\x05\b\x81@\xa0\xb0\xa0\x05\b\x80\x01\x03\f\xd0\xc0\xc1@\xc0\xb3\x04\x1b\xa0\xc0\x05\b\x7f\x02\x05\xf5\xe1\0@\x01\xfd\xf4@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf2\xc0\x92\xa0\xc0\xb3\x04\x14\xa0\x04\b@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf5\xa0\xc0\xb3\x90\x04$\xa0\x04\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf3@\x02\x05\xf5\xe1\0@\x01\xfd\xf6@\x02\x05\xf5\xe1\0@\x01\xfd\xf7@\x05\b|@\x05\by@\xa0\xb0\xa0\x05\bx\x01\x03\r\xd0\xc0\xc1@\xc0\xb3\x043\xa0\xc0\x05\bw\x02\x05\xf5\xe1\0@\x01\xfd\xfb@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf8\xc0\xc1@\xc0\xb3\xa1\xa1\x05\bt\x05\bq\x05\bp\xa0\xc0\xb3\x90\x04T\xa0\x04\r@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xf9@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xfa\xc0\xb3\x046\xa0\x04\x12@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xfc@\x02\x05\xf5\xe1\0@\x01\xfd\xfd@\x02\x05\xf5\xe1\0@\x01\xfd\xfe@\x05\bo@\x05\bl@\xa0\xb0\xa0\x05\bk\x01\x03\x0e\xd0\xc0\xc1\x05\bj\xc0\xb3\x05\bh\xa0\xc0\xc1@\xc0\x05\be\x02\x05\xf5\xe1\0@\x01\xfe\x05\xc0\xc1@\x04\x03\xc0\xb3\x05\bb@\x90@\x02\x05\xf5\xe1\0@\x01\xfd\xff@\x02\x05\xf5\xe1\0@\x01\xfe\0@\x02\x05\xf5\xe1\0@\x01\xfe\x01@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x02\xc0\xc1@\xc0\xb3\xa1\xa1\x05\b_\x05\b\\\x05\b[\xa0\xc0\xb3\x04b\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x03@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x04\xc0\xb3\x04X\xa0\x04\x16@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x06@\x02\x05\xf5\xe1\0@\x01\xfe\x07@\x02\x05\xf5\xe1\0@\x01\xfe\b@\x05\bZ@\x05\bW@\xa0\xb0\xa0\x05\bV\x01\x03\x0f\xd0\xc0\xc1@\xc0\xb3\x04q\xa0\xc0\x05\bU\x02\x05\xf5\xe1\0@\x01\xfe\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\t\xc0\xb3\x04g\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x0b@\x02\x05\xf5\xe1\0@\x01\xfe\f@\x05\bR@\x05\bO@\xa0\xb0\xa0\x05\bN\x01\x03\x10\xd0\xc0\xc1@\xc0\xb3\x04X\xa0\xc0\x05\bM\x02\x05\xf5\xe1\0@\x01\xfe\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\r\xc0\xc1@\xc0\xb3\x04\x90\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x0f\xc0\xb3\x05\bJ@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x10@\x02\x05\xf5\xe1\0@\x01\xfe\x11@\x02\x05\xf5\xe1\0@\x01\xfe\x12@\x05\bG@\x05\bD@\xa0\xb0\xa0\x05\bC\x01\x03\x11\xd0\xc0\xc1@\xc0\xb3\x04l\xa0\xc0\x05\bB\x02\x05\xf5\xe1\0@\x01\xfe\x14@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x13\xc0\xc1@\xc0\xb3\x04\x9b\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x15\xc0\xb3\x05\b?@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x16@\x02\x05\xf5\xe1\0@\x01\xfe\x17@\x02\x05\xf5\xe1\0@\x01\xfe\x18@\x05\b>@\x05\b;@\xa0\xb0\xa0\x05\b:\x01\x03\x12\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\b9\x02\x05\xf5\xe1\0@\x01\xfe\x1a\xc0\x05\b6\x02\x05\xf5\xe1\0@\x01\xfe\x1c@\x02\x05\xf5\xe1\0@\x01\xfe\x19\xc0\xc1@\xc0\xb3\x04o\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x1b\xc0\xb3\x04s\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\x1d@\x02\x05\xf5\xe1\0@\x01\xfe\x1e@\x02\x05\xf5\xe1\0@\x01\xfe\x1f@\x05\b3@\x05\b0@\xa0\xb0\xa0\x05\b/\x01\x03\x13\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\b.\x02\x05\xf5\xe1\0@\x01\xfe!\xc0\x05\b+\x02\x05\xf5\xe1\0@\x01\xfe#@\x02\x05\xf5\xe1\0@\x01\xfe \xc0\xc1@\xc0\xb3\x04\xb3\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe"\xc0\xb3\x04\xb7\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfe$@\x02\x05\xf5\xe1\0@\x01\xfe%@\x02\x05\xf5\xe1\0@\x01\xfe&@\x05\b(@\x05\b%@\xa0\xb0\xa0\x05\b$\x01\x03\x14\xd0\xc0\xc1@\xc0\xb3\x04\xc1\xa0\xc0\x05\b#\x02\x05\xf5\xe1\0@\x01\xfe(@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\'\xc0\xb3\x04\xd5\xa0\x04\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xfe)@\x02\x05\xf5\xe1\0@\x01\xfe*@\x05\b @\x05\b\x1d@\xa0\xb0\xa0\x05\b\x1c\x01\x03\x15\xd0\xc0\xc1@\xc0\xc1@\xc0\x05\b\x1b\x02\x05\xf5\xe1\0@\x01\xfe0\xc0\xc1@\xc0\xb3\x04\xa5\xa0\xc0\x05\b\x18\x02\x05\xf5\xe1\0@\x01\xfe.@\x90@\x02\x05\xf5\xe1\0@\x01\xfe+\x04\b@\x02\x05\xf5\xe1\0@\x01\xfe,@\x02\x05\xf5\xe1\0@\x01\xfe-\xc0\xc1@\xc0\xb3\x04\xdc\xa0\x04\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe/\xc0\xc1@\x04\x10\xc0\xb3\xa1\x05\b\x15\x05\b\x12\xa0\x04\x14@\x90@\x02\x05\xf5\xe1\0@\x01\xfe1@\x02\x05\xf5\xe1\0@\x01\xfe2@\x02\x05\xf5\xe1\0@\x01\xfe3@\x02\x05\xf5\xe1\0@\x01\xfe4@\x05\b\x11@\x05\b\x0e@\xa0\xb0\xa0\x05\b\r\x01\x03\x16\xd0\xc0\xc1\x05\b\f\xc0\xb3\x05\t\x15\xa0\xc0\xc1@\xc0\x05\b\n\x02\x05\xf5\xe1\0@\x01\xfe:\xc0\xc1@\x04\x03\xc0\xb3\x05\b\x07@\x90@\x02\x05\xf5\xe1\0@\x01\xfe5@\x02\x05\xf5\xe1\0@\x01\xfe6@\x02\x05\xf5\xe1\0@\x01\xfe7@\x90@\x02\x05\xf5\xe1\0@\x01\xfe8\xc0\xc1@\xc0\xb3\x04\xfb\xa0\x04\f@\x90@\x02\x05\xf5\xe1\0@\x01\xfe9\xc0\xb3\xa1\xa1\x05\b\x06\x05\b\x03\x05\b\x02\xa0\xc0\xb3\x05\x01\x13\xa0\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xfe;@\x90@\x02\x05\xf5\xe1\0@\x01\xfe<@\x02\x05\xf5\xe1\0@\x01\xfe=@\x02\x05\xf5\xe1\0@\x01\xfe>@\x05\b\x01@\x05\x07\xfe@\xa0\xb0\xa0\x05\x07\xfd\x01\x03\x17\xd0\xc0\xc1@\xc0\xb3\x05\x01\x0f\xa0\xc0\x05\x07\xfc\x02\x05\xf5\xe1\0@\x01\xfe@@\x90@\x02\x05\xf5\xe1\0@\x01\xfe?\xc0\xb3\xa1\xa1\x05\x07\xf9\x05\x07\xf6\x05\x07\xf5\xa0\xc0\xb3\x04\xe9\xa0\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xfeA@\x90@\x02\x05\xf5\xe1\0@\x01\xfeB@\x02\x05\xf5\xe1\0@\x01\xfeC@\x05\x07\xf4@\x05\x07\xf1@@@\xb0\xc0\x05\n\r\x01\x01\x01\x01#\x9f\x01#\x9f\x05\x01E@\xa1\x05\n$\x7f@@@\x84\x95\xa6\xbe\0\0\0\xe7\0\0\0#\0\0\0\x82\0\0\0i\xa0\xa0,ReactiveData\x900:\xcb\xd8\x9a\xdaG64\x8a\xcf\xec\xfdK\xe6\x86\xd9\xa0\xa0+Stdlib__Seq\x900\xcc?\x89\x98\x85\xb7F\xf7w\x81]\xc9;\xe7\xed\xe2\xa0\xa0+Stdlib__Map\x900qAYd\x97\x8d\x1c\xf0\xc1p\x1a\xf1\x13z\xa1\xea\xa0\xa0.Stdlib__Either\x900\xb3\xad\x0f\x8ce\xf2\x82R\x05\x9e\xde\xbc\x03\xf6\x88\b\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0%React\x9006\x07J\xec\xf8&,\x95d\xa6\xd9\xd4\x1e\xe8\x81\n\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    React = global_data.React,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Set = global_data.Stdlib__Set;
   function Make(D, cont){
    var merge = D[1], map_patch = D[2], map_data = D[3], empty = [0, D[4]];
    function create(l, cont){
     return caml_cps_call2
             (React[1][2],
              0,
              function(match){
               var
                send = match[2],
                initial_event = match[1],
                current = [0, l];
               return caml_cps_call3
                       (React[1][10],
                        function(msg, cont){
                         function _cE_(){return cont(msg);}
                         if(0 === msg[0]){
                          var p = msg[1];
                          return caml_cps_call3
                                  (merge,
                                   p,
                                   current[1],
                                   function(_cF_){current[1] = _cF_; return _cE_();});
                         }
                         var l = msg[1];
                         current[1] = l;
                         return _cE_();
                        },
                        initial_event,
                        function(event){
                         return cont([0, [1, [0, current, event]], send]);
                        });
              });
    }
    function from_event(l, initial_event, cont){
     var current = [0, l];
     return caml_cps_call3
             (React[1][10],
              function(msg, cont){
               function _cC_(){return cont(msg);}
               if(0 === msg[0]){
                var p = msg[1];
                return caml_cps_call3
                        (merge,
                         p,
                         current[1],
                         function(_cD_){current[1] = _cD_; return _cC_();});
               }
               var l = msg[1];
               current[1] = l;
               return _cC_();
              },
              initial_event,
              function(event){return cont([1, [0, current, event]]);});
    }
    function const$0(x, cont){return cont([0, x]);}
    function map_msg(f, param, cont){
     if(0 === param[0]){
      var p = param[1];
      return caml_cps_call3
              (map_patch, f, p, function(_cB_){return cont([0, _cB_]);});
     }
     var l = param[1];
     return caml_cps_call3
             (map_data, f, l, function(_cA_){return cont([1, _cA_]);});
    }
    function map(f, s, cont){
     if(0 === s[0]){
      var x = s[1];
      return caml_cps_call3
              (map_data, f, x, function(_cz_){return cont([0, _cz_]);});
     }
     var s$0 = s[1];
     return caml_cps_call3
             (map_data,
              f,
              s$0[1][1],
              function(_cw_){
               var current = [0, _cw_];
               return caml_cps_call3
                       (React[1][10],
                        function(msg, cont){
                         return caml_cps_exact_call3
                                 (map_msg,
                                  f,
                                  msg,
                                  function(msg){
                                   function _cx_(){return cont(msg);}
                                   if(0 === msg[0]){
                                    var p = msg[1];
                                    return caml_cps_call3
    (merge,
     p,
     current[1],
     function(_cy_){current[1] = _cy_; return _cx_();});
                                   }
                                   var l = msg[1];
                                   current[1] = l;
                                   return _cx_();
                                  });
                        },
                        s$0[2],
                        function(event){return cont([1, [0, current, event]]);});
              });
    }
    function value(s, cont){
     if(0 === s[0]){var c = s[1]; return cont(c);}
     var s$0 = s[1];
     return cont(s$0[1][1]);
    }
    function event(s, cont){
     if(0 === s[0]) return cont(React[1][1]);
     var s$0 = s[1];
     return cont(s$0[2]);
    }
    function patch(s, p, cont){return caml_cps_call3(s, 0, [0, p], cont);}
    function set(s, p, cont){return caml_cps_call3(s, 0, [1, p], cont);}
    function fold(f, s, acc, cont){
     if(0 === s[0]){
      var c = s[1];
      return caml_cps_call3
              (f,
               acc,
               [1, c],
               function(_cv_){return caml_cps_call2(React[2][1], _cv_, cont);});
     }
     var s$0 = s[1];
     return caml_cps_call3
             (f,
              acc,
              [1, s$0[1][1]],
              function(acc){
               return caml_cps_call5(React[2][21], 0, f, acc, s$0[2], cont);
              });
    }
    function signal(opt, s, cont){
     if(opt)
      var sth = opt[1], eq = sth;
     else
      var
       eq = function(_cu_, _ct_, cont){return cont(caml_equal(_cu_, _ct_));};
     if(0 === s[0]){
      var c = s[1];
      return caml_cps_call2(React[2][1], c, cont);
     }
     var s$0 = s[1], _cp_ = s$0[2], _cq_ = s$0[1][1];
     function _cr_(l, msg, cont){
      if(0 === msg[0]){
       var p = msg[1];
       return caml_cps_call3(merge, p, l, cont);
      }
      var l$0 = msg[1];
      return cont(l$0);
     }
     return caml_cps_call2
             (D[5],
              eq,
              function(_cs_){
               return caml_cps_call5
                       (React[2][21], [0, _cs_], _cr_, _cq_, _cp_, cont);
              });
    }
    function from_signal(opt, s, cont){
     if(opt)
      var sth = opt[1], eq = sth;
     else
      var
       eq = function(_co_, _cn_, cont){return cont(caml_equal(_co_, _cn_));};
     function f(d$0, d, cont){
      return caml_cps_call4
              (D[6], eq, d, d$0, function(_cm_){return cont([0, _cm_]);});
     }
     return caml_cps_call3
             (React[2][14],
              f,
              s,
              function(_ck_){
               return caml_cps_call2
                       (React[2][3],
                        s,
                        function(_cl_){
                         return caml_cps_exact_call3(from_event, _cl_, _ck_, cont);
                        });
              });
    }
    return cont
            ([0,
              empty,
              create,
              from_event,
              from_signal,
              const$0,
              patch,
              set,
              map_msg,
              map,
              value,
              fold,
              signal,
              event]);
   }
   var
    map_data = Stdlib_List[19],
    cst_ReactiveData_Rlist_merge = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$0 = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$1 = cst_ReactiveData_Rlist_merge$3,
    cst_ReactiveData_Rlist_merge$2 = cst_ReactiveData_Rlist_merge$3,
    cst_invalid_index = "invalid index",
    _a_ = [0, cst_src_reactiveData_ml, 215, 4],
    cst_merge_invalid_index = cst_merge_invalid_index$1,
    cst_merge_invalid_index$0 = cst_merge_invalid_index$1,
    cst_linear_merge_X_not_support = "linear_merge: X not supported",
    _b_ = [0, cst_src_reactiveData_ml, 251, 4];
   function map_patch(f, cont){
    return caml_cps_call2
            (Stdlib_List[19],
             function(param, cont){
              switch(param[0]){
                case 0:
                 var x = param[2], i = param[1];
                 return caml_cps_call2
                         (f, x, function(_cj_){return cont([0, i, _cj_]);});
                case 1:
                 var i$0 = param[1]; return cont([1, i$0]);
                case 2:
                 var x$0 = param[2], i$1 = param[1];
                 return caml_cps_call2
                         (f, x$0, function(_ci_){return cont([2, i$1, _ci_]);});
                default:
                 var j = param[2], i$2 = param[1]; return cont([3, i$2, j]);
              }
             },
             cont);
   }
   function merge(p$1, l, cont){
    a:
    {
     b:
     {
      var n = 0, p = p$1;
      for(;;){
       if(0 > n){
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1));
       }
       if(! p) break;
       var match = p[1];
       if(3 === match[0]) break b;
       var i = match[1], p$0 = p[2];
       if(n > i) break b;
       var n = i, p = p$0;
      }
      var _bU_ = 1;
      break a;
     }
     var _bU_ = 0;
    }
    if(! _bU_)
     return caml_cps_call4
             (Stdlib_List[25],
              function(l, op, cont){
               switch(op[0]){
                 case 0:
                  var
                   x = op[2],
                   i = op[1],
                   _bZ_ =
                     function(i){
                      var acc = 0, n = i, l$0 = l;
                      for(;;){
                       if(0 === n)
                        return caml_cps_call3
                                (Stdlib_List[12], acc, [0, x, l$0], cont);
                       if(! l$0)
                        return caml_cps_call2
                                (Stdlib[2], cst_ReactiveData_Rlist_merge, cont);
                       var
                        xs = l$0[2],
                        x$0 = l$0[1],
                        n$0 = n - 1 | 0,
                        acc$0 = [0, x$0, acc],
                        acc = acc$0,
                        n = n$0,
                        l$0 = xs;
                      }
                     };
                  return 0 <= i
                          ? _bZ_(i)
                          : caml_cps_call2
                            (Stdlib_List[1],
                             l,
                             function(_ch_){return _bZ_((_ch_ + 1 | 0) + i | 0);});
                 case 1:
                  var
                   i$0 = op[1],
                   _b0_ =
                     function(i){
                      var acc = 0, n = i, l$0 = l;
                      for(;;){
                       if(0 === n && l$0){
                        var l$1 = l$0[2];
                        return caml_cps_call3(Stdlib_List[12], acc, l$1, cont);
                       }
                       if(! l$0)
                        return caml_cps_call2
                                (Stdlib[2], cst_ReactiveData_Rlist_merge$0, cont);
                       var
                        xs = l$0[2],
                        x = l$0[1],
                        n$0 = n - 1 | 0,
                        acc$0 = [0, x, acc],
                        acc = acc$0,
                        n = n$0,
                        l$0 = xs;
                      }
                     };
                  return 0 <= i$0
                          ? _b0_(i$0)
                          : caml_cps_call2
                            (Stdlib_List[1],
                             l,
                             function(_cg_){return _b0_(_cg_ + i$0 | 0);});
                 case 2:
                  var
                   x$0 = op[2],
                   i$1 = op[1],
                   _b1_ =
                     function(i){
                      return caml_cps_call2
                              (Stdlib_Array[10],
                               l,
                               function(a){
                                caml_check_bound(a, i)[1 + i] = x$0;
                                return caml_cps_call2(Stdlib_Array[9], a, cont);
                               });
                     };
                  return 0 <= i$1
                          ? _b1_(i$1)
                          : caml_cps_call2
                            (Stdlib_List[1],
                             l,
                             function(_cf_){return _b1_(_cf_ + i$1 | 0);});
                 default:
                  var offset = op[2], i$2 = op[1];
                  return caml_cps_call2
                          (Stdlib_Array[10],
                           l,
                           function(a){
                            var
                             len = a.length - 1,
                             i = 0 <= i$2 ? i$2 : len + i$2 | 0,
                             v = caml_check_bound(a, i)[1 + i];
                            function _b2_(){
                             return caml_cps_call2(Stdlib_Array[9], a, cont);
                            }
                            if(0 < offset){
                             var
                              _b4_ =
                                function(_b$_){
                                 var _ca_ = (i + offset | 0) - 1 | 0;
                                 if(_ca_ >= i){
                                  var j = i;
                                  for(;;){
                                   var
                                    _cc_ = j + 1 | 0,
                                    _cd_ = caml_check_bound(a, _cc_)[1 + _cc_];
                                   caml_check_bound(a, j)[1 + j] = _cd_;
                                   var _ce_ = j + 1 | 0;
                                   if(_ca_ === j) break;
                                   var j = _ce_;
                                  }
                                 }
                                 var _cb_ = i + offset | 0;
                                 caml_check_bound(a, _cb_)[1 + _cb_] = v;
                                 return _b2_();
                                };
                             return len <= (i + offset | 0)
                                     ? caml_cps_call2
                                       (Stdlib[2], cst_ReactiveData_Rlist_merge$1, _b4_)
                                     : _b4_(0);
                            }
                            function _b3_(_b5_){
                             var _b6_ = (i + offset | 0) + 1 | 0;
                             if(i >= _b6_){
                              var j = i;
                              for(;;){
                               var
                                _b8_ = j - 1 | 0,
                                _b9_ = caml_check_bound(a, _b8_)[1 + _b8_];
                               caml_check_bound(a, j)[1 + j] = _b9_;
                               var _b__ = j - 1 | 0;
                               if(_b6_ === j) break;
                               var j = _b__;
                              }
                             }
                             var _b7_ = i + offset | 0;
                             caml_check_bound(a, _b7_)[1 + _b7_] = v;
                             return _b2_();
                            }
                            return (i + offset | 0) < 0
                                    ? caml_cps_call2
                                      (Stdlib[2], cst_ReactiveData_Rlist_merge$2, _b3_)
                                    : _b3_(0);
                           });
               }
              },
              l,
              p$1,
              cont);
    function _bV_(l$1, p, i0, acc$1){
     function _bX_(l, acc){
      if(! p) return caml_cps_call3(Stdlib_List[12], acc, l, cont);
      var match = p[1];
      switch(match[0]){
        case 0:
         var p$0 = p[2], x = match[2], i0 = match[1], l$0 = [0, x, l];
         return caml_cps_exact_call4(_bV_, l$0, p$0, i0, acc);
        case 1:
         var p$1 = p[2], i0$0 = match[1];
         if(! l)
          return caml_cps_call2(Stdlib[1], cst_merge_invalid_index, cont);
         var l$1 = l[2];
         return caml_cps_exact_call4(_bV_, l$1, p$1, i0$0, acc);
        case 2:
         var p$2 = p[2], x$0 = match[2], i0$1 = match[1];
         if(! l)
          return caml_cps_call2(Stdlib[1], cst_merge_invalid_index$0, cont);
         var l$2 = l[2], l$3 = [0, x$0, l$2];
         return caml_cps_exact_call4(_bV_, l$3, p$2, i0$1, acc);
        default:
         return caml_cps_call2
                 (Stdlib[2], cst_linear_merge_X_not_support, cont);
      }
     }
     if(! p) return _bX_(l$1, acc$1);
     var match = p[1];
     if(3 === match[0]) return _bX_(l$1, acc$1);
     var i$1 = match[1];
     if(i0 >= i$1) return _bX_(l$1, acc$1);
     var i$2 = i$1 - i0 | 0, acc = acc$1, i = i$2, l = l$1;
     for(;;){
      if(0 > i){
       var raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1));
      }
      var _bW_ = function(_bY_){return _bX_(_bY_[1], _bY_[2]);};
      if(0 >= i) return _bW_([0, l, acc]);
      if(! l) return caml_cps_call2(Stdlib[1], cst_invalid_index, _bW_);
      var
       l$0 = l[2],
       h = l[1],
       acc$0 = [0, h, acc],
       i$0 = i - 1 | 0,
       acc = acc$0,
       i = i$0,
       l = l$0;
     }
    }
    return _bV_(l, p$1, 0, 0);
   }
   function equal(f, l1, l2, cont){
    function _bR_(l2, l1){
     function _bS_(){return cont(0);}
     if(! l1) return l2 ? _bS_() : cont(1);
     if(! l2) return _bS_();
     var x2 = l2[1], l1$0 = l1[2], x1 = l1[1], l2$0 = l2[2];
     return caml_cps_call3
             (f,
              x1,
              x2,
              function(_bT_){
               return _bT_ ? caml_cps_exact_call2(_bR_, l2$0, l1$0) : _bS_();
              });
    }
    return _bR_(l2, l1);
   }
   function mem(l, cont){
    var hash = Stdlib_Hashtbl[28];
    function equal(_bQ_, _bP_, cont){return cont(_bQ_ === _bP_ ? 1 : 0);}
    return caml_cps_call2
            (Stdlib_Hashtbl[26],
             [0, equal, hash],
             function(H){
              return caml_cps_call2
                      (H[1],
                       16,
                       function(h){
                        return caml_cps_call3
                                (Stdlib_List[17],
                                 function(x, cont){
                                  return caml_cps_call4(H[5], h, x, 0, cont);
                                 },
                                 l,
                                 function(_bO_){return caml_cps_call2(H[11], h, cont);});
                       });
             });
   }
   function diff(sth, lx, ly, cont){
    function add(acc, i, v){return [0, [0, i, v], acc];}
    function remove(acc, i){return [0, [1, i], acc];}
    var acc = 0;
    return caml_cps_exact_call2
            (mem,
             lx,
             function(memx){
              return caml_cps_exact_call2
                      (mem,
                       ly,
                       function(memy){
                        function _bK_(n, ly, lx, left, acc){
                         if(lx){
                          var lx$0 = lx[2], x = lx[1];
                          if(ly){
                           var y = ly[1], ly$0 = ly[2];
                           return caml_cps_call3
                                   (sth,
                                    x,
                                    y,
                                    function(_bL_){
                                     if(! _bL_)
                                      return caml_cps_call2
      (memy,
       x,
       function(_bM_){
        if(_bM_)
         return caml_cps_call2
                 (memx,
                  y,
                  function(_bN_){
                   if(! _bN_){
                    var acc$2 = add(acc, n, y), n$1 = n + 1 | 0;
                    return caml_cps_exact_call5
                            (_bK_, n$1, ly$0, lx, left, acc$2);
                   }
                   if(left){
                    var acc$0 = remove(acc, n);
                    return caml_cps_exact_call5(_bK_, n, ly, lx$0, 0, acc$0);
                   }
                   var ly$1 = ly[2], acc$1 = add(acc, n, y), n$0 = n + 1 | 0;
                   return caml_cps_exact_call5(_bK_, n$0, ly$1, lx, 1, acc$1);
                  });
        var acc$0 = remove(acc, n);
        return caml_cps_exact_call5(_bK_, n, ly, lx$0, left, acc$0);
       });
                                     var n$0 = n + 1 | 0;
                                     return caml_cps_exact_call5
     (_bK_, n$0, ly$0, lx$0, left, acc);
                                    });
                          }
                          var acc$0 = remove(acc, n);
                          return caml_cps_exact_call5(_bK_, n, 0, lx$0, left, acc$0);
                         }
                         if(ly){
                          var
                           ly$1 = ly[2],
                           y$0 = ly[1],
                           acc$1 = add(acc, n, y$0),
                           n$0 = n + 1 | 0;
                          return caml_cps_exact_call5(_bK_, n$0, ly$1, 0, left, acc$1);
                         }
                         var opt = 0, param = acc;
                         for(;;){
                          if(opt)
                           var sth$0 = opt[1], acc$2 = sth$0;
                          else
                           var acc$2 = 0;
                          if(! param) return cont(acc$2);
                          var
                           t = param[2],
                           h = param[1],
                           acc$3 = [0, h, acc$2],
                           opt$0 = [0, acc$3],
                           opt = opt$0,
                           param = t;
                         }
                        }
                        return _bK_(0, ly, lx, 1, acc);
                       });
             });
   }
   var
    include =
      caml_callback(Make, [[0, merge, map_patch, map_data, 0, equal, diff]]),
    empty = include[1],
    create = include[2],
    from_event = include[3],
    from_signal = include[4],
    const$0 = include[5],
    patch = include[6],
    set = include[7],
    map_msg = include[8],
    map = include[9],
    value = include[10],
    fold = include[11],
    signal = include[12],
    event = include[13],
    _c_ = [0, 0, 0],
    _d_ = [0, cst_src_reactiveData_ml, 427, 17],
    _e_ = [0, cst_src_reactiveData_ml, 459, 23],
    _f_ = [0, cst_src_reactiveData_ml, 553, 6];
   function cons(x, s, cont){
    return caml_cps_call3(patch, s, [0, [0, 0, x], 0], cont);
   }
   function snoc(x, s, cont){
    return caml_cps_call3(patch, s, [0, [0, -1, x], 0], cont);
   }
   function insert(x, i, s, cont){
    return caml_cps_call3(patch, s, [0, [0, i, x], 0], cont);
   }
   function update(x, i, s, cont){
    return caml_cps_call3(patch, s, [0, [2, i, x], 0], cont);
   }
   function move(i, j, s, cont){
    return caml_cps_call3(patch, s, [0, [3, i, j], 0], cont);
   }
   function remove(i, s, cont){
    return caml_cps_call3(patch, s, [0, [1, i], 0], cont);
   }
   function index(opt, l, x, cont){
    if(opt)
     var sth = opt[1], eq = sth;
    else
     var
      eq = function(_bJ_, _bI_, cont){return cont(caml_equal(_bJ_, _bI_));};
    function _bF_(param, n){
     if(param){
      var hd = param[1];
      return caml_cps_call3
              (eq,
               hd,
               x,
               function(_bH_){
                if(_bH_) return cont(n);
                var tl = param[2], n$0 = n + 1 | 0;
                return caml_cps_exact_call2(_bF_, tl, n$0);
               });
     }
     var _bG_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_bG_, 1));
    }
    return _bF_(l, 0);
   }
   function update_eq(eq, param, x, y, cont){
    var handle = param[2], data = param[1];
    return caml_cps_call2
            (value,
             data,
             function(_bE_){
              return caml_cps_exact_call4
                      (index,
                       eq,
                       _bE_,
                       x,
                       function(i){
                        return caml_cps_exact_call4(update, y, i, handle, cont);
                       });
             });
   }
   function remove_last(param, cont){
    var handle = param[2], data = param[1];
    return caml_cps_call2
            (value,
             data,
             function(_bC_){
              return caml_cps_call2
                      (Stdlib_List[1],
                       _bC_,
                       function(_bD_){
                        return caml_cps_exact_call3
                                (remove, _bD_ - 1 | 0, handle, cont);
                       });
             });
   }
   function remove_eq(eq, param, x, cont){
    var handle = param[2], data = param[1];
    return caml_cps_call2
            (value,
             data,
             function(_bB_){
              return caml_cps_exact_call4
                      (index,
                       eq,
                       _bB_,
                       x,
                       function(i){
                        return caml_cps_exact_call3(remove, i, handle, cont);
                       });
             });
   }
   function singleton(x, cont){
    return caml_cps_call2(const$0, [0, x, 0], cont);
   }
   function singleton_s(s, cont){
    var first = [0, 1];
    return caml_cps_call2
            (React[1][2],
             0,
             function(match){
              var send = match[2], e = match[1];
              return caml_cps_call3
                      (from_event,
                       0,
                       e,
                       function(result){
                        return caml_cps_call4
                                (React[2][11],
                                 0,
                                 function(x, cont){
                                  return first[1]
  ? (first
     [1]
    = 0,
    caml_cps_call3(send, 0, [0, [0, [0, 0, x], 0]], cont))
  : caml_cps_call3(send, 0, [0, [0, [2, 0, x], 0]], cont);
                                 },
                                 s,
                                 function(_bA_){return cont(result);});
                       });
             });
   }
   function concat(x, y, cont){
    return caml_cps_call2
            (value,
             x,
             function(v1){
              return caml_cps_call2
                      (value,
                       y,
                       function(v2){
                        var size1 = [0, 0], size2 = [0, 0];
                        function size_with_patch(sizex, param){
                         switch(param[0]){
                           case 0:
                            sizex[1]++; return;
                           case 1:
                            sizex[1] += -1; return;
                           default: return;
                         }
                        }
                        function size_with_set(sizex, l, cont){
                         return caml_cps_call2
                                 (Stdlib_List[1],
                                  l,
                                  function(_bz_){sizex[1] = _bz_; return cont(undef);});
                        }
                        return caml_cps_exact_call3
                                (size_with_set,
                                 size1,
                                 v1,
                                 function(_a1_){
                                  return caml_cps_exact_call3
  (size_with_set,
   size2,
   v2,
   function(_a2_){
    return caml_cps_call2
            (Stdlib_List[19],
             function(p, cont){
              switch(p[0]){
                case 0:
                 var
                  x = p[2],
                  pos = p[1],
                  i = 0 <= pos ? pos : pos - size2[1] | 0,
                  m = [0, i, x];
                 break;
                case 1:
                 var
                  pos$0 = p[1],
                  pos$1 = 0 <= pos$0 ? pos$0 : pos$0 - size2[1] | 0,
                  m = [1, pos$1];
                 break;
                case 2:
                 var
                  x$0 = p[2],
                  pos$2 = p[1],
                  pos$3 = 0 <= pos$2 ? pos$2 : pos$2 - size2[1] | 0,
                  m = [2, pos$3, x$0];
                 break;
                default:
                 var
                  j = p[2],
                  i$0 = p[1],
                  i$1 = 0 <= i$0 ? i$0 : i$0 - size2[1] | 0,
                  m = [3, i$1, j];
              }
              size_with_patch(size1, m);
              return cont(m);
             },
             function(update_patch1){
              return caml_cps_call2
                      (Stdlib_List[19],
                       function(p, cont){
                        switch(p[0]){
                          case 0:
                           var
                            x = p[2],
                            pos = p[1],
                            _bv_ = 0 <= pos ? size1[1] + pos | 0 : pos,
                            m = [0, _bv_, x];
                           break;
                          case 1:
                           var
                            pos$0 = p[1],
                            _bw_ = 0 <= pos$0 ? size1[1] + pos$0 | 0 : pos$0,
                            m = [1, _bw_];
                           break;
                          case 2:
                           var
                            x$0 = p[2],
                            pos$1 = p[1],
                            _bx_ = 0 <= pos$1 ? size1[1] + pos$1 | 0 : pos$1,
                            m = [2, _bx_, x$0];
                           break;
                          default:
                           var
                            j = p[2],
                            i = p[1],
                            _by_ = 0 <= i ? size1[1] + i | 0 : i,
                            m = [3, _by_, j];
                        }
                        size_with_patch(size2, m);
                        return cont(m);
                       },
                       function(update_patch2){
                        var _a3_ = 0;
                        return caml_cps_call2
                                (event,
                                 y,
                                 function(_a4_){
                                  return caml_cps_call3
  (React[1][10],
   function(e, cont){return cont([0, 15437, e]);},
   _a4_,
   function(_a5_){
    var _a6_ = [0, _a5_, _a3_];
    return caml_cps_call2
            (event,
             x,
             function(_a7_){
              return caml_cps_call3
                      (React[1][10],
                       function(e, cont){return cont([0, 15436, e]);},
                       _a7_,
                       function(_a8_){
                        return caml_cps_call4
                                (React[1][23],
                                 function(acc, x, cont){
                                  var p1 = acc[1];
                                  if(! p1 && typeof x !== "number" && 15436 === x[1]){
                                   var x$1 = x[2], p2 = acc[2];
                                   return cont([0, [0, x$1], p2]);
                                  }
                                  if(! acc[2] && typeof x !== "number" && 15437 === x[1]){var x$0 = x[2]; return cont([0, p1, [0, x$0]]);}
                                  var raise = caml_pop_trap();
                                  return raise
  (caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1));
                                 },
                                 _c_,
                                 [0, _a8_, _a6_],
                                 function(tuple_ev){
                                  return caml_cps_call3
  (React[1][10],
   function(p, cont){
    var _a__ = p[1];
    if(! _a__){
     var _bc_ = p[2];
     if(! _bc_){
      var raise = caml_pop_trap();
      return raise
              (caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1));
     }
     var match$1 = _bc_[1];
     if(0 === match$1[0]){
      var p2$1 = match$1[1];
      return caml_cps_call2
              (update_patch2,
               p2$1,
               function(_bu_){return cont([0, _bu_]);});
     }
     var p2$2 = match$1[1];
     return caml_cps_exact_call3
             (size_with_set,
              size2,
              p2$2,
              function(_br_){
               return caml_cps_call2
                       (value,
                        x,
                        function(_bs_){
                         return caml_cps_call3
                                 (Stdlib[37],
                                  _bs_,
                                  p2$2,
                                  function(_bt_){return cont([1, _bt_]);});
                        });
              });
    }
    var _a$_ = _a__[1];
    if(0 !== _a$_[0]){
     var _bb_ = p[2], p1$0 = _a$_[1];
     if(! _bb_)
      return caml_cps_exact_call3
              (size_with_set,
               size1,
               p1$0,
               function(_bo_){
                return caml_cps_call2
                        (value,
                         y,
                         function(_bp_){
                          return caml_cps_call3
                                  (Stdlib[37],
                                   p1$0,
                                   _bp_,
                                   function(_bq_){return cont([1, _bq_]);});
                         });
               });
     var match$0 = _bb_[1];
     if(0 === match$0[0])
      return caml_cps_exact_call3
              (size_with_set,
               size1,
               p1$0,
               function(_bl_){
                return caml_cps_call2
                        (value,
                         y,
                         function(s2){
                          return caml_cps_exact_call3
                                  (size_with_set,
                                   size2,
                                   s2,
                                   function(_bm_){
                                    return caml_cps_call3
    (Stdlib[37],
     p1$0,
     s2,
     function(_bn_){return cont([1, _bn_]);});
                                   });
                         });
               });
     var p2$0 = match$0[1];
     return caml_cps_exact_call3
             (size_with_set,
              size1,
              p1$0,
              function(_bi_){
               return caml_cps_exact_call3
                       (size_with_set,
                        size2,
                        p2$0,
                        function(_bj_){
                         return caml_cps_call3
                                 (Stdlib[37],
                                  p1$0,
                                  p2$0,
                                  function(_bk_){return cont([1, _bk_]);});
                        });
              });
    }
    var _ba_ = p[2], p1 = _a$_[1];
    if(! _ba_)
     return caml_cps_call2
             (update_patch1, p1, function(_bh_){return cont([0, _bh_]);});
    var match = _ba_[1];
    if(0 === match[0]){
     var p2 = match[1];
     return caml_cps_call2
             (update_patch1,
              p1,
              function(p1){
               return caml_cps_call2
                       (update_patch2,
                        p2,
                        function(p2){
                         return caml_cps_call3
                                 (Stdlib[37],
                                  p1,
                                  p2,
                                  function(_bg_){return cont([0, _bg_]);});
                        });
              });
    }
    var s2 = match[1];
    return caml_cps_call2
            (value,
             x,
             function(s1){
              return caml_cps_exact_call3
                      (size_with_set,
                       size1,
                       s1,
                       function(_bd_){
                        return caml_cps_exact_call3
                                (size_with_set,
                                 size2,
                                 s2,
                                 function(_be_){
                                  return caml_cps_call3
  (Stdlib[37],
   s1,
   s2,
   function(_bf_){return cont([1, _bf_]);});
                                 });
                       });
             });
   },
   tuple_ev,
   function(merged_ev){
    return caml_cps_call3
            (Stdlib[37],
             v1,
             v2,
             function(_a9_){
              return caml_cps_call3(from_event, _a9_, merged_ev, cont);
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   }
   function inverse(param, cont){
    switch(param[0]){
      case 0:
       var x = param[2], i = param[1]; return cont([0, (- i | 0) - 1 | 0, x]);
      case 1:
       var i$0 = param[1]; return cont([1, (- i$0 | 0) - 1 | 0]);
      case 2:
       var x$0 = param[2], i$1 = param[1];
       return cont([2, (- i$1 | 0) - 1 | 0, x$0]);
      default:
       var j = param[2], i$2 = param[1];
       return cont([3, (- i$2 | 0) - 1 | 0, - j | 0]);
    }
   }
   function rev(t, cont){
    return caml_cps_call2
            (event,
             t,
             function(_aW_){
              return caml_cps_call3
                      (React[1][10],
                       function(param, cont){
                        if(0 === param[0]){
                         var p = param[1];
                         return caml_cps_call3
                                 (Stdlib_List[19],
                                  inverse,
                                  p,
                                  function(_a0_){return cont([0, _a0_]);});
                        }
                        var l = param[1];
                        return caml_cps_call2
                                (Stdlib_List[9], l, function(_aZ_){return cont([1, _aZ_]);});
                       },
                       _aW_,
                       function(e){
                        return caml_cps_call2
                                (value,
                                 t,
                                 function(_aX_){
                                  return caml_cps_call2
  (Stdlib_List[9],
   _aX_,
   function(_aY_){
    return caml_cps_call3(from_event, _aY_, e, cont);
   });
                                 });
                       });
             });
   }
   function filter(pred, l, cont){
    return caml_cps_call2
            (Stdlib_Map[1],
             [0, Stdlib_Int[9]],
             function(IntMap){
              var index = [0, IntMap[1]], size = [0, 0];
              function filter_list(l, cont){
               return caml_cps_call2
                       (Stdlib_List[1],
                        l,
                        function(_aS_){
                         size[1] = _aS_;
                         index[1] = IntMap[1];
                         function _aT_(my_i, their_i, res, l){
                          if(! l) return caml_cps_call2(Stdlib_List[9], res, cont);
                          var xs = l[2], x = l[1];
                          return caml_cps_call2
                                  (pred,
                                   x,
                                   function(_aU_){
                                    if(_aU_)
                                     return caml_cps_call4
     (IntMap[4],
      their_i,
      my_i + 1 | 0,
      index[1],
      function(_aV_){
       index[1] = _aV_;
       var
        my_i$0 = my_i + 1 | 0,
        their_i$0 = their_i + 1 | 0,
        res$0 = [0, x, res];
       return caml_cps_exact_call4
               (_aT_, my_i$0, their_i$0, res$0, xs);
      });
                                    var their_i$0 = their_i + 1 | 0;
                                    return caml_cps_exact_call4(_aT_, my_i, their_i$0, res, xs);
                                   });
                         }
                         return _aT_(-1, 0, 0, l);
                        });
              }
              function normalise(i){
               return 0 <= i ? i : (size[1] + 1 | 0) + i | 0;
              }
              function update_index_insert
              (insert_pos_full_list, visible, cont){
               var insert_pos_full_list$0 = normalise(insert_pos_full_list);
               return caml_cps_call3
                       (IntMap[27],
                        insert_pos_full_list$0,
                        index[1],
                        function(match){
                         var
                          updatables = match[3],
                          displaced = match[2],
                          left_alone = match[1];
                         function _aL_(updatables){
                          function update_j(j_full_list, j_filtered_list, cont){
                           var
                            new_j_filtered =
                              visible ? j_filtered_list + 1 | 0 : j_filtered_list;
                           return caml_cps_call4
                                   (IntMap[4],
                                    j_full_list + 1 | 0,
                                    new_j_filtered,
                                    index[1],
                                    function(_aR_){index[1] = _aR_; return cont(0);});
                          }
                          return caml_cps_call3
                                  (IntMap[12],
                                   update_j,
                                   updatables,
                                   function(match){
                                    return caml_cps_call2
    (IntMap[2],
     left_alone,
     function(_aM_){
      function _aN_(insert_pos_filtered){
       function _aP_(){
        size[1]++;
        return cont(insert_pos_filtered);
       }
       return visible
               ? caml_cps_call4
                 (IntMap[4],
                  insert_pos_full_list$0,
                  insert_pos_filtered,
                  index[1],
                  function(_aQ_){index[1] = _aQ_; return _aP_();})
               : _aP_();
      }
      return _aM_
              ? _aN_(0)
              : caml_cps_call2
                (IntMap[23],
                 left_alone,
                 function(_aO_){return _aN_(_aO_[2] + 1 | 0);});
     });
                                   });
                         }
                         if(! displaced) return _aL_(updatables);
                         var displaced_in_filtered = displaced[1];
                         return caml_cps_call4
                                 (IntMap[4],
                                  insert_pos_full_list$0,
                                  displaced_in_filtered,
                                  updatables,
                                  _aL_);
                        });
              }
              function update_index_move
              (from_full_list, to_full_list, to_filtered, cont){
               var
                was_visible = to_filtered ? 1 : 0,
                forward = from_full_list < to_full_list ? 1 : 0;
               function _az_(){
                if(! to_filtered)
                 return caml_cps_call3
                         (IntMap[7],
                          to_full_list,
                          index[1],
                          function(_aK_){index[1] = _aK_; return cont(undef);});
                var to_filtered$0 = to_filtered[1];
                return caml_cps_call4
                        (IntMap[4],
                         to_full_list,
                         to_filtered$0,
                         index[1],
                         function(_aJ_){index[1] = _aJ_; return cont(undef);});
               }
               if(forward){
                var
                 _aw_ = from_full_list + 1 | 0,
                 _aA_ =
                   function(i_full){
                    var delta = was_visible ? -1 : 0;
                    function _aF_(){
                     var _aI_ = i_full + 1 | 0;
                     return to_full_list !== i_full
                             ? caml_cps_exact_call1(_aA_, _aI_)
                             : _az_();
                    }
                    caml_push_trap
                     (function(_aH_){
                       if(_aH_ === Stdlib[8]) return _aF_();
                       var raise = caml_pop_trap();
                       return raise(caml_maybe_attach_backtrace(_aH_, 0));
                      });
                    return caml_cps_call3
                            (IntMap[28],
                             i_full,
                             index[1],
                             function(i_filtered){
                              var new_val = i_filtered + delta | 0;
                              return caml_cps_call4
                                      (IntMap[4],
                                       i_full - 1 | 0,
                                       new_val,
                                       index[1],
                                       function(_aG_){
index[1] = _aG_;
caml_pop_trap();
return _aF_();
                                       });
                             });
                   };
                return to_full_list < _aw_ ? _az_() : _aA_(_aw_);
               }
               var _ax_ = from_full_list - 1 | 0;
               function _ay_(i_full){
                function _aB_(){
                 var _aE_ = i_full - 1 | 0;
                 return to_full_list !== i_full
                         ? caml_cps_exact_call1(_ay_, _aE_)
                         : _az_();
                }
                caml_push_trap
                 (function(_aD_){
                   if(_aD_ === Stdlib[8]) return _aB_();
                   var raise = caml_pop_trap();
                   return raise(caml_maybe_attach_backtrace(_aD_, 0));
                  });
                var delta = was_visible ? 1 : 0;
                return caml_cps_call3
                        (IntMap[28],
                         i_full,
                         index[1],
                         function(i_filtered){
                          var new_val = i_filtered + delta | 0;
                          return caml_cps_call4
                                  (IntMap[4],
                                   i_full + 1 | 0,
                                   new_val,
                                   index[1],
                                   function(_aC_){
                                    index[1] = _aC_;
                                    caml_pop_trap();
                                    return _aB_();
                                   });
                         });
               }
               return _ax_ < to_full_list ? _az_() : _ay_(_ax_);
              }
              function convert_p(param, cont){
               switch(param[0]){
                 case 0:
                  var x = param[2], i = param[1];
                  return caml_cps_call2
                          (pred,
                           x,
                           function(_au_){
                            return _au_
                                    ? caml_cps_exact_call3
                                      (update_index_insert,
                                       i,
                                       1,
                                       function(my_i){return cont([0, [0, my_i, x], 0]);})
                                    : caml_cps_exact_call3
                                      (update_index_insert, i, 0, function(_av_){return cont(0);});
                           });
                 case 1:
                  var
                   i$0 = param[1],
                   remove_pos_full_list = normalise(i$0),
                   _P_ =
                     function(ret){
                      return caml_cps_call3
                              (IntMap[3],
                               remove_pos_full_list,
                               index[1],
                               function(was_visible){
                                return caml_cps_call3
(IntMap[27],
 remove_pos_full_list,
 index[1],
 function(match){
  var updatables = match[3];
  function update_j(j_full_list, j_filtered_list, cont){
   var
    new_j =
      was_visible ? j_filtered_list : j_filtered_list - 1 | 0;
   return caml_cps_call4
           (IntMap[4],
            j_full_list - 1 | 0,
            new_j,
            index[1],
            function(_at_){index[1] = _at_; return cont(0);});
  }
  return caml_cps_call2
          (IntMap[2],
           index[1],
           function(_ap_){
            function _aq_(){
             size[1] += -1;
             return caml_cps_call3
                     (IntMap[12],
                      update_j,
                      updatables,
                      function(_as_){return cont(ret);});
            }
            return _ap_
                    ? _aq_()
                    : caml_cps_call2
                      (IntMap[23],
                       index[1],
                       function(match){
                        var last_i = match[1];
                        return caml_cps_call3
                                (IntMap[7],
                                 last_i,
                                 index[1],
                                 function(_ar_){index[1] = _ar_; return _aq_();});
                       });
           });
 });
                               });
                     };
                  caml_push_trap
                   (function(_ao_){
                     if(_ao_ === Stdlib[8]) return _P_(0);
                     var raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_ao_, 0));
                    });
                  return caml_cps_call3
                          (IntMap[28],
                           remove_pos_full_list,
                           index[1],
                           function(j){caml_pop_trap(); return _P_([0, [1, j], 0]);});
                 case 2:
                  var
                   x$0 = param[2],
                   i$1 = param[1],
                   update_pos_full_list = normalise(i$1);
                  caml_push_trap
                   (function(_af_){
                     if(_af_ === Stdlib[8])
                      return caml_cps_call2
                              (pred,
                               x$0,
                               function(_ag_){
                                return _ag_
? caml_cps_call3
  (IntMap[27],
   update_pos_full_list,
   index[1],
   function(match){
    var
     updatables = match[3],
     none = match[2],
     left_alone = match[1];
    if(0 === none){
     var
      update_j =
        function(j_full_list, j_filtered_list, cont){
         return caml_cps_call4
                 (IntMap[4],
                  j_full_list,
                  j_filtered_list + 1 | 0,
                  index[1],
                  function(_an_){index[1] = _an_; return cont(0);});
        },
      _ah_ =
        function(previous_pos_filtered){
         var new_pos_filtered_list = previous_pos_filtered + 1 | 0;
         return caml_cps_call4
                 (IntMap[4],
                  update_pos_full_list,
                  new_pos_filtered_list,
                  index[1],
                  function(_al_){
                   index[1] = _al_;
                   return caml_cps_call3
                           (IntMap[12],
                            update_j,
                            updatables,
                            function(_am_){
                             return cont([0, [0, new_pos_filtered_list, x$0], 0]);
                            });
                  });
        };
     caml_push_trap
      (function(_ak_){
        if(_ak_ === Stdlib[8]) return _ah_(-1);
        var raise = caml_pop_trap();
        return raise(caml_maybe_attach_backtrace(_ak_, 0));
       });
     return caml_cps_call2
             (IntMap[23],
              left_alone,
              function(_ai_){
               var _aj_ = _ai_[2];
               caml_pop_trap();
               return _ah_(_aj_);
              });
    }
    var raise = caml_pop_trap();
    return raise
            (caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1));
   })
: cont(0);
                               });
                     var raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_af_, 0));
                    });
                  return caml_cps_call3
                          (IntMap[28],
                           update_pos_full_list,
                           index[1],
                           function(old_j){
                            return caml_cps_call2
                                    (pred,
                                     x$0,
                                     function(_$_){
                                      function _aa_(_ae_){caml_pop_trap(); return cont(_ae_);}
                                      return _$_
      ? _aa_([0, [2, old_j, x$0], 0])
      : caml_cps_call3
        (IntMap[27],
         update_pos_full_list,
         index[1],
         function(match){
          var updatables = match[3];
          function update_j(j_full_list, j_filtered_list, cont){
           return caml_cps_call4
                   (IntMap[4],
                    j_full_list,
                    j_filtered_list - 1 | 0,
                    index[1],
                    function(_ad_){index[1] = _ad_; return cont(0);});
          }
          return caml_cps_call3
                  (IntMap[7],
                   update_pos_full_list,
                   index[1],
                   function(_ab_){
                    index[1] = _ab_;
                    return caml_cps_call3
                            (IntMap[12],
                             update_j,
                             updatables,
                             function(_ac_){return _aa_([0, [1, old_j], 0]);});
                   });
         });
                                     });
                           });
                 default:
                  var
                   offset_full = param[2],
                   origin_full = param[1],
                   origin_full$0 = normalise(origin_full),
                   dest_full = origin_full$0 + offset_full | 0;
                  caml_push_trap
                   (function(_Z_){
                     if(_Z_ === Stdlib[8])
                      return caml_cps_exact_call4
                              (update_index_move,
                               origin_full$0,
                               dest_full,
                               0,
                               function(___){return cont(0);});
                     var raise = caml_pop_trap();
                     return raise(caml_maybe_attach_backtrace(_Z_, 0));
                    });
                  return caml_cps_call3
                          (IntMap[28],
                           origin_full$0,
                           index[1],
                           function(origin_filtered){
                            function _Q_(dest_filtered){
                             return caml_cps_exact_call4
                                     (update_index_move,
                                      origin_full$0,
                                      dest_full,
                                      [0, dest_filtered],
                                      function(_X_){
                                       var
_Y_ =
  dest_filtered !== origin_filtered
   ? [0,
     [3, origin_filtered, dest_filtered - origin_filtered | 0],
     0]
   : 0;
                                       caml_pop_trap();
                                       return cont(_Y_);
                                      });
                            }
                            caml_push_trap
                             (function(_S_){
                               if(_S_ === Stdlib[8])
                                return caml_cps_call3
(IntMap[27],
 origin_full$0,
 index[1],
 function(match){
  var small_ones = match[1];
  return caml_cps_call2
          (IntMap[2],
           small_ones,
           function(_T_){
            function _U_(_W_){return _Q_(_W_);}
            return _T_
                    ? _U_(0)
                    : caml_cps_call2
                      (IntMap[23],
                       small_ones,
                       function(_V_){return _U_(_V_[2] + 1 | 0);});
           });
 });
                               var raise = caml_pop_trap();
                               return raise(caml_maybe_attach_backtrace(_S_, 0));
                              });
                            return caml_cps_call3
                                    (IntMap[28],
                                     dest_full,
                                     index[1],
                                     function(_R_){caml_pop_trap(); return _Q_(_R_);});
                           });
               }
              }
              function filter_e(param, cont){
               if(0 === param[0]){
                var p = param[1];
                return caml_cps_call3
                        (Stdlib_List[19],
                         convert_p,
                         p,
                         function(_N_){
                          return caml_cps_call2
                                  (Stdlib_List[13],
                                   _N_,
                                   function(_O_){return cont([0, _O_]);});
                         });
               }
               var l = param[1];
               return caml_cps_exact_call2
                       (filter_list, l, function(_M_){return cont([1, _M_]);});
              }
              return caml_cps_call2
                      (event,
                       l,
                       function(_J_){
                        return caml_cps_call3
                                (React[1][10],
                                 filter_e,
                                 _J_,
                                 function(e){
                                  return caml_cps_call2
  (value,
   l,
   function(_K_){
    return caml_cps_exact_call2
            (filter_list,
             _K_,
             function(_L_){
              return caml_cps_call3(from_event, _L_, e, cont);
             });
   });
                                 });
                       });
             });
   }
   var
    IntSet = caml_callback(Stdlib_Set[1], [[0, Stdlib_Int[9]]]),
    _g_ = [0, 68];
   function for_all(fn, data, cont){
    function maybe_update(acc, i, v, cont){
     return caml_cps_call2
             (fn,
              v,
              function(_I_){
               return _I_
                       ? cont(acc)
                       : caml_cps_call3(IntSet[4], i, acc, cont);
              });
    }
    var acc = IntSet[1], i = 0;
    function init(param, cont){
     function _H_(param, acc, i){
      if(! param) return cont(acc);
      var tl = param[2], v = param[1];
      return caml_cps_exact_call4
              (maybe_update,
               acc,
               i,
               v,
               function(acc){
                var i$0 = i + 1 | 0;
                return caml_cps_exact_call3(_H_, tl, acc, i$0);
               });
     }
     return _H_(param, acc, i);
    }
    function update_idx_after(i, f, acc, cont){
     return caml_cps_call3
             (IntSet[15],
              function(i$0, cont){
               return i <= i$0 ? cont(f(i$0, 1)) : cont(i$0);
              },
              acc,
              cont);
    }
    function f(acc, param, cont){
     if(0 === param[0]){
      var updates = param[1];
      return caml_cps_call4
              (Stdlib_List[25],
               function(acc, param, cont){
                switch(param[0]){
                  case 0:
                   var v = param[2], i = param[1];
                   return caml_cps_exact_call4
                           (update_idx_after,
                            i,
                            function(_G_, _F_){return _G_ + _F_ | 0;},
                            acc,
                            function(acc){
                             return caml_cps_exact_call4(maybe_update, acc, i, v, cont);
                            });
                  case 1:
                   var i$0 = param[1];
                   return caml_cps_call3
                           (IntSet[6],
                            i$0,
                            acc,
                            function(_C_){
                             return caml_cps_exact_call4
                                     (update_idx_after,
                                      i$0,
                                      function(_E_, _D_){return _E_ - _D_ | 0;},
                                      _C_,
                                      cont);
                            });
                  case 2:
                   var v$0 = param[2], i$1 = param[1];
                   return caml_cps_call3
                           (IntSet[6],
                            i$1,
                            acc,
                            function(_B_){
                             return caml_cps_exact_call4
                                     (maybe_update, _B_, i$1, v$0, cont);
                            });
                  default:
                   var i$2 = param[2], i$3 = param[1];
                   return caml_cps_call3
                           (IntSet[3],
                            i$2,
                            acc,
                            function(_w_){
                             return caml_cps_call3
                                     (IntSet[3],
                                      i$3,
                                      acc,
                                      function(_x_){
                                       return _x_ === _w_
       ? cont(acc)
       : caml_cps_call3
         (IntSet[3],
          i$3,
          acc,
          function(_y_){
           return _y_
                   ? caml_cps_call3
                     (IntSet[6],
                      i$3,
                      acc,
                      function(_z_){
                       return caml_cps_call3(IntSet[4], i$2, _z_, cont);
                      })
                   : caml_cps_call3
                     (IntSet[6],
                      i$2,
                      acc,
                      function(_A_){
                       return caml_cps_call3(IntSet[4], i$3, _A_, cont);
                      });
          });
                                      });
                            });
                }
               },
               acc,
               updates,
               cont);
     }
     var x = param[1];
     return caml_cps_exact_call2(init, x, cont);
    }
    return caml_cps_call2
            (event,
             data,
             function(_r_){
              return caml_cps_call2
                      (value,
                       data,
                       function(_s_){
                        return caml_cps_exact_call2
                                (init,
                                 _s_,
                                 function(_t_){
                                  return caml_cps_call5
  (React[2][21],
   0,
   f,
   _t_,
   _r_,
   function(_u_){
    return caml_cps_call3
            (React[2][11],
             0,
             IntSet[2],
             function(_v_){return caml_cps_call2(_v_, _u_, cont);});
   });
                                 });
                       });
             });
   }
   var
    ReactiveData =
      [0,
       [0,
        empty,
        create,
        from_event,
        from_signal,
        const$0,
        patch,
        set,
        map_msg,
        map,
        value,
        fold,
        signal,
        event,
        cons,
        snoc,
        insert,
        remove,
        remove_last,
        remove_eq,
        update,
        update_eq,
        move,
        singleton,
        singleton_s,
        concat,
        rev,
        filter,
        for_all],
       function(M, cont){
        function merge(p, acc, cont){
         return caml_cps_call4
                 (Stdlib_List[25],
                  function(acc, p, cont){
                   if(3404203 <= p[1]){
                    var k = p[2];
                    return caml_cps_call3(M[7], k, acc, cont);
                   }
                   var match = p[2], a = match[2], k$0 = match[1];
                   return caml_cps_call4(M[4], k$0, a, acc, cont);
                  },
                  acc,
                  p,
                  cont);
        }
        function map_patch(f, cont){
         return caml_cps_call2
                 (Stdlib_List[19],
                  function(param, cont){
                   if(3404203 <= param[1]){
                    var k = param[2];
                    return cont([0, 3404203, k]);
                   }
                   var match = param[2], a = match[2], k$0 = match[1];
                   return caml_cps_call2
                           (f,
                            a,
                            function(_q_){return cont([0, 3254785, [0, k$0, _q_]]);});
                  },
                  cont);
        }
        function map_data(f, d, cont){
         return caml_cps_call3(M[34], f, d, cont);
        }
        var empty = M[1];
        function equal(f, cont){return caml_cps_call2(M[11], f, cont);}
        function diff(eq, x, y, cont){
         function g(key, v, w, cont){
          if(v){
           var v$0 = v[1];
           if(! w) return cont(_g_);
           var w$0 = w[1];
           return caml_cps_call3
                   (eq,
                    v$0,
                    w$0,
                    function(_p_){
                     return _p_ ? cont(0) : cont([0, [0, 85, w$0]]);
                    });
          }
          if(! w) return cont(0);
          var v$1 = w[1];
          return cont([0, [0, 65, v$1]]);
         }
         return caml_cps_call4
                 (M[8],
                  g,
                  x,
                  y,
                  function(m){
                   function g(key, x, acc, cont){
                    if(typeof x === "number")
                     return cont([0, [0, 3404203, key], acc]);
                    if(85 <= x[1]){
                     var v = x[2];
                     return cont
                             ([0, [0, 3404203, key], [0, [0, 3254785, [0, key, v]], acc]]);
                    }
                    var v$0 = x[2];
                    return cont([0, [0, 3254785, [0, key, v$0]], acc]);
                   }
                   return caml_cps_call4
                           (M[13],
                            g,
                            m,
                            0,
                            function(_o_){
                             return caml_cps_call2(Stdlib_List[9], _o_, cont);
                            });
                  });
        }
        return caml_cps_exact_call2
                (Make,
                 [0, merge, map_patch, map_data, empty, equal, diff],
                 function(include){
                  var
                   empty = include[1],
                   create = include[2],
                   from_event = include[3],
                   from_signal = include[4],
                   const$0 = include[5],
                   patch = include[6],
                   set = include[7],
                   map_msg = include[8],
                   map = include[9],
                   value = include[10],
                   fold = include[11],
                   signal = include[12],
                   event = include[13];
                  function filter(pred, m, cont){
                   function convert_p(param, cont){
                    if(3404203 <= param[1]){
                     var k = param[2];
                     return cont([0, [0, 3404203, k], 0]);
                    }
                    var match = param[2], v = match[2], k$0 = match[1];
                    return caml_cps_call3
                            (pred,
                             k$0,
                             v,
                             function(_n_){
                              return _n_
                                      ? cont([0, [0, 3254785, [0, k$0, v]], 0])
                                      : cont(0);
                             });
                   }
                   function filter_e(param, cont){
                    if(0 === param[0]){
                     var p = param[1];
                     return caml_cps_call3
                             (Stdlib_List[19],
                              convert_p,
                              p,
                              function(_l_){
                               return caml_cps_call2
                                       (Stdlib_List[13],
_l_,
function(_m_){return cont([0, _m_]);});
                              });
                    }
                    var m = param[1];
                    return caml_cps_call3
                            (M[16], pred, m, function(_k_){return cont([1, _k_]);});
                   }
                   return caml_cps_call2
                           (event,
                            m,
                            function(_h_){
                             return caml_cps_call3
                                     (React[1][10],
                                      filter_e,
                                      _h_,
                                      function(e){
                                       return caml_cps_call2
       (value,
        m,
        function(_i_){
         return caml_cps_call3
                 (M[16],
                  pred,
                  _i_,
                  function(_j_){
                   return caml_cps_call3(from_event, _j_, e, cont);
                  });
        });
                                      });
                            });
                  }
                  return cont
                          ([0,
                            empty,
                            create,
                            from_event,
                            from_signal,
                            const$0,
                            patch,
                            set,
                            map_msg,
                            map,
                            value,
                            fold,
                            signal,
                            event,
                            filter]);
                 });
       },
       Make];
   runtime.caml_register_global(24, ReactiveData, "ReactiveData");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
