// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cma, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Ppxlib_print_diff
//# unitInfo: Requires: Stdlib__Filename, Stdlib__ListLabels, Stdlib__Printf, Stdlib__StringLabels, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_line_1_characters_0_0 = '", line 1, characters 0-0:\n',
    cst_File = 'File "',
    cst_File_s_line_1_characters_0 = 'File "%s", line 1, characters 0-0:\n%!',
    cst_diff_u$1 = "diff -u";
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/ppxlib_print_diff.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x01\xa7\0\0\0Z\0\0\x01G\0\0\x014\xa01Ppxlib_print_diff\xa0\xb0\xa0%print\x01\x01\r\xd0\xc0\xc1\x91,diff_command\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x90@\x02\x05\xf5\xe1\0@\0\xef\xc0\xc1\x912extra_patdiff_args\xc0\xb3\x04\x11\xa0\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x04\x14@\x90@\x02\x05\xf5\xe1\0@\0\xf0@\x90@\x02\x05\xf5\xe1\0@\0\xf1@\x90@\x02\x05\xf5\xe1\0@\0\xf2\xc0\xc1\x91)use_color\xc0\xb3\x04$\xa0\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xf3@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\xc1\x90%file1\xc0\xb3\x90\x04,@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1\x90%file2\xc0\xb3\x90\x044@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xc1@\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xb3\x90\x04\x06@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\t print-diff/ppxlib_print_diff.mliA@@\xc0\x04\x02H\x01\0\xb7\x01\0\xbd@@\xa1\x04Y@@@\x84\x95\xa6\xbe\0\0\0o\0\0\0\x0f\0\0\0;\0\0\0/\xa0\xa01Ppxlib_print_diff\x900\xe9\xe5&\x18\xf3\xd8\xc6\x87h\x0b\x90\x8a\x87\x8c\xaa\xc1\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst = " ",
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    _a_ = [0, "-location-style omake", 0],
    _b_ = [0, "-keep-whitespace", 0],
    cst_patdiff = "patdiff",
    _c_ = [0, "-ascii", 0],
    _d_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, " 1>&2", 0]]]]]],
       "%s %s %s 1>&2"],
    _e_ =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u = cst_diff_u$1,
    _f_ =
      [0,
       [11,
        "Error:\n> ",
        [3,
         0,
         [11,
          " exited with code ",
          [4,
           0,
           0,
           0,
           [11,
            "\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n",
            0]]]]],
       "Error:\n> %S exited with code %d\n> Perhaps patdiff is not installed? Hint, try: opam install patdiff\n> Falling back to diff -u\n\n"],
    _g_ =
      [0,
       [11, cst_File, [2, 0, [11, cst_line_1_characters_0_0, [10, 0]]]],
       cst_File_s_line_1_characters_0],
    cst_diff_u$0 = cst_diff_u$1;
   function print(diff_command, opt, _j_, file1, file2, param, cont){
    if(opt)
     var sth = opt[1], extra_patdiff_args = sth;
    else
     var extra_patdiff_args = 0;
    if(_j_) var sth$0 = _j_[1], use_color = sth$0; else var use_color = 0;
    function exec(cmd, cont){
     return caml_cps_call2
             (Stdlib_Filename[20],
              file2,
              function(_r_){
               return caml_cps_call2
                       (Stdlib_Filename[20],
                        file1,
                        function(_s_){
                         return caml_cps_call5
                                 (Stdlib_Printf[4],
                                  _d_,
                                  cmd,
                                  _s_,
                                  _r_,
                                  function(cmd){
                                   var n = runtime.caml_sys_system_command(cmd);
                                   return 0 === n
   ? cont(925282182)
   : 1
     === n
     ? cont(-890978471)
     : cont([0, 106380200, [0, n, cmd]]);
                                  });
                        });
              });
    }
    if(diff_command){
     var s = diff_command[1];
     return caml_cps_exact_call2(exec, s, function(_q_){return cont(0);});
    }
    var _h_ = [0, extra_patdiff_args, 0], _i_ = use_color ? 0 : _c_;
    return caml_cps_call2
            (Stdlib_ListLabels[13],
             [0, _b_, [0, _a_, [0, _i_, _h_]]],
             function(args){
              return caml_cps_call3
                      (Stdlib_StringLabels[6],
                       cst,
                       [0, cst_patdiff, args],
                       function(_k_){
                        return caml_cps_exact_call2
                                (exec,
                                 _k_,
                                 function(match){
                                  if(typeof match === "number")
                                   return 925282182 <= match
   ? caml_cps_call3
     (Stdlib_Printf[3],
      _e_,
      file1,
      function(_o_){
       return caml_cps_exact_call2
               (exec, cst_diff_u, function(_p_){return cont(0);});
      })
   : cont(0);
                                  var
                                   match$0 = match[2],
                                   cmd = match$0[2],
                                   err_code = match$0[1];
                                  return caml_cps_call4
  (Stdlib_Printf[3],
   _f_,
   cmd,
   err_code,
   function(_l_){
    return caml_cps_call3
            (Stdlib_Printf[3],
             _g_,
             file1,
             function(_m_){
              return caml_cps_exact_call2
                      (exec, cst_diff_u$0, function(_n_){return cont(0);});
             });
   });
                                 });
                       });
             });
   }
   var Ppxlib_print_diff = [0, print];
   runtime.caml_register_global(15, Ppxlib_print_diff, "Ppxlib_print_diff");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJwcHhsaWJfcHJpbnRfZGlmZi5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsicHJpbnQiLCJkaWZmX2NvbW1hbmQiLCJvcHQiLCJmaWxlMSIsImZpbGUyIiwic3RoIiwiZXh0cmFfcGF0ZGlmZl9hcmdzIiwic3RoJDAiLCJ1c2VfY29sb3IiLCJleGVjIiwiY21kIiwibiIsInMiLCJhcmdzIiwiZXJyX2NvZGUiXSwic291cmNlcyI6WyIvVXNlcnMva2F1c3R1YmgvRGVza3RvcC9wcm9qZWN0cy9vY2FtbC1yZXRyZWF0L29jYW1sLm9yZy9wbGF5Z3JvdW5kL19vcGFtL2xpYi9wcHhsaWIvcHJpbnRfZGlmZi9wcHhsaWJfcHJpbnRfZGlmZi5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Ozs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQWNJQSxNQUFPQyxjQUFlQyxVQUErQ0MsT0FDcEVDO0lBQ0gsR0FGd0JGO1NBQXFCRyxNQUFyQkgsUUFBQUkscUJBQXFCRDs7U0FBckJDO0lBRXhCLFlBRitEQyxnQkFBWkMsWUFBWUQsZ0JBQVpDO2FBRS9DQyxLQUFLQztLQUNQLE9BRUk7O2NBSkhOOztlQUdvQyxPQUFBOzt3QkFKZ0NEOzt5QkFJbkUsT0FBQTs7O2tDQUZLTzs7OzJDQUNIQTttQ0FJRSxJQUdKQyxJQUhJLGdDQUpGRDtnREFPRkM7OztTQUFBQTs7K0JBQUFBLEdBUEVEOzs7O0lBT2tCO0lBRXhCLEdBWlNUO1NBYUZXLElBYkVYO0tBYVcsT0FBQSxxQkFYaEJRLE1BV0dHLGlCQUFhOztrQkFiSU4sOEJBQTJCRTtJQVZqRCxPQUFBOzs7c0JBREVLO2NBU21CLE9BQUE7Ozt3Q0FUbkJBOzt3QkEwQk0sT0FBQTtpQ0FiTko7OztrQzs7S0FnQkk7OztNQWxCK0ROOztPQW9CNUQsT0FBQTtnQkFsQlBNLGdDQWtCTzs7Ozs7bUNBSWFDO21DQUFWSTtrQ0FFTixPQUFBOzs7R0FGZ0JKO0dBQVZJOztJQVFOLE9BQUE7OzthQWhDK0RYOztjQWtDNUQsT0FBQTt1QkFoQ1BNLGtDQWdDTzs7Ozs7O0dBQW1FOytCQWxDNUVUOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gU3RkTGFiZWxzXG5cbmxldCBwYXRkaWZmX2NtZCB+dXNlX2NvbG9yIH5leHRyYV9wYXRkaWZmX2FyZ3MgPVxuICBsZXQgYXJncyA9XG4gICAgTGlzdC5jb25jYXRcbiAgICAgIFtcbiAgICAgICAgWyBcIi1rZWVwLXdoaXRlc3BhY2VcIiBdO1xuICAgICAgICBbIFwiLWxvY2F0aW9uLXN0eWxlIG9tYWtlXCIgXTtcbiAgICAgICAgKGlmIHVzZV9jb2xvciB0aGVuIFtdIGVsc2UgWyBcIi1hc2NpaVwiIF0pO1xuICAgICAgICBleHRyYV9wYXRkaWZmX2FyZ3M7XG4gICAgICBdXG4gIGluXG4gIFN0cmluZy5jb25jYXQgfnNlcDpcIiBcIiAoXCJwYXRkaWZmXCIgOjogYXJncylcblxubGV0IHByaW50ID9kaWZmX2NvbW1hbmQgPyhleHRyYV9wYXRkaWZmX2FyZ3MgPSBbXSkgPyh1c2VfY29sb3IgPSBmYWxzZSkgfmZpbGUxXG4gICAgfmZpbGUyICgpID1cbiAgbGV0IGV4ZWMgY21kID1cbiAgICBsZXQgY21kID1cbiAgICAgIFByaW50Zi5zcHJpbnRmIFwiJXMgJXMgJXMgMT4mMlwiIGNtZCAoRmlsZW5hbWUucXVvdGUgZmlsZTEpXG4gICAgICAgIChGaWxlbmFtZS5xdW90ZSBmaWxlMilcbiAgICBpblxuICAgIG1hdGNoIFN5cy5jb21tYW5kIGNtZCB3aXRoXG4gICAgfCAwIC0+IGBTYW1lXG4gICAgfCAxIC0+IGBEaWZmZXJlbnRcbiAgICB8IG4gLT4gYEVycm9yIChuLCBjbWQpXG4gIGluXG4gIG1hdGNoIGRpZmZfY29tbWFuZCB3aXRoXG4gIHwgU29tZSBzIC0+IGlnbm9yZSAoZXhlYyBzIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKVxuICB8IE5vbmUgLT4gKFxuICAgICAgbWF0Y2ggZXhlYyAocGF0ZGlmZl9jbWQgfnVzZV9jb2xvciB+ZXh0cmFfcGF0ZGlmZl9hcmdzKSB3aXRoXG4gICAgICB8IGBTYW1lIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiBwcm9kdWNlZCBubyBvdXRwdXQsIGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZiBcIkZpbGUgXFxcIiVzXFxcIiwgbGluZSAxLCBjaGFyYWN0ZXJzIDAtMDpcXG4lIVwiIGZpbGUxO1xuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKGV4ZWMgXCJkaWZmIC11XCIgOiBbPiBgU2FtZSB8IGBEaWZmZXJlbnQgfCBgRXJyb3Igb2YgaW50ICogc3RyaW5nIF0pXG4gICAgICB8IGBEaWZmZXJlbnQgLT5cbiAgICAgICAgICAoKiBwYXRkaWZmIHN1Y2Nlc3NmdWxseSBmb3VuZCBhIGRpZmZlcmVuY2UgKilcbiAgICAgICAgICAoKVxuICAgICAgfCBgRXJyb3IgKGVycl9jb2RlLCBjbWQpIC0+XG4gICAgICAgICAgKCogcGF0ZGlmZiB0aHJldyBhbiBlcnJvci4uLiBwZXJoYXBzIGl0IHdhc24ndCBpbnN0YWxsZWQ/IGZhbGxiYWNrIHRvIGRpZmYgLXUgKilcbiAgICAgICAgICBQcmludGYuZXByaW50ZlxuICAgICAgICAgICAgXCJFcnJvcjpcXG5cXFxuICAgICAgICAgICAgID4gJVMgZXhpdGVkIHdpdGggY29kZSAlZFxcblxcXG4gICAgICAgICAgICAgPiBQZXJoYXBzIHBhdGRpZmYgaXMgbm90IGluc3RhbGxlZD8gSGludCwgdHJ5OiBvcGFtIGluc3RhbGwgcGF0ZGlmZlxcblxcXG4gICAgICAgICAgICAgPiBGYWxsaW5nIGJhY2sgdG8gZGlmZiAtdVxcblxcblwiXG4gICAgICAgICAgICBjbWQgZXJyX2NvZGU7XG4gICAgICAgICAgUHJpbnRmLmVwcmludGYgXCJGaWxlIFxcXCIlc1xcXCIsIGxpbmUgMSwgY2hhcmFjdGVycyAwLTA6XFxuJSFcIiBmaWxlMTtcbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChleGVjIFwiZGlmZiAtdVwiIDogWz4gYFNhbWUgfCBgRGlmZmVyZW50IHwgYEVycm9yIG9mIGludCAqIHN0cmluZyBdKSlcbiJdfQ==
