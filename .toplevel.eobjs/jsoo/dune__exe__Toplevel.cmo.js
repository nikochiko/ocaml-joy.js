// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cmo, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Dune__exe__Toplevel
//# unitInfo: Requires: Assert_failure, Clflags, Dune__exe__B64, Dune__exe__Colorize, Dune__exe__Graphics_support, Dune__exe__Indent, Dune__exe__Ppx_support, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml__Json, Js_of_ocaml__Regexp, Js_of_ocaml__Sys_js, Js_of_ocaml__Typed_array, Js_of_ocaml__Url, Js_of_ocaml_lwt, Js_of_ocaml_lwt__Lwt_jsonp, Js_of_ocaml_toplevel__JsooTop, Js_of_ocaml_tyxml__Tyxml_js, Location, Lwt, Stdlib, Stdlib__Array, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Stdlib__Sys, Topdirs, Toploop
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = "\n",
    cst$15 = '";;',
    cst_Format_printf = 'Format.printf "',
    cst_Format_printf_s = 'Format.printf "%s@.";;',
    cst_code$2 = "code",
    cst_history = "history",
    cst_output$1 = "output",
    cst_sharp$0 = "sharp",
    cst_toplevel_ml = "toplevel.ml",
    caml_callback = runtime.caml_callback,
    caml_check_bound = runtime.caml_check_bound,
    caml_int_compare = runtime.caml_int_compare,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_pop_trap = runtime.caml_pop_trap,
    caml_push_trap = runtime.caml_push_trap,
    caml_string_get = runtime.caml_string_get,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_exact_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1)
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_exact_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   function caml_cps_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 5
              ? f(a0, a1, a2, a3, a4)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_exact_call5(f, a0, a1, a2, a3, a4){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4]);
   }
   function caml_cps_call6(f, a0, a1, a2, a3, a4, a5){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 6
              ? f(a0, a1, a2, a3, a4, a5)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_cps_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 13
              ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
              : runtime.caml_call_gen
                (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12])
            : runtime.caml_trampoline_return
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var undef = undefined;
   runtime.jsoo_create_file
    ("/static/cmis/dune__exe__Toplevel.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\0\x16\0\0\0\x02\0\0\0\t\0\0\0\x07\xa03Dune__exe__Toplevel@\x84\x95\xa6\xbe\0\0\0\x8f\0\0\0\x14\0\0\0M\0\0\0>\xa0\xa03Dune__exe__Toplevel\x900\xc2f\x9dt\x07b\x04\xf8\x94S\xb8\xdf\x1b\x1b9Y\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0)Dune__exe\x900\xf7\x89\x12\x11g'<\xecF\x04{8\x98\xa8\x06P\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\b\0\0\0\x04\0\0\0\x0b\0\0\0\x0b\xa0@\xa0A\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst$12 = cst$13,
    cst$11 = cst$14,
    cst$10 = ";;",
    cst$3 = cst$13,
    cst$4 = cst$13,
    cst$5 = cst$13,
    cst$7 = cst$13,
    cst$8 = cst$13,
    cst$6 = "#",
    s = "btn-share",
    cst$1 = cst$13,
    cst$2 = cst$14,
    cst = "^\\(\\*+(.*)\\*+\\)$",
    cst$0 = cst$13,
    v$0 = [0, 4, [0, 7, 0]],
    header3 = "     Joy (~dev)",
    compiler_name = "OCaml",
    cst$9 = cst$13,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    Lwt = global_data.Lwt,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Format = global_data.Stdlib__Format,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Dune_exe_Indent = global_data.Dune__exe__Indent,
    Stdlib_String = global_data.Stdlib__String,
    Js_of_ocaml_toplevel_JsooTop = global_data.Js_of_ocaml_toplevel__JsooTop,
    Dune_exe_Graphics_support = global_data.Dune__exe__Graphics_support,
    Dune_exe_Colorize = global_data.Dune__exe__Colorize,
    Js_of_ocaml_Sys_js = global_data.Js_of_ocaml__Sys_js,
    Stdlib_List = global_data.Stdlib__List,
    Dune_exe_B64 = global_data.Dune__exe__B64,
    Stdlib_Array = global_data.Stdlib__Array,
    Js_of_ocaml_Json = global_data.Js_of_ocaml__Json,
    Js_of_ocaml_tyxml_Tyxml_js = global_data.Js_of_ocaml_tyxml__Tyxml_js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Location = global_data.Location,
    Assert_failure = global_data.Assert_failure,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_lwt_Lwt_jsonp = global_data.Js_of_ocaml_lwt__Lwt_jsonp,
    Js_of_ocaml_Regexp = global_data.Js_of_ocaml__Regexp,
    Topdirs = global_data.Topdirs,
    Clflags = global_data.Clflags,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Dune_exe_Ppx_support = global_data.Dune__exe__Ppx_support,
    Toploop = global_data.Toploop,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Js_of_ocaml_Typed_array = global_data.Js_of_ocaml__Typed_array,
    Js_of_ocaml_lwt = global_data.Js_of_ocaml_lwt,
    _a_ =
      [0, [11, "Could not load ", [2, 0, [12, 10, 0]]], "Could not load %s\n"],
    _b_ = [0, cst$13],
    _c_ =
      [0,
       [11, "error while evaluating ", [2, 0, [17, 4, 0]]],
       "error while evaluating %s@."];
   function by_id(s, cont){
    return caml_cps_call2(Js_of_ocaml_Dom_html[6], s, cont);
   }
   function by_id_coerce(s, f, cont){
    function _cq_(param, cont){
     var _ct_ = Stdlib[8], raise = caml_pop_trap();
     return raise(caml_maybe_attach_backtrace(_ct_, 1));
    }
    return caml_cps_call2
            (Js_of_ocaml_Dom_html[6],
             s,
             function(_cr_){
              return caml_cps_call2
                      (f,
                       _cr_,
                       function(_cs_){
                        return caml_cps_call3
                                (Js_of_ocaml_Js[5][8], _cs_, _cq_, cont);
                       });
             });
   }
   function load_resource(scheme, prefix, suffix, cont){
    return caml_cps_call3
            (Stdlib[28],
             scheme,
             suffix,
             function(url){
              return caml_cps_call3
                      (Stdlib_Filename[4],
                       prefix,
                       suffix,
                       function(filename){
                        return caml_cps_call2
                                (Lwt[11],
                                 function(param, cont){
                                  function _cn_(frame, cont){
                                   return 200 === frame[2]
   ? caml_cps_call4
     (Js_of_ocaml_Js[5][7],
      frame[4],
      function(param, cont){
       return caml_cps_call3(Stdlib_Printf[3], _a_, filename, cont);
      },
      function(b, cont){
       return caml_cps_call2
               (Js_of_ocaml_Typed_array[51][1],
                b,
                function(_cp_){
                 return caml_cps_call3
                         (Js_of_ocaml_Sys_js[8], filename, _cp_, cont);
                });
      },
      cont)
   : cont(0);
                                  }
                                  return caml_cps_call13
  (Js_of_ocaml_lwt[1][4],
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   0,
   url,
   function(_co_){
    return caml_cps_call3(Lwt[71], _co_, _cn_, cont);
   });
                                 },
                                 function(_cm_){return cont(_b_);});
                       });
             });
   }
   function exec(s, cont){
    return caml_cps_call3
            (Js_of_ocaml_toplevel_JsooTop[1],
             Stdlib_Format[110],
             s,
             function(res){
              var _cl_ = 1 - res;
              return _cl_
                      ? caml_cps_call3(Stdlib_Format[137], _c_, s, cont)
                      : cont(_cl_);
             });
   }
   function split_char(sep, p, cont){
    var len = caml_ml_string_length(p);
    function split(beg, cur, cont){
     var cur$0 = cur;
     for(;;){
      if(len <= cur$0){
       if(0 >= (cur$0 - beg | 0)) return cont(0);
       var _ch_ = 0;
       return caml_cps_call4
               (Stdlib_String[15],
                p,
                beg,
                cur$0 - beg | 0,
                function(_ck_){return cont([0, _ck_, _ch_]);});
      }
      if(sep(caml_string_get(p, cur$0)))
       return caml_cps_exact_call3
               (split,
                cur$0 + 1 | 0,
                cur$0 + 1 | 0,
                function(_ci_){
                 return caml_cps_call4
                         (Stdlib_String[15],
                          p,
                          beg,
                          cur$0 - beg | 0,
                          function(_cj_){return cont([0, _cj_, _ci_]);});
                });
      var cur$1 = cur$0 + 1 | 0, cur$0 = cur$1;
     }
    }
    return caml_cps_exact_call3(split, 0, 0, cont);
   }
   var
    v = Stdlib_Sys[46],
    match =
      caml_callback
       (split_char,
        [function(param){
          var _cg_ = param - 43 | 0;
          a:
          {
           if(2 < _cg_ >>> 0){
            if(83 !== _cg_) break a;
           }
           else if(1 === _cg_) break a;
           return 1;
          }
          return 0;
         },
         v]),
    _v_ =
      [0,
       [11, "exc during Lwt.async: ", [2, 0, [17, 4, 0]]],
       "exc during Lwt.async: %s@."],
    cst_toplevel_container = "toplevel-container",
    cst_output$0 = cst_output$1,
    cst_userinput = "userinput",
    cst_dev_null0 = "/dev/null0",
    cst_dev_null1 = "/dev/null1",
    cst_test_canvas = "test-canvas",
    cst_caml = "caml",
    cst_sharp = cst_sharp$0,
    cst_stdout = "stdout",
    cst_stderr = "stderr",
    cst_code$1 = cst_code$2,
    _u_ = [0, 4003188, 0],
    _t_ = [0, cst_toplevel_ml, 295, 71],
    cst_output = cst_output$1,
    cst_last_js = "last-js",
    cst_Cannot_shorten_url_with_fi = "Cannot shorten url with file scheme",
    _r_ =
      [0,
       [11, "http://is.gd/create.php?format=json&url=", [2, 0, 0]],
       "http://is.gd/create.php?format=json&url=%s"],
    _q_ =
      [0,
       [11, "Could not generate short url. reason: ", [2, 0, [17, 4, 0]]],
       "Could not generate short url. reason: %s@."],
    cst_Share_this_url = "Share this url : ",
    _s_ = [0, cst_toplevel_ml, 243, 21],
    cst_code = cst_code$2,
    cst_code$0 = cst_code$2,
    _o_ = [0, "list-group-item", 0],
    cst_static_examples_ml = "/static/examples.ml",
    _p_ = [0, cst_toplevel_ml, 175, 23],
    cst_toplevel_examples = "toplevel-examples",
    cst_let_print_error_fmt_e_Form =
      "let _print_error fmt e = Format.pp_print_string fmt (Js_of_ocaml.Js_error.to_string e)",
    _m_ = [0, "_print_error"],
    cst_let_print_unit_fmt_a_a_For =
      "let _print_unit fmt (_ : 'a) : 'a = Format.pp_print_string fmt \"()\"",
    _n_ = [0, "_print_unit"],
    _l_ = [0, [4, 0, 0, 0, [11, "px", 0]], "%dpx"],
    cst_open_Stdlib = "open Stdlib",
    cst_module_Lwt_main_struct_let =
      'module Lwt_main = struct\n  let run t = match Lwt.state t with\n    | Lwt.Return x -> x\n    | Lwt.Fail e -> raise e\n    | Lwt.Sleep -> failwith "Lwt_main.run: thread didn\'t return"\n end',
    cst_open_Joy = "open Joy",
    cst_init_svg_axes_true_joy_can = 'init_svg ~axes:true "joy-canvas"',
    _f_ =
      [0,
       [11, "        ", [2, 0, [11, " version ", [12, 37, [12, 115, 0]]]]],
       "        %s version %%s"],
    _g_ =
      [0,
       [11, "     Compiled with Js_of_ocaml version ", [2, 0, 0]],
       "     Compiled with Js_of_ocaml version %s"],
    _h_ =
      [0,
       [11,
        cst_Format_printf,
        [2, 0, [17, 4, [11, '" Sys.ocaml_version;;', 0]]]],
       'Format.printf "%s@." Sys.ocaml_version;;'],
    _i_ =
      [0,
       [11, cst_Format_printf, [2, 0, [17, 4, [11, cst$15, 0]]]],
       cst_Format_printf_s],
    _j_ =
      [0,
       [11, cst_Format_printf, [2, 0, [17, 4, [11, cst$15, 0]]]],
       cst_Format_printf_s],
    cst_enable_pretty = '#enable "pretty";;',
    cst_disable_shortvar = '#disable "shortvar";;',
    _k_ =
      [0, "js_of_ocaml-toplevel-example", "Load the given javascript file"],
    cst_load_js = "load_js",
    _e_ = [0, cst_toplevel_ml, 88, 12],
    cst_dev = "/dev/",
    cst_http = "http://",
    cst_http$0 = "/http/",
    cst_https = "https://",
    cst_https$0 = "/https/",
    cst_ftp = "ftp://",
    cst_ftp$0 = "/ftp/";
   if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
   var
    x = match[1],
    _d_ =
      caml_callback
       (split_char, [function(param){return 46 === param ? 1 : 0;}, x]),
    current =
      caml_callback
       (Stdlib_List[19],
        [function(_cf_, cont){return cont(runtime.caml_int_of_string(_cf_));},
         _d_]);
   function setup_toplevel(param, cont){
    Clflags[19][1] = 1;
    return caml_cps_call2
            (Js_of_ocaml_toplevel_JsooTop[3],
             0,
             function(_b0_){
              Stdlib_Sys[3][1] = 0;
              a:
              {
               b:
               {
                c:
                {
                 var v$1 = current, v = v$0;
                 for(;;){
                  if(! v$1) break;
                  var xs = v$1[2], x = v$1[1];
                  if(! xs && v && ! v[2]) break b;
                  if(! v) break c;
                  var ys = v[2], y = v[1], n = caml_int_compare(x, y);
                  if(0 !== n){var _b1_ = n; break a;}
                  var v$1 = xs, v = ys;
                 }
                 if(v){
                  var y$1 = v[1], _b1_ = caml_int_compare(0, y$1);
                  break a;
                 }
                 var _b1_ = 0;
                 break a;
                }
                var _b1_ = caml_int_compare(x, 0);
                break a;
               }
               var y$0 = v[1], _b1_ = caml_int_compare(x, y$0);
              }
              function _b2_(_b3_){
               return caml_cps_exact_call2
                       (exec,
                        cst_module_Lwt_main_struct_let,
                        function(_b4_){
                         return caml_cps_exact_call2
                                 (exec,
                                  cst_open_Joy,
                                  function(_b5_){
                                   return caml_cps_exact_call2
   (exec,
    cst_init_svg_axes_true_joy_can,
    function(_b6_){
     return caml_cps_call3
             (Stdlib_Printf[4],
              _f_,
              compiler_name,
              function(header1){
               return caml_cps_call3
                       (Stdlib_Printf[4],
                        _g_,
                        Js_of_ocaml_Sys_js[9],
                        function(header2){
                         return caml_cps_call3
                                 (Stdlib_Printf[4],
                                  _h_,
                                  header1,
                                  function(_b7_){
                                   return caml_cps_exact_call2
   (exec,
    _b7_,
    function(_b8_){
     return caml_cps_call3
             (Stdlib_Printf[4],
              _i_,
              header2,
              function(_b9_){
               return caml_cps_exact_call2
                       (exec,
                        _b9_,
                        function(_b__){
                         return caml_cps_call3
                                 (Stdlib_Printf[4],
                                  _j_,
                                  header3,
                                  function(_b$_){
                                   return caml_cps_exact_call2
   (exec,
    _b$_,
    function(_ca_){
     return caml_cps_exact_call2
             (exec,
              cst_enable_pretty,
              function(_cb_){
               return caml_cps_exact_call2
                       (exec,
                        cst_disable_shortvar,
                        function(_cc_){
                         return caml_cps_call2
                                 (Dune_exe_Ppx_support[1],
                                  0,
                                  function(_cd_){
                                   return caml_cps_call4
   (Toploop[7],
    cst_load_js,
    [1,
     function(name, cont){
      return cont(Js_of_ocaml_Js[52][1].load_script(name));
     }],
    _k_,
    function(_ce_){Stdlib_Sys[3][1] = 1; return cont(undef);});
                                  });
                        });
              });
    });
                                  });
                        });
              });
    });
                                  });
                        });
              });
    });
                                  });
                        });
              }
              return 0 <= _b1_
                      ? caml_cps_exact_call2(exec, cst_open_Stdlib, _b2_)
                      : _b2_(0);
             });
   }
   function resize(container, textbox, param, cont){
    function _bW_(param, cont){
     var t4 = textbox.style;
     t4.height = "auto";
     return caml_cps_call3
             (Stdlib[17],
              18,
              textbox.scrollHeight,
              function(_bY_){
               return caml_cps_call3
                       (Stdlib_Printf[4],
                        _l_,
                        _bY_,
                        function(_bZ_){
                         var t7 = caml_jsstring_of_string(_bZ_), t8 = textbox.style;
                         t8.height = t7;
                         var t10 = container.scrollHeight;
                         container.scrollTop = t10;
                         return caml_cps_call2(Lwt[4], 0, cont);
                        });
              });
    }
    return caml_cps_call2
            (Lwt[57],
             0,
             function(_bX_){return caml_cps_call3(Lwt[70], _bX_, _bW_, cont);});
   }
   function parse_hash(param, cont){
    return caml_cps_call2
            (Js_of_ocaml_Url[10][7],
             0,
             function(frag){
              return caml_cps_call2(Js_of_ocaml_Url[7], frag, cont);
             });
   }
   function iter_on_sharp(f, x, cont){
    function _bR_(t19){
     function _bS_(t16, cont){
      var _bV_ = t16.classList.contains(cst_sharp$0) | 0;
      return _bV_ ? caml_cps_exact_call2(f, t16, cont) : cont(_bV_);
     }
     return caml_cps_call2
             (Js_of_ocaml_Dom_html[118][1],
              t19,
              function(_bT_){
               return caml_cps_call3
                       (Js_of_ocaml_Js[5][6],
                        _bT_,
                        _bS_,
                        function(_bU_){
                         return caml_cps_call2
                                 (Js_of_ocaml_Js[5][10],
                                  t19.nextSibling,
                                  function(match){
                                   if(! match) return cont(0);
                                   var n = match[1];
                                   return caml_cps_exact_call1(_bR_, n);
                                  });
                        });
              });
    }
    return _bR_(x);
   }
   var current_position = [0, 0];
   function highlight_location(loc, cont){
    var x = [0, 0];
    return caml_cps_exact_call2
            (by_id,
             cst_output,
             function(output){
              var _bO_ = output.childNodes.item(current_position[1]);
              return caml_cps_call3
                      (Js_of_ocaml_Js[5][8],
                       _bO_,
                       function(param, cont){
                        var raise = caml_pop_trap();
                        return raise
                                (caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1));
                       },
                       function(first){
                        return caml_cps_exact_call3
                                (iter_on_sharp,
                                 function(e, cont){
                                  x[1]++;
                                  return caml_cps_call2
  (Location[10],
   loc[1],
   function(match){
    var col1 = match[3], line1 = match[2];
    return caml_cps_call2
            (Location[10],
             loc[2],
             function(match){
              var
               col2 = match[3],
               line2 = match[2],
               _bP_ = line1 <= x[1] ? 1 : 0,
               _bQ_ = _bP_ ? x[1] <= line2 ? 1 : 0 : _bP_;
              if(! _bQ_) return cont(_bQ_);
              var
               from = x[1] === line1 ? [0, 4003188, col1] : _u_,
               to = x[1] === line2 ? [0, 4003188, col2] : 847656566;
              return caml_cps_call4
                      (Dune_exe_Colorize[3], from, to, e, cont);
             });
   });
                                 },
                                 first,
                                 cont);
                       });
             });
   }
   function append(colorize, output, cl, s, cont){
    return caml_cps_call3
            (colorize,
             cl,
             s,
             function(_bM_){
              return caml_cps_call2
                      (Js_of_ocaml_tyxml_Tyxml_js[9][1],
                       _bM_,
                       function(_bN_){
                        return caml_cps_call3
                                (Js_of_ocaml_Dom[5], output, _bN_, cont);
                       });
             });
   }
   var data = [0, [0, cst$9]], idx = [0, 0];
   function get_storage(param, cont){
    caml_push_trap
     (function(_bK_){
       var _bL_ = Stdlib[8], raise = caml_pop_trap();
       return raise(caml_maybe_attach_backtrace(_bL_, 1));
      });
    var t36 = Js_of_ocaml_Dom_html[8];
    return caml_cps_call2
            (Js_of_ocaml_Js[6][10],
             t36.localStorage,
             function(val){
              caml_pop_trap();
              if(val){var t = val[1]; return cont(t);}
              var _bJ_ = Stdlib[8], raise = caml_pop_trap();
              return raise(caml_maybe_attach_backtrace(_bJ_, 1));
             });
   }
   function current$0(text){
    var _bI_ = idx[1];
    caml_check_bound(data[1], _bI_)[1 + _bI_] = text;
    return;
   }
   var
    t88 =
      caml_callback
       (Js_of_ocaml_Dom_html[10],
        [function(param, cont){
          return caml_cps_exact_call2
                  (by_id,
                   cst_toplevel_container,
                   function(container){
                    return caml_cps_exact_call2
                            (by_id,
                             cst_output$0,
                             function(output){
                              return caml_cps_exact_call3
                                      (by_id_coerce,
                                       cst_userinput,
                                       Js_of_ocaml_Dom_html[118][55],
                                       function(textbox){
return caml_cps_call2
        (Stdlib[60],
         cst_dev_null0,
         function(sharp_chan){
          return caml_cps_call2
                  (Stdlib_Format[108],
                   sharp_chan,
                   function(sharp_ppf){
                    return caml_cps_call2
                            (Stdlib[60],
                             cst_dev_null1,
                             function(caml_chan){
                              return caml_cps_call2
                                      (Stdlib_Format[108],
                                       caml_chan,
                                       function(caml_ppf){
function execute(param, cont){
 var
  content = caml_string_of_jsstring(textbox.value.trim()),
  len = caml_ml_string_length(content);
 try{
  var _bw_ = runtime.caml_string_notequal(content, cst$13);
  if(_bw_)
   var
    _bx_ = 59 !== caml_string_get(content, len - 1 | 0) ? 1 : 0,
    _by_ =
      _bx_
       ? 59 !== caml_string_get(content, len - 2 | 0) ? 1 : 0
       : _bx_;
  else
   var _by_ = _bw_;
  var _bv_ = _by_;
 }
 catch(_bH_){var _bv_ = 1;}
 function _bz_(content$0){
  var t49 = output.childNodes;
  current_position[1] = t49.length;
  textbox.value = cst$13;
  var
   l = data[1].length - 1,
   n = runtime.caml_make_vect(l + 1 | 0, cst$13),
   _bA_ = l - 1 | 0;
  caml_check_bound(data[1], _bA_)[1 + _bA_] = content;
  return caml_cps_call6
          (Stdlib_Array[8],
           data[1],
           0,
           n,
           0,
           l,
           function(_bB_){
            data[1] = n;
            idx[1] = l;
            function _bC_(){
             return caml_cps_call6
                     (Js_of_ocaml_toplevel_JsooTop[2],
                      1,
                      [0, sharp_ppf],
                      [0, highlight_location],
                      caml_ppf,
                      content$0,
                      function(_bE_){
                       function _bF_(param, cont){
                        var t53 = container.scrollHeight;
                        container.scrollTop = t53;
                        textbox.focus();
                        return cont(Lwt[36]);
                       }
                       return caml_cps_exact_call4
                               (resize,
                                container,
                                textbox,
                                undef,
                                function(_bG_){
                                 return caml_cps_call3(Lwt[70], _bG_, _bF_, cont);
                                });
                      });
            }
            caml_push_trap
             (function(_bD_){
               if(_bD_ === Stdlib[8]) return _bC_();
               var raise = caml_pop_trap();
               return raise(caml_maybe_attach_backtrace(_bD_, 0));
              });
            return caml_cps_exact_call2
                    (get_storage,
                     undef,
                     function(s){
                      return caml_cps_call2
                              (Js_of_ocaml_Json[1],
                               data[1],
                               function(str){
                                s.setItem(cst_history, str);
                                caml_pop_trap();
                                return _bC_();
                               });
                     });
           });
 }
 return _bv_
         ? caml_cps_call3(Stdlib[28], content, cst$10, _bz_)
         : _bz_(content);
}
function meta(t60){
 var _bs_ = t60.ctrlKey | 0;
 if(_bs_)
  var _bt_ = _bs_;
 else{
  var _bu_ = t60.altKey | 0;
  if(! _bu_) return t60.metaKey | 0;
  var _bt_ = _bu_;
 }
 return _bt_;
}
return caml_cps_call2
        (Js_of_ocaml_Dom_html[10],
         function(param, cont){
          return caml_cps_call2
                  (Lwt[11],
                   function(_br_, cont){
                    return caml_cps_exact_call4
                            (resize, container, textbox, undef, cont);
                   },
                   function(_bq_){return cont(Js_of_ocaml_Js[7]);});
         },
         function(t64){
          textbox.onkeyup = t64;
          return caml_cps_call2
                  (Js_of_ocaml_Dom_html[10],
                   function(param, cont){
                    return caml_cps_call2
                            (Lwt[11],
                             function(_bp_, cont){
                              return caml_cps_exact_call4
                                      (resize, container, textbox, undef, cont);
                             },
                             function(_bo_){return cont(Js_of_ocaml_Js[7]);});
                   },
                   function(t66){
                    textbox.onchange = t66;
                    return caml_cps_call2
                            (Js_of_ocaml_Dom_html[10],
                             function(t63, cont){
                              var match = t63.keyCode;
                              if(38 <= match){
                               var switcher = match - 75 | 0;
                               if(1 < switcher >>> 0){
                                if(-34 > switcher)
                                 switch(switcher + 37 | 0){
                                   case 1: break;
                                   case 0:
                                    var
                                     txt$0 = caml_string_of_jsstring(textbox.value),
                                     pos$0 = textbox.selectionStart - 1 | 0;
                                    caml_push_trap
                                     (function(_bi_){
                                       if(_bi_ !== Stdlib[8]){
var raise = caml_pop_trap();
return raise(caml_maybe_attach_backtrace(_bi_, 0));
                                       }
                                       current$0(txt$0);
                                       if(0 < idx[1]){
idx[1] += -1;
var
 _bh_ = idx[1],
 t42 =
   caml_jsstring_of_string
    (caml_check_bound(data[1], _bh_)[1 + _bh_]);
textbox.value = t42;
                                       }
                                       return cont(Js_of_ocaml_Js[8]);
                                      });
                                    if(pos$0 >= 0)
                                     return caml_cps_call4
     (Stdlib_String[33],
      txt$0,
      pos$0,
      10,
      function(_bf_){
       var _bg_ = Js_of_ocaml_Js[7];
       caml_pop_trap();
       return cont(_bg_);
      });
                                    var _ba_ = Stdlib[8], raise$0 = caml_pop_trap();
                                    return raise$0(caml_maybe_attach_backtrace(_ba_, 1));
                                   default:
                                    var
                                     txt = caml_string_of_jsstring(textbox.value),
                                     pos = textbox.selectionStart;
                                    caml_push_trap
                                     (function(_be_){
                                       if(_be_ !== Stdlib[8]){
var raise = caml_pop_trap();
return raise(caml_maybe_attach_backtrace(_be_, 0));
                                       }
                                       current$0(txt);
                                       if(idx[1] < (data[1].length - 1 - 1 | 0)){
idx[1]++;
var
 _bd_ = idx[1],
 t44 =
   caml_jsstring_of_string
    (caml_check_bound(data[1], _bd_)[1 + _bd_]);
textbox.value = t44;
                                       }
                                       return cont(Js_of_ocaml_Js[8]);
                                      });
                                    if(caml_ml_string_length(txt) !== pos)
                                     return caml_cps_call4
     (Stdlib_String[31],
      txt,
      pos,
      10,
      function(_bb_){
       var _bc_ = Js_of_ocaml_Js[7];
       caml_pop_trap();
       return cont(_bc_);
      });
                                    var _a$_ = Stdlib[8], raise = caml_pop_trap();
                                    return raise(caml_maybe_attach_backtrace(_a$_, 1));
                                 }
                               }
                               else
                                if(switcher){
                                 if(meta(t63)){
                                  output.innerHTML = cst$13;
                                  return cont(Js_of_ocaml_Js[7]);
                                 }
                                }
                                else if(meta(t63))
                                 return caml_cps_exact_call2
 (setup_toplevel,
  undef,
  function(_bj_){return cont(Js_of_ocaml_Js[8]);});
                              }
                              else{
                               if(9 === match)
                                return caml_cps_call2
(Dune_exe_Indent[1],
 textbox,
 function(_bn_){return cont(Js_of_ocaml_Js[8]);});
                               if(13 === match){
                                if(! meta(t63) && ! (t63.shiftKey | 0))
                                 return caml_cps_call2
 (Lwt[11],
  execute,
  function(_bm_){return cont(Js_of_ocaml_Js[8]);});
                                return caml_cps_call2
(Lwt[11],
 function(_bl_, cont){
  return caml_cps_exact_call4
          (resize, container, textbox, undef, cont);
 },
 function(_bk_){return cont(Js_of_ocaml_Js[7]);});
                               }
                              }
                              return cont(Js_of_ocaml_Js[7]);
                             },
                             function(t71){
                              textbox.onkeydown = t71;
                              Lwt[12][1] =
                               function(exc, cont){
                                return caml_cps_call2
(Stdlib_Printexc[1],
 exc,
 function(_a9_){
  return caml_cps_call3
          (Stdlib_Format[137],
           _v_,
           _a9_,
           function(_a__){
            if(exc[1] !== Js_of_ocaml_Js[37][8]) return cont(0);
            var e = exc[2];
            return caml_cps_call2
                    (Js_of_ocaml_Js[37][10],
                     e,
                     function(t73){
                      return cont(Js_of_ocaml_Firebug[1].log(t73.stack));
                     });
           });
 });
                               };
                              return caml_cps_call2
                                      (Lwt[11],
                                       function(param, cont){
function _a7_(param, cont){
 textbox.focus();
 return cont(Lwt[36]);
}
return caml_cps_exact_call4
        (resize,
         container,
         textbox,
         undef,
         function(_a8_){
          return caml_cps_call3(Lwt[70], _a8_, _a7_, cont);
         });
                                       },
                                       function(_w_){
return caml_cps_exact_call3
        (by_id_coerce,
         cst_test_canvas,
         Js_of_ocaml_Dom_html[118][10],
         function(_x_){
          return caml_cps_call2
                  (Dune_exe_Graphics_support[1],
                   _x_,
                   function(_y_){
                    var _z_ = Dune_exe_Colorize[2];
                    return caml_cps_call3
                            (Js_of_ocaml_Sys_js[1],
                             caml_chan,
                             function(_a6_, cont){
                              return caml_cps_exact_call5
                                      (append, _z_, output, cst_caml, _a6_, cont);
                             },
                             function(_A_){
                              var _B_ = Dune_exe_Colorize[2];
                              return caml_cps_call3
                                      (Js_of_ocaml_Sys_js[1],
                                       sharp_chan,
                                       function(_a5_, cont){
return caml_cps_exact_call5
        (append, _B_, output, cst_sharp, _a5_, cont);
                                       },
                                       function(_C_){
var _D_ = Dune_exe_Colorize[1];
return caml_cps_call3
        (Js_of_ocaml_Sys_js[1],
         Stdlib[39],
         function(_a4_, cont){
          return caml_cps_exact_call5
                  (append, _D_, output, cst_stdout, _a4_, cont);
         },
         function(_E_){
          var _F_ = Dune_exe_Colorize[1];
          return caml_cps_call3
                  (Js_of_ocaml_Sys_js[1],
                   Stdlib[40],
                   function(_a3_, cont){
                    return caml_cps_exact_call5
                            (append, _F_, output, cst_stderr, _a3_, cont);
                   },
                   function(_G_){
                    function readline(param, cont){
                     var
                      _a2_ =
                        Js_of_ocaml_Dom_html[8].prompt
                         ("The toplevel expects inputs:", cst$13);
                     return caml_cps_call4
                             (Js_of_ocaml_Js[5][7],
                              _a2_,
                              function(param, cont){return cont(cst$12);},
                              function(s, cont){
                               return caml_cps_call3
                                       (Stdlib[28], caml_string_of_jsstring(s), cst$11, cont);
                              },
                              cont);
                    }
                    return caml_cps_call3
                            (Js_of_ocaml_Sys_js[2],
                             Stdlib[38],
                             readline,
                             function(_H_){
                              function _I_(){
                               return caml_cps_call2
                                       (Js_of_ocaml_Regexp[1],
cst,
function(r){
 var all = [0, 0];
 caml_push_trap
  (function(_ao_){
    return caml_cps_exact_call2
            (by_id,
             cst_toplevel_examples,
             function(example_container){
              return caml_cps_call4
                      (Stdlib_List[25],
                       function(acc, tok, cont){
                        if(594052472 <= tok[1]){
                         var name = tok[2], _aP_ = 0;
                         return caml_cps_call2
                                 (Js_of_ocaml_tyxml_Tyxml_js[3][221],
                                  name,
                                  function(_aR_){
                                   var _aS_ = [0, _aR_, _aP_], _aT_ = 0;
                                   return caml_cps_call2
   (Js_of_ocaml_tyxml_Tyxml_js[3][63],
    function(param, cont){
     var t13 = caml_jsstring_of_string(acc).trim();
     textbox.value = t13;
     return caml_cps_call2
             (Lwt[11],
              function(param, cont){
               function _a0_(param, cont){
                textbox.focus();
                return cont(Lwt[36]);
               }
               return caml_cps_exact_call4
                       (resize,
                        container,
                        textbox,
                        undef,
                        function(_a1_){
                         return caml_cps_call3(Lwt[70], _a1_, _a0_, cont);
                        });
              },
              function(_aZ_){return cont(1);});
    },
    function(_aU_){
     var _aV_ = [0, _aU_, _aT_];
     return caml_cps_call2
             (Js_of_ocaml_tyxml_Tyxml_js[3][5],
              _o_,
              function(_aW_){
               return caml_cps_call3
                       (Js_of_ocaml_tyxml_Tyxml_js[3][279],
                        [0, [0, _aW_, _aV_]],
                        _aS_,
                        function(a){
                         return caml_cps_call2
                                 (Js_of_ocaml_tyxml_Tyxml_js[9][36],
                                  a,
                                  function(_aX_){
                                   return caml_cps_call3
   (Js_of_ocaml_Dom[5],
    example_container,
    _aX_,
    function(_aY_){return cont(cst$1);});
                                  });
                        });
              });
    });
                                  });
                        }
                        var line = tok[2];
                        return caml_cps_call3
                                (Stdlib[28],
                                 cst$2,
                                 acc,
                                 function(_aQ_){
                                  return caml_cps_call3(Stdlib[28], line, _aQ_, cont);
                                 });
                       },
                       cst$0,
                       all[1],
                       function(_ap_){
                        return caml_cps_call3
                                (Js_of_ocaml_Sys_js[5],
                                 cst_dev,
                                 function(param, _aO_, cont){return cont(0);},
                                 function(_aq_){
                                  return caml_cps_call3
  (Js_of_ocaml_Sys_js[5],
   cst_http$0,
   function(_aM_, _aN_, cont){
    return caml_cps_exact_call4
            (load_resource, cst_http, _aM_, _aN_, cont);
   },
   function(_ar_){
    return caml_cps_call3
            (Js_of_ocaml_Sys_js[5],
             cst_https$0,
             function(_aK_, _aL_, cont){
              return caml_cps_exact_call4
                      (load_resource, cst_https, _aK_, _aL_, cont);
             },
             function(_as_){
              return caml_cps_call3
                      (Js_of_ocaml_Sys_js[5],
                       cst_ftp$0,
                       function(_aI_, _aJ_, cont){
                        return caml_cps_exact_call4
                                (load_resource, cst_ftp, _aI_, _aJ_, cont);
                       },
                       function(_at_){
                        return caml_cps_exact_call2
                                (setup_toplevel,
                                 undef,
                                 function(_au_){
                                  return caml_cps_exact_call2
  (by_id,
   cst_last_js,
   function(t30){
    var t28 = Js_of_ocaml_Js[52][1], runcode = t28.toplevelEval;
    function t31(bc, cont){
     var t29 = caml_jsstring_of_string(bc);
     t30.innerHTML = t29;
     return caml_cps_call2(runcode, bc, cont);
    }
    var t32 = Js_of_ocaml_Js[52][1];
    t32.toplevelEval = t31;
    return caml_cps_exact_call2
            (exec,
             cst_let_print_error_fmt_e_Form,
             function(_av_){
              return caml_cps_call3
                      (Topdirs[8],
                       Stdlib_Format[110],
                       _m_,
                       function(_aw_){
                        return caml_cps_exact_call2
                                (exec,
                                 cst_let_print_unit_fmt_a_a_For,
                                 function(_ax_){
                                  return caml_cps_call3
  (Topdirs[8],
   Stdlib_Format[110],
   _n_,
   function(_ay_){
    function _az_(_aC_){
     textbox.value = cst$13;
     function _aD_(){return cont(Js_of_ocaml_Js[8]);}
     caml_push_trap
      (function(exc){
        return exc === Stdlib[8]
                ? _aD_()
                : caml_cps_call2
                  (Stdlib_Printexc[1],
                   exc,
                   function(_aH_){
                    Js_of_ocaml_Firebug[1].log
                     ("exception", caml_jsstring_of_string(_aH_), exc);
                    return _aD_();
                   });
       });
     return caml_cps_exact_call2
             (parse_hash,
              undef,
              function(_aE_){
               return caml_cps_call3
                       (Stdlib_List[46],
                        cst_code$1,
                        _aE_,
                        function(code){
                         return caml_cps_call3
                                 (Dune_exe_B64[3],
                                  0,
                                  code,
                                  function(_aF_){
                                   var t82 = caml_jsstring_of_string(_aF_);
                                   textbox.value = t82;
                                   return caml_cps_call2
   (Lwt[11],
    execute,
    function(_aG_){caml_pop_trap(); return _aD_();});
                                  });
                        });
              });
    }
    caml_push_trap(_az_);
    return caml_cps_exact_call2
            (get_storage,
             undef,
             function(s){
              var _aA_ = s.getItem(cst_history);
              return caml_cps_call2
                      (Js_of_ocaml_Js[5][10],
                       _aA_,
                       function(match){
                        if(match){
                         var s = match[1];
                         return caml_cps_call2
                                 (Js_of_ocaml_Json[2],
                                  s,
                                  function(a){
                                   data[1] = a;
                                   idx[1] = a.length - 1 - 1 | 0;
                                   caml_pop_trap();
                                   return _az_(0);
                                  });
                        }
                        var _aB_ = Stdlib[8], raise = caml_pop_trap();
                        return raise(caml_maybe_attach_backtrace(_aB_, 1));
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
                                 });
                       });
             });
   });
 return caml_cps_call2
         (Stdlib[79],
          cst_static_examples_ml,
          function(ic){
           function _am_(_an_){
            return caml_cps_call2
                    (Stdlib[83],
                     ic,
                     function(line){
                      return caml_cps_call4
                              (Js_of_ocaml_Regexp[7],
                               r,
                               line,
                               0,
                               function(match){
                                if(match){
                                 var res = match[1];
                                 return caml_cps_call3
 (Js_of_ocaml_Regexp[11],
  res,
  1,
  function(match){
   if(match){
    var name = match[1];
    all[1] = [0, [0, 594052472, name], all[1]];
    return caml_cps_exact_call1(_am_, 0);
   }
   var raise = caml_pop_trap();
   return raise
           (caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1));
  });
                                }
                                all[1] = [0, [0, -423054055, line], all[1]];
                                return caml_cps_exact_call1(_am_, 0);
                               });
                     });
           }
           return _am_(0);
          });
});
                              }
                              caml_push_trap
                               (function(_al_){
                                 if(_al_ === Stdlib[8]) return _I_();
                                 var raise = caml_pop_trap();
                                 return raise(caml_maybe_attach_backtrace(_al_, 0));
                                });
                              return caml_cps_call2
                                      (Js_of_ocaml_Dom_html[6],
                                       s,
                                       function(t20){
var t22 = t20.style;
t22.display = "block";
return caml_cps_call2
        (Js_of_ocaml_Dom_html[10],
         function(param, cont){
          var code = [0, 0];
          function _J_(t24, cont){
           var _ai_ = code[1];
           return caml_cps_call4
                   (Js_of_ocaml_Js[5][7],
                    t24.textContent,
                    function(param, cont){return cont(cst$3);},
                    function(_ak_, cont){
                     return cont(caml_string_of_jsstring(_ak_));
                    },
                    function(_aj_){code[1] = [0, _aj_, _ai_]; return cont(0);});
          }
          return caml_cps_call3
                  (Js_of_ocaml_Js[5][6],
                   output.firstChild,
                   function(_ah_, cont){
                    return caml_cps_exact_call3(iter_on_sharp, _J_, _ah_, cont);
                   },
                   function(_K_){
                    return caml_cps_call2
                            (Stdlib_List[9],
                             code[1],
                             function(_L_){
                              return caml_cps_call3
                                      (Stdlib_String[6],
                                       cst$4,
                                       _L_,
                                       function(_M_){
return caml_cps_call4
        (Dune_exe_B64[4],
         0,
         0,
         _M_,
         function(code_encoded){
          return caml_cps_call2
                  (Js_of_ocaml_Url[10][9],
                   0,
                   function(match){
                    if(match){
                     var match$0 = match[1];
                     switch(match$0[0]){
                       case 0:
                        var
                         url = match$0[1],
                         is_file = 0,
                         url$0 =
                           [0, [0, url[1], url[2], url[3], url[4], url[5], cst$5]];
                        break;
                       case 1:
                        var
                         url$1 = match$0[1],
                         is_file = 0,
                         url$0 =
                           [1,
                            [0, url$1[1], url$1[2], url$1[3], url$1[4], url$1[5], cst$7]];
                        break;
                       default:
                        var
                         url$2 = match$0[1],
                         is_file = 1,
                         url$0 = [2, [0, url$2[1], url$2[2], url$2[3], cst$8]];
                     }
                     return caml_cps_exact_call2
                             (parse_hash,
                              undef,
                              function(frags){
                               var _N_ = [0, [0, cst_code, code_encoded], 0];
                               return caml_cps_call3
                                       (Stdlib_List[52],
cst_code$0,
frags,
function(_O_){
 return caml_cps_call3
         (Stdlib[37],
          _O_,
          _N_,
          function(frags){
           return caml_cps_call2
                   (Js_of_ocaml_Url[6],
                    frags,
                    function(frag){
                     return caml_cps_call3
                             (Stdlib[28],
                              cst$6,
                              frag,
                              function(_P_){
                               return caml_cps_call2
                                       (Js_of_ocaml_Url[9],
url$0,
function(_Q_){
 return caml_cps_call3
         (Stdlib[28],
          _Q_,
          _P_,
          function(uri){
           function append_url(str, cont){
            var _Z_ = 0, ___ = 0;
            return caml_cps_call2
                    (Js_of_ocaml_tyxml_Tyxml_js[3][221],
                     str,
                     function(_$_){
                      var _aa_ = [0, _$_, ___], _ab_ = 0;
                      return caml_cps_call2
                              (Js_of_ocaml_tyxml_Tyxml_js[3][153],
                               str,
                               function(_ac_){
                                return caml_cps_call3
(Js_of_ocaml_tyxml_Tyxml_js[3][279],
 [0, [0, _ac_, _ab_]],
 _aa_,
 function(_ad_){
  var _ae_ = [0, _ad_, _Z_];
  return caml_cps_call2
          (Js_of_ocaml_tyxml_Tyxml_js[3][221],
           cst_Share_this_url,
           function(_af_){
            return caml_cps_call3
                    (Js_of_ocaml_tyxml_Tyxml_js[3][243],
                     0,
                     [0, _af_, _ae_],
                     function(dom){
                      return caml_cps_call2
                              (Js_of_ocaml_tyxml_Tyxml_js[9][1],
                               dom,
                               function(_ag_){
                                return caml_cps_call3
(Js_of_ocaml_Dom[5], output, _ag_, cont);
                               });
                     });
           });
 });
                               });
                     });
           }
           return caml_cps_call2
                   (Lwt[11],
                    function(param, cont){
                     return caml_cps_call3
                             (Lwt[7],
                              function(param, cont){
                               return is_file
                                       ? caml_cps_call2
 (Stdlib[2], cst_Cannot_shorten_url_with_fi, cont)
                                       : caml_cps_call3
 (Js_of_ocaml_Url[2],
  0,
  uri,
  function(_V_){
   return caml_cps_call3
           (Stdlib_Printf[4],
            _r_,
            _V_,
            function(uri){
             function _W_(t25, cont){
              var str = caml_string_of_jsstring(t25.shorturl);
              return caml_cps_exact_call2
                      (append_url, str, function(_Y_){return cont(Lwt[36]);});
             }
             return caml_cps_call5
                     (Js_of_ocaml_lwt_Lwt_jsonp[1],
                      0,
                      0,
                      0,
                      uri,
                      function(_X_){
                       return caml_cps_call3(Lwt[6], _X_, _W_, cont);
                      });
            });
  });
                              },
                              function(exn, cont){
                               return caml_cps_call2
                                       (Stdlib_Printexc[1],
exn,
function(_S_){
 return caml_cps_call3
         (Stdlib_Format[137],
          _q_,
          _S_,
          function(_T_){
           return caml_cps_exact_call2
                   (append_url, uri, function(_U_){return cont(Lwt[36]);});
          });
});
                              },
                              cont);
                    },
                    function(_R_){return cont(Js_of_ocaml_Js[8]);});
          });
});
                              });
                    });
          });
});
                              });
                    }
                    var raise = caml_pop_trap();
                    return raise
                            (caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1));
                   });
         });
                                       });
                             });
                   });
         },
         function(t26){
          t20.onclick = t26;
          caml_pop_trap();
          return _I_();
         });
                                       });
                             });
                   });
         });
                                       });
                             });
                   });
         });
                                       });
                             });
                   });
         });
                                       });
                             });
                   });
         });
                                       });
                             });
                   });
         }]),
    t89 = Js_of_ocaml_Dom_html[8];
   t89.onload = t88;
   var Dune_exe_Toplevel = [0];
   runtime.caml_register_global(182, Dune_exe_Toplevel, "Dune__exe__Toplevel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
