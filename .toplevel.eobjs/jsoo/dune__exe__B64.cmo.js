// Generated by js_of_ocaml
//# buildInfo:effects=true, kind=cmo, use-js-string=true, version=5.7.1+5.7.1

//# unitInfo: Provides: Dune__exe__B64
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_cps_exact_call1(f, a0){
    return runtime.caml_stack_check_depth()
            ? f(a0)
            : runtime.caml_trampoline_return(f, [a0]);
   }
   function caml_cps_call2(f, a0, a1){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 2
              ? f(a0, a1)
              : runtime.caml_call_gen(f, [a0, a1])
            : runtime.caml_trampoline_return(f, [a0, a1]);
   }
   function caml_cps_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 3
              ? f(a0, a1, a2)
              : runtime.caml_call_gen(f, [a0, a1, a2])
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_exact_call3(f, a0, a1, a2){
    return runtime.caml_stack_check_depth()
            ? f(a0, a1, a2)
            : runtime.caml_trampoline_return(f, [a0, a1, a2]);
   }
   function caml_cps_call4(f, a0, a1, a2, a3){
    return runtime.caml_stack_check_depth()
            ? (f.l
                >= 0
                ? f.l
                : f.l = f.length)
              == 4
              ? f(a0, a1, a2, a3)
              : runtime.caml_call_gen(f, [a0, a1, a2, a3])
            : runtime.caml_trampoline_return(f, [a0, a1, a2, a3]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/dune__exe__B64.cmi",
     "Caml1999I032\x84\x95\xa6\xbe\0\0\x01\xfe\0\0\0n\0\0\x01\x96\0\0\x01\x88\xa0.Dune__exe__B64\xa0\xb0\xa00default_alphabet\x01\x01\x17\xd0\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xee@\xb0\xc0'b64.mliZ\x01\x04\x87\x01\x04\x87\xc0\x04\x02Z\x01\x04\x87\x01\x04\xa4@@\xa1\x04\x11@@\xa0\xb0\xa01uri_safe_alphabet\x01\x01\x18\xd0\xc0\xb3\x90\x04\x10@\x90@\x02\x05\xf5\xe1\0@\0\xef@\xb0\xc0\x04\x0e]\x01\x04\xeb\x01\x04\xeb\xc0\x04\x0f]\x01\x04\xeb\x01\x05\t@@\xa1\x04\x1eA@\xa0\xb0\xa0&decode\x01\x01\x19\xd0\xc0\xc1\x91(alphabet\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\x90\x04'@\x90@\x02\x05\xf5\xe1\0@\0\xf0@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xc1@\xc0\xb3\x90\x04.@\x90@\x02\x05\xf5\xe1\0@\0\xf2\xc0\xb3\x90\x042@\x90@\x02\x05\xf5\xe1\0@\0\xf3@\x02\x05\xf5\xe1\0@\0\xf4@\x02\x05\xf5\xe1\0@\0\xf5@\xb0\xc0\x040`\x01\x05_\x01\x05_\xc0\x041`\x01\x05_\x01\x05\x90@@\xa1\x04@B@\xa0\xb0\xa0&encode\x01\x01\x1a\xd0\xc0\xc1\x91#pad\xc0\xb3\x04\"\xa0\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xf6@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\xc1\x91(alphabet\xc0\xb3\x040\xa0\xc0\xb3\x90\x04T@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xc0\xc1@\xc0\xb3\x90\x04[@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xb3\x90\x04_@\x90@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04]f\x01\x06\xa2\x01\x06\xa2\xc0\x04^f\x01\x06\xa2\x01\x06\xe0@@\xa1\x04mC@@\x84\x95\xa6\xbe\0\0\0\x8a\0\0\0\x14\0\0\0L\0\0\0=\xa0\xa0.Dune__exe__B64\x900\x99\x0f\x83\x7f\xb8\x11\xb6\xee0`\xbb\xdahW\0g\xa0\xa0&Stdlib\x900\x85\xf8]\xdbG\xed\xc0\xc7W\x96W\xee\xe7@0-\xa0\xa0)Dune__exe\x900\xf7\x89\x12\x11g'<\xecF\x04{8\x98\xa8\x06P\xa0\xa08CamlinternalFormatBasics\x900\xce\xcf\xaf\xd5\xc0!G?^5\x8c\x96\xacu\x02\xa0@\x84\x95\xa6\xbe\0\0\0\b\0\0\0\x04\0\0\0\x0b\0\0\0\x0b\xa0@\xa0A\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    default_alphabet =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    uri_safe_alphabet =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    padding = 61;
   function of_char(opt, x, cont){
    if(opt)
     var sth = opt[1], alphabet = sth;
    else
     var alphabet = default_alphabet;
    return x === 61
            ? cont(0)
            : caml_cps_call3(Stdlib_String[35], alphabet, x, cont);
   }
   function to_char(opt, x){
    if(opt)
     var sth = opt[1], alphabet = sth;
    else
     var alphabet = default_alphabet;
    return caml_string_get(alphabet, x);
   }
   function decode(alphabet, input, cont){
    var length = caml_ml_string_length(input);
    function _f_(input){
     var
      length = caml_ml_string_length(input),
      words = length / 4 | 0,
      padding =
        0 === length
         ? 0
         : caml_string_get
            (input, length - 2 | 0)
           === 61
           ? 2
           : caml_string_get(input, length - 1 | 0) === 61 ? 1 : 0;
     return caml_cps_call3
             (Stdlib_Bytes[1],
              (words * 3 | 0) - padding | 0,
              0,
              function(output){
               var _i_ = words - 1 | 0;
               function _k_(i){
                return caml_cps_exact_call3
                        (of_char,
                         alphabet,
                         caml_string_get(input, 4 * i | 0 | 0),
                         function(a){
                          return caml_cps_exact_call3
                                  (of_char,
                                   alphabet,
                                   caml_string_get(input, (4 * i | 0) + 1 | 0),
                                   function(b){
                                    return caml_cps_exact_call3
    (of_char,
     alphabet,
     caml_string_get(input, (4 * i | 0) + 2 | 0),
     function(c){
      return caml_cps_exact_call3
              (of_char,
               alphabet,
               caml_string_get(input, (4 * i | 0) + 3 | 0),
               function(d){
                var
                 n = a << 18 | b << 12 | c << 6 | d,
                 x = (n >>> 16 | 0) & 255,
                 y = (n >>> 8 | 0) & 255,
                 z = n & 255;
                return caml_cps_call2
                        (Stdlib[29],
                         x,
                         function(_l_){
                          caml_bytes_set(output, 3 * i | 0 | 0, _l_);
                          var
                           _m_ = i !== (words - 1 | 0) ? 1 : 0,
                           _n_ = _m_ || (padding < 2 ? 1 : 0);
                          function _o_(){
                           var
                            _q_ = i !== (words - 1 | 0) ? 1 : 0,
                            _r_ = _q_ || (padding < 1 ? 1 : 0);
                           function _s_(){
                            var _u_ = i + 1 | 0;
                            return _i_ !== i ? caml_cps_exact_call1(_k_, _u_) : _j_();
                           }
                           return _r_
                                   ? caml_cps_call2
                                     (Stdlib[29],
                                      z,
                                      function(_t_){
                                       caml_bytes_set(output, (3 * i | 0) + 2 | 0, _t_);
                                       return _s_();
                                      })
                                   : _s_();
                          }
                          return _n_
                                  ? caml_cps_call2
                                    (Stdlib[29],
                                     y,
                                     function(_p_){
                                      caml_bytes_set(output, (3 * i | 0) + 1 | 0, _p_);
                                      return _o_();
                                     })
                                  : _o_();
                         });
               });
     });
                                   });
                         });
               }
               function _j_(){
                return caml_cps_call2(Stdlib_Bytes[44], output, cont);
               }
               var _h_ = 0;
               return _i_ < 0 ? _j_() : _k_(_h_);
              });
    }
    return 0 === (length % 4 | 0)
            ? _f_(input)
            : caml_cps_call3
              (Stdlib_String[1],
               4 - (length % 4 | 0) | 0,
               padding,
               function(_g_){
                return caml_cps_call3(Stdlib[28], input, _g_, _f_);
               });
   }
   function encode(opt, alphabet, input, cont){
    if(opt) var sth = opt[1], pad = sth; else var pad = 1;
    var
     length = caml_ml_string_length(input),
     words = (length + 2 | 0) / 3 | 0,
     padding_len = 0 === (length % 3 | 0) ? 0 : 3 - (length % 3 | 0) | 0;
    return caml_cps_call3
            (Stdlib_Bytes[1],
             words * 4 | 0,
             0,
             function(output){
              function get(i){
               return length <= i ? 0 : caml_string_get(input, i);
              }
              var _b_ = words - 1 | 0, _a_ = 0;
              if(_b_ >= 0){
               var i$0 = _a_;
               for(;;){
                var
                 x = get(3 * i$0 | 0 | 0),
                 y = get((3 * i$0 | 0) + 1 | 0),
                 z = get((3 * i$0 | 0) + 2 | 0),
                 n = x << 16 | y << 8 | z,
                 a = (n >>> 18 | 0) & 63,
                 b = (n >>> 12 | 0) & 63,
                 c = (n >>> 6 | 0) & 63,
                 d = n & 63;
                caml_bytes_set(output, 4 * i$0 | 0 | 0, to_char(alphabet, a));
                caml_bytes_set
                 (output, (4 * i$0 | 0) + 1 | 0, to_char(alphabet, b));
                caml_bytes_set
                 (output, (4 * i$0 | 0) + 2 | 0, to_char(alphabet, c));
                caml_bytes_set
                 (output, (4 * i$0 | 0) + 3 | 0, to_char(alphabet, d));
                var _e_ = i$0 + 1 | 0;
                if(_b_ === i$0) break;
                var i$0 = _e_;
               }
              }
              var _c_ = 1;
              if(padding_len >= 1){
               var i = _c_;
               for(;;){
                caml_bytes_set
                 (output, caml_ml_bytes_length(output) - i | 0, 61);
                var _d_ = i + 1 | 0;
                if(padding_len === i) break;
                var i = _d_;
               }
              }
              return pad
                      ? caml_cps_call2(Stdlib_Bytes[44], output, cont)
                      : caml_cps_call4
                        (Stdlib_Bytes[8],
                         output,
                         0,
                         caml_ml_bytes_length(output) - padding_len | 0,
                         cont);
             });
   }
   var
    Dune_exe_B64 = [0, default_alphabet, uri_safe_alphabet, decode, encode];
   runtime.caml_register_global(5, Dune_exe_B64, "Dune__exe__B64");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIudG9wbGV2ZWwuZW9ianMvanNvby9kdW5lX19leGVfX0I2NC5jbW8uanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsiZGVmYXVsdF9hbHBoYWJldCIsInVyaV9zYWZlX2FscGhhYmV0IiwicGFkZGluZyIsIm9mX2NoYXIiLCJvcHQiLCJ4Iiwic3RoIiwiYWxwaGFiZXQiLCJ0b19jaGFyIiwiZGVjb2RlIiwiaW5wdXQiLCJsZW5ndGgiLCJ3b3JkcyIsIm91dHB1dCIsImkiLCJhIiwiYiIsImMiLCJkIiwibiIsInkiLCJ6IiwiZW5jb2RlIiwicGFkIiwicGFkZGluZ19sZW4iLCJnZXQiLCJpJDAiXSwic291cmNlcyI6WyIvd29ya3NwYWNlX3Jvb3QvYjY0Lm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7OztHOzs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7O0lBa0JJQTs7SUFFQUM7Ozs7O0lBRUFDO1lBRUFDLFFBQVVDLEtBQTZCQztJQUN6QyxHQURZRDtTQUFXRSxNQUFYRixRQUFBRyxXQUFXRDs7U0FBWEMsV0FOVlA7V0FNdUNLOztjQUNkLGtDQURmRSxVQUE2QkY7R0FDUztZQUVoREcsUUFBVUosS0FBNkJDO0lBQUksR0FBakNEO1NBQVdFLE1BQVhGLFFBQUFHLFdBQVdEOztTQUFYQyxXQVRWUDtJQVMyQyxPQUFBLGdCQUFqQ08sVUFBNkJGO0dBQWdCO1lBRXZESSxPQUFRRixVQUFTRztJQUNuQixJQUFJQywrQkFEZUQ7aUJBRWZBO0tBQ2tDO01BRWxDQyxTQUFKLHNCQUhJRDtNQUlBRSxRQURBRDtNQUVBVDtjQUZBUzs7V0FLTzthQVJQRCxPQUdBQzs7O2FBTU8sZ0JBVFBELE9BR0FDO0tBU1MsT0FBQTs7ZUFSVEMsaUJBQ0FWOzt1QkFPQVc7ZUFDSixVQVRJRDs0QkFTSkU7Z0JBQ1UsT0FBQTt5QkFyQlJYO3lCQUtRSTt5QkFnQmtCLGdCQWR4QkcsV0FhSkk7a0NBQ01DOzBCQUNJLE9BQUE7bUNBdEJSWjttQ0FLUUk7bUNBaUJrQixnQkFmeEJHLFlBYUpJOzRDQUVNRTtvQ0FDSSxPQUFBO0tBdkJSYjtLQUtRSTtLQWtCa0IsZ0JBaEJ4QkcsWUFhSkk7Y0FHTUc7TUFDSSxPQUFBO2VBeEJSZDtlQUtRSTtlQW1Ca0IsZ0JBakJ4QkcsWUFhSkk7d0JBSU1JOztpQkFDQUMsSUFKQUosVUFDQUMsVUFDQUMsU0FDQUM7aUJBRUFiLEtBREFjO2lCQUM0QkMsS0FENUJEO2lCQUN1REUsSUFEdkRGO2dCQUUyQixPQUFBOzt5QkFEM0JkOzswQkFDSixlQVJFUSxZQUNKQzs7aUNBQUFBLE9BVElGO3lDQUNBVjs7MkJBZ0JvQztrQ0FSeENZLE9BVElGOzBDQUNBVjs7NEJBUUosVUFBQVk7MkNBQUFBOzJCQVNzRjs7cUNBQWY7O3NDQUhWTzs7dUNBR3JCLGVBVnBDUixhQUNKQzs7OzswQkFRc0Y7O29DQUFmOztxQ0FGckNNOztzQ0FFTSxlQVRwQ1AsYUFDSkM7Ozs7Ozs7Ozs7O2dCQVdBLE9BQUEsaUNBWklEOztlQUFTOzs7SUFYeUU7a0JBRmxGRjtrQkFEZUQ7Y0FHMkI7O29CQUYxQ0M7ZUFSRlQ7O2dCQVVvQyxPQUFBLDJCQUhuQlE7O0dBMEJVO1lBRTNCWSxPQUFTbEIsS0FBYUcsVUFBU0c7SUFDakMsR0FEV04sU0FBTUUsTUFBTkYsUUFBQW1CLE1BQU1qQixjQUFOaUI7SUFDWDtLQUFJWixTQUFKLHNCQURpQ0Q7S0FFN0JFLFNBREFEO0tBR0FhLHFCQUhBYiwyQkFBQUE7SUFJUyxPQUFBOzthQUhUQzs7c0JBR0FDO3VCQUNBWSxJQUFJWDtlQUFJLE9BTFJILFVBS0lHLFFBQTJDLGdCQU5sQkosT0FNekJJO2NBQW9EO2NBQzVELElBQUEsTUFMSUY7O21CQUtKYzs7Z0JBQ1U7aUJBQUpyQixJQUZGb0IsUUFDSkM7aUJBQ2dDTixJQUY1QkssU0FDSkM7aUJBQzBETCxJQUZ0REksU0FDSkM7aUJBRU1QLElBREFkLFVBQTBCZSxTQUEwQkM7aUJBRXBETixLQURBSTtpQkFFQUgsS0FGQUc7aUJBR0FGLEtBSEFFO2lCQUlBRCxJQUpBQztnQkFLSixlQVRFTixZQUVKYSxhQXJDRWxCLFFBOEJzQkQsVUFVbEJRO2dCQUtKO2tCQVZFRixhQUVKYSxrQkFyQ0VsQixRQThCc0JELFVBV2xCUztnQkFLSjtrQkFYRUgsYUFFSmEsa0JBckNFbEIsUUE4QnNCRCxVQVlsQlU7Z0JBS0o7a0JBWkVKLGFBRUphLGtCQXJDRWxCLFFBOEJzQkQsVUFhbEJXO2dCQU5OLFVBQUFROzJCQUFBQTtvQkFBQUE7OztjQVlBO2lCQWZJRjttQkFlSlY7O2dCQUNFO2tCQWZFRCw2QkFBQUEsVUFjSkM7Z0JBQ0UsVUFERkE7bUJBZklVLGdCQWVKVjtvQkFBQUE7OztxQkFuQldTO3dCQXVCTixpQ0FsQkRWO3dCQUFTOzt5QkFBVEE7OzhDQUFBQSxVQURBVzs7O0dBb0I4RDs7dUJBL0RoRXhCLGtCQUVBQyxtQkFTQVEsUUE0QkFhOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIigqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAwOSBDaXRyaXggU3lzdGVtcyBJbmMuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAgVGhvbWFzIEdhemFnbmFpcmUgPHRob21hc0BnYXphZ25haXJlLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbiAqIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZCwgcHJvdmlkZWQgdGhhdCB0aGUgYWJvdmVcbiAqIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbCBjb3BpZXMuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVNcbiAqIFdJVEggUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SXG4gKiBBTlkgU1BFQ0lBTCwgRElSRUNULCBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTXG4gKiBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU5cbiAqIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUiBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GXG4gKiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUiBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuICpcbiAqKVxuXG5sZXQgZGVmYXVsdF9hbHBoYWJldCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiXG5cbmxldCB1cmlfc2FmZV9hbHBoYWJldCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktX1wiXG5cbmxldCBwYWRkaW5nID0gJz0nXG5cbmxldCBvZl9jaGFyID8oYWxwaGFiZXQgPSBkZWZhdWx0X2FscGhhYmV0KSB4ID1cbiAgaWYgeCA9IHBhZGRpbmcgdGhlbiAwIGVsc2UgU3RyaW5nLmluZGV4IGFscGhhYmV0IHhcblxubGV0IHRvX2NoYXIgPyhhbHBoYWJldCA9IGRlZmF1bHRfYWxwaGFiZXQpIHggPSBhbHBoYWJldC5beF1cblxubGV0IGRlY29kZSA/YWxwaGFiZXQgaW5wdXQgPVxuICBsZXQgbGVuZ3RoID0gU3RyaW5nLmxlbmd0aCBpbnB1dCBpblxuICBsZXQgaW5wdXQgPVxuICAgIGlmIGxlbmd0aCBtb2QgNCA9IDAgdGhlbiBpbnB1dCBlbHNlIGlucHV0IF4gU3RyaW5nLm1ha2UgKDQgLSAobGVuZ3RoIG1vZCA0KSkgcGFkZGluZ1xuICBpblxuICBsZXQgbGVuZ3RoID0gU3RyaW5nLmxlbmd0aCBpbnB1dCBpblxuICBsZXQgd29yZHMgPSBsZW5ndGggLyA0IGluXG4gIGxldCBwYWRkaW5nID1cbiAgICBtYXRjaCBsZW5ndGggd2l0aFxuICAgIHwgMCAtPiAwXG4gICAgfCBfIHdoZW4gaW5wdXQuW2xlbmd0aCAtIDJdID0gcGFkZGluZyAtPiAyXG4gICAgfCBfIHdoZW4gaW5wdXQuW2xlbmd0aCAtIDFdID0gcGFkZGluZyAtPiAxXG4gICAgfCBfIC0+IDBcbiAgaW5cbiAgbGV0IG91dHB1dCA9IEJ5dGVzLm1ha2UgKCh3b3JkcyAqIDMpIC0gcGFkZGluZykgJ1xcMDAwJyBpblxuICBmb3IgaSA9IDAgdG8gd29yZHMgLSAxIGRvXG4gICAgbGV0IGEgPSBvZl9jaGFyID9hbHBoYWJldCBpbnB1dC5bKDQgKiBpKSArIDBdXG4gICAgYW5kIGIgPSBvZl9jaGFyID9hbHBoYWJldCBpbnB1dC5bKDQgKiBpKSArIDFdXG4gICAgYW5kIGMgPSBvZl9jaGFyID9hbHBoYWJldCBpbnB1dC5bKDQgKiBpKSArIDJdXG4gICAgYW5kIGQgPSBvZl9jaGFyID9hbHBoYWJldCBpbnB1dC5bKDQgKiBpKSArIDNdIGluXG4gICAgbGV0IG4gPSAoYSBsc2wgMTgpIGxvciAoYiBsc2wgMTIpIGxvciAoYyBsc2wgNikgbG9yIGQgaW5cbiAgICBsZXQgeCA9IChuIGxzciAxNikgbGFuZCAyNTUgYW5kIHkgPSAobiBsc3IgOCkgbGFuZCAyNTUgYW5kIHogPSBuIGxhbmQgMjU1IGluXG4gICAgQnl0ZXMuc2V0IG91dHB1dCAoKDMgKiBpKSArIDApIChjaGFyX29mX2ludCB4KTtcbiAgICBpZiBpIDw+IHdvcmRzIC0gMSB8fCBwYWRkaW5nIDwgMiB0aGVuIEJ5dGVzLnNldCBvdXRwdXQgKCgzICogaSkgKyAxKSAoY2hhcl9vZl9pbnQgeSk7XG4gICAgaWYgaSA8PiB3b3JkcyAtIDEgfHwgcGFkZGluZyA8IDEgdGhlbiBCeXRlcy5zZXQgb3V0cHV0ICgoMyAqIGkpICsgMikgKGNoYXJfb2ZfaW50IHopXG4gIGRvbmU7XG4gIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgb3V0cHV0XG5cbmxldCBlbmNvZGUgPyhwYWQgPSB0cnVlKSA/YWxwaGFiZXQgaW5wdXQgPVxuICBsZXQgbGVuZ3RoID0gU3RyaW5nLmxlbmd0aCBpbnB1dCBpblxuICBsZXQgd29yZHMgPSAobGVuZ3RoICsgMikgLyAzIGluXG4gICgqIHJvdW5kZWQgdXAgKilcbiAgbGV0IHBhZGRpbmdfbGVuID0gaWYgbGVuZ3RoIG1vZCAzID0gMCB0aGVuIDAgZWxzZSAzIC0gKGxlbmd0aCBtb2QgMykgaW5cbiAgbGV0IG91dHB1dCA9IEJ5dGVzLm1ha2UgKHdvcmRzICogNCkgJ1xcMDAwJyBpblxuICBsZXQgZ2V0IGkgPSBpZiBpID49IGxlbmd0aCB0aGVuIDAgZWxzZSBpbnRfb2ZfY2hhciBpbnB1dC5baV0gaW5cbiAgZm9yIGkgPSAwIHRvIHdvcmRzIC0gMSBkb1xuICAgIGxldCB4ID0gZ2V0ICgoMyAqIGkpICsgMCkgYW5kIHkgPSBnZXQgKCgzICogaSkgKyAxKSBhbmQgeiA9IGdldCAoKDMgKiBpKSArIDIpIGluXG4gICAgbGV0IG4gPSAoeCBsc2wgMTYpIGxvciAoeSBsc2wgOCkgbG9yIHogaW5cbiAgICBsZXQgYSA9IChuIGxzciAxOCkgbGFuZCA2M1xuICAgIGFuZCBiID0gKG4gbHNyIDEyKSBsYW5kIDYzXG4gICAgYW5kIGMgPSAobiBsc3IgNikgbGFuZCA2M1xuICAgIGFuZCBkID0gbiBsYW5kIDYzIGluXG4gICAgQnl0ZXMuc2V0IG91dHB1dCAoKDQgKiBpKSArIDApICh0b19jaGFyID9hbHBoYWJldCBhKTtcbiAgICBCeXRlcy5zZXQgb3V0cHV0ICgoNCAqIGkpICsgMSkgKHRvX2NoYXIgP2FscGhhYmV0IGIpO1xuICAgIEJ5dGVzLnNldCBvdXRwdXQgKCg0ICogaSkgKyAyKSAodG9fY2hhciA/YWxwaGFiZXQgYyk7XG4gICAgQnl0ZXMuc2V0IG91dHB1dCAoKDQgKiBpKSArIDMpICh0b19jaGFyID9hbHBoYWJldCBkKVxuICBkb25lO1xuICBmb3IgaSA9IDEgdG8gcGFkZGluZ19sZW4gZG9cbiAgICBCeXRlcy5zZXQgb3V0cHV0IChCeXRlcy5sZW5ndGggb3V0cHV0IC0gaSkgcGFkZGluZ1xuICBkb25lO1xuICBpZiBwYWRcbiAgdGhlbiBCeXRlcy51bnNhZmVfdG9fc3RyaW5nIG91dHB1dFxuICBlbHNlIEJ5dGVzLnN1Yl9zdHJpbmcgb3V0cHV0IDAgKEJ5dGVzLmxlbmd0aCBvdXRwdXQgLSBwYWRkaW5nX2xlbilcbiJdfQ==
